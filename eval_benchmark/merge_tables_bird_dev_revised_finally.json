[
  {
    "train_idx": 2,
    "db_id": "california_schools",
    "question": "Please list the zip code of all the charter schools in Fresno County Office of Education.",
    "query": "SELECT T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`District Name` = 'Fresno County Office of Education' AND T1.`Charter School (Y/N)` = 1",
    "relevant_table": {
      "frpm": {
        "ddl": "create table frpm( CDSCode text primary key, foreign key(CDSCode) references schools(CDSCode) text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "CDSCode",
          "Academic Year",
          "County Code",
          "District Code",
          "School Code",
          "County Name",
          "District Name",
          "School Name",
          "District Type",
          "School Type",
          "Educational Option Type",
          "NSLP Provision Status",
          "Charter School (Y/N)",
          "Charter School Number",
          "Charter Funding Type",
          "IRC",
          "Low Grade",
          "High Grade",
          "Enrollment (K-12)",
          "Free Meal Count (K-12)",
          "Percent (%) Eligible Free (K-12)",
          "FRPM Count (K-12)",
          "Percent (%) Eligible FRPM (K-12)",
          "Enrollment (Ages 5-17)",
          "Free Meal Count (Ages 5-17)",
          "Percent (%) Eligible Free (Ages 5-17)",
          "FRPM Count (Ages 5-17)",
          "Percent (%) Eligible FRPM (Ages 5-17)",
          "2013-14 CALPADS Fall 1 Certification Status",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate"
        ],
        "ddl": "create table merged_table( CDSCode text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "old_new_table_mapping": {
      "frpm": "merged_table",
      "schools": "merged_table"
    },
    "new_table_primary_key": "'CDSCode'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.Zip FROM merged_table AS T1 WHERE T1.`District Name` = 'Fresno County Office of Education' AND T1.`Charter School (Y/N)` = 1"
  },
  {
    "train_idx": 3,
    "db_id": "california_schools",
    "question": "What is the unabbreviated mailing street address of the school with the highest FRPM count for K-12 students?",
    "query": "SELECT T2.MailStreet FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.`FRPM Count (K-12)` DESC LIMIT 1",
    "relevant_table": {
      "frpm": {
        "ddl": "create table frpm( CDSCode text primary key, foreign key(CDSCode) references schools(CDSCode) text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate",
          "Academic Year",
          "County Code",
          "District Code",
          "School Code",
          "County Name",
          "District Name",
          "School Name",
          "District Type",
          "School Type",
          "Educational Option Type",
          "NSLP Provision Status",
          "Charter School (Y/N)",
          "Charter School Number",
          "Charter Funding Type",
          "IRC",
          "Low Grade",
          "High Grade",
          "Enrollment (K-12)",
          "Free Meal Count (K-12)",
          "Percent (%) Eligible Free (K-12)",
          "FRPM Count (K-12)",
          "Percent (%) Eligible FRPM (K-12)",
          "Enrollment (Ages 5-17)",
          "Free Meal Count (Ages 5-17)",
          "Percent (%) Eligible Free (Ages 5-17)",
          "FRPM Count (Ages 5-17)",
          "Percent (%) Eligible FRPM (Ages 5-17)",
          "2013-14 CALPADS Fall 1 Certification Status"
        ],
        "ddl": "create table merged_table( CDSCode text, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      }
    },
    "old_new_table_mapping": {
      "schools": "merged_table",
      "frpm": "merged_table"
    },
    "new_table_primary_key": "'CDSCode'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.MailStreet FROM merged_table AS T1 INNER JOIN merged_table AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.`FRPM Count (K-12)` DESC LIMIT 1"
  },
  {
    "train_idx": 4,
    "db_id": "california_schools",
    "question": "Please list the phone numbers of the direct charter-funded schools that are opened after 2000/1/1.",
    "query": "SELECT T2.Phone FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Charter Funding Type` = 'Directly funded' AND T1.`Charter School (Y/N)` = 1 AND T2.OpenDate > '2000-01-01'",
    "relevant_table": {
      "frpm": {
        "ddl": "create table frpm( CDSCode text primary key, foreign key(CDSCode) references schools(CDSCode) text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "CDSCode",
          "Academic Year",
          "County Code",
          "District Code",
          "School Code",
          "County Name",
          "District Name",
          "School Name",
          "District Type",
          "School Type",
          "Educational Option Type",
          "NSLP Provision Status",
          "Charter School (Y/N)",
          "Charter School Number",
          "Charter Funding Type",
          "IRC",
          "Low Grade",
          "High Grade",
          "Enrollment (K-12)",
          "Free Meal Count (K-12)",
          "Percent (%) Eligible Free (K-12)",
          "FRPM Count (K-12)",
          "Percent (%) Eligible FRPM (K-12)",
          "Enrollment (Ages 5-17)",
          "Free Meal Count (Ages 5-17)",
          "Percent (%) Eligible Free (Ages 5-17)",
          "FRPM Count (Ages 5-17)",
          "Percent (%) Eligible FRPM (Ages 5-17)",
          "2013-14 CALPADS Fall 1 Certification Status",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate"
        ],
        "ddl": "create table merged_table( CDSCode text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "old_new_table_mapping": {
      "frpm": "merged_table",
      "schools": "merged_table"
    },
    "new_table_primary_key": "'CDSCode'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.Phone FROM merged_table AS T1 WHERE T1.`Charter Funding Type` = 'Directly funded' AND T1.`Charter School (Y/N)` = 1 AND T1.OpenDate > '2000-01-01'"
  },
  {
    "train_idx": 5,
    "db_id": "california_schools",
    "question": "How many schools with an average score in Math greater than 400 in the SAT test are exclusively virtual?",
    "query": "SELECT COUNT(DISTINCT T2.School) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' AND T1.AvgScrMath > 400",
    "relevant_table": {
      "satscores": {
        "ddl": "create table satscores( cds text primary key, foreign key(cds) references schools(CDSCode) text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate",
          "cds",
          "rtype",
          "sname",
          "dname",
          "cname",
          "enroll12",
          "NumTstTakr",
          "AvgScrRead",
          "AvgScrMath",
          "AvgScrWrite",
          "NumGE1500"
        ],
        "ddl": "create table merged_table( CDSCode text, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date, cds text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      }
    },
    "old_new_table_mapping": {
      "schools": "merged_table",
      "satscores": "merged_table"
    },
    "new_table_primary_key": "'CDSCode'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(DISTINCT School) FROM merged_table WHERE Virtual = 'F' AND AvgScrMath > 400"
  },
  {
    "train_idx": 6,
    "db_id": "california_schools",
    "question": "Among the schools with the SAT test takers of over 500, please list the schools that are magnet schools or offer a magnet program.",
    "query": "SELECT T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Magnet = 1 AND T1.NumTstTakr > 500",
    "relevant_table": {
      "satscores": {
        "ddl": "create table satscores( cds text primary key, foreign key(cds) references schools(CDSCode) text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate",
          "cds",
          "rtype",
          "sname",
          "dname",
          "cname",
          "enroll12",
          "NumTstTakr",
          "AvgScrRead",
          "AvgScrMath",
          "AvgScrWrite",
          "NumGE1500"
        ],
        "ddl": "create table merged_table( CDSCode text, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date, cds text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      }
    },
    "old_new_table_mapping": {
      "schools": "merged_table",
      "satscores": "merged_table"
    },
    "new_table_primary_key": "'CDSCode'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT School FROM merged_table WHERE Magnet = 1 AND NumTstTakr > 500"
  },
  {
    "train_idx": 7,
    "db_id": "california_schools",
    "question": "What is the phone number of the school that has the highest number of test takers with an SAT score of over 1500?",
    "query": "SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
    "relevant_table": {
      "satscores": {
        "ddl": "create table satscores( cds text primary key, foreign key(cds) references schools(CDSCode) text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "cds",
          "rtype",
          "sname",
          "dname",
          "cname",
          "enroll12",
          "NumTstTakr",
          "AvgScrRead",
          "AvgScrMath",
          "AvgScrWrite",
          "NumGE1500",
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate"
        ],
        "ddl": "create table merged_table( cds text primary key, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer, CDSCode text, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "old_new_table_mapping": {
      "satscores": "merged_table",
      "schools": "merged_table"
    },
    "new_table_primary_key": "cds",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.Phone FROM merged_table AS T1 ORDER BY T1.NumGE1500 DESC LIMIT 1"
  },
  {
    "train_idx": 8,
    "db_id": "california_schools",
    "question": "What is the number of SAT test takers of the schools with the highest FRPM count for K-12 students?",
    "query": "SELECT NumTstTakr FROM satscores WHERE cds = ( SELECT CDSCode FROM frpm ORDER BY `FRPM Count (K-12)` DESC LIMIT 1 )",
    "relevant_table": {
      "satscores": {
        "ddl": "create table satscores( cds text primary key, foreign key(cds) references schools(CDSCode) text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      },
      "frpm": {
        "ddl": "create table frpm( CDSCode text primary key, foreign key(CDSCode) references schools(CDSCode) text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "cds",
          "rtype",
          "sname",
          "dname",
          "cname",
          "enroll12",
          "NumTstTakr",
          "AvgScrRead",
          "AvgScrMath",
          "AvgScrWrite",
          "NumGE1500",
          "CDSCode_frpm",
          "Academic Year",
          "County Code",
          "District Code",
          "School Code",
          "County Name",
          "District Name",
          "School Name",
          "District Type",
          "School Type",
          "Educational Option Type",
          "NSLP Provision Status",
          "Charter School (Y/N)",
          "Charter School Number",
          "Charter Funding Type",
          "IRC",
          "Low Grade",
          "High Grade",
          "Enrollment (K-12)",
          "Free Meal Count (K-12)",
          "Percent (%) Eligible Free (K-12)",
          "FRPM Count (K-12)",
          "Percent (%) Eligible FRPM (K-12)",
          "Enrollment (Ages 5-17)",
          "Free Meal Count (Ages 5-17)",
          "Percent (%) Eligible Free (Ages 5-17)",
          "FRPM Count (Ages 5-17)",
          "Percent (%) Eligible FRPM (Ages 5-17)",
          "2013-14 CALPADS Fall 1 Certification Status"
        ],
        "ddl": "create table merged_table( cds text primary key, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer, CDSCode_frpm text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      }
    },
    "old_new_table_mapping": {
      "satscores": "merged_table",
      "frpm": "merged_table"
    },
    "new_table_primary_key": "cds",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "CDSCode_frpm": {
        "old_table": "frpm",
        "old_column": "CDSCode"
      }
    },
    "new_gold_sql": "SELECT NumTstTakr FROM merged_table WHERE cds = ( SELECT CDSCode_frpm FROM merged_table ORDER BY `FRPM Count (K-12)` DESC LIMIT 1 )"
  },
  {
    "train_idx": 9,
    "db_id": "california_schools",
    "question": "Among the schools with the average score in Math over 560 in the SAT test, how many schools are directly charter-funded?",
    "query": "SELECT COUNT(T2.`School Code`) FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath > 560 AND T2.`Charter Funding Type` = 'Directly funded'",
    "relevant_table": {
      "satscores": {
        "ddl": "create table satscores( cds text primary key, foreign key(cds) references schools(CDSCode) text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      },
      "frpm": {
        "ddl": "create table frpm( CDSCode text primary key, foreign key(CDSCode) references schools(CDSCode) text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "cds",
          "rtype",
          "sname",
          "dname",
          "cname",
          "enroll12",
          "NumTstTakr",
          "AvgScrRead",
          "AvgScrMath",
          "AvgScrWrite",
          "NumGE1500",
          "CDSCode_frpm",
          "Academic Year",
          "County Code",
          "District Code",
          "School Code",
          "County Name",
          "District Name",
          "School Name",
          "District Type",
          "School Type",
          "Educational Option Type",
          "NSLP Provision Status",
          "Charter School (Y/N)",
          "Charter School Number",
          "Charter Funding Type",
          "IRC",
          "Low Grade",
          "High Grade",
          "Enrollment (K-12)",
          "Free Meal Count (K-12)",
          "Percent (%) Eligible Free (K-12)",
          "FRPM Count (K-12)",
          "Percent (%) Eligible FRPM (K-12)",
          "Enrollment (Ages 5-17)",
          "Free Meal Count (Ages 5-17)",
          "Percent (%) Eligible Free (Ages 5-17)",
          "FRPM Count (Ages 5-17)",
          "Percent (%) Eligible FRPM (Ages 5-17)",
          "2013-14 CALPADS Fall 1 Certification Status"
        ],
        "ddl": "create table merged_table( cds text primary key, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer, CDSCode_frpm text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      }
    },
    "old_new_table_mapping": {
      "satscores": "merged_table",
      "frpm": "merged_table"
    },
    "new_table_primary_key": "cds",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "CDSCode_frpm": {
        "old_table": "frpm",
        "old_column": "CDSCode"
      }
    },
    "new_gold_sql": "SELECT COUNT(T1.`School Code`) FROM merged_table AS T1 WHERE T1.AvgScrMath > 560 AND T1.`Charter Funding Type` = 'Directly funded'"
  },
  {
    "train_idx": 10,
    "db_id": "california_schools",
    "question": "For the school with the highest average score in Reading in the SAT test, what is its FRPM count for students aged 5-17?",
    "query": "SELECT T2.`FRPM Count (Ages 5-17)` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrRead DESC LIMIT 1",
    "relevant_table": {
      "satscores": {
        "ddl": "create table satscores( cds text primary key, foreign key(cds) references schools(CDSCode) text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      },
      "frpm": {
        "ddl": "create table frpm( CDSCode text primary key, foreign key(CDSCode) references schools(CDSCode) text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "CDSCode",
          "Academic Year",
          "County Code",
          "District Code",
          "School Code",
          "County Name",
          "District Name",
          "School Name",
          "District Type",
          "School Type",
          "Educational Option Type",
          "NSLP Provision Status",
          "Charter School (Y/N)",
          "Charter School Number",
          "Charter Funding Type",
          "IRC",
          "Low Grade",
          "High Grade",
          "Enrollment (K-12)",
          "Free Meal Count (K-12)",
          "Percent (%) Eligible Free (K-12)",
          "FRPM Count (K-12)",
          "Percent (%) Eligible FRPM (K-12)",
          "Enrollment (Ages 5-17)",
          "Free Meal Count (Ages 5-17)",
          "Percent (%) Eligible Free (Ages 5-17)",
          "FRPM Count (Ages 5-17)",
          "Percent (%) Eligible FRPM (Ages 5-17)",
          "2013-14 CALPADS Fall 1 Certification Status",
          "cds",
          "rtype",
          "sname",
          "dname",
          "cname",
          "enroll12",
          "NumTstTakr",
          "AvgScrRead",
          "AvgScrMath",
          "AvgScrWrite",
          "NumGE1500"
        ],
        "ddl": "create table merged_table( CDSCode text primary key, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer, cds text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      }
    },
    "old_new_table_mapping": {
      "frpm": "merged_table",
      "satscores": "merged_table"
    },
    "new_table_primary_key": "CDSCode",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.`FRPM Count (Ages 5-17)` FROM merged_table AS T1 ORDER BY T1.AvgScrRead DESC LIMIT 1"
  },
  {
    "train_idx": 11,
    "db_id": "california_schools",
    "question": "Please list the codes of the schools with a total enrollment of over 500.",
    "query": "SELECT T2.CDSCode FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` + T2.`Enrollment (Ages 5-17)` > 500",
    "relevant_table": {
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      },
      "frpm": {
        "ddl": "create table frpm( CDSCode text primary key, foreign key(CDSCode) references schools(CDSCode) text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "CDSCode",
          "Academic Year",
          "County Code",
          "District Code",
          "School Code",
          "County Name",
          "District Name",
          "School Name",
          "District Type",
          "School Type",
          "Educational Option Type",
          "NSLP Provision Status",
          "Charter School (Y/N)",
          "Charter School Number",
          "Charter Funding Type",
          "IRC",
          "Low Grade",
          "High Grade",
          "Enrollment (K-12)",
          "Free Meal Count (K-12)",
          "Percent (%) Eligible Free (K-12)",
          "FRPM Count (K-12)",
          "Percent (%) Eligible FRPM (K-12)",
          "Enrollment (Ages 5-17)",
          "Free Meal Count (Ages 5-17)",
          "Percent (%) Eligible Free (Ages 5-17)",
          "FRPM Count (Ages 5-17)",
          "Percent (%) Eligible FRPM (Ages 5-17)",
          "2013-14 CALPADS Fall 1 Certification Status",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate"
        ],
        "ddl": "create table merged_table( CDSCode text primary key, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "old_new_table_mapping": {
      "frpm": "merged_table",
      "schools": "merged_table"
    },
    "new_table_primary_key": "CDSCode",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.CDSCode FROM merged_table AS T1 WHERE T1.`Enrollment (K-12)` + T1.`Enrollment (Ages 5-17)` > 500"
  },
  {
    "train_idx": 12,
    "db_id": "california_schools",
    "question": "Among the schools with an SAT excellence rate of over 0.3, what is the highest eligible free rate for students aged 5-17?",
    "query": "SELECT MAX(CAST(T1.`Free Meal Count (Ages 5-17)` AS REAL) / T1.`Enrollment (Ages 5-17)`) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr > 0.3",
    "relevant_table": {
      "frpm": {
        "ddl": "create table frpm( CDSCode text primary key, foreign key(CDSCode) references schools(CDSCode) text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      },
      "satscores": {
        "ddl": "create table satscores( cds text primary key, foreign key(cds) references schools(CDSCode) text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "CDSCode",
          "Academic Year",
          "County Code",
          "District Code",
          "School Code",
          "County Name",
          "District Name",
          "School Name",
          "District Type",
          "School Type",
          "Educational Option Type",
          "NSLP Provision Status",
          "Charter School (Y/N)",
          "Charter School Number",
          "Charter Funding Type",
          "IRC",
          "Low Grade",
          "High Grade",
          "Enrollment (K-12)",
          "Free Meal Count (K-12)",
          "Percent (%) Eligible Free (K-12)",
          "FRPM Count (K-12)",
          "Percent (%) Eligible FRPM (K-12)",
          "Enrollment (Ages 5-17)",
          "Free Meal Count (Ages 5-17)",
          "Percent (%) Eligible Free (Ages 5-17)",
          "FRPM Count (Ages 5-17)",
          "Percent (%) Eligible FRPM (Ages 5-17)",
          "2013-14 CALPADS Fall 1 Certification Status",
          "rtype",
          "sname",
          "dname",
          "cname",
          "enroll12",
          "NumTstTakr",
          "AvgScrRead",
          "AvgScrMath",
          "AvgScrWrite",
          "NumGE1500"
        ],
        "ddl": "create table merged_table( CDSCode text primary key, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      }
    },
    "old_new_table_mapping": {
      "frpm": "merged_table",
      "satscores": "merged_table"
    },
    "new_table_primary_key": "CDSCode",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT MAX(CAST(merged_table.`Free Meal Count (Ages 5-17)` AS REAL) / merged_table.`Enrollment (Ages 5-17)`) FROM merged_table WHERE CAST(merged_table.NumGE1500 AS REAL) / merged_table.NumTstTakr > 0.3"
  },
  {
    "train_idx": 13,
    "db_id": "california_schools",
    "question": "Please list the phone numbers of the schools with the top 3 SAT excellence rate.",
    "query": "SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr DESC LIMIT 3",
    "relevant_table": {
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      },
      "satscores": {
        "ddl": "create table satscores( cds text primary key, foreign key(cds) references schools(CDSCode) text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      }
    },
    "new_relevant_table": {
      "merged_school_scores": {
        "columns": [
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate",
          "cds",
          "rtype",
          "sname",
          "dname",
          "cname",
          "enroll12",
          "NumTstTakr",
          "AvgScrRead",
          "AvgScrMath",
          "AvgScrWrite",
          "NumGE1500"
        ],
        "ddl": "create table merged_school_scores( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date, cds text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      }
    },
    "old_new_table_mapping": {
      "schools": "merged_school_scores",
      "satscores": "merged_school_scores"
    },
    "new_table_primary_key": "CDSCode",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.Phone FROM merged_school_scores AS T1 ORDER BY CAST(T1.NumGE1500 AS REAL) / T1.NumTstTakr DESC LIMIT 3"
  },
  {
    "train_idx": 14,
    "db_id": "california_schools",
    "question": "List the top five schools, by descending order, from the highest to the lowest, the most number of Enrollment (Ages 5-17). Please give their NCES school identification number.",
    "query": "SELECT T1.NCESSchool FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.`Enrollment (Ages 5-17)` DESC LIMIT 5",
    "relevant_table": {
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      },
      "frpm": {
        "ddl": "create table frpm( CDSCode text primary key, foreign key(CDSCode) references schools(CDSCode) text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      }
    },
    "new_relevant_table": {
      "schools_frpm": {
        "columns": [
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate",
          "Academic Year",
          "County Code",
          "District Code",
          "School Code",
          "County Name",
          "District Name",
          "School Name",
          "District Type",
          "School Type",
          "Educational Option Type",
          "NSLP Provision Status",
          "Charter School (Y/N)",
          "Charter School Number",
          "Charter Funding Type",
          "IRC",
          "Low Grade",
          "High Grade",
          "Enrollment (K-12)",
          "Free Meal Count (K-12)",
          "Percent (%) Eligible Free (K-12)",
          "FRPM Count (K-12)",
          "Percent (%) Eligible FRPM (K-12)",
          "Enrollment (Ages 5-17)",
          "Free Meal Count (Ages 5-17)",
          "Percent (%) Eligible Free (Ages 5-17)",
          "FRPM Count (Ages 5-17)",
          "Percent (%) Eligible FRPM (Ages 5-17)",
          "2013-14 CALPADS Fall 1 Certification Status"
        ],
        "ddl": "create table schools_frpm( CDSCode text, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      }
    },
    "old_new_table_mapping": {
      "schools": "schools_frpm",
      "frpm": "schools_frpm"
    },
    "new_table_primary_key": "'CDSCode'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.NCESSchool FROM schools_frpm AS T1 ORDER BY T1.`Enrollment (Ages 5-17)` DESC LIMIT 5"
  },
  {
    "train_idx": 15,
    "db_id": "california_schools",
    "question": "Which active district has the highest average score in Reading?",
    "query": "SELECT T1.District FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' ORDER BY T2.AvgScrRead DESC LIMIT 1",
    "relevant_table": {
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      },
      "satscores": {
        "ddl": "create table satscores( cds text primary key, foreign key(cds) references schools(CDSCode) text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "cds",
          "rtype",
          "sname",
          "dname",
          "cname",
          "enroll12",
          "NumTstTakr",
          "AvgScrRead",
          "AvgScrMath",
          "AvgScrWrite",
          "NumGE1500",
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate"
        ],
        "ddl": "create table merged_table( cds text primary key, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer, CDSCode text, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "old_new_table_mapping": {
      "satscores": "merged_table",
      "schools": "merged_table"
    },
    "new_table_primary_key": "cds",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.District FROM merged_table AS T1 WHERE T1.StatusType = 'Active' ORDER BY T1.AvgScrRead DESC LIMIT 1"
  },
  {
    "train_idx": 16,
    "db_id": "california_schools",
    "question": "How many schools in merged Alameda have number of test takers less than 100?",
    "query": "SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Merged' AND T2.NumTstTakr < 100 AND T1.County = 'Lake'",
    "relevant_table": {
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      },
      "satscores": {
        "ddl": "create table satscores( cds text primary key, foreign key(cds) references schools(CDSCode) text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "CDSCode",
          "cds",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate",
          "rtype",
          "sname",
          "dname",
          "cname",
          "enroll12",
          "NumTstTakr",
          "AvgScrRead",
          "AvgScrMath",
          "AvgScrWrite",
          "NumGE1500"
        ],
        "ddl": "create table merged_table( CDSCode text, cds text, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      }
    },
    "old_new_table_mapping": {
      "satscores": "merged_table",
      "schools": "merged_table"
    },
    "new_table_primary_key": "'CDSCode'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(T1.CDSCode) FROM merged_table AS T1 WHERE T1.StatusType = 'Merged' AND T1.NumTstTakr < 100 AND T1.County = 'Lake'"
  },
  {
    "train_idx": 17,
    "db_id": "california_schools",
    "question": "Rank schools by their average score in Writing where the score is greater than 499, showing their charter numbers.",
    "query": "SELECT CharterNum, AvgScrWrite, RANK() OVER (ORDER BY AvgScrWrite DESC) AS WritingScoreRank FROM schools AS T1  INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrWrite > 499 AND CharterNum is not null",
    "relevant_table": {
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      },
      "satscores": {
        "ddl": "create table satscores( cds text primary key, foreign key(cds) references schools(CDSCode) text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      }
    },
    "new_relevant_table": {
      "school_scores": {
        "columns": [
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate",
          "cds",
          "rtype",
          "sname",
          "dname",
          "cname",
          "enroll12",
          "NumTstTakr",
          "AvgScrRead",
          "AvgScrMath",
          "AvgScrWrite",
          "NumGE1500"
        ],
        "ddl": "create table school_scores( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date, cds text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      }
    },
    "old_new_table_mapping": {
      "schools": "school_scores",
      "satscores": "school_scores"
    },
    "new_table_primary_key": "CDSCode",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CharterNum, AvgScrWrite, RANK() OVER (ORDER BY AvgScrWrite DESC) AS WritingScoreRank FROM school_scores WHERE AvgScrWrite > 499 AND CharterNum is not null"
  },
  {
    "train_idx": 18,
    "db_id": "california_schools",
    "question": "How many schools in Fresno (directly funded) have number of test takers not more than 250?",
    "query": "SELECT COUNT(T1.CDSCode) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.`Charter Funding Type` = 'Directly funded' AND T1.`County Name` = 'Fresno' AND T2.NumTstTakr <= 250",
    "relevant_table": {
      "frpm": {
        "ddl": "create table frpm( CDSCode text primary key, foreign key(CDSCode) references schools(CDSCode) text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      },
      "satscores": {
        "ddl": "create table satscores( cds text primary key, foreign key(cds) references schools(CDSCode) text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "cds",
          "rtype",
          "sname",
          "dname",
          "cname",
          "enroll12",
          "NumTstTakr",
          "AvgScrRead",
          "AvgScrMath",
          "AvgScrWrite",
          "NumGE1500",
          "CDSCode_frpm",
          "Academic Year",
          "County Code",
          "District Code",
          "School Code",
          "County Name",
          "District Name",
          "School Name",
          "District Type",
          "School Type",
          "Educational Option Type",
          "NSLP Provision Status",
          "Charter School (Y/N)",
          "Charter School Number",
          "Charter Funding Type",
          "IRC",
          "Low Grade",
          "High Grade",
          "Enrollment (K-12)",
          "Free Meal Count (K-12)",
          "Percent (%) Eligible Free (K-12)",
          "FRPM Count (K-12)",
          "Percent (%) Eligible FRPM (K-12)",
          "Enrollment (Ages 5-17)",
          "Free Meal Count (Ages 5-17)",
          "Percent (%) Eligible Free (Ages 5-17)",
          "FRPM Count (Ages 5-17)",
          "Percent (%) Eligible FRPM (Ages 5-17)",
          "2013-14 CALPADS Fall 1 Certification Status"
        ],
        "ddl": "create table merged_table( cds text primary key, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer, CDSCode_frpm text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      }
    },
    "old_new_table_mapping": {
      "satscores": "merged_table",
      "frpm": "merged_table"
    },
    "new_table_primary_key": "cds",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "CDSCode_frpm": {
        "old_table": "frpm",
        "old_column": "CDSCode"
      }
    },
    "new_gold_sql": "SELECT COUNT(T1.cds) FROM merged_table AS T1 WHERE T1.`Charter Funding Type` = 'Directly funded' AND T1.`County Name` = 'Fresno' AND T1.NumTstTakr <= 250"
  },
  {
    "train_idx": 19,
    "db_id": "california_schools",
    "question": "What is the phone number of the school that has the highest average score in Math?",
    "query": "SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrMath DESC LIMIT 1",
    "relevant_table": {
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      },
      "satscores": {
        "ddl": "create table satscores( cds text primary key, foreign key(cds) references schools(CDSCode) text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      }
    },
    "new_relevant_table": {
      "merged_school_scores": {
        "columns": [
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate",
          "rtype",
          "sname",
          "dname",
          "cname",
          "enroll12",
          "NumTstTakr",
          "AvgScrRead",
          "AvgScrMath",
          "AvgScrWrite",
          "NumGE1500"
        ],
        "ddl": "create table merged_school_scores( CDSCode text, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      }
    },
    "old_new_table_mapping": {
      "schools": "merged_school_scores",
      "satscores": "merged_school_scores"
    },
    "new_table_primary_key": "'CDSCode'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Phone FROM merged_school_scores ORDER BY AvgScrMath DESC LIMIT 1"
  },
  {
    "train_idx": 20,
    "db_id": "california_schools",
    "question": "How many schools in Amador which the Low Grade is 9 and the High Grade is 12?",
    "query": "SELECT COUNT(T1.`School Name`) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Amador' AND T1.`Low Grade` = 9 AND T1.`High Grade` = 12",
    "relevant_table": {
      "frpm": {
        "ddl": "create table frpm( CDSCode text primary key, foreign key(CDSCode) references schools(CDSCode) text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_school_data": {
        "columns": [
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate",
          "Academic Year",
          "County Code",
          "District Code",
          "School Code",
          "County Name",
          "District Name",
          "School Name_frpm",
          "District Type",
          "School Type",
          "Educational Option Type",
          "NSLP Provision Status",
          "Charter School (Y/N)",
          "Charter School Number",
          "Charter Funding Type",
          "IRC",
          "Low Grade",
          "High Grade",
          "Enrollment (K-12)",
          "Free Meal Count (K-12)",
          "Percent (%) Eligible Free (K-12)",
          "FRPM Count (K-12)",
          "Percent (%) Eligible FRPM (K-12)",
          "Enrollment (Ages 5-17)",
          "Free Meal Count (Ages 5-17)",
          "Percent (%) Eligible Free (Ages 5-17)",
          "FRPM Count (Ages 5-17)",
          "Percent (%) Eligible FRPM (Ages 5-17)",
          "2013-14 CALPADS Fall 1 Certification Status"
        ],
        "ddl": "create table merged_school_data( CDSCode text, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      }
    },
    "old_new_table_mapping": {
      "schools": "merged_school_data",
      "frpm": "merged_school_data"
    },
    "new_table_primary_key": "'CDSCode'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "'School Name_frpm'": {
        "old_table": "'frpm'",
        "old_column": "'School Name'"
      }
    },
    "new_gold_sql": "SELECT COUNT(T1.`School Name_frpm`) FROM merged_school_data AS T1 WHERE T1.County = 'Amador' AND T1.`Low Grade` = 9 AND T1.`High Grade` = 12"
  },
  {
    "train_idx": 23,
    "db_id": "california_schools",
    "question": "List the names of schools with more than 30 difference in enrollements between K-12 and ages 5-17? Please also give the full street adress of the schools.",
    "query": "SELECT T1.School, T1.Street FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)` > 30",
    "relevant_table": {
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      },
      "frpm": {
        "ddl": "create table frpm( CDSCode text primary key, foreign key(CDSCode) references schools(CDSCode) text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "CDSCode",
          "Academic Year",
          "County Code",
          "District Code",
          "School Code",
          "County Name",
          "District Name",
          "School Name_frpm",
          "District Type",
          "School Type",
          "Educational Option Type",
          "NSLP Provision Status",
          "Charter School (Y/N)",
          "Charter School Number",
          "Charter Funding Type",
          "IRC",
          "Low Grade",
          "High Grade",
          "Enrollment (K-12)",
          "Free Meal Count (K-12)",
          "Percent (%) Eligible Free (K-12)",
          "FRPM Count (K-12)",
          "Percent (%) Eligible FRPM (K-12)",
          "Enrollment (Ages 5-17)",
          "Free Meal Count (Ages 5-17)",
          "Percent (%) Eligible Free (Ages 5-17)",
          "FRPM Count (Ages 5-17)",
          "Percent (%) Eligible FRPM (Ages 5-17)",
          "2013-14 CALPADS Fall 1 Certification Status",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School Name_schools",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate"
        ],
        "ddl": "create table merged_table( CDSCode text primary key, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name_frpm text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer, NCESDist text, NCESSchool text, StatusType text, County text, District text, School Name_schools text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "old_new_table_mapping": {
      "frpm": "merged_table",
      "schools": "merged_table"
    },
    "new_table_primary_key": "CDSCode",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "School Name_frpm": {
        "old_table": "frpm",
        "old_column": "School Name"
      },
      "School Name_schools": {
        "old_table": "schools",
        "old_column": "School"
      }
    },
    "new_gold_sql": "SELECT T1.`School Name_schools`, T1.Street FROM merged_table AS T1 WHERE T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)` > 30"
  },
  {
    "train_idx": 24,
    "db_id": "california_schools",
    "question": "Give the names of the schools with the percent eligible for free meals in K-12 is more than 0.1 and test takers whose test score is greater than or equal to 1500?",
    "query": "SELECT T2.`School Name` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE CAST(T2.`Free Meal Count (K-12)` AS REAL) / T2.`Enrollment (K-12)` > 0.1 AND T1.NumGE1500 > 0",
    "relevant_table": {
      "satscores": {
        "ddl": "create table satscores( cds text primary key, foreign key(cds) references schools(CDSCode) text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      },
      "frpm": {
        "ddl": "create table frpm( CDSCode text primary key, foreign key(CDSCode) references schools(CDSCode) text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "CDSCode",
          "Academic Year",
          "County Code",
          "District Code",
          "School Code",
          "County Name",
          "District Name",
          "School Name",
          "District Type",
          "School Type",
          "Educational Option Type",
          "NSLP Provision Status",
          "Charter School (Y/N)",
          "Charter School Number",
          "Charter Funding Type",
          "IRC",
          "Low Grade",
          "High Grade",
          "Enrollment (K-12)",
          "Free Meal Count (K-12)",
          "Percent (%) Eligible Free (K-12)",
          "FRPM Count (K-12)",
          "Percent (%) Eligible FRPM (K-12)",
          "Enrollment (Ages 5-17)",
          "Free Meal Count (Ages 5-17)",
          "Percent (%) Eligible Free (Ages 5-17)",
          "FRPM Count (Ages 5-17)",
          "Percent (%) Eligible FRPM (Ages 5-17)",
          "2013-14 CALPADS Fall 1 Certification Status",
          "rtype",
          "sname",
          "dname",
          "cname",
          "enroll12",
          "NumTstTakr",
          "AvgScrRead",
          "AvgScrMath",
          "AvgScrWrite",
          "NumGE1500"
        ],
        "ddl": "create table merged_table( CDSCode text primary key, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      }
    },
    "old_new_table_mapping": {
      "frpm": "merged_table",
      "satscores": "merged_table"
    },
    "new_table_primary_key": "CDSCode",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.`School Name` FROM merged_table AS T1 WHERE CAST(T1.`Free Meal Count (K-12)` AS REAL) / T1.`Enrollment (K-12)` > 0.1 AND T1.NumGE1500 > 0"
  },
  {
    "train_idx": 25,
    "db_id": "california_schools",
    "question": "Name schools in Riverside which the average of average math score for SAT is grater than 400, what is the funding type of these schools?",
    "query": "SELECT T1.sname, T2.`Charter Funding Type` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T2.`District Name` LIKE 'Riverside%' GROUP BY T1.sname, T2.`Charter Funding Type` HAVING CAST(SUM(T1.AvgScrMath) AS REAL) / COUNT(T1.cds) > 400",
    "relevant_table": {
      "satscores": {
        "ddl": "create table satscores( cds text primary key, foreign key(cds) references schools(CDSCode) text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      },
      "frpm": {
        "ddl": "create table frpm( CDSCode text primary key, foreign key(CDSCode) references schools(CDSCode) text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "CDSCode",
          "Academic Year",
          "County Code",
          "District Code",
          "School Code",
          "County Name",
          "District Name",
          "School Name",
          "District Type",
          "School Type",
          "Educational Option Type",
          "NSLP Provision Status",
          "Charter School (Y/N)",
          "Charter School Number",
          "Charter Funding Type",
          "IRC",
          "Low Grade",
          "High Grade",
          "Enrollment (K-12)",
          "Free Meal Count (K-12)",
          "Percent (%) Eligible Free (K-12)",
          "FRPM Count (K-12)",
          "Percent (%) Eligible FRPM (K-12)",
          "Enrollment (Ages 5-17)",
          "Free Meal Count (Ages 5-17)",
          "Percent (%) Eligible Free (Ages 5-17)",
          "FRPM Count (Ages 5-17)",
          "Percent (%) Eligible FRPM (Ages 5-17)",
          "2013-14 CALPADS Fall 1 Certification Status",
          "cds",
          "rtype",
          "sname_satscores",
          "dname_satscores",
          "cname",
          "enroll12",
          "NumTstTakr",
          "AvgScrRead",
          "AvgScrMath",
          "AvgScrWrite",
          "NumGE1500"
        ],
        "ddl": "create table merged_table( CDSCode text primary key, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer, cds text, rtype text, sname_satscores text, dname_satscores text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      }
    },
    "old_new_table_mapping": {
      "frpm": "merged_table",
      "satscores": "merged_table"
    },
    "new_table_primary_key": "CDSCode",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "sname_satscores": {
        "old_table": "satscores",
        "old_column": "sname"
      },
      "dname_satscores": {
        "old_table": "satscores",
        "old_column": "dname"
      }
    },
    "new_gold_sql": "SELECT T1.sname_satscores, T1.`Charter Funding Type` FROM merged_table AS T1 WHERE T1.`District Name` LIKE 'Riverside%' GROUP BY T1.sname_satscores, T1.`Charter Funding Type` HAVING CAST(SUM(T1.AvgScrMath) AS REAL) / COUNT(T1.cds) > 400"
  },
  {
    "train_idx": 26,
    "db_id": "california_schools",
    "question": "State the names and full communication address of high schools in Monterey which has more than 800 free or reduced price meals for ages 15-17?",
    "query": "SELECT T1.`School Name`, T2.Street, T2.City, T2.State, T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Monterey' AND T1.`Free Meal Count (Ages 5-17)` > 800 AND T1.`School Type` = 'High Schools (Public)'",
    "relevant_table": {
      "frpm": {
        "ddl": "create table frpm( CDSCode text primary key, foreign key(CDSCode) references schools(CDSCode) text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_school_data": {
        "columns": [
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate",
          "Academic Year",
          "County Code",
          "District Code",
          "School Code",
          "County Name",
          "District Name",
          "School Name_frpm",
          "District Type",
          "School Type",
          "Educational Option Type",
          "NSLP Provision Status",
          "Charter School (Y/N)",
          "Charter School Number",
          "Charter Funding Type",
          "IRC",
          "Low Grade",
          "High Grade",
          "Enrollment (K-12)",
          "Free Meal Count (K-12)",
          "Percent (%) Eligible Free (K-12)",
          "FRPM Count (K-12)",
          "Percent (%) Eligible FRPM (K-12)",
          "Enrollment (Ages 5-17)",
          "Free Meal Count (Ages 5-17)",
          "Percent (%) Eligible Free (Ages 5-17)",
          "FRPM Count (Ages 5-17)",
          "Percent (%) Eligible FRPM (Ages 5-17)",
          "2013-14 CALPADS Fall 1 Certification Status"
        ],
        "ddl": "create table merged_school_data( CDSCode text, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      }
    },
    "old_new_table_mapping": {
      "schools": "merged_school_data",
      "frpm": "merged_school_data"
    },
    "new_table_primary_key": "'CDSCode'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "'School Name_frpm'": {
        "old_table": "'frpm'",
        "old_column": "'School Name'"
      }
    },
    "new_gold_sql": "SELECT T1.`School Name_frpm`, T1.Street, T1.City, T1.State, T1.Zip FROM merged_school_data AS T1 WHERE T1.County = 'Monterey' AND T1.`Free Meal Count (Ages 5-17)` > 800 AND T1.`School Type` = 'High Schools (Public)'"
  },
  {
    "train_idx": 27,
    "db_id": "california_schools",
    "question": "What is the average score in writing for the schools that were opened after 1991 or closed before 2000? List the school names along with the score. Also, list the communication number of the schools if there is any.",
    "query": "SELECT T2.School, T1.AvgScrWrite, T2.Phone FROM schools AS T2 LEFT JOIN satscores AS T1 ON T2.CDSCode = T1.cds WHERE strftime('%Y', T2.OpenDate) > '1991' OR strftime('%Y', T2.ClosedDate) < '2000'",
    "relevant_table": {
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      },
      "satscores": {
        "ddl": "create table satscores( cds text primary key, foreign key(cds) references schools(CDSCode) text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      }
    },
    "new_relevant_table": {
      "merged_school_data": {
        "columns": [
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate",
          "cds",
          "rtype",
          "sname",
          "dname",
          "cname",
          "enroll12",
          "NumTstTakr",
          "AvgScrRead",
          "AvgScrMath",
          "AvgScrWrite",
          "NumGE1500"
        ],
        "ddl": "create table merged_school_data( CDSCode text, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date, cds text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      }
    },
    "old_new_table_mapping": {
      "schools": "merged_school_data",
      "satscores": "merged_school_data"
    },
    "new_table_primary_key": "'CDSCode'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.School, T1.AvgScrWrite, T1.Phone FROM merged_school_data AS T1 WHERE strftime('%Y', T1.OpenDate) > '1991' OR strftime('%Y', T1.ClosedDate) < '2000'"
  },
  {
    "train_idx": 28,
    "db_id": "california_schools",
    "question": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average.",
    "query": "SELECT T2.School, T2.DOC FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.FundingType = 'Locally funded' AND (T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > (SELECT AVG(T3.`Enrollment (K-12)` - T3.`Enrollment (Ages 5-17)`) FROM frpm AS T3 INNER JOIN schools AS T4 ON T3.CDSCode = T4.CDSCode WHERE T4.FundingType = 'Locally funded')",
    "relevant_table": {
      "frpm": {
        "ddl": "create table frpm( CDSCode text primary key, foreign key(CDSCode) references schools(CDSCode) text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_school_data": {
        "columns": [
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate",
          "Academic Year",
          "County Code",
          "District Code",
          "School Code",
          "County Name",
          "District Name",
          "School Name_frpm",
          "District Type",
          "School Type",
          "Educational Option Type",
          "NSLP Provision Status",
          "Charter School (Y/N)",
          "Charter School Number",
          "Charter Funding Type",
          "IRC",
          "Low Grade",
          "High Grade",
          "Enrollment (K-12)",
          "Free Meal Count (K-12)",
          "Percent (%) Eligible Free (K-12)",
          "FRPM Count (K-12)",
          "Percent (%) Eligible FRPM (K-12)",
          "Enrollment (Ages 5-17)",
          "Free Meal Count (Ages 5-17)",
          "Percent (%) Eligible Free (Ages 5-17)",
          "FRPM Count (Ages 5-17)",
          "Percent (%) Eligible FRPM (Ages 5-17)",
          "2013-14 CALPADS Fall 1 Certification Status"
        ],
        "ddl": "create table merged_school_data( CDSCode text, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      }
    },
    "old_new_table_mapping": {
      "schools": "merged_school_data",
      "frpm": "merged_school_data"
    },
    "new_table_primary_key": "'CDSCode'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "'School Name_frpm'": {
        "old_table": "'frpm'",
        "old_column": "'School'"
      }
    },
    "new_gold_sql": "SELECT T1.School, T1.DOC FROM merged_school_data AS T1 WHERE T1.FundingType = 'Locally funded' AND (T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > (SELECT AVG(T3.`Enrollment (K-12)` - T3.`Enrollment (Ages 5-17)`) FROM merged_school_data AS T3 WHERE T3.FundingType = 'Locally funded')"
  },
  {
    "train_idx": 29,
    "db_id": "california_schools",
    "question": "When did the first-through-twelfth-grade school with the largest enrollment open?",
    "query": "SELECT T2.OpenDate FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 1",
    "relevant_table": {
      "frpm": {
        "ddl": "create table frpm( CDSCode text primary key, foreign key(CDSCode) references schools(CDSCode) text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "CDSCode",
          "Academic Year",
          "County Code",
          "District Code",
          "School Code",
          "County Name",
          "District Name",
          "School Name",
          "District Type",
          "School Type",
          "Educational Option Type",
          "NSLP Provision Status",
          "Charter School (Y/N)",
          "Charter School Number",
          "Charter Funding Type",
          "IRC",
          "Low Grade",
          "High Grade",
          "Enrollment (K-12)",
          "Free Meal Count (K-12)",
          "Percent (%) Eligible Free (K-12)",
          "FRPM Count (K-12)",
          "Percent (%) Eligible FRPM (K-12)",
          "Enrollment (Ages 5-17)",
          "Free Meal Count (Ages 5-17)",
          "Percent (%) Eligible Free (Ages 5-17)",
          "FRPM Count (Ages 5-17)",
          "Percent (%) Eligible FRPM (Ages 5-17)",
          "2013-14 CALPADS Fall 1 Certification Status",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate"
        ],
        "ddl": "create table merged_table( CDSCode text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "old_new_table_mapping": {
      "frpm": "merged_table",
      "schools": "merged_table"
    },
    "new_table_primary_key": "'CDSCode'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.OpenDate FROM merged_table AS T1 ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 1"
  },
  {
    "train_idx": 30,
    "db_id": "california_schools",
    "question": "Which cities have the top 5 lowest enrollment number for students in grades 1 through 12?",
    "query": "SELECT T2.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode GROUP BY T2.City ORDER BY SUM(T1.`Enrollment (K-12)`) ASC LIMIT 5",
    "relevant_table": {
      "frpm": {
        "ddl": "create table frpm( CDSCode text primary key, foreign key(CDSCode) references schools(CDSCode) text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_school_data": {
        "columns": [
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate",
          "Academic Year",
          "County Code",
          "District Code",
          "School Code",
          "County Name",
          "District Name",
          "School Name",
          "District Type",
          "School Type",
          "Educational Option Type",
          "NSLP Provision Status",
          "Charter School (Y/N)",
          "Charter School Number",
          "Charter Funding Type",
          "IRC",
          "Low Grade",
          "High Grade",
          "Enrollment (K-12)",
          "Free Meal Count (K-12)",
          "Percent (%) Eligible Free (K-12)",
          "FRPM Count (K-12)",
          "Percent (%) Eligible FRPM (K-12)",
          "Enrollment (Ages 5-17)",
          "Free Meal Count (Ages 5-17)",
          "Percent (%) Eligible Free (Ages 5-17)",
          "FRPM Count (Ages 5-17)",
          "Percent (%) Eligible FRPM (Ages 5-17)",
          "2013-14 CALPADS Fall 1 Certification Status"
        ],
        "ddl": "create table merged_school_data( CDSCode text, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      }
    },
    "old_new_table_mapping": {
      "schools": "merged_school_data",
      "frpm": "merged_school_data"
    },
    "new_table_primary_key": "'CDSCode'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.City FROM merged_school_data AS T1 GROUP BY T1.City ORDER BY SUM(T1.`Enrollment (K-12)`) ASC LIMIT 5"
  },
  {
    "train_idx": 32,
    "db_id": "california_schools",
    "question": "What is the eligible free or reduced price meal rate for the top 5 schools in grades 1-12 with the highest free or reduced price meal count of the schools with the ownership code 66?",
    "query": "SELECT CAST(T1.`FRPM Count (K-12)` AS REAL) / T1.`Enrollment (K-12)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.SOC = 66 ORDER BY T1.`FRPM Count (K-12)` DESC LIMIT 5",
    "relevant_table": {
      "frpm": {
        "ddl": "create table frpm( CDSCode text primary key, foreign key(CDSCode) references schools(CDSCode) text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "CDSCode",
          "Academic Year",
          "County Code",
          "District Code",
          "School Code",
          "County Name",
          "District Name",
          "School Name",
          "District Type",
          "School Type",
          "Educational Option Type",
          "NSLP Provision Status",
          "Charter School (Y/N)",
          "Charter School Number",
          "Charter Funding Type",
          "IRC",
          "Low Grade",
          "High Grade",
          "Enrollment (K-12)",
          "Free Meal Count (K-12)",
          "Percent (%) Eligible Free (K-12)",
          "FRPM Count (K-12)",
          "Percent (%) Eligible FRPM (K-12)",
          "Enrollment (Ages 5-17)",
          "Free Meal Count (Ages 5-17)",
          "Percent (%) Eligible Free (Ages 5-17)",
          "FRPM Count (Ages 5-17)",
          "Percent (%) Eligible FRPM (Ages 5-17)",
          "2013-14 CALPADS Fall 1 Certification Status",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate"
        ],
        "ddl": "create table merged_table( CDSCode text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "old_new_table_mapping": {
      "frpm": "merged_table",
      "schools": "merged_table"
    },
    "new_table_primary_key": "'CDSCode'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(T1.`FRPM Count (K-12)` AS REAL) / T1.`Enrollment (K-12)` FROM merged_table AS T1 WHERE T1.SOC = 66 ORDER BY T1.`FRPM Count (K-12)` DESC LIMIT 5"
  },
  {
    "train_idx": 33,
    "db_id": "california_schools",
    "question": "If there are any, what are the websites address of the schools with a free meal count of 1,900-2,000 to students aged 5-17? Include the name of the school.",
    "query": "SELECT T2.Website, T1.`School Name` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000 AND T2.Website IS NOT NULL",
    "relevant_table": {
      "frpm": {
        "ddl": "create table frpm( CDSCode text primary key, foreign key(CDSCode) references schools(CDSCode) text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "CDSCode",
          "Academic Year",
          "County Code",
          "District Code",
          "School Code",
          "County Name",
          "District Name",
          "School Name_frpm",
          "District Type",
          "School Type",
          "Educational Option Type",
          "NSLP Provision Status",
          "Charter School (Y/N)",
          "Charter School Number",
          "Charter Funding Type",
          "IRC",
          "Low Grade",
          "High Grade",
          "Enrollment (K-12)",
          "Free Meal Count (K-12)",
          "Percent (%) Eligible Free (K-12)",
          "FRPM Count (K-12)",
          "Percent (%) Eligible FRPM (K-12)",
          "Enrollment (Ages 5-17)",
          "Free Meal Count (Ages 5-17)",
          "Percent (%) Eligible Free (Ages 5-17)",
          "FRPM Count (Ages 5-17)",
          "Percent (%) Eligible FRPM (Ages 5-17)",
          "2013-14 CALPADS Fall 1 Certification Status",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School Name_schools",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate"
        ],
        "ddl": "create table merged_table( CDSCode text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer, NCESDist text, NCESSchool text, StatusType text, County text, District text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "old_new_table_mapping": {
      "frpm": "merged_table",
      "schools": "merged_table"
    },
    "new_table_primary_key": "'CDSCode'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "'School Name_frpm'": {
        "old_table": "'frpm'",
        "old_column": "'School Name'"
      },
      "'School Name_schools'": {
        "old_table": "'schools'",
        "old_column": "'School'"
      }
    },
    "new_gold_sql": "SELECT T1.Website, T1.`School Name_frpm` FROM merged_table AS T1 WHERE T1.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000 AND T1.Website IS NOT NULL"
  },
  {
    "train_idx": 34,
    "db_id": "california_schools",
    "question": "What is the free rate for students between the ages of 5 and 17 at the school run by Kacey Gibson?",
    "query": "SELECT CAST(T2.`Free Meal Count (Ages 5-17)` AS REAL) / T2.`Enrollment (Ages 5-17)` FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.AdmFName1 = 'Kacey' AND T1.AdmLName1 = 'Gibson'",
    "relevant_table": {
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      },
      "frpm": {
        "ddl": "create table frpm( CDSCode text primary key, foreign key(CDSCode) references schools(CDSCode) text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "CDSCode",
          "Academic Year",
          "County Code",
          "District Code",
          "School Code",
          "County Name",
          "District Name",
          "School Name",
          "District Type",
          "School Type",
          "Educational Option Type",
          "NSLP Provision Status",
          "Charter School (Y/N)",
          "Charter School Number",
          "Charter Funding Type",
          "IRC",
          "Low Grade",
          "High Grade",
          "Enrollment (K-12)",
          "Free Meal Count (K-12)",
          "Percent (%) Eligible Free (K-12)",
          "FRPM Count (K-12)",
          "Percent (%) Eligible FRPM (K-12)",
          "Enrollment (Ages 5-17)",
          "Free Meal Count (Ages 5-17)",
          "Percent (%) Eligible Free (Ages 5-17)",
          "FRPM Count (Ages 5-17)",
          "Percent (%) Eligible FRPM (Ages 5-17)",
          "2013-14 CALPADS Fall 1 Certification Status",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate"
        ],
        "ddl": "create table merged_table( CDSCode text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "old_new_table_mapping": {
      "frpm": "merged_table",
      "schools": "merged_table"
    },
    "new_table_primary_key": "'CDSCode'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(merged_table.`Free Meal Count (Ages 5-17)` AS REAL) / merged_table.`Enrollment (Ages 5-17)` FROM merged_table WHERE merged_table.AdmFName1 = 'Kacey' AND merged_table.AdmLName1 = 'Gibson'"
  },
  {
    "train_idx": 35,
    "db_id": "california_schools",
    "question": "What is the administrator's email address of the chartered school with the fewest students enrolled in grades 1 through 12?",
    "query": "SELECT T2.AdmEmail1 FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Charter School (Y/N)` = 1 ORDER BY T1.`Enrollment (K-12)` ASC LIMIT 1",
    "relevant_table": {
      "frpm": {
        "ddl": "create table frpm( CDSCode text primary key, foreign key(CDSCode) references schools(CDSCode) text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_school_data": {
        "columns": [
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate",
          "Academic Year",
          "County Code",
          "District Code",
          "School Code",
          "County Name_frpm",
          "District Name_frpm",
          "School Name_frpm",
          "District Type",
          "School Type",
          "Educational Option Type",
          "NSLP Provision Status",
          "Charter School (Y/N)",
          "Charter School Number",
          "Charter Funding Type",
          "IRC",
          "Low Grade",
          "High Grade",
          "Enrollment (K-12)",
          "Free Meal Count (K-12)",
          "Percent (%) Eligible Free (K-12)",
          "FRPM Count (K-12)",
          "Percent (%) Eligible FRPM (K-12)",
          "Enrollment (Ages 5-17)",
          "Free Meal Count (Ages 5-17)",
          "Percent (%) Eligible Free (Ages 5-17)",
          "FRPM Count (Ages 5-17)",
          "Percent (%) Eligible FRPM (Ages 5-17)",
          "2013-14 CALPADS Fall 1 Certification Status"
        ],
        "ddl": "create table merged_school_data( CDSCode text, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date, Academic Year text, County Code text, District Code integer, School Code text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      }
    },
    "old_new_table_mapping": {
      "schools": "merged_school_data",
      "frpm": "merged_school_data"
    },
    "new_table_primary_key": "'CDSCode'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "'County Name_frpm', 'District Name_frpm', 'School Name_frpm'": {
        "old_table": "'frpm', 'frpm', 'frpm'",
        "old_column": "'County Name', 'District Name', 'School Name'"
      }
    },
    "new_gold_sql": "SELECT T1.AdmEmail1 FROM merged_school_data AS T1 WHERE T1.`Charter School (Y/N)` = 1 ORDER BY T1.`Enrollment (K-12)` ASC LIMIT 1"
  },
  {
    "train_idx": 36,
    "db_id": "california_schools",
    "question": "Under whose administration is the school with the highest number of students scoring 1500 or more on the SAT? Indicate their full names.",
    "query": "SELECT T2.AdmFName1, T2.AdmLName1, T2.AdmFName2, T2.AdmLName2, T2.AdmFName3, T2.AdmLName3 FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
    "relevant_table": {
      "satscores": {
        "ddl": "create table satscores( cds text primary key, foreign key(cds) references schools(CDSCode) text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "cds",
          "rtype",
          "sname",
          "dname",
          "cname",
          "enroll12",
          "NumTstTakr",
          "AvgScrRead",
          "AvgScrMath",
          "AvgScrWrite",
          "NumGE1500",
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate"
        ],
        "ddl": "create table merged_table( cds text primary key, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer, CDSCode text, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "old_new_table_mapping": {
      "satscores": "merged_table",
      "schools": "merged_table"
    },
    "new_table_primary_key": "cds",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT AdmFName1, AdmLName1, AdmFName2, AdmLName2, AdmFName3, AdmLName3 FROM merged_table ORDER BY NumGE1500 DESC LIMIT 1"
  },
  {
    "train_idx": 37,
    "db_id": "california_schools",
    "question": "What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State.",
    "query": "SELECT T2.Street, T2.City, T2.State, T2.Zip FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY CAST(T1.NumGE1500 AS REAL) / T1.NumTstTakr ASC LIMIT 1",
    "relevant_table": {
      "satscores": {
        "ddl": "create table satscores( cds text primary key, foreign key(cds) references schools(CDSCode) text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_school_data": {
        "columns": [
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate",
          "cds",
          "rtype",
          "sname",
          "dname",
          "cname",
          "enroll12",
          "NumTstTakr",
          "AvgScrRead",
          "AvgScrMath",
          "AvgScrWrite",
          "NumGE1500"
        ],
        "ddl": "create table merged_school_data( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date, cds text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      }
    },
    "old_new_table_mapping": {
      "schools": "merged_school_data",
      "satscores": "merged_school_data"
    },
    "new_table_primary_key": "CDSCode",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Street, City, State, Zip FROM merged_school_data ORDER BY CAST(NumGE1500 AS REAL) / NumTstTakr ASC LIMIT 1"
  },
  {
    "train_idx": 38,
    "db_id": "california_schools",
    "question": "What are the webpages for the Los Angeles County school that has between 2,000 and 3,000 test takers?",
    "query": "SELECT T2.Website FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.NumTstTakr BETWEEN 2000 AND 3000 AND T2.County = 'Los Angeles'",
    "relevant_table": {
      "satscores": {
        "ddl": "create table satscores( cds text primary key, foreign key(cds) references schools(CDSCode) text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_school_data": {
        "columns": [
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate",
          "cds",
          "rtype",
          "sname",
          "dname",
          "cname",
          "enroll12",
          "NumTstTakr",
          "AvgScrRead",
          "AvgScrMath",
          "AvgScrWrite",
          "NumGE1500"
        ],
        "ddl": "create table merged_school_data( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date, cds text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      }
    },
    "old_new_table_mapping": {
      "schools": "merged_school_data",
      "satscores": "merged_school_data"
    },
    "new_table_primary_key": "CDSCode",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Website FROM merged_school_data WHERE NumTstTakr BETWEEN 2000 AND 3000 AND County = 'Los Angeles'"
  },
  {
    "train_idx": 39,
    "db_id": "california_schools",
    "question": "What is the average number of test takers from Fresno schools that opened between 1/1/1980 and 12/31/1980?",
    "query": "SELECT AVG(T1.NumTstTakr) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE strftime('%Y', T2.OpenDate) = '1980' AND T2.County = 'Fresno'",
    "relevant_table": {
      "satscores": {
        "ddl": "create table satscores( cds text primary key, foreign key(cds) references schools(CDSCode) text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate",
          "cds",
          "rtype",
          "sname",
          "dname",
          "cname",
          "enroll12",
          "NumTstTakr",
          "AvgScrRead",
          "AvgScrMath",
          "AvgScrWrite",
          "NumGE1500"
        ],
        "ddl": "create table merged_table( CDSCode text, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date, cds text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      }
    },
    "old_new_table_mapping": {
      "schools": "merged_table",
      "satscores": "merged_table"
    },
    "new_table_primary_key": "'CDSCode'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT AVG(T1.NumTstTakr) FROM merged_table AS T1 WHERE strftime('%Y', T1.OpenDate) = '1980' AND T1.County = 'Fresno'"
  },
  {
    "train_idx": 40,
    "db_id": "california_schools",
    "question": "What is the telephone number for the school with the lowest average score in reading in Fresno Unified?",
    "query": "SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.District = 'Fresno Unified' AND T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1",
    "relevant_table": {
      "satscores": {
        "ddl": "create table satscores( cds text primary key, foreign key(cds) references schools(CDSCode) text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate",
          "cds",
          "rtype",
          "sname",
          "dname",
          "cname",
          "enroll12",
          "NumTstTakr",
          "AvgScrRead",
          "AvgScrMath",
          "AvgScrWrite",
          "NumGE1500"
        ],
        "ddl": "create table merged_table( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date, cds text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      }
    },
    "old_new_table_mapping": {
      "schools": "merged_table",
      "satscores": "merged_table"
    },
    "new_table_primary_key": "CDSCode",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Phone FROM merged_table WHERE District = 'Fresno Unified' AND AvgScrRead IS NOT NULL ORDER BY AvgScrRead ASC LIMIT 1"
  },
  {
    "train_idx": 41,
    "db_id": "california_schools",
    "question": "List the names of virtual schools that are among the top 5 in their respective counties based on average reading scores.",
    "query": "SELECT School FROM (SELECT T2.School,T1.AvgScrRead, RANK() OVER (PARTITION BY T2.County ORDER BY T1.AvgScrRead DESC) AS rnk FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' ) ranked_schools WHERE rnk <= 5",
    "relevant_table": {
      "satscores": {
        "ddl": "create table satscores( cds text primary key, foreign key(cds) references schools(CDSCode) text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "cds",
          "rtype",
          "sname",
          "dname",
          "cname",
          "enroll12",
          "NumTstTakr",
          "AvgScrRead",
          "AvgScrMath",
          "AvgScrWrite",
          "NumGE1500",
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate"
        ],
        "ddl": "create table merged_table( cds text primary key, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer, CDSCode text, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "old_new_table_mapping": {
      "satscores": "merged_table",
      "schools": "merged_table"
    },
    "new_table_primary_key": "cds",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT School FROM (SELECT T1.School,T1.AvgScrRead, RANK() OVER (PARTITION BY T1.County ORDER BY T1.AvgScrRead DESC) AS rnk FROM merged_table AS T1 WHERE T1.Virtual = 'F' ) ranked_schools WHERE rnk <= 5"
  },
  {
    "train_idx": 42,
    "db_id": "california_schools",
    "question": "What is the type of education offered in the school who scored the highest average in Math?",
    "query": "SELECT T2.EdOpsName FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 1",
    "relevant_table": {
      "satscores": {
        "ddl": "create table satscores( cds text primary key, foreign key(cds) references schools(CDSCode) text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "cds",
          "rtype",
          "sname",
          "dname",
          "cname",
          "enroll12",
          "NumTstTakr",
          "AvgScrRead",
          "AvgScrMath",
          "AvgScrWrite",
          "NumGE1500",
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate"
        ],
        "ddl": "create table merged_table( cds text primary key, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer, CDSCode text, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "old_new_table_mapping": {
      "satscores": "merged_table",
      "schools": "merged_table"
    },
    "new_table_primary_key": "cds",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.EdOpsName FROM merged_table AS T1 ORDER BY T1.AvgScrMath DESC LIMIT 1"
  },
  {
    "train_idx": 43,
    "db_id": "california_schools",
    "question": "What is the average math score of the school with the lowest average score for all subjects, and in which county is it located?",
    "query": "SELECT T1.AvgScrMath, T2.County FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath IS NOT NULL ORDER BY T1.AvgScrMath + T1.AvgScrRead + T1.AvgScrWrite ASC LIMIT 1",
    "relevant_table": {
      "satscores": {
        "ddl": "create table satscores( cds text primary key, foreign key(cds) references schools(CDSCode) text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate",
          "cds",
          "rtype",
          "sname",
          "dname",
          "cname",
          "enroll12",
          "NumTstTakr",
          "AvgScrRead",
          "AvgScrMath",
          "AvgScrWrite",
          "NumGE1500"
        ],
        "ddl": "create table merged_table( CDSCode text, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date, cds text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      }
    },
    "old_new_table_mapping": {
      "schools": "merged_table",
      "satscores": "merged_table"
    },
    "new_table_primary_key": "'CDSCode'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.AvgScrMath, T1.County FROM merged_table AS T1 WHERE T1.AvgScrMath IS NOT NULL ORDER BY T1.AvgScrMath + T1.AvgScrRead + T1.AvgScrWrite ASC LIMIT 1"
  },
  {
    "train_idx": 44,
    "db_id": "california_schools",
    "question": "What is the average writing score of the school who has the highest number of test takers whose total SAT sscores are greater or equal to 1500? Indicate the city to where the school is situated.",
    "query": "SELECT T1.AvgScrWrite, T2.City FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
    "relevant_table": {
      "satscores": {
        "ddl": "create table satscores( cds text primary key, foreign key(cds) references schools(CDSCode) text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate",
          "cds",
          "rtype",
          "sname",
          "dname",
          "cname",
          "enroll12",
          "NumTstTakr",
          "AvgScrRead",
          "AvgScrMath",
          "AvgScrWrite",
          "NumGE1500"
        ],
        "ddl": "create table merged_table( CDSCode text, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date, cds text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      }
    },
    "old_new_table_mapping": {
      "schools": "merged_table",
      "satscores": "merged_table"
    },
    "new_table_primary_key": "'CDSCode'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.AvgScrWrite, T1.City FROM merged_table AS T1 ORDER BY T1.NumGE1500 DESC LIMIT 1"
  },
  {
    "train_idx": 45,
    "db_id": "california_schools",
    "question": "What is the average writing score of each of the schools managed by Ricci Ulrich? List the schools and the corresponding average writing scores.",
    "query": "SELECT T2.School, T1.AvgScrWrite FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.AdmFName1 = 'Ricci' AND T2.AdmLName1 = 'Ulrich'",
    "relevant_table": {
      "satscores": {
        "ddl": "create table satscores( cds text primary key, foreign key(cds) references schools(CDSCode) text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "cds",
          "rtype",
          "sname",
          "dname",
          "cname",
          "enroll12",
          "NumTstTakr",
          "AvgScrRead",
          "AvgScrMath",
          "AvgScrWrite",
          "NumGE1500",
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate"
        ],
        "ddl": "create table merged_table( cds text primary key, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer, CDSCode text, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "old_new_table_mapping": {
      "satscores": "merged_table",
      "schools": "merged_table"
    },
    "new_table_primary_key": "cds",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.School, T1.AvgScrWrite FROM merged_table AS T1 WHERE T1.AdmFName1 = 'Ricci' AND T1.AdmLName1 = 'Ulrich'"
  },
  {
    "train_idx": 46,
    "db_id": "california_schools",
    "question": "Which state special schools have the highest number of enrollees from grades 1 through 12?",
    "query": "SELECT T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.DOC = 31 ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 1",
    "relevant_table": {
      "frpm": {
        "ddl": "create table frpm( CDSCode text primary key, foreign key(CDSCode) references schools(CDSCode) text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_school_data": {
        "columns": [
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate",
          "Academic Year",
          "County Code",
          "District Code",
          "School Code",
          "County Name",
          "District Name",
          "School Name_frpm",
          "District Type",
          "School Type",
          "Educational Option Type",
          "NSLP Provision Status",
          "Charter School (Y/N)",
          "Charter School Number",
          "Charter Funding Type",
          "IRC",
          "Low Grade",
          "High Grade",
          "Enrollment (K-12)",
          "Free Meal Count (K-12)",
          "Percent (%) Eligible Free (K-12)",
          "FRPM Count (K-12)",
          "Percent (%) Eligible FRPM (K-12)",
          "Enrollment (Ages 5-17)",
          "Free Meal Count (Ages 5-17)",
          "Percent (%) Eligible Free (Ages 5-17)",
          "FRPM Count (Ages 5-17)",
          "Percent (%) Eligible FRPM (Ages 5-17)",
          "2013-14 CALPADS Fall 1 Certification Status"
        ],
        "ddl": "create table merged_school_data( CDSCode text, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      }
    },
    "old_new_table_mapping": {
      "schools": "merged_school_data",
      "frpm": "merged_school_data"
    },
    "new_table_primary_key": "'CDSCode'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "'School Name_frpm'": {
        "old_table": "'frpm'",
        "old_column": "'School'"
      }
    },
    "new_gold_sql": "SELECT T1.School FROM merged_school_data AS T1 WHERE T1.DOC = 31 ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 1"
  },
  {
    "train_idx": 50,
    "db_id": "california_schools",
    "question": "What is the postal street address for the school with the 7th highest Math average? Indicate the school's name.",
    "query": "SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 6, 1",
    "relevant_table": {
      "satscores": {
        "ddl": "create table satscores( cds text primary key, foreign key(cds) references schools(CDSCode) text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_school_data": {
        "columns": [
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate",
          "cds",
          "rtype",
          "sname",
          "dname",
          "cname",
          "enroll12",
          "NumTstTakr",
          "AvgScrRead",
          "AvgScrMath",
          "AvgScrWrite",
          "NumGE1500"
        ],
        "ddl": "create table merged_school_data( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date, cds text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      }
    },
    "old_new_table_mapping": {
      "schools": "merged_school_data",
      "satscores": "merged_school_data"
    },
    "new_table_primary_key": "CDSCode",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.MailStreet, T1.School FROM merged_school_data AS T1 ORDER BY T1.AvgScrMath DESC LIMIT 6, 1"
  },
  {
    "train_idx": 51,
    "db_id": "california_schools",
    "question": "In which mailing street address can you find the school that has the lowest average score in reading? Also give the school's name.",
    "query": "SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1",
    "relevant_table": {
      "satscores": {
        "ddl": "create table satscores( cds text primary key, foreign key(cds) references schools(CDSCode) text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "cds",
          "rtype",
          "sname",
          "dname",
          "cname",
          "enroll12",
          "NumTstTakr",
          "AvgScrRead",
          "AvgScrMath",
          "AvgScrWrite",
          "NumGE1500",
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate"
        ],
        "ddl": "create table merged_table( cds text primary key, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer, CDSCode text, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "old_new_table_mapping": {
      "satscores": "merged_table",
      "schools": "merged_table"
    },
    "new_table_primary_key": "cds",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.MailStreet, T1.School FROM merged_table AS T1 WHERE T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1"
  },
  {
    "train_idx": 52,
    "db_id": "california_schools",
    "question": "What is the total number of schools whose total SAT scores are greater or equal to 1500 whose mailing city is Lakeport?",
    "query": "SELECT COUNT(T1.cds) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Lakeport' AND (T1.AvgScrRead + T1.AvgScrMath + T1.AvgScrWrite) >= 1500",
    "relevant_table": {
      "satscores": {
        "ddl": "create table satscores( cds text primary key, foreign key(cds) references schools(CDSCode) text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate",
          "cds",
          "rtype",
          "sname",
          "dname",
          "cname",
          "enroll12",
          "NumTstTakr",
          "AvgScrRead",
          "AvgScrMath",
          "AvgScrWrite",
          "NumGE1500"
        ],
        "ddl": "create table merged_table( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date, cds text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      }
    },
    "old_new_table_mapping": {
      "schools": "merged_table",
      "satscores": "merged_table"
    },
    "new_table_primary_key": "CDSCode",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(T1.CDSCode) FROM merged_table AS T1 WHERE T1.MailCity = 'Lakeport' AND (T1.AvgScrRead + T1.AvgScrMath + T1.AvgScrWrite) >= 1500"
  },
  {
    "train_idx": 53,
    "db_id": "california_schools",
    "question": "How many test takers are there at the school/s whose mailing city address is in Fresno?",
    "query": "SELECT T1.NumTstTakr FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Fresno'",
    "relevant_table": {
      "satscores": {
        "ddl": "create table satscores( cds text primary key, foreign key(cds) references schools(CDSCode) text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "cds",
          "rtype",
          "sname",
          "dname",
          "cname",
          "enroll12",
          "NumTstTakr",
          "AvgScrRead",
          "AvgScrMath",
          "AvgScrWrite",
          "NumGE1500",
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate"
        ],
        "ddl": "create table merged_table( cds text primary key, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer, CDSCode text, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "old_new_table_mapping": {
      "satscores": "merged_table",
      "schools": "merged_table"
    },
    "new_table_primary_key": "cds",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.NumTstTakr FROM merged_table AS T1 WHERE T1.MailCity = 'Fresno'"
  },
  {
    "train_idx": 57,
    "db_id": "california_schools",
    "question": "What is the phone number and extension number for the school that had the 333rd highest average writing score?",
    "query": "SELECT T2.Phone, T2.Ext FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrWrite DESC LIMIT 332, 1",
    "relevant_table": {
      "satscores": {
        "ddl": "create table satscores( cds text primary key, foreign key(cds) references schools(CDSCode) text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "cds",
          "rtype",
          "sname",
          "dname",
          "cname",
          "enroll12",
          "NumTstTakr",
          "AvgScrRead",
          "AvgScrMath",
          "AvgScrWrite",
          "NumGE1500",
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate"
        ],
        "ddl": "create table merged_table( cds text primary key, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer, CDSCode text, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "old_new_table_mapping": {
      "satscores": "merged_table",
      "schools": "merged_table"
    },
    "new_table_primary_key": "cds",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.Phone, T1.Ext FROM merged_table AS T1 ORDER BY T1.AvgScrWrite DESC LIMIT 332, 1"
  },
  {
    "train_idx": 62,
    "db_id": "california_schools",
    "question": "What is the total number of non-chartered schools in the county of Los Angeles with a percent (%) of eligible free meals for grades 1 through 12 that is less than 0.18%?",
    "query": "SELECT COUNT(T2.School) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.Charter = 0 AND CAST(T1.`Free Meal Count (K-12)` AS REAL) * 100 / T1.`Enrollment (K-12)` < 0.18",
    "relevant_table": {
      "frpm": {
        "ddl": "create table frpm( CDSCode text primary key, foreign key(CDSCode) references schools(CDSCode) text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_school_data": {
        "columns": [
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate",
          "Academic Year",
          "County Code",
          "District Code",
          "School Code",
          "County Name",
          "District Name",
          "School Name",
          "District Type",
          "School Type",
          "Educational Option Type",
          "NSLP Provision Status",
          "Charter School (Y/N)",
          "Charter School Number",
          "Charter Funding Type",
          "IRC",
          "Low Grade",
          "High Grade",
          "Enrollment (K-12)",
          "Free Meal Count (K-12)",
          "Percent (%) Eligible Free (K-12)",
          "FRPM Count (K-12)",
          "Percent (%) Eligible FRPM (K-12)",
          "Enrollment (Ages 5-17)",
          "Free Meal Count (Ages 5-17)",
          "Percent (%) Eligible Free (Ages 5-17)",
          "FRPM Count (Ages 5-17)",
          "Percent (%) Eligible FRPM (Ages 5-17)",
          "2013-14 CALPADS Fall 1 Certification Status"
        ],
        "ddl": "create table merged_school_data( CDSCode text, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      }
    },
    "old_new_table_mapping": {
      "schools": "merged_school_data",
      "frpm": "merged_school_data"
    },
    "new_table_primary_key": "'CDSCode'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(T1.School) FROM merged_school_data AS T1 WHERE T1.County = 'Los Angeles' AND T1.Charter = 0 AND CAST(T1.`Free Meal Count (K-12)` AS REAL) * 100 / T1.`Enrollment (K-12)` < 0.18"
  },
  {
    "train_idx": 71,
    "db_id": "california_schools",
    "question": "What is the district code for the School that does not offer a magnet program in the city of Fresno?",
    "query": "SELECT T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.City = 'Fresno' AND T2.Magnet = 0",
    "relevant_table": {
      "frpm": {
        "ddl": "create table frpm( CDSCode text primary key, foreign key(CDSCode) references schools(CDSCode) text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_school_data": {
        "columns": [
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate",
          "Academic Year",
          "County Code",
          "District Code_frpm",
          "School Code",
          "County Name",
          "District Name",
          "School Name",
          "District Type",
          "School Type",
          "Educational Option Type",
          "NSLP Provision Status",
          "Charter School (Y/N)",
          "Charter School Number",
          "Charter Funding Type",
          "IRC",
          "Low Grade",
          "High Grade",
          "Enrollment (K-12)",
          "Free Meal Count (K-12)",
          "Percent (%) Eligible Free (K-12)",
          "FRPM Count (K-12)",
          "Percent (%) Eligible FRPM (K-12)",
          "Enrollment (Ages 5-17)",
          "Free Meal Count (Ages 5-17)",
          "Percent (%) Eligible Free (Ages 5-17)",
          "FRPM Count (Ages 5-17)",
          "Percent (%) Eligible FRPM (Ages 5-17)",
          "2013-14 CALPADS Fall 1 Certification Status"
        ],
        "ddl": "create table merged_school_data( CDSCode text, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date, Academic Year text, County Code text, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      }
    },
    "old_new_table_mapping": {
      "schools": "merged_school_data",
      "frpm": "merged_school_data"
    },
    "new_table_primary_key": "'CDSCode'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "'District Code_frpm'": {
        "old_table": "'frpm'",
        "old_column": "'District Code'"
      }
    },
    "new_gold_sql": "SELECT T1.`District Code_frpm` FROM merged_school_data AS T1 WHERE T1.City = 'Fresno' AND T1.Magnet = 0"
  },
  {
    "train_idx": 72,
    "db_id": "california_schools",
    "question": "How many students from the ages of 5 to 17 are enrolled at the State Special School school in Fremont for the 2014-2015 academic year?",
    "query": "SELECT T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.EdOpsCode = 'SSS' AND T2.City = 'Fremont' AND T1.`Academic Year` BETWEEN 2014 AND 2015",
    "relevant_table": {
      "frpm": {
        "ddl": "create table frpm( CDSCode text primary key, foreign key(CDSCode) references schools(CDSCode) text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "CDSCode",
          "Academic Year",
          "County Code",
          "District Code",
          "School Code",
          "County Name",
          "District Name",
          "School Name",
          "District Type",
          "School Type",
          "Educational Option Type",
          "NSLP Provision Status",
          "Charter School (Y/N)",
          "Charter School Number",
          "Charter Funding Type",
          "IRC",
          "Low Grade",
          "High Grade",
          "Enrollment (K-12)",
          "Free Meal Count (K-12)",
          "Percent (%) Eligible Free (K-12)",
          "FRPM Count (K-12)",
          "Percent (%) Eligible FRPM (K-12)",
          "Enrollment (Ages 5-17)",
          "Free Meal Count (Ages 5-17)",
          "Percent (%) Eligible Free (Ages 5-17)",
          "FRPM Count (Ages 5-17)",
          "Percent (%) Eligible FRPM (Ages 5-17)",
          "2013-14 CALPADS Fall 1 Certification Status",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate"
        ],
        "ddl": "create table merged_table( CDSCode text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "old_new_table_mapping": {
      "frpm": "merged_table",
      "schools": "merged_table"
    },
    "new_table_primary_key": "'CDSCode'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.`Enrollment (Ages 5-17)` FROM merged_table AS T1 WHERE T1.EdOpsCode = 'SSS' AND T1.City = 'Fremont' AND T1.`Academic Year` BETWEEN 2014 AND 2015"
  },
  {
    "train_idx": 73,
    "db_id": "california_schools",
    "question": "What is the free or reduced price meal count for ages 5 to 17 in the Youth Authority School with a mailing street address of PO Box 1040?",
    "query": "SELECT T1.`FRPM Count (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.MailStreet = 'PO Box 1040' AND T2.SOCType = 'Youth Authority Facilities'",
    "relevant_table": {
      "frpm": {
        "ddl": "create table frpm( CDSCode text primary key, foreign key(CDSCode) references schools(CDSCode) text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "CDSCode",
          "Academic Year",
          "County Code",
          "District Code",
          "School Code",
          "County Name",
          "District Name",
          "School Name",
          "District Type",
          "School Type",
          "Educational Option Type",
          "NSLP Provision Status",
          "Charter School (Y/N)",
          "Charter School Number",
          "Charter Funding Type",
          "IRC",
          "Low Grade",
          "High Grade",
          "Enrollment (K-12)",
          "Free Meal Count (K-12)",
          "Percent (%) Eligible Free (K-12)",
          "FRPM Count (K-12)",
          "Percent (%) Eligible FRPM (K-12)",
          "Enrollment (Ages 5-17)",
          "Free Meal Count (Ages 5-17)",
          "Percent (%) Eligible Free (Ages 5-17)",
          "FRPM Count (Ages 5-17)",
          "Percent (%) Eligible FRPM (Ages 5-17)",
          "2013-14 CALPADS Fall 1 Certification Status",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate"
        ],
        "ddl": "create table merged_table( CDSCode text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "old_new_table_mapping": {
      "frpm": "merged_table",
      "schools": "merged_table"
    },
    "new_table_primary_key": "'CDSCode'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.`FRPM Count (Ages 5-17)` FROM merged_table AS T1 WHERE T1.MailStreet = 'PO Box 1040' AND T1.SOCType = 'Youth Authority Facilities'"
  },
  {
    "train_idx": 74,
    "db_id": "california_schools",
    "question": "What is the lowest grade for the District Special Education Consortia School with National Center for Educational Statistics school district identification number of 0613360?",
    "query": "SELECT MIN(T1.`Low Grade`) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.NCESDist = '0613360' AND T2.EdOpsCode = 'SPECON'",
    "relevant_table": {
      "frpm": {
        "ddl": "create table frpm( CDSCode text primary key, foreign key(CDSCode) references schools(CDSCode) text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_school_data": {
        "columns": [
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate",
          "Academic Year",
          "County Code",
          "District Code",
          "School Code",
          "County Name",
          "District Name",
          "School Name",
          "District Type",
          "School Type",
          "Educational Option Type",
          "NSLP Provision Status",
          "Charter School (Y/N)",
          "Charter School Number",
          "Charter Funding Type",
          "IRC",
          "Low Grade",
          "High Grade",
          "Enrollment (K-12)",
          "Free Meal Count (K-12)",
          "Percent (%) Eligible Free (K-12)",
          "FRPM Count (K-12)",
          "Percent (%) Eligible FRPM (K-12)",
          "Enrollment (Ages 5-17)",
          "Free Meal Count (Ages 5-17)",
          "Percent (%) Eligible Free (Ages 5-17)",
          "FRPM Count (Ages 5-17)",
          "Percent (%) Eligible FRPM (Ages 5-17)",
          "2013-14 CALPADS Fall 1 Certification Status"
        ],
        "ddl": "create table merged_school_data( CDSCode text, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      }
    },
    "old_new_table_mapping": {
      "schools": "merged_school_data",
      "frpm": "merged_school_data"
    },
    "new_table_primary_key": "'CDSCode'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT MIN(T1.`Low Grade`) FROM merged_school_data AS T1 WHERE T1.NCESDist = '0613360' AND T1.EdOpsCode = 'SPECON'"
  },
  {
    "train_idx": 75,
    "db_id": "california_schools",
    "question": "What is the educational level name for the schools with Breakfast Provision 2 in county code 37? Indicate the name of the school.",
    "query": "SELECT T2.EILName, T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`NSLP Provision Status` = 'Breakfast Provision 2' AND T1.`County Code` = 37",
    "relevant_table": {
      "frpm": {
        "ddl": "create table frpm( CDSCode text primary key, foreign key(CDSCode) references schools(CDSCode) text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_school_data": {
        "columns": [
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate",
          "Academic Year",
          "County Code",
          "District Code",
          "School Code",
          "County Name",
          "District Name",
          "School Name",
          "District Type",
          "School Type",
          "Educational Option Type",
          "NSLP Provision Status",
          "Charter School (Y/N)",
          "Charter School Number",
          "Charter Funding Type",
          "IRC",
          "Low Grade",
          "High Grade",
          "Enrollment (K-12)",
          "Free Meal Count (K-12)",
          "Percent (%) Eligible Free (K-12)",
          "FRPM Count (K-12)",
          "Percent (%) Eligible FRPM (K-12)",
          "Enrollment (Ages 5-17)",
          "Free Meal Count (Ages 5-17)",
          "Percent (%) Eligible Free (Ages 5-17)",
          "FRPM Count (Ages 5-17)",
          "Percent (%) Eligible FRPM (Ages 5-17)",
          "2013-14 CALPADS Fall 1 Certification Status"
        ],
        "ddl": "create table merged_school_data( CDSCode text, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      }
    },
    "old_new_table_mapping": {
      "schools": "merged_school_data",
      "frpm": "merged_school_data"
    },
    "new_table_primary_key": "'CDSCode'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.EILName, T1.School FROM merged_school_data AS T1 WHERE T1.`NSLP Provision Status` = 'Breakfast Provision 2' AND T1.`County Code` = 37"
  },
  {
    "train_idx": 76,
    "db_id": "california_schools",
    "question": "What is the city location of the high school level school with Lunch Provision 2 whose lowest grade is 9 and the highest grade is 12 in the county of Merced?",
    "query": "SELECT T2.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`NSLP Provision Status` = 'Lunch Provision 2' AND T2.County = 'Merced' AND T1.`Low Grade` = 9 AND T1.`High Grade` = 12 AND T2.EILCode = 'HS'",
    "relevant_table": {
      "frpm": {
        "ddl": "create table frpm( CDSCode text primary key, foreign key(CDSCode) references schools(CDSCode) text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_school_data": {
        "columns": [
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate",
          "Academic Year",
          "County Code",
          "District Code",
          "School Code",
          "County Name",
          "District Name",
          "School Name",
          "District Type",
          "School Type",
          "Educational Option Type",
          "NSLP Provision Status",
          "Charter School (Y/N)",
          "Charter School Number",
          "Charter Funding Type",
          "IRC",
          "Low Grade",
          "High Grade",
          "Enrollment (K-12)",
          "Free Meal Count (K-12)",
          "Percent (%) Eligible Free (K-12)",
          "FRPM Count (K-12)",
          "Percent (%) Eligible FRPM (K-12)",
          "Enrollment (Ages 5-17)",
          "Free Meal Count (Ages 5-17)",
          "Percent (%) Eligible Free (Ages 5-17)",
          "FRPM Count (Ages 5-17)",
          "Percent (%) Eligible FRPM (Ages 5-17)",
          "2013-14 CALPADS Fall 1 Certification Status"
        ],
        "ddl": "create table merged_school_data( CDSCode text, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      }
    },
    "old_new_table_mapping": {
      "schools": "merged_school_data",
      "frpm": "merged_school_data"
    },
    "new_table_primary_key": "'CDSCode'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.City FROM merged_school_data AS T1 WHERE T1.`NSLP Provision Status` = 'Lunch Provision 2' AND T1.County = 'Merced' AND T1.`Low Grade` = 9 AND T1.`High Grade` = 12 AND T1.EILCode = 'HS'"
  },
  {
    "train_idx": 77,
    "db_id": "california_schools",
    "question": "Which schools served a grade span of Kindergarten to 9th grade in the county of Los Angeles and what is its Percent (%) Eligible FRPM (Ages 5-17)?",
    "query": "SELECT T2.School, T1.`FRPM Count (Ages 5-17)` * 100 / T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.GSserved = 'K-9'",
    "relevant_table": {
      "frpm": {
        "ddl": "create table frpm( CDSCode text primary key, foreign key(CDSCode) references schools(CDSCode) text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_school_data": {
        "columns": [
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate",
          "Academic Year",
          "County Code",
          "District Code",
          "School Code",
          "County Name",
          "District Name",
          "School Name_frpm",
          "District Type",
          "School Type",
          "Educational Option Type",
          "NSLP Provision Status",
          "Charter School (Y/N)",
          "Charter School Number",
          "Charter Funding Type",
          "IRC",
          "Low Grade",
          "High Grade",
          "Enrollment (K-12)",
          "Free Meal Count (K-12)",
          "Percent (%) Eligible Free (K-12)",
          "FRPM Count (K-12)",
          "Percent (%) Eligible FRPM (K-12)",
          "Enrollment (Ages 5-17)",
          "Free Meal Count (Ages 5-17)",
          "Percent (%) Eligible Free (Ages 5-17)",
          "FRPM Count (Ages 5-17)",
          "Percent (%) Eligible FRPM (Ages 5-17)",
          "2013-14 CALPADS Fall 1 Certification Status"
        ],
        "ddl": "create table merged_school_data( CDSCode text, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      }
    },
    "old_new_table_mapping": {
      "schools": "merged_school_data",
      "frpm": "merged_school_data"
    },
    "new_table_primary_key": "'CDSCode'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "'School Name_frpm'": {
        "old_table": "'frpm'",
        "old_column": "'School'"
      }
    },
    "new_gold_sql": "SELECT T1.School, T1.`FRPM Count (Ages 5-17)` * 100 / T1.`Enrollment (Ages 5-17)` FROM merged_school_data AS T1 WHERE T1.County = 'Los Angeles' AND T1.GSserved = 'K-9'"
  },
  {
    "train_idx": 80,
    "db_id": "california_schools",
    "question": "What is the school type of the school with the highest latitude? Indicate the name of the school as well as the latitude coordinates.",
    "query": "SELECT T1.`School Type`, T1.`School Name`, T2.Latitude FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.Latitude DESC LIMIT 1",
    "relevant_table": {
      "frpm": {
        "ddl": "create table frpm( CDSCode text primary key, foreign key(CDSCode) references schools(CDSCode) text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_school_data": {
        "columns": [
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate",
          "Academic Year",
          "County Code",
          "District Code",
          "School Code",
          "County Name",
          "District Name",
          "School Name_frpm",
          "District Type",
          "School Type_frpm",
          "Educational Option Type",
          "NSLP Provision Status",
          "Charter School (Y/N)",
          "Charter School Number",
          "Charter Funding Type",
          "IRC",
          "Low Grade",
          "High Grade",
          "Enrollment (K-12)",
          "Free Meal Count (K-12)",
          "Percent (%) Eligible Free (K-12)",
          "FRPM Count (K-12)",
          "Percent (%) Eligible FRPM (K-12)",
          "Enrollment (Ages 5-17)",
          "Free Meal Count (Ages 5-17)",
          "Percent (%) Eligible Free (Ages 5-17)",
          "FRPM Count (Ages 5-17)",
          "Percent (%) Eligible FRPM (Ages 5-17)",
          "2013-14 CALPADS Fall 1 Certification Status"
        ],
        "ddl": "create table merged_school_data( CDSCode text, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, District Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      }
    },
    "old_new_table_mapping": {
      "schools": "merged_school_data",
      "frpm": "merged_school_data"
    },
    "new_table_primary_key": "'CDSCode'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "'School Name_frpm', 'School Type_frpm'": {
        "old_table": "'frpm', 'frpm'",
        "old_column": "'School Name', 'School Type'"
      }
    },
    "new_gold_sql": "SELECT T1.`School Type_frpm`, T1.`School Name_frpm`, T1.Latitude FROM merged_school_data AS T1 ORDER BY T1.Latitude DESC LIMIT 1"
  },
  {
    "train_idx": 81,
    "db_id": "california_schools",
    "question": "In which city can you find the school in the state of California with the lowest latitude coordinates and what is its lowest grade? Indicate the school name.",
    "query": "SELECT T2.City, T1.`Low Grade`, T1.`School Name` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.State = 'CA' ORDER BY T2.Latitude ASC LIMIT 1",
    "relevant_table": {
      "frpm": {
        "ddl": "create table frpm( CDSCode text primary key, foreign key(CDSCode) references schools(CDSCode) text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_school_data": {
        "columns": [
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate",
          "Academic Year",
          "County Code",
          "District Code",
          "School Code",
          "County Name_frpm",
          "District Name",
          "School Name_frpm",
          "District Type",
          "School Type",
          "Educational Option Type",
          "NSLP Provision Status",
          "Charter School (Y/N)",
          "Charter School Number",
          "Charter Funding Type",
          "IRC",
          "Low Grade",
          "High Grade",
          "Enrollment (K-12)",
          "Free Meal Count (K-12)",
          "Percent (%) Eligible Free (K-12)",
          "FRPM Count (K-12)",
          "Percent (%) Eligible FRPM (K-12)",
          "Enrollment (Ages 5-17)",
          "Free Meal Count (Ages 5-17)",
          "Percent (%) Eligible Free (Ages 5-17)",
          "FRPM Count (Ages 5-17)",
          "Percent (%) Eligible FRPM (Ages 5-17)",
          "2013-14 CALPADS Fall 1 Certification Status"
        ],
        "ddl": "create table merged_school_data( CDSCode text, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date, Academic Year text, County Code text, District Code integer, School Code text, District Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      }
    },
    "old_new_table_mapping": {
      "schools": "merged_school_data",
      "frpm": "merged_school_data"
    },
    "new_table_primary_key": "'CDSCode'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "'County Name_frpm', 'School Name_frpm'": {
        "old_table": "'frpm', 'frpm'",
        "old_column": "'County Name', 'School Name'"
      }
    },
    "new_gold_sql": "SELECT T1.City, T1.`Low Grade`, T1.`School Name_frpm` FROM merged_school_data AS T1 WHERE T1.State = 'CA' ORDER BY T1.Latitude ASC LIMIT 1"
  },
  {
    "train_idx": 83,
    "db_id": "california_schools",
    "question": "Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city.",
    "query": "SELECT T2.City, COUNT(T2.CDSCode) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.Magnet = 1 AND T2.GSoffered = 'K-8' AND T1.`NSLP Provision Status` = 'Multiple Provision Types' GROUP BY T2.City",
    "relevant_table": {
      "frpm": {
        "ddl": "create table frpm( CDSCode text primary key, foreign key(CDSCode) references schools(CDSCode) text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_school_data": {
        "columns": [
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate",
          "Academic Year",
          "County Code",
          "District Code",
          "School Code",
          "County Name",
          "District Name",
          "School Name",
          "District Type",
          "School Type",
          "Educational Option Type",
          "NSLP Provision Status",
          "Charter School (Y/N)",
          "Charter School Number",
          "Charter Funding Type",
          "IRC",
          "Low Grade",
          "High Grade",
          "Enrollment (K-12)",
          "Free Meal Count (K-12)",
          "Percent (%) Eligible Free (K-12)",
          "FRPM Count (K-12)",
          "Percent (%) Eligible FRPM (K-12)",
          "Enrollment (Ages 5-17)",
          "Free Meal Count (Ages 5-17)",
          "Percent (%) Eligible Free (Ages 5-17)",
          "FRPM Count (Ages 5-17)",
          "Percent (%) Eligible FRPM (Ages 5-17)",
          "2013-14 CALPADS Fall 1 Certification Status"
        ],
        "ddl": "create table merged_school_data( CDSCode text, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      }
    },
    "old_new_table_mapping": {
      "schools": "merged_school_data",
      "frpm": "merged_school_data"
    },
    "new_table_primary_key": "'CDSCode'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT merged_school_data.City, COUNT(merged_school_data.CDSCode) FROM merged_school_data WHERE merged_school_data.Magnet = 1 AND merged_school_data.GSoffered = 'K-8' AND merged_school_data.`NSLP Provision Status` = 'Multiple Provision Types' GROUP BY merged_school_data.City"
  },
  {
    "train_idx": 85,
    "db_id": "california_schools",
    "question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school.",
    "query": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'",
    "relevant_table": {
      "frpm": {
        "ddl": "create table frpm( CDSCode text primary key, foreign key(CDSCode) references schools(CDSCode) text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "CDSCode",
          "Academic Year",
          "County Code",
          "District Code",
          "School Code",
          "County Name",
          "District Name",
          "School Name",
          "District Type",
          "School Type",
          "Educational Option Type",
          "NSLP Provision Status",
          "Charter School (Y/N)",
          "Charter School Number",
          "Charter Funding Type",
          "IRC",
          "Low Grade",
          "High Grade",
          "Enrollment (K-12)",
          "Free Meal Count (K-12)",
          "Percent (%) Eligible Free (K-12)",
          "FRPM Count (K-12)",
          "Percent (%) Eligible FRPM (K-12)",
          "Enrollment (Ages 5-17)",
          "Free Meal Count (Ages 5-17)",
          "Percent (%) Eligible Free (Ages 5-17)",
          "FRPM Count (Ages 5-17)",
          "Percent (%) Eligible FRPM (Ages 5-17)",
          "2013-14 CALPADS Fall 1 Certification Status",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate"
        ],
        "ddl": "create table merged_table( CDSCode text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "old_new_table_mapping": {
      "frpm": "merged_table",
      "schools": "merged_table"
    },
    "new_table_primary_key": "'CDSCode'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM merged_table AS T1 WHERE T1.AdmFName1 = 'Alusine'"
  },
  {
    "train_idx": 87,
    "db_id": "california_schools",
    "question": "What are the valid e-mail addresses of the administrator of the school located in the San Bernardino county, City of San Bernardino City Unified that opened between 1/1/2009 to 12/31/2010 whose school types are public Intermediate/Middle Schools and Unified Schools?",
    "query": "SELECT T2.AdmEmail1, T2.AdmEmail2 FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'San Bernardino' AND T2.City = 'San Bernardino' AND T2.DOC = 54 AND strftime('%Y', T2.OpenDate) BETWEEN '2009' AND '2010' AND T2.SOC = 62",
    "relevant_table": {
      "frpm": {
        "ddl": "create table frpm( CDSCode text primary key, foreign key(CDSCode) references schools(CDSCode) text, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "CDSCode",
          "Academic Year",
          "County Code",
          "District Code",
          "School Code",
          "County Name",
          "District Name",
          "School Name",
          "District Type",
          "School Type",
          "Educational Option Type",
          "NSLP Provision Status",
          "Charter School (Y/N)",
          "Charter School Number",
          "Charter Funding Type",
          "IRC",
          "Low Grade",
          "High Grade",
          "Enrollment (K-12)",
          "Free Meal Count (K-12)",
          "Percent (%) Eligible Free (K-12)",
          "FRPM Count (K-12)",
          "Percent (%) Eligible FRPM (K-12)",
          "Enrollment (Ages 5-17)",
          "Free Meal Count (Ages 5-17)",
          "Percent (%) Eligible Free (Ages 5-17)",
          "FRPM Count (Ages 5-17)",
          "Percent (%) Eligible FRPM (Ages 5-17)",
          "2013-14 CALPADS Fall 1 Certification Status",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate"
        ],
        "ddl": "create table merged_table( CDSCode text primary key, Academic Year text, County Code text, District Code integer, School Code text, County Name text, District Name text, School Name text, District Type text, School Type text, Educational Option Type text, NSLP Provision Status text, Charter School (Y/N) integer, Charter School Number text, Charter Funding Type text, IRC integer, Low Grade text, High Grade text, Enrollment (K-12) real, Free Meal Count (K-12) real, Percent (%) Eligible Free (K-12) real, FRPM Count (K-12) real, Percent (%) Eligible FRPM (K-12) real, Enrollment (Ages 5-17) real, Free Meal Count (Ages 5-17) real, Percent (%) Eligible Free (Ages 5-17) real, FRPM Count (Ages 5-17) real, Percent (%) Eligible FRPM (Ages 5-17) real, 2013-14 CALPADS Fall 1 Certification Status integer, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "old_new_table_mapping": {
      "frpm": "merged_table",
      "schools": "merged_table"
    },
    "new_table_primary_key": "CDSCode",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.AdmEmail1, T1.AdmEmail2 FROM merged_table AS T1 WHERE T1.County = 'San Bernardino' AND T1.City = 'San Bernardino' AND T1.DOC = 54 AND strftime('%Y', T1.OpenDate) BETWEEN '2009' AND '2010' AND T1.SOC = 62"
  },
  {
    "train_idx": 88,
    "db_id": "california_schools",
    "question": "What is the administrator's email address for the school with the highest number of test takers who received SAT scores of at least 1500?Provide the name of the school.",
    "query": "SELECT T2.AdmEmail1, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
    "relevant_table": {
      "satscores": {
        "ddl": "create table satscores( cds text primary key, foreign key(cds) references schools(CDSCode) text, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer)"
      },
      "schools": {
        "ddl": "create table schools( CDSCode text primary key, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "cds",
          "rtype",
          "sname",
          "dname",
          "cname",
          "enroll12",
          "NumTstTakr",
          "AvgScrRead",
          "AvgScrMath",
          "AvgScrWrite",
          "NumGE1500",
          "CDSCode",
          "NCESDist",
          "NCESSchool",
          "StatusType",
          "County",
          "District",
          "School",
          "Street",
          "StreetAbr",
          "City",
          "Zip",
          "State",
          "MailStreet",
          "MailStrAbr",
          "MailCity",
          "MailZip",
          "MailState",
          "Phone",
          "Ext",
          "Website",
          "OpenDate",
          "ClosedDate",
          "Charter",
          "CharterNum",
          "FundingType",
          "DOC",
          "DOCType",
          "SOC",
          "SOCType",
          "EdOpsCode",
          "EdOpsName",
          "EILCode",
          "EILName",
          "GSoffered",
          "GSserved",
          "Virtual",
          "Magnet",
          "Latitude",
          "Longitude",
          "AdmFName1",
          "AdmLName1",
          "AdmEmail1",
          "AdmFName2",
          "AdmLName2",
          "AdmEmail2",
          "AdmFName3",
          "AdmLName3",
          "AdmEmail3",
          "LastUpdate"
        ],
        "ddl": "create table merged_table( cds text primary key, rtype text, sname text, dname text, cname text, enroll12 integer, NumTstTakr integer, AvgScrRead integer, AvgScrMath integer, AvgScrWrite integer, NumGE1500 integer, CDSCode text, NCESDist text, NCESSchool text, StatusType text, County text, District text, School text, Street text, StreetAbr text, City text, Zip text, State text, MailStreet text, MailStrAbr text, MailCity text, MailZip text, MailState text, Phone text, Ext text, Website text, OpenDate date, ClosedDate date, Charter integer, CharterNum text, FundingType text, DOC text, DOCType text, SOC text, SOCType text, EdOpsCode text, EdOpsName text, EILCode text, EILName text, GSoffered text, GSserved text, Virtual text, Magnet integer, Latitude real, Longitude real, AdmFName1 text, AdmLName1 text, AdmEmail1 text, AdmFName2 text, AdmLName2 text, AdmEmail2 text, AdmFName3 text, AdmLName3 text, AdmEmail3 text, LastUpdate date)"
      }
    },
    "old_new_table_mapping": {
      "satscores": "merged_table",
      "schools": "merged_table"
    },
    "new_table_primary_key": "cds",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.AdmEmail1, T1.School FROM merged_table AS T1 ORDER BY T1.NumGE1500 DESC LIMIT 1"
  },
  {
    "train_idx": 89,
    "db_id": "financial",
    "question": "How many accounts who choose issuance after transaction are staying in East Bohemia region?",
    "query": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'east Bohemia' AND T2.frequency = 'POPLATEK PO OBRATU'",
    "relevant_table": {
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      }
    },
    "new_relevant_table": {
      "district_account": {
        "columns": [
          "account_id",
          "district_id",
          "frequency",
          "date",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16"
        ],
        "ddl": "create table district_account( account_id integer primary key, district_id integer, frequency text, date date, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "old_new_table_mapping": {
      "account": "district_account",
      "district": "district_account"
    },
    "new_table_primary_key": "account_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(account_id) FROM district_account WHERE A3 = 'east Bohemia' AND frequency = 'POPLATEK PO OBRATU'"
  },
  {
    "train_idx": 90,
    "db_id": "financial",
    "question": "How many accounts who have region in Prague are eligible for loans?",
    "query": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A3 = 'Prague'",
    "relevant_table": {
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "loan": {
        "ddl": "create table loan( loan_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, amount integer, duration integer, payments real, status text)"
      },
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "district_id",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16",
          "loan_id",
          "account_id",
          "date",
          "amount",
          "duration",
          "payments",
          "status"
        ],
        "ddl": "create table merged_table( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer, loan_id integer, foreign key(account_id) references account(account_id) integer, date date, amount integer, duration integer, payments real, status text)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references merged_table(district_id) integer, frequency text, date date)"
      }
    },
    "old_new_table_mapping": {
      "district": "merged_table",
      "loan": "merged_table"
    },
    "new_table_primary_key": "district_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(T1.account_id) FROM merged_table AS T1 WHERE T1.A3 = 'Prague'"
  },
  {
    "train_idx": 92,
    "db_id": "financial",
    "question": "List out the no. of districts that have female average salary is more than 6000 but less than 10000?",
    "query": "SELECT COUNT(DISTINCT T2.district_id)  FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A11 BETWEEN 6000 AND 10000",
    "relevant_table": {
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      },
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "new_relevant_table": {
      "client_district": {
        "columns": [
          "client_id",
          "gender",
          "birth_date",
          "district_id",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16"
        ],
        "ddl": "create table client_district( client_id integer primary key, gender text, birth_date date, district_id integer, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "old_new_table_mapping": {
      "client": "client_district",
      "district": "client_district"
    },
    "new_table_primary_key": "client_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(DISTINCT district_id) FROM client_district WHERE gender = 'F' AND A11 BETWEEN 6000 AND 10000"
  },
  {
    "train_idx": 93,
    "db_id": "financial",
    "question": "How many male customers who are living in North Bohemia have average salary greater than 8000?",
    "query": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'north Bohemia' AND T2.A11 > 8000",
    "relevant_table": {
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      },
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "new_relevant_table": {
      "client_district": {
        "columns": [
          "client_id",
          "gender",
          "birth_date",
          "district_id",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16"
        ],
        "ddl": "create table client_district( client_id integer primary key, gender text, birth_date date, district_id integer, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "old_new_table_mapping": {
      "district": "client_district",
      "client": "client_district"
    },
    "new_table_primary_key": "client_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(client_id) FROM client_district WHERE gender = 'M' AND A3 = 'north Bohemia' AND A11 > 8000"
  },
  {
    "train_idx": 94,
    "db_id": "financial",
    "question": "List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary?",
    "query": "SELECT T1.account_id , ( SELECT MAX(A11) - MIN(A11) FROM district ) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T2.district_id = ( SELECT district_id FROM client WHERE gender = 'F' ORDER BY birth_date ASC LIMIT 1 ) ORDER BY T2.A11 DESC LIMIT 1",
    "relevant_table": {
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      },
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      }
    },
    "new_relevant_table": {
      "client_district": {
        "columns": [
          "client_id",
          "gender",
          "birth_date",
          "district_id",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16"
        ],
        "ddl": "create table client_district( client_id integer primary key, gender text, birth_date date, district_id integer, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references client_district(district_id) integer, frequency text, date date)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client_district(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      }
    },
    "old_new_table_mapping": {
      "client": "client_district",
      "district": "client_district"
    },
    "new_table_primary_key": "client_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.account_id , ( SELECT MAX(A11) - MIN(A11) FROM client_district ) FROM account AS T1 INNER JOIN disp AS T3 ON T1.account_id = T3.account_id INNER JOIN client_district AS T4 ON T3.client_id = T4.client_id WHERE T4.district_id = ( SELECT district_id FROM client_district WHERE gender = 'F' ORDER BY birth_date ASC LIMIT 1 ) ORDER BY T4.A11 DESC LIMIT 1"
  },
  {
    "train_idx": 95,
    "db_id": "financial",
    "question": "List out the account numbers of clients who are youngest and have highest average salary?",
    "query": "SELECT T1.account_id  FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 on T4.district_id = T1.district_id WHERE T2.client_id = ( SELECT client_id FROM client ORDER BY birth_date DESC LIMIT 1) GROUP BY T4.A11, T1.account_id",
    "relevant_table": {
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      },
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      },
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "disp_id",
          "client_id",
          "account_id",
          "type",
          "district_id",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16"
        ],
        "ddl": "create table merged_table( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text, district_id integer, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references merged_table(district_id) integer, frequency text, date date)"
      },
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references merged_table(district_id) integer)"
      }
    },
    "old_new_table_mapping": {
      "disp": "merged_table",
      "district": "merged_table"
    },
    "new_table_primary_key": "disp_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.account_id FROM merged_table AS T1 WHERE T1.client_id = ( SELECT client_id FROM client ORDER BY birth_date DESC LIMIT 1) GROUP BY T1.A11, T1.account_id"
  },
  {
    "train_idx": 96,
    "db_id": "financial",
    "question": "How many customers who choose statement of weekly issuance are Owner?",
    "query": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK TYDNE'",
    "relevant_table": {
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      }
    },
    "new_relevant_table": {
      "account_disp": {
        "columns": [
          "account_id",
          "district_id",
          "frequency",
          "date",
          "disp_id",
          "client_id",
          "type"
        ],
        "ddl": "create table account_disp( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date, disp_id integer, foreign key(client_id) references client(client_id) integer, type text)"
      }
    },
    "old_new_table_mapping": {
      "account": "account_disp",
      "disp": "account_disp"
    },
    "new_table_primary_key": "account_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(account_id) FROM account_disp WHERE type = 'OWNER' AND frequency = 'POPLATEK TYDNE'"
  },
  {
    "train_idx": 97,
    "db_id": "financial",
    "question": "List out the id number of client who choose statement of issuance after transaction are Disponent?",
    "query": "SELECT T2.client_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND T2.type = 'DISPONENT'",
    "relevant_table": {
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      }
    },
    "new_relevant_table": {
      "account_disp": {
        "columns": [
          "account_id",
          "district_id",
          "frequency",
          "date",
          "disp_id",
          "client_id",
          "type"
        ],
        "ddl": "create table account_disp( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date, disp_id integer, foreign key(client_id) references client(client_id) integer, type text)"
      }
    },
    "old_new_table_mapping": {
      "account": "account_disp",
      "disp": "account_disp"
    },
    "new_table_primary_key": "account_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT client_id FROM account_disp WHERE frequency = 'POPLATEK PO OBRATU' AND type = 'DISPONENT'"
  },
  {
    "train_idx": 98,
    "db_id": "financial",
    "question": "Among the accounts who have approved loan date in 1997, list out the accounts that have the lowest approved amount and choose weekly issuance statement.",
    "query": "SELECT T2.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1997' AND T2.frequency = 'POPLATEK TYDNE' ORDER BY T1.amount LIMIT 1",
    "relevant_table": {
      "loan": {
        "ddl": "create table loan( loan_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, amount integer, duration integer, payments real, status text)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      }
    },
    "new_relevant_table": {
      "account_loan": {
        "columns": [
          "account_id",
          "district_id",
          "frequency",
          "account_date",
          "loan_id",
          "loan_date",
          "amount",
          "duration",
          "payments",
          "status"
        ],
        "ddl": "create table account_loan( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, account_date date, loan_id integer, loan_date date, amount integer, duration integer, payments real, status text)"
      }
    },
    "old_new_table_mapping": {
      "account": "account_loan",
      "loan": "account_loan"
    },
    "new_table_primary_key": "account_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "account_date": {
        "old_table": "account",
        "old_column": "date"
      },
      "loan_date": {
        "old_table": "loan",
        "old_column": "date"
      }
    },
    "new_gold_sql": "SELECT account_id FROM account_loan WHERE STRFTIME('%Y', loan_date) = '1997' AND frequency = 'POPLATEK TYDNE' ORDER BY amount LIMIT 1"
  },
  {
    "train_idx": 99,
    "db_id": "financial",
    "question": "Among the accounts who have loan validity more than 12 months, list out the accounts that have the highest approved amount and have account opening date in 1993.",
    "query": "SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) = '1993' AND T1.duration > 12 ORDER BY T1.amount DESC LIMIT 1",
    "relevant_table": {
      "loan": {
        "ddl": "create table loan( loan_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, amount integer, duration integer, payments real, status text)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      }
    },
    "new_relevant_table": {
      "account_loan": {
        "columns": [
          "account_id",
          "district_id",
          "frequency",
          "date_account",
          "loan_id",
          "date_loan",
          "amount",
          "duration",
          "payments",
          "status"
        ],
        "ddl": "create table account_loan( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date_account date, loan_id integer, date_loan date, amount integer, duration integer, payments real, status text)"
      }
    },
    "old_new_table_mapping": {
      "account": "account_loan",
      "loan": "account_loan"
    },
    "new_table_primary_key": "account_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "date_account": {
        "old_table": "account",
        "old_column": "date"
      },
      "date_loan": {
        "old_table": "loan",
        "old_column": "date"
      }
    },
    "new_gold_sql": "SELECT account_id FROM account_loan WHERE STRFTIME('%Y', date_account) = '1993' AND duration > 12 ORDER BY amount DESC LIMIT 1"
  },
  {
    "train_idx": 100,
    "db_id": "financial",
    "question": "Among the account opened, how many female customers who were born before 1950 and stayed in Sokolov?",
    "query": "SELECT COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' AND STRFTIME('%Y', T2.birth_date) < '1950' AND T1.A2 = 'Sokolov'",
    "relevant_table": {
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      }
    },
    "new_relevant_table": {
      "district_client": {
        "columns": [
          "district_id",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16",
          "client_id",
          "gender",
          "birth_date"
        ],
        "ddl": "create table district_client( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer, client_id integer, gender text, birth_date date)"
      }
    },
    "old_new_table_mapping": {
      "district": "district_client",
      "client": "district_client"
    },
    "new_table_primary_key": "district_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(client_id) FROM district_client WHERE gender = 'F' AND STRFTIME('%Y', birth_date) < '1950' AND A2 = 'Sokolov'"
  },
  {
    "train_idx": 102,
    "db_id": "financial",
    "question": "State different accounts who have account opening date before 1997 and own an amount of money greater than 3000USD",
    "query": "SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) < '1997' AND T1.amount > 3000",
    "relevant_table": {
      "trans": {
        "ddl": "create table trans( trans_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, type text, operation text, amount integer, balance integer, k_symbol text, bank text, account integer)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      }
    },
    "new_relevant_table": {
      "trans_account": {
        "columns": [
          "trans_id",
          "account_id",
          "date_trans",
          "type",
          "operation",
          "amount",
          "balance",
          "k_symbol",
          "bank",
          "account",
          "district_id",
          "frequency",
          "date_account"
        ],
        "ddl": "create table trans_account( trans_id integer primary key, account_id integer, type text, operation text, amount integer, balance integer, k_symbol text, bank text, account integer, foreign key(district_id) references district(district_id) integer, frequency text)"
      }
    },
    "old_new_table_mapping": {
      "trans": "trans_account",
      "account": "trans_account"
    },
    "new_table_primary_key": "trans_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "date_trans, date_account": {
        "old_table": "trans, account",
        "old_column": "date from trans, date from account"
      }
    },
    "new_gold_sql": "SELECT DISTINCT account_id FROM trans_account WHERE STRFTIME('%Y', date_account) < '1997' AND amount > 3000"
  },
  {
    "train_idx": 103,
    "db_id": "financial",
    "question": "Which client issued his/her card in 1994/3/3, give his/her client id.",
    "query": "SELECT T2.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.issued = '1994-03-03'",
    "relevant_table": {
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      },
      "card": {
        "ddl": "create table card( card_id integer primary key, foreign key(disp_id) references disp(disp_id) integer, type text, issued date)"
      }
    },
    "new_relevant_table": {
      "client_disp": {
        "columns": [
          "disp_id",
          "client_id_disp",
          "account_id",
          "type",
          "client_id_client",
          "gender",
          "birth_date",
          "district_id"
        ],
        "ddl": "create table client_disp( disp_id integer primary key, client_id_disp integer, foreign key(account_id) references account(account_id) integer, type text, client_id_client integer, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      },
      "card": {
        "ddl": "create table card( card_id integer primary key, foreign key(disp_id) references client_disp(disp_id) integer, type text, issued date)"
      }
    },
    "old_new_table_mapping": {
      "disp": "client_disp",
      "client": "client_disp"
    },
    "new_table_primary_key": "disp_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "client_id_disp": {
        "old_table": "disp",
        "old_column": "client_id"
      },
      "client_id_client": {
        "old_table": "client",
        "old_column": "client_id"
      }
    },
    "new_gold_sql": "SELECT client_id_disp FROM client_disp WHERE disp_id IN (SELECT disp_id FROM card WHERE issued = '1994-03-03')"
  },
  {
    "train_idx": 104,
    "db_id": "financial",
    "question": "The transaction of 840 USD happened in 1998/10/14, when was this account opened?",
    "query": "SELECT T1.date FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.amount = 840 AND T2.date = '1998-10-14'",
    "relevant_table": {
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "trans": {
        "ddl": "create table trans( trans_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, type text, operation text, amount integer, balance integer, k_symbol text, bank text, account integer)"
      }
    },
    "new_relevant_table": {
      "account_trans": {
        "columns": [
          "account_id",
          "district_id",
          "frequency",
          "date_account",
          "trans_id",
          "date_trans",
          "type",
          "operation",
          "amount",
          "balance",
          "k_symbol",
          "bank",
          "account"
        ],
        "ddl": "create table account_trans( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, trans_id integer, type text, operation text, amount integer, balance integer, k_symbol text, bank text, account integer)"
      }
    },
    "old_new_table_mapping": {
      "account": "account_trans",
      "trans": "account_trans"
    },
    "new_table_primary_key": "account_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "date_account, date_trans": {
        "old_table": "account, trans",
        "old_column": "date, date"
      }
    },
    "new_gold_sql": "SELECT date_account FROM account_trans WHERE amount = 840 AND date_trans = '1998-10-14'"
  },
  {
    "train_idx": 105,
    "db_id": "financial",
    "question": "There was a loan approved in 1994/8/25, where was that account opened, give the district Id of the branch.",
    "query": "SELECT T1.district_id FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date = '1994-08-25'",
    "relevant_table": {
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "loan": {
        "ddl": "create table loan( loan_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, amount integer, duration integer, payments real, status text)"
      }
    },
    "new_relevant_table": {
      "account_loan": {
        "columns": [
          "loan_id",
          "account_id",
          "account_id_ref",
          "date_loan",
          "amount",
          "duration",
          "payments",
          "status",
          "district_id_ref",
          "frequency",
          "date_account"
        ],
        "ddl": "create table account_loan( loan_id integer primary key, account_id integer, amount integer, duration integer, payments real, status text, frequency text)"
      }
    },
    "old_new_table_mapping": {
      "loan": "account_loan",
      "account": "account_loan"
    },
    "new_table_primary_key": "loan_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "account_id_ref, date_loan, date_account": {
        "old_table": "loan, account",
        "old_column": "account_id, date"
      }
    },
    "new_gold_sql": "SELECT T1.district_id_ref FROM account_loan AS T1 WHERE T1.date_loan = '1994-08-25'"
  },
  {
    "train_idx": 106,
    "db_id": "financial",
    "question": "What is the biggest amount of transaction that the client whose card was opened in 1996/10/21 made?",
    "query": "SELECT T4.amount FROM card AS T1 JOIN disp AS T2 ON T1.disp_id = T2.disp_id JOIN account AS T3 on T2.account_id = T3.account_id JOIN trans AS T4 on T3.account_id = T4.account_id WHERE T1.issued = '1996-10-21' ORDER BY T4.amount DESC LIMIT 1",
    "relevant_table": {
      "card": {
        "ddl": "create table card( card_id integer primary key, foreign key(disp_id) references disp(disp_id) integer, type text, issued date)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "trans": {
        "ddl": "create table trans( trans_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, type text, operation text, amount integer, balance integer, k_symbol text, bank text, account integer)"
      }
    },
    "new_relevant_table": {
      "card_account": {
        "columns": [
          "account_id",
          "district_id",
          "frequency",
          "date",
          "card_id",
          "disp_id",
          "type",
          "issued"
        ],
        "ddl": "create table card_account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date, card_id integer, foreign key(disp_id) references disp(disp_id) integer, type text, issued date)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references card_account(account_id) integer, type text)"
      },
      "trans": {
        "ddl": "create table trans( trans_id integer primary key, foreign key(account_id) references card_account(account_id) integer, date date, type text, operation text, amount integer, balance integer, k_symbol text, bank text, card_account integer)"
      }
    },
    "old_new_table_mapping": {
      "account": "card_account",
      "card": "card_account"
    },
    "new_table_primary_key": "account_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T4.amount FROM card_account AS T1 JOIN disp AS T2 ON T1.disp_id = T2.disp_id JOIN trans AS T4 on T1.account_id = T4.account_id WHERE T1.issued = '1996-10-21' ORDER BY T4.amount DESC LIMIT 1"
  },
  {
    "train_idx": 107,
    "db_id": "financial",
    "question": "What is the gender of the oldest client who opened his/her account in the highest average salary branch?",
    "query": "SELECT T2.gender FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id ORDER BY T1.A11 DESC, T2.birth_date ASC LIMIT 1",
    "relevant_table": {
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      }
    },
    "new_relevant_table": {
      "client_district": {
        "columns": [
          "client_id",
          "gender",
          "birth_date",
          "district_id",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16"
        ],
        "ddl": "create table client_district( client_id integer primary key, gender text, birth_date date, district_id integer, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "old_new_table_mapping": {
      "client": "client_district",
      "district": "client_district"
    },
    "new_table_primary_key": "client_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT gender FROM client_district ORDER BY A11 DESC, birth_date ASC LIMIT 1"
  },
  {
    "train_idx": 108,
    "db_id": "financial",
    "question": "For the client who applied the biggest loan, what was his/her first amount of transaction after opened the account?",
    "query": "SELECT T3.amount FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id ORDER BY T1.amount DESC, T3.date ASC LIMIT 1",
    "relevant_table": {
      "loan": {
        "ddl": "create table loan( loan_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, amount integer, duration integer, payments real, status text)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "trans": {
        "ddl": "create table trans( trans_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, type text, operation text, amount integer, balance integer, k_symbol text, bank text, account integer)"
      }
    },
    "new_relevant_table": {
      "loan_account": {
        "columns": [
          "loan_id",
          "account_id",
          "loan_date",
          "amount",
          "duration",
          "payments",
          "status",
          "district_id",
          "frequency",
          "account_date"
        ],
        "ddl": "create table loan_account( loan_id integer primary key, account_id integer, loan_date date, amount integer, duration integer, payments real, status text, foreign key(district_id) references district(district_id) integer, frequency text, account_date date)"
      },
      "trans": {
        "ddl": "create table trans( trans_id integer primary key, foreign key(account_id) references loan_account(account_id) integer, date date, type text, operation text, amount integer, balance integer, k_symbol text, bank text, loan_account integer)"
      }
    },
    "old_new_table_mapping": {
      "loan": "loan_account",
      "account": "loan_account"
    },
    "new_table_primary_key": "loan_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "loan_date": {
        "old_table": "loan",
        "old_column": "date"
      },
      "account_date": {
        "old_table": "account",
        "old_column": "date"
      }
    },
    "new_gold_sql": "SELECT T3.amount FROM loan_account AS T1 INNER JOIN trans AS T3 ON T1.account_id = T3.account_id ORDER BY T1.amount DESC, T3.date ASC LIMIT 1"
  },
  {
    "train_idx": 109,
    "db_id": "financial",
    "question": "How many clients opened their accounts in Jesenik branch were women?",
    "query": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A2 = 'Jesenik'",
    "relevant_table": {
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      },
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "new_relevant_table": {
      "client_district": {
        "columns": [
          "client_id",
          "gender",
          "birth_date",
          "district_id",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16"
        ],
        "ddl": "create table client_district( client_id integer primary key, gender text, birth_date date, district_id integer, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "old_new_table_mapping": {
      "district": "client_district",
      "client": "client_district"
    },
    "new_table_primary_key": "client_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(client_id) FROM client_district WHERE gender = 'F' AND A2 = 'Jesenik'"
  },
  {
    "train_idx": 110,
    "db_id": "financial",
    "question": "What is the disposition id of the client who made 5100 USD transaction in 1998/9/2?",
    "query": "SELECT T1.disp_id FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.date='1997-08-20' AND T3.amount = 5100",
    "relevant_table": {
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "trans": {
        "ddl": "create table trans( trans_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, type text, operation text, amount integer, balance integer, k_symbol text, bank text, account integer)"
      }
    },
    "new_relevant_table": {
      "account_trans": {
        "columns": [
          "trans_id",
          "account_id",
          "date_trans",
          "type",
          "operation",
          "amount",
          "balance",
          "k_symbol",
          "bank",
          "account",
          "district_id",
          "frequency",
          "date_account"
        ],
        "ddl": "create table account_trans( trans_id integer primary key, account_id integer, type text, operation text, amount integer, balance integer, k_symbol text, bank text, account integer, foreign key(district_id) references district(district_id) integer, frequency text)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account_trans(account_id) integer, type text)"
      }
    },
    "old_new_table_mapping": {
      "trans": "account_trans",
      "account": "account_trans"
    },
    "new_table_primary_key": "trans_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "date_trans, date_account": {
        "old_table": "trans, account",
        "old_column": "date from trans table, date from account table"
      }
    },
    "new_gold_sql": "SELECT T1.disp_id FROM disp AS T1 INNER JOIN account_trans AS T2 ON T1.account_id = T2.account_id WHERE T2.date_trans='1997-08-20' AND T2.amount = 5100"
  },
  {
    "train_idx": 111,
    "db_id": "financial",
    "question": "How many accounts were opened in Litomerice in 1996?",
    "query": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) = '1996' AND T1.A2 = 'Litomerice'",
    "relevant_table": {
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      }
    },
    "new_relevant_table": {
      "district_account": {
        "columns": [
          "account_id",
          "district_id",
          "frequency",
          "date",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16"
        ],
        "ddl": "create table district_account( account_id integer primary key, district_id integer, frequency text, date date, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "old_new_table_mapping": {
      "account": "district_account",
      "district": "district_account"
    },
    "new_table_primary_key": "account_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(account_id) FROM district_account WHERE STRFTIME('%Y', date) = '1996' AND A2 = 'Litomerice'"
  },
  {
    "train_idx": 112,
    "db_id": "financial",
    "question": "For the female client who was born in 1976/1/29, which district did she opened her account?",
    "query": "SELECT T1.A2 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.birth_date = '1976-01-29' AND T2.gender = 'F'",
    "relevant_table": {
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      }
    },
    "new_relevant_table": {
      "district_client": {
        "columns": [
          "district_id",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16",
          "client_id",
          "gender",
          "birth_date"
        ],
        "ddl": "create table district_client( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer, client_id integer, gender text, birth_date date)"
      }
    },
    "old_new_table_mapping": {
      "district": "district_client",
      "client": "district_client"
    },
    "new_table_primary_key": "district_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.A2 FROM district_client AS T1 WHERE T1.birth_date = '1976-01-29' AND T1.gender = 'F'"
  },
  {
    "train_idx": 113,
    "db_id": "financial",
    "question": "For the client who applied 98832 USD loan in 1996/1/3, when was his/her birthday?",
    "query": "SELECT T4.birth_date FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T1.date = '1996-01-03' AND T1.amount = 98832",
    "relevant_table": {
      "loan": {
        "ddl": "create table loan( loan_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, amount integer, duration integer, payments real, status text)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      },
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      }
    },
    "new_relevant_table": {
      "client_account": {
        "columns": [
          "client_id",
          "gender",
          "birth_date",
          "district_id_client",
          "account_id",
          "district_id_account",
          "frequency",
          "date"
        ],
        "ddl": "create table client_account( client_id integer primary key, gender text, birth_date date, account_id integer, frequency text, date date)"
      },
      "loan": {
        "ddl": "create table loan( loan_id integer primary key, foreign key(account_id) references client_account(account_id) integer, date date, amount integer, duration integer, payments real, status text)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client_account(client_id) integer, foreign key(account_id) references client_account(account_id) integer, type text)"
      }
    },
    "old_new_table_mapping": {
      "client": "client_account",
      "account": "client_account"
    },
    "new_table_primary_key": "client_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT client_account.birth_date FROM loan INNER JOIN client_account ON loan.account_id = client_account.account_id WHERE loan.date = '1996-01-03' AND loan.amount = 98832"
  },
  {
    "train_idx": 114,
    "db_id": "financial",
    "question": "For the first client who opened his/her account in Prague, what is his/her account ID?",
    "query": "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague' ORDER BY T1.date ASC LIMIT 1",
    "relevant_table": {
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "new_relevant_table": {
      "account_district": {
        "columns": [
          "account_id",
          "district_id",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16",
          "frequency",
          "date"
        ],
        "ddl": "create table account_district( account_id integer primary key, district_id integer, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer, frequency text, date date)"
      }
    },
    "old_new_table_mapping": {
      "district": "account_district",
      "account": "account_district"
    },
    "new_table_primary_key": "account_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT account_id FROM account_district WHERE A3 = 'Prague' ORDER BY date ASC LIMIT 1"
  },
  {
    "train_idx": 115,
    "db_id": "financial",
    "question": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients?",
    "query": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' GROUP BY T2.A4 ORDER BY T2.A4 DESC LIMIT 1",
    "relevant_table": {
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      },
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "new_relevant_table": {
      "client_district": {
        "columns": [
          "client_id",
          "gender",
          "birth_date",
          "district_id",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16"
        ],
        "ddl": "create table client_district( client_id integer primary key, gender text, birth_date date, district_id integer, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "old_new_table_mapping": {
      "district": "client_district",
      "client": "client_district"
    },
    "new_table_primary_key": "client_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(client_district.gender = 'M') AS REAL) * 100 / COUNT(client_district.client_id) FROM client_district WHERE client_district.A3 = 'south Bohemia' GROUP BY client_district.A4 ORDER BY client_district.A4 DESC LIMIT 1"
  },
  {
    "train_idx": 116,
    "db_id": "financial",
    "question": "For the client whose loan was approved first in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27?",
    "query": "SELECT CAST((SUM(IIF(T3.date = '1998-12-27', T3.balance, 0)) - SUM(IIF(T3.date = '1993-03-22', T3.balance, 0))) AS REAL) * 100 / SUM(IIF(T3.date = '1993-03-22', T3.balance, 0)) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T3.account_id = T2.account_id WHERE T1.date = '1993-07-05'",
    "relevant_table": {
      "loan": {
        "ddl": "create table loan( loan_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, amount integer, duration integer, payments real, status text)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "trans": {
        "ddl": "create table trans( trans_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, type text, operation text, amount integer, balance integer, k_symbol text, bank text, account integer)"
      }
    },
    "new_relevant_table": {
      "trans_loan": {
        "columns": [
          "trans_id",
          "account_id_trans",
          "date_trans",
          "type",
          "operation",
          "amount_trans",
          "balance",
          "k_symbol",
          "bank",
          "account",
          "loan_id",
          "account_id_loan",
          "date_loan",
          "amount_loan",
          "duration",
          "payments",
          "status"
        ],
        "ddl": "create table trans_loan( trans_id integer primary key, type text, operation text, balance integer, k_symbol text, bank text, account integer, loan_id integer, duration integer, payments real, status text)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      }
    },
    "old_new_table_mapping": {
      "trans": "trans_loan",
      "loan": "trans_loan"
    },
    "new_table_primary_key": "trans_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST((SUM(IIF(trans_loan.date_trans = '1998-12-27', trans_loan.balance, 0)) - SUM(IIF(trans_loan.date_trans = '1993-03-22', trans_loan.balance, 0))) AS REAL) * 100 / SUM(IIF(trans_loan.date_trans = '1993-03-22', trans_loan.balance, 0)) FROM trans_loan WHERE trans_loan.date_loan = '1993-07-05'"
  },
  {
    "train_idx": 119,
    "db_id": "financial",
    "question": "For accounts in 1993 with statement issued after transaction, list the account ID, district name and district region.",
    "query": "SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND STRFTIME('%Y', T1.date)= '1993'",
    "relevant_table": {
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "new_relevant_table": {
      "account_district": {
        "columns": [
          "account_id",
          "district_id",
          "frequency",
          "date",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16"
        ],
        "ddl": "create table account_district( account_id integer primary key, district_id integer, frequency text, date date, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "old_new_table_mapping": {
      "account": "account_district",
      "district": "account_district"
    },
    "new_table_primary_key": "account_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.account_id, T1.A2, T1.A3 FROM account_district AS T1 WHERE T1.frequency = 'POPLATEK PO OBRATU' AND STRFTIME('%Y', T1.date)= '1993'"
  },
  {
    "train_idx": 120,
    "db_id": "financial",
    "question": "From Year 1995 to 2000, who are the accounts holders from 'east Bohemia'. State the account ID the frequency of statement issuance.",
    "query": "SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.date) BETWEEN '1995' AND '2000'",
    "relevant_table": {
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "new_relevant_table": {
      "account_district": {
        "columns": [
          "account_id",
          "district_id",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16",
          "frequency",
          "date"
        ],
        "ddl": "create table account_district( account_id integer primary key, district_id integer, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer, frequency text, date date)"
      }
    },
    "old_new_table_mapping": {
      "district": "account_district",
      "account": "account_district"
    },
    "new_table_primary_key": "account_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.account_id, T1.frequency FROM account_district AS T1 WHERE T1.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.date) BETWEEN '1995' AND '2000'"
  },
  {
    "train_idx": 121,
    "db_id": "financial",
    "question": "List account ID and account opening date for accounts from 'Prachatice'.",
    "query": "SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Prachatice'",
    "relevant_table": {
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "new_relevant_table": {
      "account_district": {
        "columns": [
          "account_id",
          "district_id",
          "frequency",
          "date",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16"
        ],
        "ddl": "create table account_district( account_id integer primary key, district_id integer, frequency text, date date, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "old_new_table_mapping": {
      "district": "account_district",
      "account": "account_district"
    },
    "new_table_primary_key": "account_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT account_id, date FROM account_district WHERE A2 = 'Prachatice'"
  },
  {
    "train_idx": 122,
    "db_id": "financial",
    "question": "State the district and region for loan ID '4990'.",
    "query": "SELECT T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.loan_id = 4990",
    "relevant_table": {
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "loan": {
        "ddl": "create table loan( loan_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, amount integer, duration integer, payments real, status text)"
      }
    },
    "new_relevant_table": {
      "loan_district": {
        "columns": [
          "loan_id",
          "account_id",
          "date",
          "amount",
          "duration",
          "payments",
          "status",
          "district_id",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16"
        ],
        "ddl": "create table loan_district( loan_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, amount integer, duration integer, payments real, status text, district_id integer, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references loan_district(district_id) integer, frequency text, date date)"
      }
    },
    "old_new_table_mapping": {
      "district": "loan_district",
      "loan": "loan_district"
    },
    "new_table_primary_key": "loan_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.A2, T1.A3 FROM loan_district AS T1 WHERE T1.loan_id = 4990"
  },
  {
    "train_idx": 123,
    "db_id": "financial",
    "question": "Provide the account ID, district and region for loan amount greater than USD300,000.",
    "query": "SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.amount > 300000",
    "relevant_table": {
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "loan": {
        "ddl": "create table loan( loan_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, amount integer, duration integer, payments real, status text)"
      }
    },
    "new_relevant_table": {
      "account_district": {
        "columns": [
          "account_id",
          "district_id",
          "frequency",
          "date",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16"
        ],
        "ddl": "create table account_district( account_id integer primary key, district_id integer, frequency text, date date, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "loan": {
        "ddl": "create table loan( loan_id integer primary key, foreign key(account_id) references account_district(account_id) integer, date date, amount integer, duration integer, payments real, status text)"
      }
    },
    "old_new_table_mapping": {
      "account": "account_district",
      "district": "account_district"
    },
    "new_table_primary_key": "account_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.account_id, T1.A2, T1.A3 FROM account_district AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.amount > 300000"
  },
  {
    "train_idx": 124,
    "db_id": "financial",
    "question": "List the loan ID, district and average salary for loan with duration of 60 months.",
    "query": "SELECT T3.loan_id, T2.A2, T2.A11 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.duration = 60",
    "relevant_table": {
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "loan": {
        "ddl": "create table loan( loan_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, amount integer, duration integer, payments real, status text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "district_id",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16",
          "loan_id",
          "account_id",
          "date",
          "amount",
          "duration",
          "payments",
          "status"
        ],
        "ddl": "create table merged_table( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer, loan_id integer, foreign key(account_id) references account(account_id) integer, date date, amount integer, duration integer, payments real, status text)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references merged_table(district_id) integer, frequency text, date date)"
      }
    },
    "old_new_table_mapping": {
      "district": "merged_table",
      "loan": "merged_table"
    },
    "new_table_primary_key": "district_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.loan_id, T1.A2, T1.A11 FROM merged_table AS T1 WHERE T1.duration = 60"
  },
  {
    "train_idx": 125,
    "db_id": "financial",
    "question": "For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996.",
    "query": "SELECT CAST((T3.A13 - T3.A12) AS REAL) * 100 / T3.A12 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'D'",
    "relevant_table": {
      "loan": {
        "ddl": "create table loan( loan_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, amount integer, duration integer, payments real, status text)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "new_relevant_table": {
      "loan_account": {
        "columns": [
          "loan_id",
          "account_id",
          "date_loan",
          "amount",
          "duration",
          "payments",
          "status",
          "district_id",
          "frequency",
          "date_account"
        ],
        "ddl": "create table loan_account( loan_id integer primary key, account_id integer, amount integer, duration integer, payments real, status text, foreign key(district_id) references district(district_id) integer, frequency text)"
      },
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "old_new_table_mapping": {
      "loan": "loan_account",
      "account": "loan_account"
    },
    "new_table_primary_key": "loan_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "date_loan, date_account": {
        "old_table": "loan, account",
        "old_column": "date from both tables"
      }
    },
    "new_gold_sql": "SELECT CAST((T3.A13 - T3.A12) AS REAL) * 100 / T3.A12 FROM loan_account AS T1 INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T1.status = 'D'"
  },
  {
    "train_idx": 126,
    "db_id": "financial",
    "question": "Calculate the percentage of account from 'Decin' district for all accounts are opened in 1993.",
    "query": "SELECT CAST(SUM(T1.A2 = 'Decin') AS REAL) * 100 / COUNT(account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) = '1993'",
    "relevant_table": {
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      }
    },
    "new_relevant_table": {
      "district_account": {
        "columns": [
          "district_id",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16",
          "account_id",
          "frequency",
          "date"
        ],
        "ddl": "create table district_account( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer, account_id integer, frequency text, date date)"
      }
    },
    "old_new_table_mapping": {
      "district": "district_account",
      "account": "district_account"
    },
    "new_table_primary_key": "district_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(T1.A2 = 'Decin') AS REAL) * 100 / COUNT(T1.account_id) FROM district_account AS T1 WHERE STRFTIME('%Y', T1.date) = '1993'"
  },
  {
    "train_idx": 128,
    "db_id": "financial",
    "question": "List the top nine districts, by descending order, from the highest to the lowest, the number of female account holders.",
    "query": "SELECT T2.A2, COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' GROUP BY T2.district_id, T2.A2 ORDER BY COUNT(T1.client_id) DESC LIMIT 9",
    "relevant_table": {
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      },
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "new_relevant_table": {
      "client_district": {
        "columns": [
          "client_id",
          "gender",
          "birth_date",
          "district_id",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16"
        ],
        "ddl": "create table client_district( client_id integer primary key, gender text, birth_date date, district_id integer, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "old_new_table_mapping": {
      "district": "client_district",
      "client": "client_district"
    },
    "new_table_primary_key": "client_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT A2, COUNT(client_id) FROM client_district WHERE gender = 'F' GROUP BY district_id, A2 ORDER BY COUNT(client_id) DESC LIMIT 9"
  },
  {
    "train_idx": 129,
    "db_id": "financial",
    "question": "Which are the top ten withdrawals (non-credit card) by district names for the month of January 1996?",
    "query": "SELECT DISTINCT T1.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ' AND T3.date LIKE '1996-01%' ORDER BY A2 ASC LIMIT 10",
    "relevant_table": {
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "trans": {
        "ddl": "create table trans( trans_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, type text, operation text, amount integer, balance integer, k_symbol text, bank text, account integer)"
      }
    },
    "new_relevant_table": {
      "account_trans": {
        "columns": [
          "account_id",
          "district_id",
          "frequency",
          "date_account",
          "trans_id",
          "date_trans",
          "type",
          "operation",
          "amount",
          "balance",
          "k_symbol",
          "bank",
          "account"
        ],
        "ddl": "create table account_trans( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, trans_id integer, type text, operation text, amount integer, balance integer, k_symbol text, bank text, account integer)"
      },
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "old_new_table_mapping": {
      "account": "account_trans",
      "trans": "account_trans"
    },
    "new_table_primary_key": "account_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "date_account, date_trans": {
        "old_table": "account, trans",
        "old_column": "date, date"
      }
    },
    "new_gold_sql": "SELECT DISTINCT T1.A2 FROM district AS T1 INNER JOIN account_trans AS T2 ON T1.district_id = T2.district_id WHERE T2.type = 'VYDAJ' AND T2.date_trans LIKE '1996-01%' ORDER BY A2 ASC LIMIT 10"
  },
  {
    "train_idx": 130,
    "db_id": "financial",
    "question": "How many of the account holders in South Bohemia still do not own credit cards?",
    "query": "SELECT COUNT(T3.account_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.client_id = T3.client_id WHERE T1.A3 = 'south Bohemia' AND T3.type != 'OWNER'",
    "relevant_table": {
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      }
    },
    "new_relevant_table": {
      "district_client": {
        "columns": [
          "district_id",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16",
          "client_id",
          "gender",
          "birth_date"
        ],
        "ddl": "create table district_client( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer, client_id integer, gender text, birth_date date)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references district_client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      }
    },
    "old_new_table_mapping": {
      "district": "district_client",
      "client": "district_client"
    },
    "new_table_primary_key": "district_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(T3.account_id) FROM district_client AS T1 INNER JOIN disp AS T3 ON T1.client_id = T3.client_id WHERE T1.A3 = 'south Bohemia' AND T3.type != 'OWNER'"
  },
  {
    "train_idx": 131,
    "db_id": "financial",
    "question": "Which district has highest active loan?",
    "query": "SELECT T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.status IN ('C', 'D') GROUP BY T2.A3 ORDER BY SUM(T3.amount) DESC LIMIT 1",
    "relevant_table": {
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "loan": {
        "ddl": "create table loan( loan_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, amount integer, duration integer, payments real, status text)"
      }
    },
    "new_relevant_table": {
      "account_loan": {
        "columns": [
          "loan_id",
          "account_id",
          "date_loan",
          "amount",
          "duration",
          "payments",
          "status",
          "district_id",
          "frequency",
          "date_account"
        ],
        "ddl": "create table account_loan( loan_id integer primary key, account_id integer, amount integer, duration integer, payments real, status text, foreign key(district_id) references district(district_id) integer, frequency text)"
      },
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "old_new_table_mapping": {
      "loan": "account_loan",
      "account": "account_loan"
    },
    "new_table_primary_key": "loan_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "date_loan, date_account": {
        "old_table": "loan, account",
        "old_column": "date from both tables"
      }
    },
    "new_gold_sql": "SELECT T2.A3 FROM account_loan AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.status IN ('C', 'D') GROUP BY T2.A3 ORDER BY SUM(T1.amount) DESC LIMIT 1"
  },
  {
    "train_idx": 132,
    "db_id": "financial",
    "question": "What is the average loan amount by male borrowers?",
    "query": "SELECT AVG(T4.amount) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.gender = 'M'",
    "relevant_table": {
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "loan": {
        "ddl": "create table loan( loan_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, amount integer, duration integer, payments real, status text)"
      }
    },
    "new_relevant_table": {
      "account_loan": {
        "columns": [
          "loan_id",
          "account_id",
          "date_loan",
          "amount",
          "duration",
          "payments",
          "status",
          "district_id",
          "frequency",
          "date_account"
        ],
        "ddl": "create table account_loan( loan_id integer primary key, account_id integer, amount integer, duration integer, payments real, status text, foreign key(district_id) references district(district_id) integer, frequency text)"
      },
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account_loan(account_id) integer, type text)"
      }
    },
    "old_new_table_mapping": {
      "loan": "account_loan",
      "account": "account_loan"
    },
    "new_table_primary_key": "loan_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "date_loan, date_account": {
        "old_table": "loan, account",
        "old_column": "date from both tables"
      }
    },
    "new_gold_sql": "SELECT AVG(account_loan.amount) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account_loan AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'M'"
  },
  {
    "train_idx": 134,
    "db_id": "financial",
    "question": "In the branch where the largest number of crimes were committed in 1996, how many accounts were opened?",
    "query": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id GROUP BY T1.A16 ORDER BY T1.A16 DESC LIMIT 1",
    "relevant_table": {
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      }
    },
    "new_relevant_table": {
      "district_account": {
        "columns": [
          "district_id",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16",
          "account_id",
          "frequency",
          "date"
        ],
        "ddl": "create table district_account( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer, account_id integer, frequency text, date date)"
      }
    },
    "old_new_table_mapping": {
      "district": "district_account",
      "account": "district_account"
    },
    "new_table_primary_key": "district_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(account_id) FROM district_account GROUP BY A16 ORDER BY A16 DESC LIMIT 1"
  },
  {
    "train_idx": 135,
    "db_id": "financial",
    "question": "After making a credit card withdrawal, how many account/s with monthly issuance has a negative balance?",
    "query": "SELECT COUNT(T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.balance < 0 AND T1.operation = 'VYBER KARTOU' AND T2.frequency = 'POPLATEK MESICNE'",
    "relevant_table": {
      "trans": {
        "ddl": "create table trans( trans_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, type text, operation text, amount integer, balance integer, k_symbol text, bank text, account integer)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      }
    },
    "new_relevant_table": {
      "account_trans": {
        "columns": [
          "account_id",
          "district_id",
          "frequency",
          "date_account",
          "trans_id",
          "date_trans",
          "type",
          "operation",
          "amount",
          "balance",
          "k_symbol",
          "bank",
          "account"
        ],
        "ddl": "create table account_trans( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, trans_id integer, type text, operation text, amount integer, balance integer, k_symbol text, bank text, account integer)"
      }
    },
    "old_new_table_mapping": {
      "account": "account_trans",
      "trans": "account_trans"
    },
    "new_table_primary_key": "account_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "date_account, date_trans": {
        "old_table": "account, trans",
        "old_column": "date, date"
      }
    },
    "new_gold_sql": "SELECT COUNT(account_id) FROM account_trans WHERE balance < 0 AND operation = 'VYBER KARTOU' AND frequency = 'POPLATEK MESICNE'"
  },
  {
    "train_idx": 136,
    "db_id": "financial",
    "question": "Between 1/1/1995 and 12/31/1997, how many loans in the amount of at least 250,000 per account that chose monthly statement issuance were approved?",
    "query": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date BETWEEN '1995-01-01' AND '1997-12-31' AND T1.frequency = 'POPLATEK MESICNE' AND T2.amount >= 250000",
    "relevant_table": {
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "loan": {
        "ddl": "create table loan( loan_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, amount integer, duration integer, payments real, status text)"
      }
    },
    "new_relevant_table": {
      "account_loan": {
        "columns": [
          "account_id",
          "district_id",
          "frequency",
          "date_account",
          "loan_id",
          "date_loan",
          "amount",
          "duration",
          "payments",
          "status"
        ],
        "ddl": "create table account_loan( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date_account date, loan_id integer, date_loan date, amount integer, duration integer, payments real, status text)"
      }
    },
    "old_new_table_mapping": {
      "account": "account_loan",
      "loan": "account_loan"
    },
    "new_table_primary_key": "account_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "date_account": {
        "old_table": "account",
        "old_column": "date"
      },
      "date_loan": {
        "old_table": "loan",
        "old_column": "date"
      }
    },
    "new_gold_sql": "SELECT COUNT(account_id) FROM account_loan WHERE date_loan BETWEEN '1995-01-01' AND '1997-12-31' AND frequency = 'POPLATEK MESICNE' AND amount >= 250000"
  },
  {
    "train_idx": 137,
    "db_id": "financial",
    "question": "How many accounts have running contracts in Branch location 1?",
    "query": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T1.district_id = 1 AND (T3.status = 'C' OR T3.status = 'D')",
    "relevant_table": {
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "loan": {
        "ddl": "create table loan( loan_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, amount integer, duration integer, payments real, status text)"
      }
    },
    "new_relevant_table": {
      "account_loan": {
        "columns": [
          "account_id",
          "district_id",
          "frequency",
          "account_date",
          "loan_id",
          "loan_date",
          "amount",
          "duration",
          "payments",
          "status"
        ],
        "ddl": "create table account_loan( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, account_date date, loan_id integer, loan_date date, amount integer, duration integer, payments real, status text)"
      },
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "old_new_table_mapping": {
      "loan": "account_loan",
      "account": "account_loan"
    },
    "new_table_primary_key": "account_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "account_date": {
        "old_table": "account",
        "old_column": "date"
      },
      "loan_date": {
        "old_table": "loan",
        "old_column": "date"
      }
    },
    "new_gold_sql": "SELECT COUNT(T1.account_id) FROM account_loan AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.district_id = 1 AND (T1.status = 'C' OR T1.status = 'D')"
  },
  {
    "train_idx": 138,
    "db_id": "financial",
    "question": "In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?",
    "query": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A15 = (SELECT T3.A15 FROM district AS T3 ORDER BY T3.A15 DESC LIMIT 1, 1)",
    "relevant_table": {
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      },
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "new_relevant_table": {
      "client_district": {
        "columns": [
          "client_id",
          "gender",
          "birth_date",
          "district_id",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16"
        ],
        "ddl": "create table client_district( client_id integer primary key, gender text, birth_date date, district_id integer, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "old_new_table_mapping": {
      "district": "client_district",
      "client": "client_district"
    },
    "new_table_primary_key": "client_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(client_id) FROM client_district WHERE gender = 'M' AND A15 = (SELECT A15 FROM client_district ORDER BY A15 DESC LIMIT 1, 1)"
  },
  {
    "train_idx": 139,
    "db_id": "financial",
    "question": "How many high-level credit cards have \"OWNER\" type of disposition?",
    "query": "SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'gold' AND T2.type = 'OWNER'",
    "relevant_table": {
      "card": {
        "ddl": "create table card( card_id integer primary key, foreign key(disp_id) references disp(disp_id) integer, type text, issued date)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      }
    },
    "new_relevant_table": {
      "card_disp": {
        "columns": [
          "card_id",
          "disp_id_card",
          "type_card",
          "issued",
          "disp_id_disp",
          "client_id",
          "account_id",
          "type_disp"
        ],
        "ddl": "create table card_disp( card_id integer primary key, issued date, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer)"
      }
    },
    "old_new_table_mapping": {
      "card": "card_disp",
      "disp": "card_disp"
    },
    "new_table_primary_key": "card_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "disp_id_card, type_card, disp_id_disp, type_disp": {
        "old_table": "card, disp",
        "old_column": "disp_id, type"
      }
    },
    "new_gold_sql": "SELECT COUNT(card_id) FROM card_disp WHERE type_card = 'gold' AND type_disp = 'OWNER'"
  },
  {
    "train_idx": 140,
    "db_id": "financial",
    "question": "How many accounts are there in the district of \"Pisek\"?",
    "query": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Pisek'",
    "relevant_table": {
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "new_relevant_table": {
      "account_district": {
        "columns": [
          "account_id",
          "district_id",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16",
          "frequency",
          "date"
        ],
        "ddl": "create table account_district( account_id integer primary key, district_id integer, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer, frequency text, date date)"
      }
    },
    "old_new_table_mapping": {
      "district": "account_district",
      "account": "account_district"
    },
    "new_table_primary_key": "account_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(account_id) FROM account_district WHERE A2 = 'Pisek'"
  },
  {
    "train_idx": 141,
    "db_id": "financial",
    "question": "Which districts have transactions greater than USS$10,000 in 1997?",
    "query": "SELECT T1.district_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date) = '1997' GROUP BY T1.district_id HAVING SUM(T3.amount) > 10000",
    "relevant_table": {
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "trans": {
        "ddl": "create table trans( trans_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, type text, operation text, amount integer, balance integer, k_symbol text, bank text, account integer)"
      }
    },
    "new_relevant_table": {
      "account_district": {
        "columns": [
          "account_id",
          "district_id",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16",
          "frequency",
          "date"
        ],
        "ddl": "create table account_district( account_id integer primary key, district_id integer, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer, frequency text, date date)"
      },
      "trans": {
        "ddl": "create table trans( trans_id integer primary key, foreign key(account_id) references account_district(account_id) integer, date date, type text, operation text, amount integer, balance integer, k_symbol text, bank text, account_district integer)"
      }
    },
    "old_new_table_mapping": {
      "district": "account_district",
      "account": "account_district"
    },
    "new_table_primary_key": "account_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.district_id FROM account_district AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) = '1997' GROUP BY T1.district_id HAVING SUM(T2.amount) > 10000"
  },
  {
    "train_idx": 142,
    "db_id": "financial",
    "question": "Which accounts placed orders for household payment in Pisek?",
    "query": "SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.k_symbol = 'SIPO' AND T3.A2 = 'Pisek'",
    "relevant_table": {
      "trans": {
        "ddl": "create table trans( trans_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, type text, operation text, amount integer, balance integer, k_symbol text, bank text, account integer)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "new_relevant_table": {
      "account_district": {
        "columns": [
          "account_id",
          "district_id",
          "frequency",
          "date",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16"
        ],
        "ddl": "create table account_district( account_id integer primary key, district_id integer, frequency text, date date, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "trans": {
        "ddl": "create table trans( trans_id integer primary key, foreign key(account_id) references account_district(account_id) integer, date date, type text, operation text, amount integer, balance integer, k_symbol text, bank text, account_district integer)"
      }
    },
    "old_new_table_mapping": {
      "account": "account_district",
      "district": "account_district"
    },
    "new_table_primary_key": "account_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT account_district.account_id FROM trans INNER JOIN account_district ON trans.account_id = account_district.account_id WHERE trans.k_symbol = 'SIPO' AND account_district.A2 = 'Pisek'"
  },
  {
    "train_idx": 143,
    "db_id": "financial",
    "question": "What are the accounts that have gold credit cards?",
    "query": "SELECT T2.account_id FROM disp AS T2  INNER JOIN card AS T1 ON T1.disp_id = T2.disp_id  WHERE T1.type = 'gold'",
    "relevant_table": {
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      },
      "card": {
        "ddl": "create table card( card_id integer primary key, foreign key(disp_id) references disp(disp_id) integer, type text, issued date)"
      }
    },
    "new_relevant_table": {
      "disp_card": {
        "columns": [
          "disp_id",
          "client_id",
          "account_id",
          "disp_type",
          "card_id",
          "card_type",
          "issued"
        ],
        "ddl": "create table disp_card( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, disp_type text, card_id integer, card_type text, issued date)"
      }
    },
    "old_new_table_mapping": {
      "card": "disp_card",
      "disp": "disp_card"
    },
    "new_table_primary_key": "disp_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "disp_type": {
        "old_table": "disp",
        "old_column": "type"
      },
      "card_type": {
        "old_table": "card",
        "old_column": "type"
      }
    },
    "new_gold_sql": "SELECT disp_card.account_id FROM disp_card WHERE disp_card.card_type = 'gold'"
  },
  {
    "train_idx": 144,
    "db_id": "financial",
    "question": "How much is the average amount in credit card made by account holders in a month, in year 2021?",
    "query": "SELECT AVG(T4.amount) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE STRFTIME('%Y', T4.date) = '1998' AND T4.operation = 'VYBER KARTOU'",
    "relevant_table": {
      "card": {
        "ddl": "create table card( card_id integer primary key, foreign key(disp_id) references disp(disp_id) integer, type text, issued date)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "trans": {
        "ddl": "create table trans( trans_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, type text, operation text, amount integer, balance integer, k_symbol text, bank text, account integer)"
      }
    },
    "new_relevant_table": {
      "card_disp": {
        "columns": [
          "disp_id",
          "client_id",
          "account_id",
          "disp_type",
          "card_id",
          "card_type",
          "issued"
        ],
        "ddl": "create table card_disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, card_id integer, issued date)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "trans": {
        "ddl": "create table trans( trans_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, type text, operation text, amount integer, balance integer, k_symbol text, bank text, account integer)"
      }
    },
    "old_new_table_mapping": {
      "disp": "card_disp",
      "card": "card_disp"
    },
    "new_table_primary_key": "disp_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT AVG(T4.amount) FROM card_disp AS T1 INNER JOIN account AS T3 ON T1.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE STRFTIME('%Y', T4.date) = '1998' AND T4.operation = 'VYBER KARTOU'"
  },
  {
    "train_idx": 145,
    "db_id": "financial",
    "question": "Who are the account holder identification numbers whose who have transactions on the credit card with the amount is less than the average, in 1998?",
    "query": "SELECT T1.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1998' AND T1.operation = 'VYBER KARTOU' AND T1.amount < (SELECT AVG(amount) FROM trans WHERE STRFTIME('%Y', date) = '1998')",
    "relevant_table": {
      "trans": {
        "ddl": "create table trans( trans_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, type text, operation text, amount integer, balance integer, k_symbol text, bank text, account integer)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      }
    },
    "new_relevant_table": {
      "trans_account": {
        "columns": [
          "trans_id",
          "account_id",
          "foreign key(account_id) references account(account_id)",
          "date_trans",
          "type",
          "operation",
          "amount",
          "balance",
          "k_symbol",
          "bank",
          "account",
          "foreign key(district_id) references district(district_id)",
          "frequency",
          "date_account"
        ],
        "ddl": "create table trans_account( trans_id integer primary key, account_id integer, foreign key(account_id) references account(account_id) integer, type text, operation text, amount integer, balance integer, k_symbol text, bank text, account integer, foreign key(district_id) references district(district_id) integer, frequency text)"
      }
    },
    "old_new_table_mapping": {
      "trans": "trans_account",
      "account": "trans_account"
    },
    "new_table_primary_key": "trans_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "date_trans, date_account": {
        "old_table": "trans, account",
        "old_column": "date from trans, date from account"
      }
    },
    "new_gold_sql": "SELECT T1.account_id FROM trans_account AS T1 WHERE STRFTIME('%Y', T1.date_trans) = '1998' AND T1.operation = 'VYBER KARTOU' AND T1.amount < (SELECT AVG(amount) FROM trans_account WHERE STRFTIME('%Y', date_trans) = '1998')"
  },
  {
    "train_idx": 146,
    "db_id": "financial",
    "question": "Who are the female account holders who own credit cards and also have loans?",
    "query": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T5 ON T2.account_id = T5.account_id INNER JOIN loan AS T3 ON T5.account_id = T3.account_id INNER JOIN card AS T4 ON T2.disp_id = T4.disp_id WHERE T1.gender = 'F'",
    "relevant_table": {
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "loan": {
        "ddl": "create table loan( loan_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, amount integer, duration integer, payments real, status text)"
      },
      "card": {
        "ddl": "create table card( card_id integer primary key, foreign key(disp_id) references disp(disp_id) integer, type text, issued date)"
      }
    },
    "new_relevant_table": {
      "disp_account": {
        "columns": [
          "disp_id",
          "client_id",
          "account_id_disp",
          "type",
          "account_id_account",
          "district_id",
          "frequency",
          "date"
        ],
        "ddl": "create table disp_account( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, type text, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      },
      "loan": {
        "ddl": "create table loan( loan_id integer primary key, foreign key(account_id) references disp_account(account_id) integer, date date, amount integer, duration integer, payments real, status text)"
      },
      "card": {
        "ddl": "create table card( card_id integer primary key, foreign key(disp_id) references disp_account(disp_id) integer, type text, issued date)"
      }
    },
    "old_new_table_mapping": {
      "disp": "disp_account",
      "account": "disp_account"
    },
    "new_table_primary_key": "disp_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.client_id FROM disp_account AS T1 INNER JOIN loan AS T3 ON T1.account_id_account = T3.account_id INNER JOIN card AS T4 ON T1.disp_id = T4.disp_id WHERE T1.gender = 'F'"
  },
  {
    "train_idx": 147,
    "db_id": "financial",
    "question": "How many female clients' accounts are in the region of South Bohemia?",
    "query": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A3 = 'south Bohemia'",
    "relevant_table": {
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      },
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "new_relevant_table": {
      "client_district": {
        "columns": [
          "client_id",
          "gender",
          "birth_date",
          "district_id",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16"
        ],
        "ddl": "create table client_district( client_id integer primary key, gender text, birth_date date, district_id integer, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "old_new_table_mapping": {
      "district": "client_district",
      "client": "client_district"
    },
    "new_table_primary_key": "client_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(client_id) FROM client_district WHERE gender = 'F' AND A3 = 'south Bohemia'"
  },
  {
    "train_idx": 148,
    "db_id": "financial",
    "question": "Please list the accounts whose district is Tabor that are eligible for loans.",
    "query": "SELECT T2.account_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'OWNER' AND T1.A2 = 'Tabor'",
    "relevant_table": {
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "disp_id",
          "client_id",
          "account_id",
          "type",
          "district_id",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16"
        ],
        "ddl": "create table merged_table( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text, district_id integer, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references merged_table(district_id) integer, frequency text, date date)"
      }
    },
    "old_new_table_mapping": {
      "disp": "merged_table",
      "district": "merged_table"
    },
    "new_table_primary_key": "disp_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT account_id FROM merged_table WHERE type = 'OWNER' AND A2 = 'Tabor'"
  },
  {
    "train_idx": 149,
    "db_id": "financial",
    "question": "Please list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000.",
    "query": "SELECT T3.type FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type != 'OWNER' AND T1.A11 BETWEEN 8000 AND 9000",
    "relevant_table": {
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      }
    },
    "new_relevant_table": {
      "district_account": {
        "columns": [
          "district_id",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16",
          "account_id",
          "frequency",
          "date"
        ],
        "ddl": "create table district_account( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer, account_id integer, frequency text, date date)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references district_account(account_id) integer, type text)"
      }
    },
    "old_new_table_mapping": {
      "district": "district_account",
      "account": "district_account"
    },
    "new_table_primary_key": "district_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T3.type FROM district_account AS T1 INNER JOIN disp AS T3 ON T1.account_id = T3.account_id WHERE T3.type != 'OWNER' AND T1.A11 BETWEEN 8000 AND 9000"
  },
  {
    "train_idx": 150,
    "db_id": "financial",
    "question": "How many accounts in North Bohemia has made a transaction with the partner's bank being AB?",
    "query": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.bank = 'AB' AND T1.A3 = 'north Bohemia'",
    "relevant_table": {
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "trans": {
        "ddl": "create table trans( trans_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, type text, operation text, amount integer, balance integer, k_symbol text, bank text, account integer)"
      }
    },
    "new_relevant_table": {
      "trans_district": {
        "columns": [
          "trans_id",
          "account_id",
          "date",
          "type",
          "operation",
          "amount",
          "balance",
          "k_symbol",
          "bank",
          "account",
          "district_id",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16"
        ],
        "ddl": "create table trans_district( trans_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, type text, operation text, amount integer, balance integer, k_symbol text, bank text, account integer, district_id integer, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references trans_district(district_id) integer, frequency text, date date)"
      }
    },
    "old_new_table_mapping": {
      "trans": "trans_district",
      "district": "trans_district"
    },
    "new_table_primary_key": "trans_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(account_id) FROM trans_district WHERE bank = 'AB' AND A3 = 'north Bohemia'"
  },
  {
    "train_idx": 151,
    "db_id": "financial",
    "question": "Please list the name of the districts with accounts that made withdrawal transactions.",
    "query": "SELECT DISTINCT T1.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ'",
    "relevant_table": {
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "trans": {
        "ddl": "create table trans( trans_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, type text, operation text, amount integer, balance integer, k_symbol text, bank text, account integer)"
      }
    },
    "new_relevant_table": {
      "trans_district": {
        "columns": [
          "trans_id",
          "account_id",
          "date",
          "type",
          "operation",
          "amount",
          "balance",
          "k_symbol",
          "bank",
          "account",
          "district_id",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16"
        ],
        "ddl": "create table trans_district( trans_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, type text, operation text, amount integer, balance integer, k_symbol text, bank text, account integer, district_id integer, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references trans_district(district_id) integer, frequency text, date date)"
      }
    },
    "old_new_table_mapping": {
      "trans": "trans_district",
      "district": "trans_district"
    },
    "new_table_primary_key": "trans_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT T1.A2 FROM trans_district AS T1 WHERE T1.type = 'VYDAJ'"
  },
  {
    "train_idx": 152,
    "db_id": "financial",
    "question": "What is the average number of crimes committed in 1995 in regions where the number exceeds 4000 and the region has accounts that are opened starting from the year 1997?",
    "query": "SELECT AVG(T1.A15) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) >= '1997' AND T1.A15 > 4000",
    "relevant_table": {
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      }
    },
    "new_relevant_table": {
      "account_district": {
        "columns": [
          "account_id",
          "district_id",
          "frequency",
          "date",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16"
        ],
        "ddl": "create table account_district( account_id integer primary key, district_id integer, frequency text, date date, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "old_new_table_mapping": {
      "account": "account_district",
      "district": "account_district"
    },
    "new_table_primary_key": "account_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT AVG(T1.A15) FROM account_district AS T1 WHERE STRFTIME('%Y', T1.date) >= '1997' AND T1.A15 > 4000"
  },
  {
    "train_idx": 153,
    "db_id": "financial",
    "question": "How many 'classic' cards are eligible for loan?",
    "query": "SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'classic' AND T2.type = 'OWNER'",
    "relevant_table": {
      "card": {
        "ddl": "create table card( card_id integer primary key, foreign key(disp_id) references disp(disp_id) integer, type text, issued date)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      }
    },
    "new_relevant_table": {
      "card_disp": {
        "columns": [
          "card_id",
          "disp_id",
          "card_type",
          "issued",
          "client_id",
          "account_id",
          "disp_type"
        ],
        "ddl": "create table card_disp( card_id integer primary key, disp_id integer, issued date, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer)"
      }
    },
    "old_new_table_mapping": {
      "card": "card_disp",
      "disp": "card_disp"
    },
    "new_table_primary_key": "card_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "card_type, disp_type": {
        "old_table": "card, disp",
        "old_column": "type, type"
      }
    },
    "new_gold_sql": "SELECT COUNT(card_id) FROM card_disp WHERE card_type = 'classic' AND disp_type = 'OWNER'"
  },
  {
    "train_idx": 154,
    "db_id": "financial",
    "question": "How many male clients in 'Hl.m. Praha' district?",
    "query": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A2 = 'Hl.m. Praha'",
    "relevant_table": {
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      },
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "new_relevant_table": {
      "client_district": {
        "columns": [
          "client_id",
          "gender",
          "birth_date",
          "district_id",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16"
        ],
        "ddl": "create table client_district( client_id integer primary key, gender text, birth_date date, district_id integer, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "old_new_table_mapping": {
      "client": "client_district",
      "district": "client_district"
    },
    "new_table_primary_key": "client_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(client_id) FROM client_district WHERE gender = 'M' AND A2 = 'Hl.m. Praha'"
  },
  {
    "train_idx": 156,
    "db_id": "financial",
    "question": "Who is the owner of the account with the largest loan amount?",
    "query": "SELECT T1.client_id FROM disp AS T1 INNER JOIN account AS T3 ON T1.account_id = T3.account_id INNER JOIN loan AS T2 ON T3.account_id = T2.account_id WHERE T1.type = 'OWNER' ORDER BY T2.amount DESC LIMIT 1",
    "relevant_table": {
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "loan": {
        "ddl": "create table loan( loan_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, amount integer, duration integer, payments real, status text)"
      }
    },
    "new_relevant_table": {
      "disp_account": {
        "columns": [
          "disp_id",
          "client_id",
          "account_id_disp",
          "type",
          "account_id_account",
          "district_id",
          "frequency",
          "date"
        ],
        "ddl": "create table disp_account( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, type text, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "loan": {
        "ddl": "create table loan( loan_id integer primary key, foreign key(account_id) references disp_account(account_id) integer, date date, amount integer, duration integer, payments real, status text)"
      }
    },
    "old_new_table_mapping": {
      "disp": "disp_account",
      "account": "disp_account"
    },
    "new_table_primary_key": "disp_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.client_id FROM disp_account AS T1 INNER JOIN loan AS T2 ON T1.account_id_account = T2.account_id WHERE T1.type = 'OWNER' ORDER BY T2.amount DESC LIMIT 1"
  },
  {
    "train_idx": 157,
    "db_id": "financial",
    "question": "What is the number of committed crimes in 1995 in the district of the account with the id 532?",
    "query": "SELECT T1.A15 FROM district AS T1 INNER JOIN `account` AS T2 ON T1.district_id = T2.district_id WHERE T2.account_id = 532",
    "relevant_table": {
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      }
    },
    "new_relevant_table": {
      "district_account": {
        "columns": [
          "district_id",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16",
          "account_id",
          "frequency",
          "date"
        ],
        "ddl": "create table district_account( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer, account_id integer, frequency text, date date)"
      }
    },
    "old_new_table_mapping": {
      "district": "district_account",
      "account": "district_account"
    },
    "new_table_primary_key": "district_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.A15 FROM district_account AS T1 WHERE T1.account_id = 532"
  },
  {
    "train_idx": 158,
    "db_id": "financial",
    "question": "What is the district Id of the account that placed the order with the id 33333?",
    "query": "SELECT T3.district_id FROM `order` AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.order_id = 33333",
    "relevant_table": {
      "order": {
        "ddl": "create table order( order_id integer primary key, foreign key(account_id) references account(account_id) integer, bank_to text, account_to integer, amount real, k_symbol text)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "new_relevant_table": {
      "account_order": {
        "columns": [
          "account_id",
          "district_id",
          "frequency",
          "date",
          "order_id",
          "bank_to",
          "account_to",
          "amount",
          "k_symbol"
        ],
        "ddl": "create table account_order( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date, order_id integer, bank_to text, account_to integer, amount real, k_symbol text)"
      },
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "old_new_table_mapping": {
      "account": "account_order",
      "order": "account_order"
    },
    "new_table_primary_key": "account_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT district_id FROM account_order WHERE order_id = 33333"
  },
  {
    "train_idx": 159,
    "db_id": "financial",
    "question": "List all the withdrawals in cash transactions that the client with the id 3356 makes.",
    "query": "SELECT T4.trans_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 3356 AND T4.operation = 'VYBER'",
    "relevant_table": {
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "trans": {
        "ddl": "create table trans( trans_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, type text, operation text, amount integer, balance integer, k_symbol text, bank text, account integer)"
      }
    },
    "new_relevant_table": {
      "client_disp": {
        "columns": [
          "client_id",
          "gender",
          "birth_date",
          "district_id",
          "disp_id",
          "account_id",
          "type"
        ],
        "ddl": "create table client_disp( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer, disp_id integer, foreign key(account_id) references account(account_id) integer, type text)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "trans": {
        "ddl": "create table trans( trans_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, type text, operation text, amount integer, balance integer, k_symbol text, bank text, account integer)"
      }
    },
    "old_new_table_mapping": {
      "client": "client_disp",
      "disp": "client_disp"
    },
    "new_table_primary_key": "client_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T4.trans_id FROM client_disp AS T1 INNER JOIN account AS T3 ON T1.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 3356 AND T4.operation = 'VYBER'"
  },
  {
    "train_idx": 160,
    "db_id": "financial",
    "question": "Among the weekly issuance accounts, how many have a loan of under 200000?",
    "query": "SELECT COUNT(T1.account_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'POPLATEK TYDNE' AND T1.amount < 200000",
    "relevant_table": {
      "loan": {
        "ddl": "create table loan( loan_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, amount integer, duration integer, payments real, status text)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      }
    },
    "new_relevant_table": {
      "account_loan": {
        "columns": [
          "account_id",
          "district_id",
          "frequency",
          "account_date",
          "loan_id",
          "loan_date",
          "amount",
          "duration",
          "payments",
          "status"
        ],
        "ddl": "create table account_loan( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, account_date date, loan_id integer, loan_date date, amount integer, duration integer, payments real, status text)"
      }
    },
    "old_new_table_mapping": {
      "account": "account_loan",
      "loan": "account_loan"
    },
    "new_table_primary_key": "account_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "account_date": {
        "old_table": "account",
        "old_column": "date"
      },
      "loan_date": {
        "old_table": "loan",
        "old_column": "date"
      }
    },
    "new_gold_sql": "SELECT COUNT(account_id) FROM account_loan WHERE frequency = 'POPLATEK TYDNE' AND amount < 200000"
  },
  {
    "train_idx": 161,
    "db_id": "financial",
    "question": "What type of credit card does the client with the id 13539 own?",
    "query": "SELECT T3.type FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T1.disp_id = T3.disp_id WHERE T2.client_id = 13539",
    "relevant_table": {
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      },
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      },
      "card": {
        "ddl": "create table card( card_id integer primary key, foreign key(disp_id) references disp(disp_id) integer, type text, issued date)"
      }
    },
    "new_relevant_table": {
      "client_disp": {
        "columns": [
          "client_id",
          "gender",
          "birth_date",
          "district_id",
          "disp_id",
          "account_id",
          "type"
        ],
        "ddl": "create table client_disp( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer, disp_id integer, foreign key(account_id) references account(account_id) integer, type text)"
      },
      "card": {
        "ddl": "create table card( card_id integer primary key, foreign key(disp_id) references client_disp(disp_id) integer, type text, issued date)"
      }
    },
    "old_new_table_mapping": {
      "client": "client_disp",
      "disp": "client_disp"
    },
    "new_table_primary_key": "client_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT client_disp.type FROM client_disp WHERE client_disp.client_id = 13539"
  },
  {
    "train_idx": 162,
    "db_id": "financial",
    "question": "What is the region of the client with the id 3541 from?",
    "query": "SELECT T1.A3 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.client_id = 3541",
    "relevant_table": {
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      }
    },
    "new_relevant_table": {
      "client_district": {
        "columns": [
          "client_id",
          "gender",
          "birth_date",
          "district_id",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16"
        ],
        "ddl": "create table client_district( client_id integer primary key, gender text, birth_date date, district_id integer, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "old_new_table_mapping": {
      "client": "client_district",
      "district": "client_district"
    },
    "new_table_primary_key": "client_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT A3 FROM client_district WHERE client_id = 3541"
  },
  {
    "train_idx": 163,
    "db_id": "financial",
    "question": "Which district has the most accounts with loan contracts finished with no problems?",
    "query": "SELECT T1.A2 FROM District AS T1 INNER JOIN Account AS T2 ON T1.District_id = T2.District_id INNER JOIN Loan AS T3 ON T2.Account_id = T3.Account_id WHERE T3.status = 'A' GROUP BY T1.District_id ORDER BY COUNT(T2.Account_id) DESC LIMIT 1",
    "relevant_table": {
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "loan": {
        "ddl": "create table loan( loan_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, amount integer, duration integer, payments real, status text)"
      }
    },
    "new_relevant_table": {
      "account_loan": {
        "columns": [
          "account_id",
          "district_id_ref",
          "frequency",
          "account_date",
          "loan_id",
          "loan_date",
          "amount",
          "duration",
          "payments",
          "status"
        ],
        "ddl": "create table account_loan( account_id integer primary key, frequency text, loan_id integer, amount integer, duration integer, payments real, status text)"
      },
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "old_new_table_mapping": {
      "account": "account_loan",
      "loan": "account_loan"
    },
    "new_table_primary_key": "account_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.A2 FROM district AS T1 INNER JOIN account_loan AS T2 ON T1.district_id = T2.district_id_ref WHERE T2.status = 'A' GROUP BY T1.district_id ORDER BY COUNT(T2.account_id) DESC LIMIT 1"
  },
  {
    "train_idx": 164,
    "db_id": "financial",
    "question": "Who placed the order with the id 32423?",
    "query": "SELECT T3.client_id FROM `order` AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T4 ON T4.account_id = T2.account_id  INNER JOIN client AS T3 ON T4.client_id = T3.client_id WHERE T1.order_id = 32423",
    "relevant_table": {
      "order": {
        "ddl": "create table order( order_id integer primary key, foreign key(account_id) references account(account_id) integer, bank_to text, account_to integer, amount real, k_symbol text)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      },
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      }
    },
    "new_relevant_table": {
      "client_disp": {
        "columns": [
          "disp_id",
          "client_id_disp",
          "account_id_disp",
          "type",
          "client_id_client",
          "gender",
          "birth_date",
          "district_id"
        ],
        "ddl": "create table client_disp( disp_id integer primary key, type text, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      },
      "order": {
        "ddl": "create table order( order_id integer primary key, foreign key(account_id) references account(account_id) integer, bank_to text, account_to integer, amount real, k_symbol text)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      }
    },
    "old_new_table_mapping": {
      "disp": "client_disp",
      "client": "client_disp"
    },
    "new_table_primary_key": "disp_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "client_id_disp, account_id_disp": {
        "old_table": "disp, client",
        "old_column": "client_id, account_id"
      }
    },
    "new_gold_sql": "SELECT T3.client_id_client FROM `order` AS T1 INNER JOIN account as T2 ON T1.account_id = T2.account_id INNER JOIN client_disp AS T3 ON T2.account_id = T3.account_id WHERE T1.order_id = 32423"
  },
  {
    "train_idx": 165,
    "db_id": "financial",
    "question": "Please list all the transactions made by accounts from district 5.",
    "query": "SELECT T3.trans_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.district_id = 5",
    "relevant_table": {
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "trans": {
        "ddl": "create table trans( trans_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, type text, operation text, amount integer, balance integer, k_symbol text, bank text, account integer)"
      }
    },
    "new_relevant_table": {
      "district_trans": {
        "columns": [
          "district_id",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16",
          "trans_id",
          "account_id",
          "date",
          "type",
          "operation",
          "amount",
          "balance",
          "k_symbol",
          "bank",
          "account"
        ],
        "ddl": "create table district_trans( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer, trans_id integer, foreign key(account_id) references account(account_id) integer, date date, type text, operation text, amount integer, balance integer, k_symbol text, bank text, account integer)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district_trans(district_id) integer, frequency text, date date)"
      }
    },
    "old_new_table_mapping": {
      "district": "district_trans",
      "trans": "district_trans"
    },
    "new_table_primary_key": "district_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.trans_id FROM district_trans AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.district_id = 5"
  },
  {
    "train_idx": 166,
    "db_id": "financial",
    "question": "How many of the accounts are from Jesenik district?",
    "query": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A2 = 'Jesenik'",
    "relevant_table": {
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      }
    },
    "new_relevant_table": {
      "district_account": {
        "columns": [
          "district_id",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16",
          "account_id",
          "frequency",
          "date"
        ],
        "ddl": "create table district_account( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer, account_id integer, frequency text, date date)"
      }
    },
    "old_new_table_mapping": {
      "district": "district_account",
      "account": "district_account"
    },
    "new_table_primary_key": "district_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(account_id) FROM district_account WHERE A2 = 'Jesenik'"
  },
  {
    "train_idx": 167,
    "db_id": "financial",
    "question": "List all the clients' IDs whose junior credit cards were issued after 1996.",
    "query": "SELECT T2.client_id FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'junior' AND T1.issued >= '1997-01-01'",
    "relevant_table": {
      "card": {
        "ddl": "create table card( card_id integer primary key, foreign key(disp_id) references disp(disp_id) integer, type text, issued date)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      }
    },
    "new_relevant_table": {
      "card_disp": {
        "columns": [
          "disp_id",
          "client_id",
          "account_id",
          "disp_type",
          "card_id",
          "card_type",
          "issued"
        ],
        "ddl": "create table card_disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, card_id integer, issued date)"
      }
    },
    "old_new_table_mapping": {
      "disp": "card_disp",
      "card": "card_disp"
    },
    "new_table_primary_key": "disp_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT client_id FROM card_disp WHERE card_type = 'junior' AND issued >= '1997-01-01'"
  },
  {
    "train_idx": 168,
    "db_id": "financial",
    "question": "What percentage of clients who opened their accounts in the district with an average salary of over 10000 are women?",
    "query": "SELECT CAST(SUM(T2.gender = 'F') AS REAL) * 100 / COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A11 > 10000",
    "relevant_table": {
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      }
    },
    "new_relevant_table": {
      "client_district": {
        "columns": [
          "client_id",
          "gender",
          "birth_date",
          "district_id_ref",
          "district_id",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16"
        ],
        "ddl": "create table client_district( client_id integer primary key, gender text, birth_date date, district_id_ref integer, district_id integer, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "old_new_table_mapping": {
      "client": "client_district",
      "district": "client_district"
    },
    "new_table_primary_key": "client_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "district_id_ref": {
        "old_table": "client",
        "old_column": "district_id"
      }
    },
    "new_gold_sql": "SELECT CAST(SUM(T1.gender = 'F') AS REAL) * 100 / COUNT(T1.client_id) FROM client_district AS T1 WHERE T1.A11 > 10000"
  },
  {
    "train_idx": 169,
    "db_id": "financial",
    "question": "What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997?",
    "query": "SELECT CAST((SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T3.account_id = T2.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T4.gender = 'M' AND T3.type = 'OWNER'",
    "relevant_table": {
      "loan": {
        "ddl": "create table loan( loan_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, amount integer, duration integer, payments real, status text)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      },
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      }
    },
    "new_relevant_table": {
      "disp_account": {
        "columns": [
          "disp_id",
          "client_id_disp",
          "account_id_disp",
          "type",
          "account_id_account",
          "district_id",
          "frequency",
          "date"
        ],
        "ddl": "create table merged_table( disp_id integer primary key, type text, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "loan": {
        "ddl": "create table loan( loan_id integer primary key, foreign key(account_id) references merged_table(account_id) integer, date date, amount integer, duration integer, payments real, status text)"
      },
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      }
    },
    "old_new_table_mapping": {
      "disp": "merged_table",
      "account": "merged_table"
    },
    "new_table_primary_key": "disp_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST((SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) FROM loan AS T1 INNER JOIN disp_account AS T2 ON T1.account_id = T2.account_id_account INNER JOIN client AS T3 ON T3.client_id = T2.client_id_disp WHERE T3.gender = 'M' AND T2.type = 'OWNER'"
  },
  {
    "train_idx": 173,
    "db_id": "financial",
    "question": "How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total?",
    "query": "SELECT T1.frequency, T2.k_symbol FROM account AS T1 INNER JOIN (SELECT account_id, k_symbol, SUM(amount) AS total_amount FROM `order` GROUP BY account_id, k_symbol) AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id = 3 AND T2.total_amount = 3539",
    "relevant_table": {
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "order": {
        "ddl": "create table order( order_id integer primary key, foreign key(account_id) references account(account_id) integer, bank_to text, account_to integer, amount real, k_symbol text)"
      }
    },
    "new_relevant_table": {
      "account_order": {
        "columns": [
          "order_id",
          "account_id",
          "bank_to",
          "account_to",
          "amount",
          "k_symbol",
          "district_id",
          "frequency",
          "date"
        ],
        "ddl": "create table account_order( order_id integer primary key, account_id integer, bank_to text, account_to integer, amount real, k_symbol text, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      }
    },
    "old_new_table_mapping": {
      "order": "account_order",
      "account": "account_order"
    },
    "new_table_primary_key": "order_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT frequency, k_symbol FROM account_order WHERE account_id = 3 AND amount = 3539"
  },
  {
    "train_idx": 174,
    "db_id": "financial",
    "question": "What year was account owner number 130 born?",
    "query": "SELECT STRFTIME('%Y', T1.birth_date) FROM client AS T1 INNER JOIN disp AS T3 ON T1.client_id = T3.client_id INNER JOIN account AS T2 ON T3.account_id = T2.account_id WHERE T2.account_id = 130",
    "relevant_table": {
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      }
    },
    "new_relevant_table": {
      "client_account": {
        "columns": [
          "account_id",
          "district_id_account",
          "frequency",
          "date",
          "client_id",
          "gender",
          "birth_date",
          "district_id_client"
        ],
        "ddl": "create table client_account( account_id integer primary key, frequency text, date date, client_id integer, gender text, birth_date date)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client_account(client_id) integer, foreign key(account_id) references client_account(account_id) integer, type text)"
      }
    },
    "old_new_table_mapping": {
      "account": "client_account",
      "client": "client_account"
    },
    "new_table_primary_key": "account_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT STRFTIME('%Y', T1.birth_date) FROM client_account AS T1 INNER JOIN disp AS T3 ON T1.client_id = T3.client_id WHERE T1.account_id = 130"
  },
  {
    "train_idx": 175,
    "db_id": "financial",
    "question": "How many accounts have an owner disposition and request for a statement to be generated upon a transaction?",
    "query": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK PO OBRATU'",
    "relevant_table": {
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      }
    },
    "new_relevant_table": {
      "account_disp": {
        "columns": [
          "account_id",
          "district_id",
          "frequency",
          "date",
          "disp_id",
          "client_id",
          "type"
        ],
        "ddl": "create table account_disp( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date, disp_id integer, foreign key(client_id) references client(client_id) integer, type text)"
      }
    },
    "old_new_table_mapping": {
      "account": "account_disp",
      "disp": "account_disp"
    },
    "new_table_primary_key": "account_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(account_id) FROM account_disp WHERE type = 'OWNER' AND frequency = 'POPLATEK PO OBRATU'"
  },
  {
    "train_idx": 176,
    "db_id": "financial",
    "question": "What is the amount of debt that client number 992 has, and how is this client doing with payments?",
    "query": "SELECT T4.amount, T4.status FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 on T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 992",
    "relevant_table": {
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "loan": {
        "ddl": "create table loan( loan_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, amount integer, duration integer, payments real, status text)"
      }
    },
    "new_relevant_table": {
      "client_account": {
        "columns": [
          "client_id",
          "gender",
          "birth_date",
          "district_id_client",
          "account_id",
          "district_id_account",
          "frequency",
          "date"
        ],
        "ddl": "create table client_account( client_id integer primary key, gender text, birth_date date, account_id integer, frequency text, date date)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client_account(client_id) integer, foreign key(account_id) references client_account(account_id) integer, type text)"
      },
      "loan": {
        "ddl": "create table loan( loan_id integer primary key, foreign key(account_id) references client_account(account_id) integer, date date, amount integer, duration integer, payments real, status text)"
      }
    },
    "old_new_table_mapping": {
      "client": "client_account",
      "account": "client_account"
    },
    "new_table_primary_key": "client_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T4.amount, T4.status FROM client_account AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN loan AS T4 ON T2.account_id = T4.account_id WHERE T1.client_id = 992"
  },
  {
    "train_idx": 177,
    "db_id": "financial",
    "question": "What is the sum that client number 4's account has following transaction 851? Who owns this account, a man or a woman?",
    "query": "SELECT T4.balance, T1.gender FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id =T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 4 AND T4.trans_id = 851",
    "relevant_table": {
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "trans": {
        "ddl": "create table trans( trans_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, type text, operation text, amount integer, balance integer, k_symbol text, bank text, account integer)"
      }
    },
    "new_relevant_table": {
      "client_disp": {
        "columns": [
          "client_id",
          "gender",
          "birth_date",
          "district_id",
          "disp_id",
          "account_id",
          "type"
        ],
        "ddl": "create table client_disp( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer, disp_id integer, foreign key(account_id) references account(account_id) integer, type text)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "trans": {
        "ddl": "create table trans( trans_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, type text, operation text, amount integer, balance integer, k_symbol text, bank text, account integer)"
      }
    },
    "old_new_table_mapping": {
      "client": "client_disp",
      "disp": "client_disp"
    },
    "new_table_primary_key": "client_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T4.balance, T1.gender FROM client_disp AS T1 INNER JOIN account AS T3 ON T1.account_id =T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 4 AND T4.trans_id = 851"
  },
  {
    "train_idx": 178,
    "db_id": "financial",
    "question": "Which kind of credit card does client number 9 possess?",
    "query": "SELECT T3.type FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.client_id = 9",
    "relevant_table": {
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      },
      "card": {
        "ddl": "create table card( card_id integer primary key, foreign key(disp_id) references disp(disp_id) integer, type text, issued date)"
      }
    },
    "new_relevant_table": {
      "client_disp": {
        "columns": [
          "client_id",
          "gender",
          "birth_date",
          "district_id",
          "disp_id",
          "account_id",
          "type"
        ],
        "ddl": "create table client_disp( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer, disp_id integer, foreign key(account_id) references account(account_id) integer, type text)"
      },
      "card": {
        "ddl": "create table card( card_id integer primary key, foreign key(disp_id) references client_disp(disp_id) integer, type text, issued date)"
      }
    },
    "old_new_table_mapping": {
      "disp": "client_disp",
      "client": "client_disp"
    },
    "new_table_primary_key": "client_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T2.type FROM client_disp AS T1 INNER JOIN card AS T2 ON T1.disp_id = T2.disp_id WHERE T1.client_id = 9"
  },
  {
    "train_idx": 179,
    "db_id": "financial",
    "question": "How much, in total, did client number 617 pay for all of the transactions in 1998?",
    "query": "SELECT SUM(T3.amount) FROM client AS T1 INNER JOIN disp AS T4 ON T1.client_id = T4.client_id INNER JOIN account AS T2 ON T4.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date)= '1998' AND T1.client_id = 617",
    "relevant_table": {
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "trans": {
        "ddl": "create table trans( trans_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, type text, operation text, amount integer, balance integer, k_symbol text, bank text, account integer)"
      }
    },
    "new_relevant_table": {
      "client_disp": {
        "columns": [
          "disp_id",
          "client_id",
          "account_id",
          "type",
          "gender",
          "birth_date",
          "district_id"
        ],
        "ddl": "create table client_disp( disp_id integer primary key, client_id integer, foreign key(account_id) references account(account_id) integer, type text, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "trans": {
        "ddl": "create table trans( trans_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, type text, operation text, amount integer, balance integer, k_symbol text, bank text, account integer)"
      }
    },
    "old_new_table_mapping": {
      "disp": "client_disp",
      "client": "client_disp"
    },
    "new_table_primary_key": "disp_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT SUM(T3.amount) FROM client_disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date)= '1998' AND T1.client_id = 617"
  },
  {
    "train_idx": 180,
    "db_id": "financial",
    "question": "Please provide a list of clients who were born between 1983 and 1987 and whose account branch is in East Bohemia, along with their IDs.",
    "query": "SELECT T1.client_id, T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T4 ON T1.client_id = T4.client_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id and T4.account_id = T3.account_id WHERE T2.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.birth_date) BETWEEN '1983' AND '1987'",
    "relevant_table": {
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      },
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      }
    },
    "new_relevant_table": {
      "client_district": {
        "columns": [
          "client_id",
          "gender",
          "birth_date",
          "district_id",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16"
        ],
        "ddl": "create table client_district( client_id integer primary key, gender text, birth_date date, district_id integer, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client_district(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references client_district(district_id) integer, frequency text, date date)"
      }
    },
    "old_new_table_mapping": {
      "client": "client_district",
      "district": "client_district"
    },
    "new_table_primary_key": "client_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.client_id, T3.account_id FROM client_district AS T1 INNER JOIN disp AS T4 ON T1.client_id = T4.client_id INNER JOIN account AS T3 ON T1.district_id = T3.district_id and T4.account_id = T3.account_id WHERE T1.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.birth_date) BETWEEN '1983' AND '1987'"
  },
  {
    "train_idx": 181,
    "db_id": "financial",
    "question": "Please provide the IDs of the 3 female clients with the largest loans.",
    "query": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T4 on T1.client_id= T4.client_id INNER JOIN account AS T2 ON T4.account_id = T2.account_id  INNER JOIN loan AS T3 ON T2.account_id = T3.account_id and T4.account_id = T3.account_id WHERE T1.gender = 'F' ORDER BY T3.amount DESC LIMIT 3",
    "relevant_table": {
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "loan": {
        "ddl": "create table loan( loan_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, amount integer, duration integer, payments real, status text)"
      }
    },
    "new_relevant_table": {
      "client_account": {
        "columns": [
          "account_id",
          "district_id_account",
          "frequency",
          "date",
          "client_id",
          "gender",
          "birth_date",
          "district_id_client"
        ],
        "ddl": "create table client_account( account_id integer primary key, frequency text, date date, client_id integer, gender text, birth_date date)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client_account(client_id) integer, foreign key(account_id) references client_account(account_id) integer, type text)"
      },
      "loan": {
        "ddl": "create table loan( loan_id integer primary key, foreign key(account_id) references client_account(account_id) integer, date date, amount integer, duration integer, payments real, status text)"
      }
    },
    "old_new_table_mapping": {
      "account": "client_account",
      "client": "client_account"
    },
    "new_table_primary_key": "account_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.client_id FROM client_account AS T1 INNER JOIN disp AS T4 on T1.client_id= T4.client_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id and T4.account_id = T3.account_id WHERE T1.gender = 'F' ORDER BY T3.amount DESC LIMIT 3"
  },
  {
    "train_idx": 182,
    "db_id": "financial",
    "question": "How many male customers who were born between 1974 and 1976 have made a payment on their home in excess of $4000?",
    "query": "SELECT COUNT(T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T4 ON T2.account_id = T4.account_id INNER JOIN client AS T3 ON T4.client_id = T3.client_id WHERE STRFTIME('%Y', T3.birth_date) BETWEEN '1974' AND '1976' AND T3.gender = 'M' AND T1.amount > 4000 AND T1.k_symbol = 'SIPO'",
    "relevant_table": {
      "trans": {
        "ddl": "create table trans( trans_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, type text, operation text, amount integer, balance integer, k_symbol text, bank text, account integer)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      },
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      }
    },
    "new_relevant_table": {
      "client_disp": {
        "columns": [
          "client_id",
          "gender",
          "birth_date",
          "district_id",
          "disp_id",
          "account_id",
          "type"
        ],
        "ddl": "create table client_disp( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer, disp_id integer, foreign key(account_id) references account(account_id) integer, type text)"
      },
      "trans": {
        "ddl": "create table trans( trans_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, type text, operation text, amount integer, balance integer, k_symbol text, bank text, account integer)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      }
    },
    "old_new_table_mapping": {
      "client": "client_disp",
      "disp": "client_disp"
    },
    "new_table_primary_key": "client_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN client_disp AS T3 ON T2.account_id = T3.account_id WHERE STRFTIME('%Y', T3.birth_date) BETWEEN '1974' AND '1976' AND T3.gender = 'M' AND T1.amount > 4000 AND T1.k_symbol = 'SIPO'"
  },
  {
    "train_idx": 183,
    "db_id": "financial",
    "question": "How many accounts in Beroun were opened after 1996?",
    "query": "SELECT COUNT(account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.date) > '1996' AND T2.A2 = 'Beroun'",
    "relevant_table": {
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "new_relevant_table": {
      "account_district": {
        "columns": [
          "account_id",
          "district_id",
          "frequency",
          "date",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16"
        ],
        "ddl": "create table account_district( account_id integer primary key, district_id integer, frequency text, date date, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "old_new_table_mapping": {
      "account": "account_district",
      "district": "account_district"
    },
    "new_table_primary_key": "account_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(account_id) FROM account_district WHERE STRFTIME('%Y', date) > '1996' AND A2 = 'Beroun'"
  },
  {
    "train_idx": 184,
    "db_id": "financial",
    "question": "How many female customers have a junior credit card?",
    "query": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.gender = 'F' AND T3.type = 'junior'",
    "relevant_table": {
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      },
      "card": {
        "ddl": "create table card( card_id integer primary key, foreign key(disp_id) references disp(disp_id) integer, type text, issued date)"
      }
    },
    "new_relevant_table": {
      "disp_card": {
        "columns": [
          "disp_id",
          "client_id",
          "account_id",
          "disp_type",
          "card_id",
          "card_type",
          "issued"
        ],
        "ddl": "create table disp_card( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, disp_type text, card_id integer, card_type text, issued date)"
      },
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      }
    },
    "old_new_table_mapping": {
      "disp": "disp_card",
      "card": "disp_card"
    },
    "new_table_primary_key": "disp_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "disp_type": {
        "old_table": "disp",
        "old_column": "type"
      },
      "card_type": {
        "old_table": "card",
        "old_column": "type"
      }
    },
    "new_gold_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp_card AS T2 ON T1.client_id = T2.client_id WHERE T1.gender = 'F' AND T2.card_type = 'junior'"
  },
  {
    "train_idx": 185,
    "db_id": "financial",
    "question": "What proportion of customers who have accounts at the Prague branch are female?",
    "query": "SELECT CAST(SUM(T2.gender = 'F') AS REAL) / COUNT(T2.client_id) * 100 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'Prague'",
    "relevant_table": {
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      }
    },
    "new_relevant_table": {
      "district_client": {
        "columns": [
          "district_id",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16",
          "client_id",
          "gender",
          "birth_date"
        ],
        "ddl": "create table district_client( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer, client_id integer, gender text, birth_date date)"
      }
    },
    "old_new_table_mapping": {
      "district": "district_client",
      "client": "district_client"
    },
    "new_table_primary_key": "district_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(district_client.gender = 'F') AS REAL) / COUNT(district_client.client_id) * 100 FROM district_client WHERE district_client.A3 = 'Prague'"
  },
  {
    "train_idx": 186,
    "db_id": "financial",
    "question": "What percentage of male clients request for weekly statements to be issued?",
    "query": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T3 ON T1.district_id = T3.district_id INNER JOIN account AS T2 ON T2.district_id = T3.district_id INNER JOIN disp as T4 on T1.client_id = T4.client_id AND T2.account_id = T4.account_id WHERE T2.frequency = 'POPLATEK TYDNE'",
    "relevant_table": {
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      },
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      }
    },
    "new_relevant_table": {
      "disp_district": {
        "columns": [
          "disp_id",
          "client_id_disp",
          "account_id_disp",
          "type",
          "district_id",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16"
        ],
        "ddl": "create table merged_table( disp_id integer primary key, type text, district_id integer, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references merged_table(district_id) integer)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references merged_table(district_id) integer, frequency text, date date)"
      }
    },
    "old_new_table_mapping": {
      "disp": "merged_table",
      "district": "merged_table"
    },
    "new_table_primary_key": "disp_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp_district AS T3 ON T1.district_id = T3.district_id INNER JOIN account AS T2 ON T2.district_id = T3.district_id WHERE T2.frequency = 'POPLATEK TYDNE'"
  },
  {
    "train_idx": 187,
    "db_id": "financial",
    "question": "How many clients who choose statement of weekly issuance are Owner?",
    "query": "SELECT COUNT(T2.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T2.account_id = T1.account_id WHERE T1.frequency = 'POPLATEK TYDNE' AND T2.type = 'OWNER'",
    "relevant_table": {
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      }
    },
    "new_relevant_table": {
      "account_disp": {
        "columns": [
          "account_id",
          "district_id",
          "frequency",
          "date",
          "disp_id",
          "client_id",
          "type"
        ],
        "ddl": "create table account_disp( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date, disp_id integer, foreign key(client_id) references client(client_id) integer, type text)"
      }
    },
    "old_new_table_mapping": {
      "account": "account_disp",
      "disp": "account_disp"
    },
    "new_table_primary_key": "account_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(account_id) FROM account_disp WHERE frequency = 'POPLATEK TYDNE' AND type = 'OWNER'"
  },
  {
    "train_idx": 188,
    "db_id": "financial",
    "question": "Among the accounts who have loan validity more than 24 months, list out the accounts that have the lowest approved amount and have account opening date before 1997.",
    "query": "SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration > 24 AND STRFTIME('%Y', T2.date) < '1997' ORDER BY T1.amount ASC LIMIT 1",
    "relevant_table": {
      "loan": {
        "ddl": "create table loan( loan_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, amount integer, duration integer, payments real, status text)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      }
    },
    "new_relevant_table": {
      "account_loan": {
        "columns": [
          "account_id",
          "district_id",
          "frequency",
          "account_date",
          "loan_id",
          "loan_date",
          "amount",
          "duration",
          "payments",
          "status"
        ],
        "ddl": "create table account_loan( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, account_date date, loan_id integer, loan_date date, amount integer, duration integer, payments real, status text)"
      }
    },
    "old_new_table_mapping": {
      "account": "account_loan",
      "loan": "account_loan"
    },
    "new_table_primary_key": "account_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "account_date": {
        "old_table": "account",
        "old_column": "date"
      },
      "loan_date": {
        "old_table": "loan",
        "old_column": "date"
      }
    },
    "new_gold_sql": "SELECT account_id FROM account_loan WHERE duration > 24 AND STRFTIME('%Y', account_date) < '1997' ORDER BY amount ASC LIMIT 1"
  },
  {
    "train_idx": 189,
    "db_id": "financial",
    "question": "Name the account numbers of female clients who are oldest and have lowest average salary?",
    "query": "SELECT T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id INNER JOIN disp AS T4 ON T1.client_id = T4.client_id AND T4.account_id = T3.account_id  WHERE T1.gender = 'F' ORDER BY T1.birth_date ASC, T2.A11 ASC LIMIT 1",
    "relevant_table": {
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      },
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      }
    },
    "new_relevant_table": {
      "disp_district": {
        "columns": [
          "disp_id",
          "client_id_disp",
          "account_id_disp",
          "type",
          "district_id",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16"
        ],
        "ddl": "create table merged_table( disp_id integer primary key, type text, district_id integer, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references merged_table(district_id) integer)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references merged_table(district_id) integer, frequency text, date date)"
      }
    },
    "old_new_table_mapping": {
      "disp": "merged_table",
      "district": "merged_table"
    },
    "new_table_primary_key": "disp_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T3.account_id FROM client AS T1 INNER JOIN disp_district AS T2 ON T1.district_id = T2.district_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id WHERE T1.gender = 'F' ORDER BY T1.birth_date ASC, T2.A11 ASC LIMIT 1"
  },
  {
    "train_idx": 190,
    "db_id": "financial",
    "question": "How many clients who were born in 1920 stay in east Bohemia?",
    "query": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.birth_date) = '1920' AND T2.A3 = 'east Bohemia'",
    "relevant_table": {
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      },
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "new_relevant_table": {
      "client_district": {
        "columns": [
          "client_id",
          "gender",
          "birth_date",
          "district_id",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16"
        ],
        "ddl": "create table client_district( client_id integer primary key, gender text, birth_date date, district_id integer, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      }
    },
    "old_new_table_mapping": {
      "client": "client_district",
      "district": "client_district"
    },
    "new_table_primary_key": "client_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(client_id) FROM client_district WHERE STRFTIME('%Y', birth_date) = '1920' AND A3 = 'east Bohemia'"
  },
  {
    "train_idx": 191,
    "db_id": "financial",
    "question": "How many loan accounts are for pre-payment of duration of 24 months with weekly issuance of statement.",
    "query": "SELECT COUNT(T2.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.duration = 24 AND T1.frequency = 'POPLATEK TYDNE'",
    "relevant_table": {
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "loan": {
        "ddl": "create table loan( loan_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, amount integer, duration integer, payments real, status text)"
      }
    },
    "new_relevant_table": {
      "account_loan": {
        "columns": [
          "account_id",
          "district_id",
          "frequency",
          "account_date",
          "loan_id",
          "loan_date",
          "amount",
          "duration",
          "payments",
          "status"
        ],
        "ddl": "create table account_loan( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, account_date date, loan_id integer, loan_date date, amount integer, duration integer, payments real, status text)"
      }
    },
    "old_new_table_mapping": {
      "account": "account_loan",
      "loan": "account_loan"
    },
    "new_table_primary_key": "account_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "account_date": {
        "old_table": "account",
        "old_column": "date"
      },
      "loan_date": {
        "old_table": "loan",
        "old_column": "date"
      }
    },
    "new_gold_sql": "SELECT COUNT(account_id) FROM account_loan WHERE duration = 24 AND frequency = 'POPLATEK TYDNE'"
  },
  {
    "train_idx": 192,
    "db_id": "financial",
    "question": "What is the average amount of loan which are still on running contract with statement issuance after each transaction?",
    "query": "SELECT AVG(T2.amount) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.status IN ('C', 'D') AND T1.frequency = 'POPLATEK PO OBRATU'",
    "relevant_table": {
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "loan": {
        "ddl": "create table loan( loan_id integer primary key, foreign key(account_id) references account(account_id) integer, date date, amount integer, duration integer, payments real, status text)"
      }
    },
    "new_relevant_table": {
      "account_loan": {
        "columns": [
          "account_id",
          "district_id",
          "frequency",
          "date_account",
          "loan_id",
          "date_loan",
          "amount",
          "duration",
          "payments",
          "status"
        ],
        "ddl": "create table account_loan( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date_account date, loan_id integer, date_loan date, amount integer, duration integer, payments real, status text)"
      }
    },
    "old_new_table_mapping": {
      "account": "account_loan",
      "loan": "account_loan"
    },
    "new_table_primary_key": "account_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "date_account": {
        "old_table": "account",
        "old_column": "date"
      },
      "date_loan": {
        "old_table": "loan",
        "old_column": "date"
      }
    },
    "new_gold_sql": "SELECT AVG(amount) FROM account_loan WHERE status IN ('C', 'D') AND frequency = 'POPLATEK PO OBRATU'"
  },
  {
    "train_idx": 193,
    "db_id": "financial",
    "question": "List all ID and district for clients that can only have the right to issue permanent orders or apply for loans.",
    "query": "SELECT T3.client_id, T2.district_id, T2.A2 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id WHERE T3.type = 'OWNER'",
    "relevant_table": {
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references district(district_id) integer, frequency text, date date)"
      },
      "district": {
        "ddl": "create table district( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "district_id",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "A10",
          "A11",
          "A12",
          "A13",
          "A14",
          "A15",
          "A16",
          "disp_id",
          "client_id",
          "account_id",
          "type"
        ],
        "ddl": "create table merged_table( district_id integer primary key, A2 text, A3 text, A4 text, A5 text, A6 text, A7 text, A8 integer, A9 integer, A10 real, A11 integer, A12 real, A13 real, A14 integer, A15 integer, A16 integer, disp_id integer, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      },
      "account": {
        "ddl": "create table account( account_id integer primary key, foreign key(district_id) references merged_table(district_id) integer, frequency text, date date)"
      }
    },
    "old_new_table_mapping": {
      "district": "merged_table",
      "disp": "merged_table"
    },
    "new_table_primary_key": "district_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT client_id, district_id, A2 FROM merged_table WHERE type = 'OWNER'"
  },
  {
    "train_idx": 194,
    "db_id": "financial",
    "question": "Provide the IDs and age of the client with high level credit card, which is eligible for loans.",
    "query": "SELECT T1.client_id, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T3.birth_date) FROM disp AS T1 INNER JOIN card AS T2 ON T2.disp_id = T1.disp_id INNER JOIN client AS T3 ON T1.client_id = T3.client_id WHERE T2.type = 'gold' AND T1.type = 'OWNER'",
    "relevant_table": {
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      },
      "card": {
        "ddl": "create table card( card_id integer primary key, foreign key(disp_id) references disp(disp_id) integer, type text, issued date)"
      },
      "client": {
        "ddl": "create table client( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer)"
      }
    },
    "new_relevant_table": {
      "client_card": {
        "columns": [
          "client_id",
          "gender",
          "birth_date",
          "district_id",
          "card_id",
          "disp_id",
          "type",
          "issued"
        ],
        "ddl": "create table client_card( client_id integer primary key, gender text, birth_date date, foreign key(district_id) references district(district_id) integer, card_id integer, foreign key(disp_id) references disp(disp_id) integer, type text, issued date)"
      },
      "disp": {
        "ddl": "create table disp( disp_id integer primary key, foreign key(client_id) references client_card(client_id) integer, foreign key(account_id) references account(account_id) integer, type text)"
      }
    },
    "old_new_table_mapping": {
      "client": "client_card",
      "card": "client_card"
    },
    "new_table_primary_key": "client_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT client_card.client_id, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', client_card.birth_date) FROM client_card WHERE client_card.type = 'gold' AND client_card.type = 'OWNER'"
  },
  {
    "train_idx": 196,
    "db_id": "toxicology",
    "question": "In the non-carcinogenic molecules, how many contain chlorine atoms?",
    "query": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'cl' AND T1.label = '-'",
    "relevant_table": {
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      },
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      }
    },
    "new_relevant_table": {
      "molecule_atom": {
        "columns": [
          "molecule_id",
          "label",
          "atom_id",
          "element"
        ],
        "ddl": "create table molecule_atom( molecule_id text primary key, label text, atom_id text, element text)"
      }
    },
    "old_new_table_mapping": {
      "molecule": "molecule_atom",
      "atom": "molecule_atom"
    },
    "new_table_primary_key": "molecule_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(DISTINCT molecule_id) FROM molecule_atom WHERE element = 'cl' AND label = '-'"
  },
  {
    "train_idx": 197,
    "db_id": "toxicology",
    "question": "Calculate the average number of oxygen atoms in single-bonded molecules.",
    "query": "SELECT AVG(oxygen_count) FROM (SELECT T1.molecule_id, COUNT(T1.element) AS oxygen_count FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T2.bond_type = '-' AND T1.element = 'o'  GROUP BY T1.molecule_id) AS oxygen_counts",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      }
    },
    "new_relevant_table": {
      "atom_bond": {
        "columns": [
          "bond_id",
          "molecule_id_bond",
          "bond_type",
          "atom_id",
          "molecule_id_atom",
          "element"
        ],
        "ddl": "create table atom_bond( bond_id text primary key, bond_type text, atom_id text, element text)"
      }
    },
    "old_new_table_mapping": {
      "bond": "atom_bond",
      "atom": "atom_bond"
    },
    "new_table_primary_key": "bond_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT AVG(oxygen_count) FROM (SELECT molecule_id_atom, COUNT(element) AS oxygen_count FROM atom_bond WHERE bond_type = '-' AND element = 'o' GROUP BY molecule_id_atom) AS oxygen_counts"
  },
  {
    "train_idx": 198,
    "db_id": "toxicology",
    "question": "On average how many carcinogenic molecules are single bonded?",
    "query": "SELECT AVG(single_bond_count) FROM (SELECT T3.molecule_id, COUNT(T1.bond_type) AS single_bond_count FROM bond AS T1  INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN molecule AS T3 ON T3.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T3.label = '+' GROUP BY T3.molecule_id) AS subquery",
    "relevant_table": {
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      },
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "molecule_atom": {
        "columns": [
          "molecule_id",
          "label",
          "atom_id",
          "element"
        ],
        "ddl": "create table molecule_atom( molecule_id text primary key, label text, atom_id text, element text)"
      },
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule_atom(molecule_id) text, bond_type text)"
      }
    },
    "old_new_table_mapping": {
      "molecule": "molecule_atom",
      "atom": "molecule_atom"
    },
    "new_table_primary_key": "molecule_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT AVG(single_bond_count) FROM (SELECT molecule_atom.molecule_id, COUNT(bond.bond_type) AS single_bond_count FROM bond INNER JOIN molecule_atom ON bond.molecule_id = molecule_atom.molecule_id WHERE bond.bond_type = '-' AND molecule_atom.label = '+' GROUP BY molecule_atom.molecule_id) AS subquery"
  },
  {
    "train_idx": 199,
    "db_id": "toxicology",
    "question": "In the molecule containing sodium atoms, how many are non-carcinogenic?",
    "query": "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'na' AND T2.label = '-'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "molecule_atom": {
        "columns": [
          "molecule_id",
          "label",
          "atom_id",
          "element"
        ],
        "ddl": "create table molecule_atom( molecule_id text primary key, label text, atom_id text, element text)"
      }
    },
    "old_new_table_mapping": {
      "molecule": "molecule_atom",
      "atom": "molecule_atom"
    },
    "new_table_primary_key": "molecule_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(DISTINCT molecule_id) FROM molecule_atom WHERE element = 'na' AND label = '-'"
  },
  {
    "train_idx": 200,
    "db_id": "toxicology",
    "question": "Find the triple-bonded molecules which are carcinogenic.",
    "query": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '+'",
    "relevant_table": {
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "molecule_bond": {
        "columns": [
          "molecule_id",
          "label",
          "bond_id",
          "bond_type"
        ],
        "ddl": "create table molecule_bond( molecule_id text primary key, label text, bond_id text, bond_type text)"
      }
    },
    "old_new_table_mapping": {
      "bond": "molecule_bond",
      "molecule": "molecule_bond"
    },
    "new_table_primary_key": "molecule_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT molecule_id FROM molecule_bond WHERE bond_type = '#' AND label = '+'"
  },
  {
    "train_idx": 201,
    "db_id": "toxicology",
    "question": "What is the percentage of carbon in double-bond molecules?",
    "query": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element = 'c' THEN T1.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '='",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      }
    },
    "new_relevant_table": {
      "atom_bond": {
        "columns": [
          "atom_id",
          "molecule_id_atom",
          "element",
          "bond_id",
          "molecule_id_bond",
          "bond_type"
        ],
        "ddl": "create table atom_bond( atom_id text primary key, element text, bond_id text, bond_type text)"
      }
    },
    "old_new_table_mapping": {
      "atom": "atom_bond",
      "bond": "atom_bond"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN atom_bond.element = 'c' THEN atom_bond.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT atom_bond.atom_id) FROM atom_bond WHERE atom_bond.bond_type = '='"
  },
  {
    "train_idx": 206,
    "db_id": "toxicology",
    "question": "What elements are in the TR004_8_9 bond atoms?",
    "query": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR004_8_9'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "new_relevant_table": {
      "atom_connected": {
        "columns": [
          "atom_id",
          "molecule_id",
          "element",
          "atom_id2",
          "bond_id"
        ],
        "ddl": "create table atom_connected( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "old_new_table_mapping": {
      "atom": "atom_connected",
      "connected": "atom_connected"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT T1.element FROM atom_connected AS T1 WHERE T1.bond_id = 'TR004_8_9'"
  },
  {
    "train_idx": 207,
    "db_id": "toxicology",
    "question": "What elements are in a double type bond?",
    "query": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.bond_type = '='",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      },
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "new_relevant_table": {
      "atom_bond": {
        "columns": [
          "atom_id",
          "molecule_id_atom",
          "element",
          "bond_id",
          "molecule_id_bond",
          "bond_type"
        ],
        "ddl": "create table atom_bond( atom_id text primary key, element text, bond_id text, bond_type text)"
      },
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references atom_bond(atom_id) text, foreign key(atom_id2) references atom_bond(atom_id) text, foreign key(bond_id) references atom_bond(bond_id) text)"
      }
    },
    "old_new_table_mapping": {
      "atom": "atom_bond",
      "bond": "atom_bond"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT element FROM atom_bond WHERE bond_type = '='"
  },
  {
    "train_idx": 208,
    "db_id": "toxicology",
    "question": "Which type of label is the most numerous in atoms with hydrogen?",
    "query": "SELECT T.label FROM ( SELECT T2.label, COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' GROUP BY T2.label ORDER BY COUNT(T2.molecule_id) DESC LIMIT 1 ) t",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "atom_molecule": {
        "columns": [
          "atom_id",
          "molecule_id",
          "element",
          "label"
        ],
        "ddl": "create table atom_molecule( atom_id text primary key, molecule_id text, element text, label text)"
      }
    },
    "old_new_table_mapping": {
      "atom": "atom_molecule",
      "molecule": "atom_molecule"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T.label FROM ( SELECT T.label, COUNT(T.molecule_id) FROM atom_molecule AS T WHERE T.element = 'h' GROUP BY T.label ORDER BY COUNT(T.molecule_id) DESC LIMIT 1 ) t"
  },
  {
    "train_idx": 209,
    "db_id": "toxicology",
    "question": "Chlorine is in what type of bond?",
    "query": "SELECT DISTINCT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T3.element = 'cl'",
    "relevant_table": {
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      },
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      },
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      }
    },
    "new_relevant_table": {
      "bond_connected": {
        "columns": [
          "bond_id",
          "molecule_id",
          "bond_type",
          "atom_id",
          "atom_id2"
        ],
        "ddl": "create table bond_connected( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text, foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text)"
      },
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      }
    },
    "old_new_table_mapping": {
      "connected": "bond_connected",
      "bond": "bond_connected"
    },
    "new_table_primary_key": "bond_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT bond_connected.bond_type FROM bond_connected INNER JOIN atom ON bond_connected.atom_id = atom.atom_id WHERE atom.element = 'cl'"
  },
  {
    "train_idx": 210,
    "db_id": "toxicology",
    "question": "What atoms are connected in single type bonds?",
    "query": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'",
    "relevant_table": {
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      },
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "new_relevant_table": {
      "bond_connected": {
        "columns": [
          "bond_id",
          "foreign key(molecule_id) references molecule(molecule_id)",
          "bond_type",
          "foreign key(atom_id) references atom(atom_id)",
          "foreign key(atom_id2) references atom(atom_id)"
        ],
        "ddl": "create table bond_connected( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text, foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text)"
      }
    },
    "old_new_table_mapping": {
      "bond": "bond_connected",
      "connected": "bond_connected"
    },
    "new_table_primary_key": "bond_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT atom_id, atom_id2 FROM bond_connected WHERE bond_type = '-'"
  },
  {
    "train_idx": 211,
    "db_id": "toxicology",
    "question": "Indicate which atoms are connected in non-carcinogenic type molecules.",
    "query": "SELECT DISTINCT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.label = '-'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      },
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "new_relevant_table": {
      "molecule_connected": {
        "columns": [
          "molecule_id",
          "label",
          "atom_id",
          "atom_id2",
          "bond_id"
        ],
        "ddl": "create table molecule_connected( molecule_id text primary key, label text, foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      },
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule_connected(molecule_id) text, element text)"
      }
    },
    "old_new_table_mapping": {
      "molecule": "molecule_connected",
      "connected": "molecule_connected"
    },
    "new_table_primary_key": "molecule_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT T1.atom_id FROM molecule_connected AS T1 WHERE T1.label = '-'"
  },
  {
    "train_idx": 212,
    "db_id": "toxicology",
    "question": "Which element is the least numerous in non-carcinogenic molecules?",
    "query": "SELECT T.element FROM (SELECT T1.element, COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' GROUP BY T1.element ORDER BY COUNT(DISTINCT T1.molecule_id) ASC LIMIT 1) t",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "atom_molecule": {
        "columns": [
          "atom_id",
          "molecule_id",
          "element",
          "label"
        ],
        "ddl": "create table atom_molecule( atom_id text primary key, molecule_id text, element text, label text)"
      }
    },
    "old_new_table_mapping": {
      "atom": "atom_molecule",
      "molecule": "atom_molecule"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.element FROM (SELECT T1.element, COUNT(DISTINCT T1.molecule_id) FROM atom_molecule AS T1 WHERE T1.label = '-' GROUP BY T1.element ORDER BY COUNT(DISTINCT T1.molecule_id) ASC LIMIT 1) t"
  },
  {
    "train_idx": 213,
    "db_id": "toxicology",
    "question": "What type of bond is there between the atoms TR004_8 and TR004_20?",
    "query": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR004_8' AND T2.atom_id2 = 'TR004_20' OR T2.atom_id2 = 'TR004_8' AND T2.atom_id = 'TR004_20'",
    "relevant_table": {
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      },
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "new_relevant_table": {
      "bond_connected": {
        "columns": [
          "bond_id",
          "molecule_id",
          "bond_type",
          "atom_id",
          "atom_id2"
        ],
        "ddl": "create table bond_connected( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text, foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text)"
      }
    },
    "old_new_table_mapping": {
      "bond": "bond_connected",
      "connected": "bond_connected"
    },
    "new_table_primary_key": "bond_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.bond_type FROM bond_connected AS T1 WHERE T1.atom_id = 'TR004_8' AND T1.atom_id2 = 'TR004_20' OR T1.atom_id2 = 'TR004_8' AND T1.atom_id = 'TR004_20'"
  },
  {
    "train_idx": 214,
    "db_id": "toxicology",
    "question": "What type of label is not on molecules with atoms with tin?",
    "query": "SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element != 'sn'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "atom_molecule": {
        "columns": [
          "molecule_id",
          "label",
          "atom_id",
          "element"
        ],
        "ddl": "create table atom_molecule( molecule_id text primary key, label text, atom_id text, element text)"
      }
    },
    "old_new_table_mapping": {
      "molecule": "atom_molecule",
      "atom": "atom_molecule"
    },
    "new_table_primary_key": "molecule_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT label FROM atom_molecule WHERE element != 'sn'"
  },
  {
    "train_idx": 215,
    "db_id": "toxicology",
    "question": "How many atoms with iodine and with sulfur type elements are there in single bond molecules?",
    "query": "SELECT COUNT(DISTINCT CASE WHEN T1.element = 'i' THEN T1.atom_id ELSE NULL END) AS iodine_nums , COUNT(DISTINCT CASE WHEN T1.element = 's' THEN T1.atom_id ELSE NULL END) AS sulfur_nums FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      },
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      }
    },
    "new_relevant_table": {
      "atom_connected": {
        "columns": [
          "atom_id",
          "molecule_id",
          "element",
          "atom_id2",
          "bond_id"
        ],
        "ddl": "create table atom_connected( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text, foreign key(bond_id) references bond(bond_id) text)"
      },
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      }
    },
    "old_new_table_mapping": {
      "connected": "atom_connected",
      "atom": "atom_connected"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(DISTINCT CASE WHEN T1.element = 'i' THEN T1.atom_id ELSE NULL END) AS iodine_nums , COUNT(DISTINCT CASE WHEN T1.element = 's' THEN T1.atom_id ELSE NULL END) AS sulfur_nums FROM atom_connected AS T1 INNER JOIN bond AS T3 ON T1.bond_id = T3.bond_id WHERE T3.bond_type = '-'"
  },
  {
    "train_idx": 216,
    "db_id": "toxicology",
    "question": "Identify all connected atoms with a triple bond.",
    "query": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#'",
    "relevant_table": {
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      },
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "new_relevant_table": {
      "bond_connected": {
        "columns": [
          "bond_id",
          "atom_id",
          "atom_id2",
          "molecule_id",
          "bond_type"
        ],
        "ddl": "create table bond_connected( bond_id text, foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      }
    },
    "old_new_table_mapping": {
      "connected": "bond_connected",
      "bond": "bond_connected"
    },
    "new_table_primary_key": "'bond_id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT bond_connected.atom_id, bond_connected.atom_id2 FROM bond_connected WHERE bond_connected.bond_type = '#'"
  },
  {
    "train_idx": 217,
    "db_id": "toxicology",
    "question": "Identify all the atoms that are connected to the atoms of the TR181 molecule.",
    "query": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id WHERE T1.molecule_id = 'TR181'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "new_relevant_table": {
      "atom_connected": {
        "columns": [
          "atom_id",
          "atom_id2",
          "bond_id",
          "molecule_id",
          "element"
        ],
        "ddl": "create table atom_connected( atom_id text primary key, foreign key(bond_id) references bond(bond_id) text, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      }
    },
    "old_new_table_mapping": {
      "connected": "atom_connected",
      "atom": "atom_connected"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT atom_id, atom_id2 FROM atom_connected WHERE molecule_id = 'TR181'"
  },
  {
    "train_idx": 218,
    "db_id": "toxicology",
    "question": "What percentage of carcinogenic-type molecules does not contain fluorine?",
    "query": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element <> 'f' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "atom_molecule": {
        "columns": [
          "atom_id",
          "molecule_id",
          "element",
          "label"
        ],
        "ddl": "create table atom_molecule( atom_id text primary key, molecule_id text, element text, label text)"
      }
    },
    "old_new_table_mapping": {
      "atom": "atom_molecule",
      "molecule": "atom_molecule"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN element <> 'f' THEN molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT molecule_id) FROM atom_molecule WHERE label = '+'"
  },
  {
    "train_idx": 219,
    "db_id": "toxicology",
    "question": "What is the percentage of carcinogenic molecules in triple type bonds?",
    "query": "SELECT CAST(COUNT(DISTINCT CASE WHEN T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      },
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      }
    },
    "new_relevant_table": {
      "molecule_bond": {
        "columns": [
          "molecule_id",
          "label",
          "bond_id",
          "bond_type"
        ],
        "ddl": "create table molecule_bond( molecule_id text primary key, label text, bond_id text, bond_type text)"
      },
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule_bond(molecule_id) text, element text)"
      }
    },
    "old_new_table_mapping": {
      "bond": "molecule_bond",
      "molecule": "molecule_bond"
    },
    "new_table_primary_key": "molecule_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN molecule_bond.label = '+' THEN molecule_bond.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT molecule_bond.molecule_id) FROM molecule_bond WHERE molecule_bond.bond_type = '#'"
  },
  {
    "train_idx": 230,
    "db_id": "toxicology",
    "question": "What are the elements of the toxicology and label of molecule TR060?",
    "query": "SELECT DISTINCT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR060'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "atom_molecule": {
        "columns": [
          "atom_id",
          "molecule_id",
          "element",
          "label"
        ],
        "ddl": "create table atom_molecule( atom_id text primary key, molecule_id text, element text, label text)"
      }
    },
    "old_new_table_mapping": {
      "atom": "atom_molecule",
      "molecule": "atom_molecule"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT atom_molecule.element, atom_molecule.label FROM atom_molecule WHERE atom_molecule.molecule_id = 'TR060'"
  },
  {
    "train_idx": 232,
    "db_id": "toxicology",
    "question": "Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order.",
    "query": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-' ORDER BY T2.molecule_id LIMIT 3",
    "relevant_table": {
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "molecule_bond": {
        "columns": [
          "molecule_id",
          "label",
          "bond_id",
          "bond_type"
        ],
        "ddl": "create table molecule_bond( molecule_id text primary key, label text, bond_id text, bond_type text)"
      }
    },
    "old_new_table_mapping": {
      "bond": "molecule_bond",
      "molecule": "molecule_bond"
    },
    "new_table_primary_key": "molecule_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT molecule_id FROM molecule_bond WHERE bond_type = '-' AND label = '-' ORDER BY molecule_id LIMIT 3"
  },
  {
    "train_idx": 233,
    "db_id": "toxicology",
    "question": "Please list top two bonds that happened with the molecule TR006 in alphabetical order.",
    "query": "SELECT DISTINCT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.molecule_id = 'TR006' ORDER BY T2.bond_id LIMIT 2",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "new_relevant_table": {
      "atom_connected": {
        "columns": [
          "atom_id",
          "molecule_id",
          "element",
          "atom_id2",
          "bond_id"
        ],
        "ddl": "create table atom_connected( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "old_new_table_mapping": {
      "atom": "atom_connected",
      "connected": "atom_connected"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT bond_id FROM atom_connected WHERE molecule_id = 'TR006' ORDER BY bond_id LIMIT 2"
  },
  {
    "train_idx": 234,
    "db_id": "toxicology",
    "question": "How many bonds which involved atom 12 does molecule TR009 have?",
    "query": "SELECT COUNT(T2.bond_id) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR009' AND T2.atom_id = T1.molecule_id || '_1' AND T2.atom_id2 = T1.molecule_id || '_2'",
    "relevant_table": {
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      },
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "new_relevant_table": {
      "bond_connected": {
        "columns": [
          "bond_id",
          "molecule_id",
          "bond_type",
          "atom_id",
          "atom_id2"
        ],
        "ddl": "create table bond_connected( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text, foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text)"
      }
    },
    "old_new_table_mapping": {
      "bond": "bond_connected",
      "connected": "bond_connected"
    },
    "new_table_primary_key": "bond_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(bond_id) FROM bond_connected WHERE molecule_id = 'TR009' AND atom_id = molecule_id || '_1' AND atom_id2 = molecule_id || '_2'"
  },
  {
    "train_idx": 235,
    "db_id": "toxicology",
    "question": "How many molecules are carcinogenic and have the bromine element?",
    "query": "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'br'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "atom_molecule": {
        "columns": [
          "atom_id",
          "molecule_id",
          "element",
          "label"
        ],
        "ddl": "create table atom_molecule( atom_id text primary key, molecule_id text, element text, label text)"
      }
    },
    "old_new_table_mapping": {
      "atom": "atom_molecule",
      "molecule": "atom_molecule"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(DISTINCT molecule_id) FROM atom_molecule WHERE label = '+' AND element = 'br'"
  },
  {
    "train_idx": 236,
    "db_id": "toxicology",
    "question": "What are the bond type and the atoms of the bond ID of TR001_6_9?",
    "query": "SELECT T1.bond_type, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_id = 'TR001_6_9'",
    "relevant_table": {
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      },
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "new_relevant_table": {
      "bond_connected": {
        "columns": [
          "bond_id",
          "foreign key(molecule_id) references molecule(molecule_id)",
          "bond_type",
          "foreign key(atom_id) references atom(atom_id)",
          "foreign key(atom_id2) references atom(atom_id)",
          "foreign key(bond_id) references bond(bond_id)"
        ],
        "ddl": "create table bond_connected( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text, foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "old_new_table_mapping": {
      "bond": "bond_connected",
      "connected": "bond_connected"
    },
    "new_table_primary_key": "bond_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT bond_type, atom_id, atom_id2 FROM bond_connected WHERE bond_id = 'TR001_6_9'"
  },
  {
    "train_idx": 237,
    "db_id": "toxicology",
    "question": "Which molecule does the atom TR001_10 belong to? Please state whether this molecule is carcinogenic or not.",
    "query": "SELECT T2.molecule_id , IIF(T2.label = '+', 'YES', 'NO') AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_10'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "atom_molecule": {
        "columns": [
          "atom_id",
          "molecule_id",
          "element",
          "label"
        ],
        "ddl": "create table atom_molecule( atom_id text primary key, molecule_id text, element text, label text)"
      }
    },
    "old_new_table_mapping": {
      "atom": "atom_molecule",
      "molecule": "atom_molecule"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT atom_molecule.molecule_id , IIF(atom_molecule.label = '+', 'YES', 'NO') AS flag_carcinogenic FROM atom_molecule WHERE atom_molecule.atom_id = 'TR001_10'"
  },
  {
    "train_idx": 242,
    "db_id": "toxicology",
    "question": "Among all the atoms from 21 to 25, list all the molecules that are carcinogenic.",
    "query": "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE SUBSTR(T1.atom_id, -2) BETWEEN '21' AND '25' AND T2.label = '+'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "molecule_atom": {
        "columns": [
          "molecule_id",
          "label",
          "atom_id",
          "element"
        ],
        "ddl": "create table molecule_atom( molecule_id text primary key, label text, atom_id text, element text)"
      }
    },
    "old_new_table_mapping": {
      "molecule": "molecule_atom",
      "atom": "molecule_atom"
    },
    "new_table_primary_key": "molecule_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT molecule_id FROM molecule_atom WHERE SUBSTR(atom_id, -2) BETWEEN '21' AND '25' AND label = '+'"
  },
  {
    "train_idx": 243,
    "db_id": "toxicology",
    "question": "What are the bonds that have phosphorus and nitrogen as their atom elements?",
    "query": "SELECT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id IN ( SELECT T3.bond_id FROM connected AS T3 INNER JOIN atom AS T4 ON T3.atom_id = T4.atom_id WHERE T4.element = 'p' ) AND T1.element = 'n'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "new_relevant_table": {
      "atom_connected": {
        "columns": [
          "atom_id",
          "molecule_id",
          "element",
          "atom_id2",
          "bond_id"
        ],
        "ddl": "create table atom_connected( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "old_new_table_mapping": {
      "connected": "atom_connected",
      "atom": "atom_connected"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT atom_connected.bond_id FROM atom_connected WHERE atom_connected.bond_id IN (SELECT atom_connected.bond_id FROM atom_connected WHERE atom_connected.element = 'p') AND atom_connected.element = 'n'"
  },
  {
    "train_idx": 244,
    "db_id": "toxicology",
    "question": "Is the molecule with the most double bonds carcinogenic?",
    "query": "SELECT T1.label FROM molecule AS T1 INNER JOIN ( SELECT T.molecule_id, COUNT(T.bond_type) FROM bond AS T WHERE T.bond_type = '=' GROUP BY T.molecule_id ORDER BY COUNT(T.bond_type) DESC LIMIT 1 ) AS T2 ON T1.molecule_id = T2.molecule_id",
    "relevant_table": {
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      },
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      }
    },
    "new_relevant_table": {
      "molecule_bond": {
        "columns": [
          "molecule_id",
          "label",
          "bond_id",
          "bond_type"
        ],
        "ddl": "create table molecule_bond( molecule_id text primary key, label text, bond_id text, bond_type text)"
      }
    },
    "old_new_table_mapping": {
      "bond": "molecule_bond",
      "molecule": "molecule_bond"
    },
    "new_table_primary_key": "molecule_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.label FROM molecule_bond AS T1 INNER JOIN ( SELECT T.molecule_id, COUNT(T.bond_type) FROM molecule_bond AS T WHERE T.bond_type = '=' GROUP BY T.molecule_id ORDER BY COUNT(T.bond_type) DESC LIMIT 1 ) AS T2 ON T1.molecule_id = T2.molecule_id"
  },
  {
    "train_idx": 245,
    "db_id": "toxicology",
    "question": "What is the average number of bonds the atoms with the element iodine have?",
    "query": "SELECT CAST(COUNT(T2.bond_id) AS REAL) / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'i'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "new_relevant_table": {
      "atom_connected": {
        "columns": [
          "atom_id",
          "molecule_id",
          "element",
          "atom_id2",
          "bond_id"
        ],
        "ddl": "create table atom_connected( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "old_new_table_mapping": {
      "connected": "atom_connected",
      "atom": "atom_connected"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(COUNT(T1.bond_id) AS REAL) / COUNT(T1.atom_id) FROM atom_connected AS T1 WHERE T1.element = 'i'"
  },
  {
    "train_idx": 246,
    "db_id": "toxicology",
    "question": "List the bond type and the bond ID of the atom 45.",
    "query": "SELECT T1.bond_type, T1.bond_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE SUBSTR(T2.atom_id, 7, 2) = '45'",
    "relevant_table": {
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      },
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "new_relevant_table": {
      "bond_connected": {
        "columns": [
          "bond_id",
          "molecule_id",
          "bond_type",
          "atom_id",
          "atom_id2"
        ],
        "ddl": "create table bond_connected( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text, foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text)"
      }
    },
    "old_new_table_mapping": {
      "bond": "bond_connected",
      "connected": "bond_connected"
    },
    "new_table_primary_key": "bond_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.bond_type, T1.bond_id FROM bond_connected AS T1 WHERE SUBSTR(T1.atom_id, 7, 2) = '45'"
  },
  {
    "train_idx": 247,
    "db_id": "toxicology",
    "question": "List all the elements of atoms that can not bond with any other atoms.",
    "query": "SELECT DISTINCT T.element FROM atom AS T WHERE T.element NOT IN ( SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id )",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "new_relevant_table": {
      "atom_connected": {
        "columns": [
          "atom_id",
          "molecule_id",
          "element",
          "atom_id2",
          "bond_id"
        ],
        "ddl": "create table atom_connected( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "old_new_table_mapping": {
      "connected": "atom_connected",
      "atom": "atom_connected"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT T.element FROM atom_connected AS T WHERE T.element NOT IN ( SELECT DISTINCT element FROM atom_connected)"
  },
  {
    "train_idx": 248,
    "db_id": "toxicology",
    "question": "What are the atoms of the triple bond with the molecule \"TR041\"?",
    "query": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '#' AND T3.molecule_id = 'TR041'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      },
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      }
    },
    "new_relevant_table": {
      "atom_connected": {
        "columns": [
          "atom_id",
          "molecule_id",
          "element",
          "atom_id2",
          "bond_id"
        ],
        "ddl": "create table atom_connected( atom_id text, foreign key(molecule_id) references molecule(molecule_id) text, element text, foreign key(bond_id) references bond(bond_id) text)"
      },
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      }
    },
    "old_new_table_mapping": {
      "atom": "atom_connected",
      "connected": "atom_connected"
    },
    "new_table_primary_key": "'atom_id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.atom_id, T1.atom_id2 FROM atom_connected AS T1 INNER JOIN bond AS T3 ON T1.bond_id = T3.bond_id WHERE T3.bond_type = '#' AND T3.molecule_id = 'TR041'"
  },
  {
    "train_idx": 249,
    "db_id": "toxicology",
    "question": "What are the elements of the atoms of TR144_8_19?",
    "query": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR144_8_19'",
    "relevant_table": {
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      },
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      }
    },
    "new_relevant_table": {
      "atom_connected": {
        "columns": [
          "atom_id",
          "molecule_id",
          "element",
          "atom_id2",
          "bond_id"
        ],
        "ddl": "create table atom_connected( atom_id text, foreign key(molecule_id) references molecule(molecule_id) text, element text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "old_new_table_mapping": {
      "atom": "atom_connected",
      "connected": "atom_connected"
    },
    "new_table_primary_key": "'atom_id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT element FROM atom_connected WHERE bond_id = 'TR144_8_19'"
  },
  {
    "train_idx": 250,
    "db_id": "toxicology",
    "question": "Of all the carcinogenic molecules, which one has the most double bonds?",
    "query": "SELECT T.molecule_id FROM ( SELECT T3.molecule_id, COUNT(T1.bond_type) FROM bond AS T1 INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = '+' AND T1.bond_type = '=' GROUP BY T3.molecule_id ORDER BY COUNT(T1.bond_type) DESC LIMIT 1 ) AS T",
    "relevant_table": {
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "molecule_bond": {
        "columns": [
          "molecule_id",
          "label",
          "bond_id",
          "bond_type"
        ],
        "ddl": "create table molecule_bond( molecule_id text, label text, bond_id text, bond_type text)"
      }
    },
    "old_new_table_mapping": {
      "molecule": "molecule_bond",
      "bond": "molecule_bond"
    },
    "new_table_primary_key": "'molecule_id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T.molecule_id FROM ( SELECT T1.molecule_id, COUNT(T1.bond_type) FROM molecule_bond AS T1 WHERE T1.label = '+' AND T1.bond_type = '=' GROUP BY T1.molecule_id ORDER BY COUNT(T1.bond_type) DESC LIMIT 1 ) AS T"
  },
  {
    "train_idx": 251,
    "db_id": "toxicology",
    "question": "What is the least common element of all carcinogenic molecules?",
    "query": "SELECT T.element FROM ( SELECT T2.element, COUNT(DISTINCT T2.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' GROUP BY T2.element ORDER BY COUNT(DISTINCT T2.molecule_id) LIMIT 1 ) t",
    "relevant_table": {
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      },
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      }
    },
    "new_relevant_table": {
      "molecule_atom": {
        "columns": [
          "molecule_id",
          "label",
          "atom_id",
          "element"
        ],
        "ddl": "create table molecule_atom( molecule_id text primary key, label text, atom_id text, element text)"
      }
    },
    "old_new_table_mapping": {
      "molecule": "molecule_atom",
      "atom": "molecule_atom"
    },
    "new_table_primary_key": "molecule_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T.element FROM ( SELECT T1.element, COUNT(DISTINCT T1.molecule_id) FROM molecule_atom WHERE T1.label = '+' GROUP BY T1.element ORDER BY COUNT(DISTINCT T1.molecule_id) LIMIT 1 ) t"
  },
  {
    "train_idx": 252,
    "db_id": "toxicology",
    "question": "What are the atoms that can bond with the atom that has the element lead?",
    "query": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'pb'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "new_relevant_table": {
      "atom_connected": {
        "columns": [
          "atom_id",
          "molecule_id",
          "element",
          "atom_id2",
          "bond_id"
        ],
        "ddl": "create table atom_connected( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "old_new_table_mapping": {
      "atom": "atom_connected",
      "connected": "atom_connected"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT atom_id, atom_id2 FROM atom_connected WHERE element = 'pb'"
  },
  {
    "train_idx": 253,
    "db_id": "toxicology",
    "question": "List the elements of all the triple bonds.",
    "query": "SELECT DISTINCT T3.element FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_type = '#'",
    "relevant_table": {
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      },
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      },
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      }
    },
    "new_relevant_table": {
      "molecule_structure": {
        "columns": [
          "bond_id",
          "molecule_id_bond",
          "bond_type",
          "atom_id",
          "molecule_id_atom",
          "element"
        ],
        "ddl": "create table molecule_structure( bond_id text primary key, bond_type text, atom_id text, element text)"
      },
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references molecule_structure(atom_id) text, foreign key(atom_id2) references molecule_structure(atom_id) text, foreign key(bond_id) references molecule_structure(bond_id) text)"
      }
    },
    "old_new_table_mapping": {
      "bond": "molecule_structure",
      "atom": "molecule_structure"
    },
    "new_table_primary_key": "bond_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT molecule_structure.element FROM molecule_structure WHERE molecule_structure.bond_type = '#'"
  },
  {
    "train_idx": 254,
    "db_id": "toxicology",
    "question": "What percentage of bonds have the most common combination of atoms' elements?",
    "query": "SELECT CAST((SELECT COUNT(T1.atom_id) FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id GROUP BY T2.bond_type ORDER BY COUNT(T2.bond_id) DESC LIMIT 1 ) AS REAL) * 100 / ( SELECT COUNT(atom_id) FROM connected )",
    "relevant_table": {
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      },
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      }
    },
    "new_relevant_table": {
      "connected_bond": {
        "columns": [
          "atom_id",
          "atom_id2",
          "bond_id",
          "molecule_id",
          "bond_type"
        ],
        "ddl": "create table connected_bond( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      }
    },
    "old_new_table_mapping": {
      "connected": "connected_bond",
      "bond": "connected_bond"
    },
    "new_table_primary_key": "bond_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST((SELECT COUNT(T1.atom_id) FROM connected_bond AS T1 GROUP BY T1.bond_type ORDER BY COUNT(T1.bond_id) DESC LIMIT 1 ) AS REAL) * 100 / ( SELECT COUNT(atom_id) FROM connected_bond )"
  },
  {
    "train_idx": 255,
    "db_id": "toxicology",
    "question": "What proportion of single bonds are carcinogenic? Please provide your answer as a percentage with five decimal places.",
    "query": "SELECT ROUND(CAST(COUNT(CASE WHEN T2.label = '+' THEN T1.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.bond_id),5) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-'",
    "relevant_table": {
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "molecule_bond": {
        "columns": [
          "molecule_id",
          "label",
          "bond_id",
          "bond_type"
        ],
        "ddl": "create table molecule_bond( molecule_id text primary key, label text, bond_id text, bond_type text)"
      }
    },
    "old_new_table_mapping": {
      "molecule": "molecule_bond",
      "bond": "molecule_bond"
    },
    "new_table_primary_key": "molecule_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT ROUND(CAST(COUNT(CASE WHEN label = '+' THEN bond_id ELSE NULL END) AS REAL) * 100 / COUNT(bond_id),5) FROM molecule_bond WHERE bond_type = '-'"
  },
  {
    "train_idx": 257,
    "db_id": "toxicology",
    "question": "List down atom id2 for atoms with element sulfur.",
    "query": "SELECT DISTINCT T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 's'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "new_relevant_table": {
      "atom_connected": {
        "columns": [
          "atom_id",
          "molecule_id",
          "element",
          "atom_id2",
          "bond_id"
        ],
        "ddl": "create table atom_connected( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "old_new_table_mapping": {
      "connected": "atom_connected",
      "atom": "atom_connected"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT atom_connected.atom_id2 FROM atom_connected WHERE atom_connected.element = 's'"
  },
  {
    "train_idx": 258,
    "db_id": "toxicology",
    "question": "What are the bond type for atoms with element Tin?",
    "query": "SELECT DISTINCT T3.bond_type FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T3.bond_id = T2.bond_id WHERE T1.element = 'sn'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      },
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      }
    },
    "new_relevant_table": {
      "connected_bond": {
        "columns": [
          "bond_id",
          "foreign key(molecule_id) references molecule(molecule_id)",
          "bond_type",
          "foreign key(atom_id) references atom(atom_id)",
          "foreign key(atom_id2) references atom(atom_id)",
          "foreign key(bond_id) references bond(bond_id)"
        ],
        "ddl": "create table merged_table( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text, foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      },
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      }
    },
    "old_new_table_mapping": {
      "bond": "merged_table",
      "connected": "merged_table"
    },
    "new_table_primary_key": "bond_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT T2.bond_type FROM atom AS T1 INNER JOIN connected_bond AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'sn'"
  },
  {
    "train_idx": 259,
    "db_id": "toxicology",
    "question": "How many elements are there for single bond molecules?",
    "query": "SELECT COUNT(DISTINCT T.element) FROM ( SELECT DISTINCT T2.molecule_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      },
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      }
    },
    "new_relevant_table": {
      "molecule_bond": {
        "columns": [
          "molecule_id",
          "label",
          "bond_id",
          "bond_type"
        ],
        "ddl": "create table molecule_bond( molecule_id text primary key, label text, bond_id text, bond_type text)"
      },
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule_bond(molecule_id) text, element text)"
      }
    },
    "old_new_table_mapping": {
      "bond": "molecule_bond",
      "molecule": "molecule_bond"
    },
    "new_table_primary_key": "molecule_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(DISTINCT T.element) FROM ( SELECT DISTINCT molecule_bond.molecule_id, T1.element FROM atom AS T1 INNER JOIN molecule_bond ON T1.molecule_id = molecule_bond.molecule_id WHERE molecule_bond.bond_type = '-' ) AS T"
  },
  {
    "train_idx": 260,
    "db_id": "toxicology",
    "question": "Calculate the total atoms with triple-bond molecules containing the element phosphorus or bromine.",
    "query": "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T1.element IN ('p', 'br')",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      },
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      }
    },
    "new_relevant_table": {
      "atom_molecule": {
        "columns": [
          "atom_id",
          "molecule_id",
          "element",
          "label"
        ],
        "ddl": "create table atom_molecule( atom_id text primary key, molecule_id text, element text, label text)"
      },
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references atom_molecule(molecule_id) text, bond_type text)"
      }
    },
    "old_new_table_mapping": {
      "atom": "atom_molecule",
      "molecule": "atom_molecule"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(T1.atom_id) FROM atom_molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#' AND T1.element IN ('p', 'br')"
  },
  {
    "train_idx": 261,
    "db_id": "toxicology",
    "question": "Write down bond id for molecules that are carcinogenic.",
    "query": "SELECT DISTINCT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
    "relevant_table": {
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "molecule_bond": {
        "columns": [
          "molecule_id",
          "label",
          "bond_id",
          "bond_type"
        ],
        "ddl": "create table molecule_bond( molecule_id text, label text, bond_id text, bond_type text)"
      }
    },
    "old_new_table_mapping": {
      "bond": "molecule_bond",
      "molecule": "molecule_bond"
    },
    "new_table_primary_key": "'molecule_id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT molecule_bond.bond_id FROM molecule_bond WHERE molecule_bond.label = '+'"
  },
  {
    "train_idx": 262,
    "db_id": "toxicology",
    "question": "Among the single bond molecule id, which molecules are not carcinogenic?",
    "query": "SELECT DISTINCT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.bond_type = '-'",
    "relevant_table": {
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "molecule_bond": {
        "columns": [
          "molecule_id",
          "label",
          "bond_id",
          "bond_type"
        ],
        "ddl": "create table molecule_bond( molecule_id text primary key, label text, bond_id text, bond_type text)"
      }
    },
    "old_new_table_mapping": {
      "bond": "molecule_bond",
      "molecule": "molecule_bond"
    },
    "new_table_primary_key": "molecule_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT molecule_id FROM molecule_bond WHERE label = '-' AND bond_type = '-'"
  },
  {
    "train_idx": 263,
    "db_id": "toxicology",
    "question": "What is the composition of element chlorine in percentage among the single bond molecules?",
    "query": "SELECT CAST(COUNT(CASE WHEN T.element = 'cl' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id) FROM ( SELECT T1.atom_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      },
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      }
    },
    "new_relevant_table": {
      "molecule_bond": {
        "columns": [
          "molecule_id",
          "label",
          "bond_id",
          "bond_type"
        ],
        "ddl": "create table molecule_bond( molecule_id text primary key, label text, bond_id text, bond_type text)"
      },
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule_bond(molecule_id) text, element text)"
      }
    },
    "old_new_table_mapping": {
      "molecule": "molecule_bond",
      "bond": "molecule_bond"
    },
    "new_table_primary_key": "molecule_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(COUNT(CASE WHEN T.element = 'cl' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id) FROM ( SELECT T1.atom_id, T1.element FROM atom AS T1 INNER JOIN molecule_bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-' ) AS T"
  },
  {
    "train_idx": 267,
    "db_id": "toxicology",
    "question": "List down the bond type for molecules from molecule id TR000 to TR050.",
    "query": "SELECT T2.molecule_id, T2.bond_type FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id BETWEEN 'TR000' AND 'TR050'",
    "relevant_table": {
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      },
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      }
    },
    "new_relevant_table": {
      "molecule_bond": {
        "columns": [
          "molecule_id",
          "label",
          "bond_id",
          "bond_type"
        ],
        "ddl": "create table molecule_bond( molecule_id text, label text, bond_id text, bond_type text)"
      }
    },
    "old_new_table_mapping": {
      "molecule": "molecule_bond",
      "bond": "molecule_bond"
    },
    "new_table_primary_key": "'molecule_id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT molecule_id, bond_type FROM molecule_bond WHERE molecule_id BETWEEN 'TR000' AND 'TR050'"
  },
  {
    "train_idx": 268,
    "db_id": "toxicology",
    "question": "What are the elements for bond id TR001_10_11?",
    "query": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR001_10_11'",
    "relevant_table": {
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      },
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      }
    },
    "new_relevant_table": {
      "atom_connected": {
        "columns": [
          "atom_id",
          "molecule_id",
          "element",
          "atom_id2",
          "bond_id"
        ],
        "ddl": "create table atom_connected( atom_id text, foreign key(molecule_id) references molecule(molecule_id) text, element text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "old_new_table_mapping": {
      "atom": "atom_connected",
      "connected": "atom_connected"
    },
    "new_table_primary_key": "'atom_id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT element FROM atom_connected WHERE bond_id = 'TR001_10_11'"
  },
  {
    "train_idx": 269,
    "db_id": "toxicology",
    "question": "How many bond id have element iodine?",
    "query": "SELECT COUNT(T3.bond_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T1.element = 'i'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      },
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      }
    },
    "new_relevant_table": {
      "atom_bond": {
        "columns": [
          "atom_id",
          "molecule_id_atom",
          "element",
          "bond_id",
          "molecule_id_bond",
          "bond_type"
        ],
        "ddl": "create table atom_bond( atom_id text primary key, element text, bond_id text, bond_type text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "old_new_table_mapping": {
      "bond": "atom_bond",
      "atom": "atom_bond"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(atom_bond.bond_id) FROM atom_bond WHERE atom_bond.element = 'i'"
  },
  {
    "train_idx": 270,
    "db_id": "toxicology",
    "question": "Among the molecules with element Calcium, are they mostly carcinogenic or non carcinogenic?",
    "query": "SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca' GROUP BY T2.label ORDER BY COUNT(T2.label) DESC LIMIT 1",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "atom_molecule": {
        "columns": [
          "atom_id",
          "molecule_id",
          "element",
          "label"
        ],
        "ddl": "create table atom_molecule( atom_id text primary key, molecule_id text, element text, label text)"
      }
    },
    "old_new_table_mapping": {
      "atom": "atom_molecule",
      "molecule": "atom_molecule"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT label FROM atom_molecule WHERE element = 'ca' GROUP BY label ORDER BY COUNT(label) DESC LIMIT 1"
  },
  {
    "train_idx": 271,
    "db_id": "toxicology",
    "question": "Does bond id TR001_1_8 have both element of chlorine and carbon?",
    "query": "SELECT T2.bond_id, T2.atom_id2, T1.element AS flag_have_CaCl FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id WHERE T2.bond_id = 'TR001_1_8' AND (T1.element = 'c1' OR T1.element = 'c')",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "new_relevant_table": {
      "atom_connected": {
        "columns": [
          "atom_id",
          "molecule_id",
          "element",
          "atom_id2",
          "bond_id"
        ],
        "ddl": "create table atom_connected( atom_id text, foreign key(molecule_id) references molecule(molecule_id) text, element text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "old_new_table_mapping": {
      "atom": "atom_connected",
      "connected": "atom_connected"
    },
    "new_table_primary_key": "'atom_id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.bond_id, T1.atom_id2, T1.element AS flag_have_CaCl FROM atom_connected AS T1 WHERE T1.bond_id = 'TR001_1_8' AND (T1.element = 'c1' OR T1.element = 'c')"
  },
  {
    "train_idx": 272,
    "db_id": "toxicology",
    "question": "List down two molecule id of triple bond non carcinogenic molecules with element carbon.",
    "query": "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T1.element = 'c' AND T2.label = '-'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      },
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      }
    },
    "new_relevant_table": {
      "molecule_bond": {
        "columns": [
          "molecule_id",
          "label",
          "bond_id",
          "bond_type"
        ],
        "ddl": "create table molecule_bond( molecule_id text primary key, label text, bond_id text, bond_type text)"
      },
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule_bond(molecule_id) text, element text)"
      }
    },
    "old_new_table_mapping": {
      "molecule": "molecule_bond",
      "bond": "molecule_bond"
    },
    "new_table_primary_key": "molecule_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT molecule_id FROM molecule_bond WHERE bond_type = '#' AND label = '-'"
  },
  {
    "train_idx": 273,
    "db_id": "toxicology",
    "question": "What is the percentage of element chlorine in carcinogenic molecules?",
    "query": "SELECT CAST(COUNT( CASE WHEN T1.element = 'cl' THEN T1.element ELSE NULL END) AS REAL) * 100 / COUNT(T1.element) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "atom_molecule": {
        "columns": [
          "molecule_id",
          "label",
          "atom_id",
          "element"
        ],
        "ddl": "create table atom_molecule( molecule_id text primary key, label text, atom_id text, element text)"
      }
    },
    "old_new_table_mapping": {
      "molecule": "atom_molecule",
      "atom": "atom_molecule"
    },
    "new_table_primary_key": "molecule_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(COUNT( CASE WHEN element = 'cl' THEN element ELSE NULL END) AS REAL) * 100 / COUNT(element) FROM atom_molecule WHERE label = '+'"
  },
  {
    "train_idx": 276,
    "db_id": "toxicology",
    "question": "Write down the atom IDs of the first and second atoms of triple bond type molecules.",
    "query": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#'",
    "relevant_table": {
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      },
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "new_relevant_table": {
      "bond_connected": {
        "columns": [
          "bond_id",
          "molecule_id",
          "bond_type",
          "atom_id",
          "atom_id2"
        ],
        "ddl": "create table bond_connected( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text, foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text)"
      }
    },
    "old_new_table_mapping": {
      "connected": "bond_connected",
      "bond": "bond_connected"
    },
    "new_table_primary_key": "bond_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT bond_connected.atom_id, bond_connected.atom_id2 FROM bond_connected WHERE bond_connected.bond_type = '#'"
  },
  {
    "train_idx": 277,
    "db_id": "toxicology",
    "question": "What are the toxicology elements associated with bond ID TR000_1_2?",
    "query": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR000_1_2'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "new_relevant_table": {
      "atom_connected": {
        "columns": [
          "atom_id",
          "molecule_id",
          "element",
          "atom_id2",
          "bond_id"
        ],
        "ddl": "create table atom_connected( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "old_new_table_mapping": {
      "connected": "atom_connected",
      "atom": "atom_connected"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.element FROM atom_connected AS T1 WHERE T1.bond_id = 'TR000_1_2'"
  },
  {
    "train_idx": 278,
    "db_id": "toxicology",
    "question": "How many of the single bond type molecules are non-carcinogenic?",
    "query": "SELECT COUNT(DISTINCT T2.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.bond_type = '-'",
    "relevant_table": {
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "molecule_bond": {
        "columns": [
          "bond_id",
          "molecule_id",
          "bond_type",
          "label"
        ],
        "ddl": "create table molecule_bond( bond_id text, molecule_id text, bond_type text, label text)"
      }
    },
    "old_new_table_mapping": {
      "bond": "molecule_bond",
      "molecule": "molecule_bond"
    },
    "new_table_primary_key": "'bond_id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(DISTINCT molecule_id) FROM molecule_bond WHERE label = '-' AND bond_type = '-'"
  },
  {
    "train_idx": 279,
    "db_id": "toxicology",
    "question": "What is the label for bond ID TR001_10_11?",
    "query": "SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_10_11'",
    "relevant_table": {
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "molecule_bond": {
        "columns": [
          "bond_id",
          "molecule_id",
          "bond_type",
          "label"
        ],
        "ddl": "create table molecule_bond( bond_id text, molecule_id text, bond_type text, label text)"
      }
    },
    "old_new_table_mapping": {
      "bond": "molecule_bond",
      "molecule": "molecule_bond"
    },
    "new_table_primary_key": "'bond_id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT label FROM molecule_bond WHERE bond_id = 'TR001_10_11'"
  },
  {
    "train_idx": 280,
    "db_id": "toxicology",
    "question": "Enumerate the bond ID of triple bond type molecules and tell me if they are carcinogenic or not.",
    "query": "SELECT DISTINCT T1.bond_id, T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'",
    "relevant_table": {
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "molecule_bond": {
        "columns": [
          "molecule_id",
          "label",
          "bond_id",
          "bond_type"
        ],
        "ddl": "create table molecule_bond( molecule_id text, label text, bond_id text, bond_type text)"
      }
    },
    "old_new_table_mapping": {
      "molecule": "molecule_bond",
      "bond": "molecule_bond"
    },
    "new_table_primary_key": "'molecule_id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT molecule_bond.bond_id, molecule_bond.label FROM molecule_bond WHERE molecule_bond.bond_type = '#'"
  },
  {
    "train_idx": 281,
    "db_id": "toxicology",
    "question": "Tally the toxicology element of the 4th atom of each molecule that was carcinogenic.",
    "query": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND SUBSTR(T1.atom_id, -1) = '4' AND LENGTH(T1.atom_id) = 7",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "atom_molecule": {
        "columns": [
          "molecule_id",
          "label",
          "atom_id",
          "element"
        ],
        "ddl": "create table atom_molecule( molecule_id text, label text, atom_id text, element text)"
      }
    },
    "old_new_table_mapping": {
      "molecule": "atom_molecule",
      "atom": "atom_molecule"
    },
    "new_table_primary_key": "'molecule_id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT element FROM atom_molecule WHERE label = '+' AND SUBSTR(atom_id, -1) = '4' AND LENGTH(atom_id) = 7"
  },
  {
    "train_idx": 282,
    "db_id": "toxicology",
    "question": "What is the ratio of Hydrogen elements in molecule ID TR006? List the ratio with its label.",
    "query": "WITH SubQuery AS (SELECT DISTINCT T1.atom_id, T1.element, T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006') SELECT CAST(COUNT(CASE WHEN element = 'h' THEN atom_id ELSE NULL END) AS REAL) / (CASE WHEN COUNT(atom_id) = 0 THEN NULL ELSE COUNT(atom_id) END) AS ratio, label FROM SubQuery GROUP BY label",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "atom_molecule": {
        "columns": [
          "molecule_id",
          "label",
          "atom_id",
          "element"
        ],
        "ddl": "create table atom_molecule( molecule_id text primary key, label text, atom_id text, element text)"
      }
    },
    "old_new_table_mapping": {
      "molecule": "atom_molecule",
      "atom": "atom_molecule"
    },
    "new_table_primary_key": "molecule_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "WITH SubQuery AS (SELECT DISTINCT atom_id, element, molecule_id, label FROM atom_molecule WHERE molecule_id = 'TR006') SELECT CAST(COUNT(CASE WHEN element = 'h' THEN atom_id ELSE NULL END) AS REAL) / (CASE WHEN COUNT(atom_id) = 0 THEN NULL ELSE COUNT(atom_id) END) AS ratio, label FROM SubQuery GROUP BY label"
  },
  {
    "train_idx": 283,
    "db_id": "toxicology",
    "question": "Identify whether the chemical compound that contains Calcium is carcinogenic.",
    "query": "SELECT T2.label AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "atom_molecule": {
        "columns": [
          "molecule_id",
          "label",
          "atom_id",
          "element"
        ],
        "ddl": "create table atom_molecule( molecule_id text primary key, label text, atom_id text, element text)"
      }
    },
    "old_new_table_mapping": {
      "molecule": "atom_molecule",
      "atom": "atom_molecule"
    },
    "new_table_primary_key": "molecule_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT atom_molecule.label AS flag_carcinogenic FROM atom_molecule WHERE atom_molecule.element = 'ca'"
  },
  {
    "train_idx": 284,
    "db_id": "toxicology",
    "question": "Determine the bond type that is formed in the chemical compound containing element Carbon.",
    "query": "SELECT DISTINCT T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      }
    },
    "new_relevant_table": {
      "atom_bond": {
        "columns": [
          "bond_id",
          "molecule_id_bond",
          "bond_type",
          "atom_id",
          "molecule_id_atom",
          "element"
        ],
        "ddl": "create table atom_bond( bond_id text primary key, bond_type text, atom_id text, element text)"
      }
    },
    "old_new_table_mapping": {
      "bond": "atom_bond",
      "atom": "atom_bond"
    },
    "new_table_primary_key": "bond_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT atom_bond.bond_type FROM atom_bond WHERE atom_bond.element = 'c'"
  },
  {
    "train_idx": 285,
    "db_id": "toxicology",
    "question": "Name chemical elements that form a bond TR001_10_11.",
    "query": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR001_10_11'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      },
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      }
    },
    "new_relevant_table": {
      "atom_connected": {
        "columns": [
          "atom_id",
          "molecule_id",
          "element",
          "atom_id2",
          "bond_id"
        ],
        "ddl": "create table atom_connected( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text, foreign key(bond_id) references bond(bond_id) text)"
      },
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      }
    },
    "old_new_table_mapping": {
      "atom": "atom_connected",
      "connected": "atom_connected"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.element FROM atom_connected AS T1 WHERE T1.bond_id = 'TR001_10_11'"
  },
  {
    "train_idx": 288,
    "db_id": "toxicology",
    "question": "Identify whether the molecule that contains atom TR001_1 is carcinogenic.",
    "query": "SELECT T2.label AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_1'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "atom_molecule": {
        "columns": [
          "atom_id",
          "molecule_id",
          "element",
          "label"
        ],
        "ddl": "create table atom_molecule( atom_id text, molecule_id text, element text, label text)"
      }
    },
    "old_new_table_mapping": {
      "atom": "atom_molecule",
      "molecule": "atom_molecule"
    },
    "new_table_primary_key": "'atom_id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT atom_molecule.label AS flag_carcinogenic FROM atom_molecule WHERE atom_molecule.atom_id = 'TR001_1'"
  },
  {
    "train_idx": 293,
    "db_id": "toxicology",
    "question": "How many atoms belong to the molecule labeled with carcinogenic compounds?",
    "query": "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "atom_molecule": {
        "columns": [
          "atom_id",
          "molecule_id",
          "element",
          "label"
        ],
        "ddl": "create table atom_molecule( atom_id text primary key, molecule_id text, element text, label text)"
      }
    },
    "old_new_table_mapping": {
      "atom": "atom_molecule",
      "molecule": "atom_molecule"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(atom_id) FROM atom_molecule WHERE label = '+'"
  },
  {
    "train_idx": 294,
    "db_id": "toxicology",
    "question": "Which bond ids are double-bond with carcinogenic compound?",
    "query": "SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.bond_type = '='",
    "relevant_table": {
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "molecule_bond": {
        "columns": [
          "molecule_id",
          "label",
          "bond_id",
          "bond_type"
        ],
        "ddl": "create table molecule_bond( molecule_id text, label text, bond_id text, bond_type text)"
      }
    },
    "old_new_table_mapping": {
      "molecule": "molecule_bond",
      "bond": "molecule_bond"
    },
    "new_table_primary_key": "'molecule_id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.bond_id FROM molecule_bond AS T1 WHERE T1.label = '+' AND T1.bond_type = '='"
  },
  {
    "train_idx": 295,
    "db_id": "toxicology",
    "question": "How many atoms belong to the molecule that element is hydrogen and labeled with carcinogenic compound?",
    "query": "SELECT COUNT(T1.atom_id) AS atomnums_h FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'h'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "atom_molecule": {
        "columns": [
          "atom_id",
          "molecule_id",
          "element",
          "label"
        ],
        "ddl": "create table atom_molecule( atom_id text primary key, molecule_id text, element text, label text)"
      }
    },
    "old_new_table_mapping": {
      "atom": "atom_molecule",
      "molecule": "atom_molecule"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(atom_id) AS atomnums_h FROM atom_molecule WHERE label = '+' AND element = 'h'"
  },
  {
    "train_idx": 296,
    "db_id": "toxicology",
    "question": "Indicate the molecule id is belonging to the TR000_1_2 bond that has the first atom named TR000_1.",
    "query": "SELECT T2.molecule_id, T2.bond_id, T1.atom_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T1.atom_id = 'TR000_1' AND T2.bond_id = 'TR000_1_2'",
    "relevant_table": {
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      },
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      }
    },
    "new_relevant_table": {
      "connected_bond": {
        "columns": [
          "atom_id",
          "atom_id2",
          "bond_id",
          "molecule_id",
          "bond_type"
        ],
        "ddl": "create table connected_bond( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      }
    },
    "old_new_table_mapping": {
      "connected": "connected_bond",
      "bond": "connected_bond"
    },
    "new_table_primary_key": "bond_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T.molecule_id, T.bond_id, T.atom_id FROM connected_bond AS T WHERE T.atom_id = 'TR000_1' AND T.bond_id = 'TR000_1_2'"
  },
  {
    "train_idx": 297,
    "db_id": "toxicology",
    "question": "Among the atoms that contain element carbon, which one does not contain compound carcinogenic?",
    "query": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "atom_molecule": {
        "columns": [
          "molecule_id",
          "label",
          "atom_id",
          "element"
        ],
        "ddl": "create table atom_molecule( molecule_id text primary key, label text, atom_id text, element text)"
      }
    },
    "old_new_table_mapping": {
      "molecule": "atom_molecule",
      "atom": "atom_molecule"
    },
    "new_table_primary_key": "molecule_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT atom_id FROM atom_molecule WHERE element = 'c' AND label = '-'"
  },
  {
    "train_idx": 298,
    "db_id": "toxicology",
    "question": "Calculate the percentage of molecules containing carcinogenic compounds that element is hydrogen.",
    "query": "SELECT CAST(COUNT(CASE WHEN T1.element = 'h' AND T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "atom_molecule": {
        "columns": [
          "atom_id",
          "molecule_id",
          "element",
          "label"
        ],
        "ddl": "create table atom_molecule( atom_id text primary key, molecule_id text, element text, label text)"
      }
    },
    "old_new_table_mapping": {
      "atom": "atom_molecule",
      "molecule": "atom_molecule"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(COUNT(CASE WHEN element = 'h' AND label = '+' THEN molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(molecule_id) FROM atom_molecule"
  },
  {
    "train_idx": 302,
    "db_id": "toxicology",
    "question": "Name the elements that comprise the atoms of bond TR001_2_4.",
    "query": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_2_4'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "new_relevant_table": {
      "atom_connected": {
        "columns": [
          "atom_id",
          "molecule_id",
          "element",
          "atom_id2",
          "bond_id"
        ],
        "ddl": "create table atom_connected( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "old_new_table_mapping": {
      "connected": "atom_connected",
      "atom": "atom_connected"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT T1.element FROM atom_connected AS T1 WHERE T1.bond_id = 'TR001_2_4'"
  },
  {
    "train_idx": 303,
    "db_id": "toxicology",
    "question": "How many double bonds does TR006 have and is it carcinogenic?",
    "query": "SELECT COUNT(T1.bond_id), T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' AND T2.molecule_id = 'TR006' GROUP BY T2.label",
    "relevant_table": {
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "molecule_bond": {
        "columns": [
          "molecule_id",
          "label",
          "bond_id",
          "bond_type"
        ],
        "ddl": "create table molecule_bond( molecule_id text, label text, bond_id text, bond_type text)"
      }
    },
    "old_new_table_mapping": {
      "molecule": "molecule_bond",
      "bond": "molecule_bond"
    },
    "new_table_primary_key": "'molecule_id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(T1.bond_id), T1.label FROM molecule_bond AS T1 WHERE T1.bond_type = '=' AND T1.molecule_id = 'TR006' GROUP BY T1.label"
  },
  {
    "train_idx": 304,
    "db_id": "toxicology",
    "question": "List all carcinogenic molecules and their elements.",
    "query": "SELECT DISTINCT T2.molecule_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "molecule_atom": {
        "columns": [
          "molecule_id",
          "label",
          "atom_id",
          "element"
        ],
        "ddl": "create table molecule_atom( molecule_id text primary key, label text, atom_id text, element text)"
      }
    },
    "old_new_table_mapping": {
      "molecule": "molecule_atom",
      "atom": "molecule_atom"
    },
    "new_table_primary_key": "molecule_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT molecule_id, element FROM molecule_atom WHERE label = '+'"
  },
  {
    "train_idx": 305,
    "db_id": "toxicology",
    "question": "Name all bonds with single bond types and what atoms are connected to the molecules.",
    "query": "SELECT T1.bond_id, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'",
    "relevant_table": {
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      },
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "new_relevant_table": {
      "bond_connected": {
        "columns": [
          "bond_id",
          "molecule_id",
          "bond_type",
          "atom_id",
          "atom_id2"
        ],
        "ddl": "create table bond_connected( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text, foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text)"
      }
    },
    "old_new_table_mapping": {
      "connected": "bond_connected",
      "bond": "bond_connected"
    },
    "new_table_primary_key": "bond_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT bond_id, atom_id, atom_id2 FROM bond_connected WHERE bond_type = '-'"
  },
  {
    "train_idx": 306,
    "db_id": "toxicology",
    "question": "Which molecules have triple bonds and list all the elements they contain.",
    "query": "SELECT DISTINCT T1.molecule_id, T2.element FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'",
    "relevant_table": {
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      },
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      }
    },
    "new_relevant_table": {
      "molecule_structure": {
        "columns": [
          "atom_id",
          "molecule_id_atom",
          "element",
          "bond_id",
          "molecule_id_bond",
          "bond_type"
        ],
        "ddl": "create table molecule_structure( atom_id text primary key, element text, bond_id text, bond_type text)"
      }
    },
    "old_new_table_mapping": {
      "atom": "molecule_structure",
      "bond": "molecule_structure"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT molecule_id_bond, element FROM molecule_structure WHERE bond_type = '#'"
  },
  {
    "train_idx": 307,
    "db_id": "toxicology",
    "question": "Name the atoms' elements that form bond TR000_2_3.",
    "query": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR000_2_3'",
    "relevant_table": {
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      },
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      }
    },
    "new_relevant_table": {
      "connected_atom": {
        "columns": [
          "atom_id",
          "atom_id2",
          "bond_id",
          "molecule_id",
          "element"
        ],
        "ddl": "create table connected_atom( atom_id text primary key, foreign key(bond_id) references bond(bond_id) text, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      }
    },
    "old_new_table_mapping": {
      "connected": "connected_atom",
      "atom": "connected_atom"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT element FROM connected_atom WHERE bond_id = 'TR000_2_3'"
  },
  {
    "train_idx": 308,
    "db_id": "toxicology",
    "question": "How many bonds are created by bonding atoms with chlorine element?",
    "query": "SELECT COUNT(T1.bond_id) FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T2.element = 'cl'",
    "relevant_table": {
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      },
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      }
    },
    "new_relevant_table": {
      "atom_connected": {
        "columns": [
          "atom_id",
          "molecule_id",
          "element",
          "atom_id2",
          "bond_id"
        ],
        "ddl": "create table atom_connected( atom_id text, foreign key(molecule_id) references molecule(molecule_id) text, element text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "old_new_table_mapping": {
      "atom": "atom_connected",
      "connected": "atom_connected"
    },
    "new_table_primary_key": "'atom_id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(T1.bond_id) FROM atom_connected AS T1 WHERE T1.element = 'cl'"
  },
  {
    "train_idx": 309,
    "db_id": "toxicology",
    "question": "List out the atom id that belongs to the TR346 molecule and how many bond type can be created by this molecule?",
    "query": "SELECT T1.atom_id, COUNT(DISTINCT T2.bond_type),T1.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR000' GROUP BY T1.atom_id, T2.bond_type",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      }
    },
    "new_relevant_table": {
      "atom_bond": {
        "columns": [
          "atom_id",
          "molecule_id_atom",
          "element",
          "bond_id",
          "molecule_id_bond",
          "bond_type"
        ],
        "ddl": "create table atom_bond( atom_id text primary key, element text, bond_id text, bond_type text)"
      }
    },
    "old_new_table_mapping": {
      "atom": "atom_bond",
      "bond": "atom_bond"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.atom_id, COUNT(DISTINCT T1.bond_type),T1.molecule_id_atom FROM atom_bond AS T1 WHERE T1.molecule_id_atom = 'TR000' GROUP BY T1.atom_id, T1.bond_type"
  },
  {
    "train_idx": 310,
    "db_id": "toxicology",
    "question": "How many molecules have a double bond type and among these molecule, how many are labeled as carcinogenic compound?",
    "query": "SELECT COUNT(DISTINCT T2.molecule_id), SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '='",
    "relevant_table": {
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "molecule_bond": {
        "columns": [
          "molecule_id",
          "label",
          "bond_id",
          "bond_type"
        ],
        "ddl": "create table molecule_bond( molecule_id text, label text, bond_id text, bond_type text)"
      }
    },
    "old_new_table_mapping": {
      "molecule": "molecule_bond",
      "bond": "molecule_bond"
    },
    "new_table_primary_key": "'molecule_id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(DISTINCT molecule_id), SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) FROM molecule_bond WHERE bond_type = '='"
  },
  {
    "train_idx": 311,
    "db_id": "toxicology",
    "question": "How many molecules without sulphur element is not having double bond?",
    "query": "SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element <> 's' AND T2.bond_type <> '='",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      }
    },
    "new_relevant_table": {
      "atom_bond": {
        "columns": [
          "bond_id",
          "molecule_id_bond",
          "bond_type",
          "atom_id",
          "molecule_id_atom",
          "element"
        ],
        "ddl": "create table atom_bond( bond_id text primary key, bond_type text, atom_id text, element text)"
      }
    },
    "old_new_table_mapping": {
      "bond": "atom_bond",
      "atom": "atom_bond"
    },
    "new_table_primary_key": "bond_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(DISTINCT T1.molecule_id_atom) FROM atom_bond AS T1 WHERE T1.element <> 's' AND T1.bond_type <> '='"
  },
  {
    "train_idx": 312,
    "db_id": "toxicology",
    "question": "What is the carcinogenic label for bond TR001_2_4?",
    "query": "SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_id = 'TR001_2_4'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      },
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      }
    },
    "new_relevant_table": {
      "atom_molecule": {
        "columns": [
          "molecule_id",
          "label",
          "atom_id",
          "element"
        ],
        "ddl": "create table atom_molecule( molecule_id text primary key, label text, atom_id text, element text)"
      },
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references atom_molecule(molecule_id) text, bond_type text)"
      }
    },
    "old_new_table_mapping": {
      "molecule": "atom_molecule",
      "atom": "atom_molecule"
    },
    "new_table_primary_key": "molecule_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT label FROM atom_molecule WHERE molecule_id IN (SELECT molecule_id FROM bond WHERE bond_id = 'TR001_2_4')"
  },
  {
    "train_idx": 315,
    "db_id": "toxicology",
    "question": "Among the molecules which contain \"cl\" element, which of them are carcinogenic?",
    "query": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'cl' AND T2.label = '+'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "atom_molecule": {
        "columns": [
          "atom_id",
          "molecule_id",
          "element",
          "label"
        ],
        "ddl": "create table atom_molecule( atom_id text, molecule_id text, element text, label text)"
      }
    },
    "old_new_table_mapping": {
      "atom": "atom_molecule",
      "molecule": "atom_molecule"
    },
    "new_table_primary_key": "'atom_id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT atom_molecule.molecule_id FROM atom_molecule WHERE atom_molecule.element = 'cl' AND atom_molecule.label = '+'"
  },
  {
    "train_idx": 316,
    "db_id": "toxicology",
    "question": "Among the molecules which contain \"c\" element, which of them are not carcinogenic?",
    "query": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "atom_molecule": {
        "columns": [
          "atom_id",
          "molecule_id",
          "element",
          "label"
        ],
        "ddl": "create table atom_molecule( atom_id text, molecule_id text, element text, label text)"
      }
    },
    "old_new_table_mapping": {
      "atom": "atom_molecule",
      "molecule": "atom_molecule"
    },
    "new_table_primary_key": "'atom_id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT atom_molecule.molecule_id FROM atom_molecule WHERE atom_molecule.element = 'c' AND atom_molecule.label = '-'"
  },
  {
    "train_idx": 317,
    "db_id": "toxicology",
    "question": "Calculate the percentage of carcinogenic molecules which contain the Chlorine element.",
    "query": "SELECT COUNT(CASE WHEN T2.label = '+' AND T1.element = 'cl' THEN T2.molecule_id ELSE NULL END) * 100 / COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "atom_molecule": {
        "columns": [
          "atom_id",
          "molecule_id",
          "element",
          "label"
        ],
        "ddl": "create table atom_molecule( atom_id text primary key, molecule_id text, element text, label text)"
      }
    },
    "old_new_table_mapping": {
      "atom": "atom_molecule",
      "molecule": "atom_molecule"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(CASE WHEN label = '+' AND element = 'cl' THEN molecule_id ELSE NULL END) * 100 / COUNT(molecule_id) FROM atom_molecule"
  },
  {
    "train_idx": 318,
    "db_id": "toxicology",
    "question": "What is the molecule id of bond id TR001_1_7?",
    "query": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_1_7'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "new_relevant_table": {
      "atom_connected": {
        "columns": [
          "atom_id",
          "molecule_id",
          "element",
          "atom_id2",
          "bond_id"
        ],
        "ddl": "create table atom_connected( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "old_new_table_mapping": {
      "connected": "atom_connected",
      "atom": "atom_connected"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT T1.molecule_id FROM atom_connected AS T1 WHERE T1.bond_id = 'TR001_1_7'"
  },
  {
    "train_idx": 319,
    "db_id": "toxicology",
    "question": "How many elements are contained in bond_id TR001_3_4?",
    "query": "SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_3_4'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "new_relevant_table": {
      "atom_connected": {
        "columns": [
          "atom_id",
          "molecule_id",
          "element",
          "atom_id2",
          "bond_id"
        ],
        "ddl": "create table atom_connected( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "old_new_table_mapping": {
      "connected": "atom_connected",
      "atom": "atom_connected"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(DISTINCT T1.element) FROM atom_connected AS T1 WHERE T1.bond_id = 'TR001_3_4'"
  },
  {
    "train_idx": 320,
    "db_id": "toxicology",
    "question": "What is the type of the bond which is presenting the connection between two atoms TR000_1 and TR000_2?",
    "query": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_1' AND T2.atom_id2 = 'TR000_2'",
    "relevant_table": {
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      },
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "new_relevant_table": {
      "bond_connected": {
        "columns": [
          "bond_id",
          "bond_type",
          "atom_id",
          "atom_id2"
        ],
        "ddl": "create table bond_connected( bond_id text primary key, bond_type text, foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text)"
      }
    },
    "old_new_table_mapping": {
      "connected": "bond_connected",
      "bond": "bond_connected"
    },
    "new_table_primary_key": "bond_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT bond_type FROM bond_connected WHERE atom_id = 'TR000_1' AND atom_id2 = 'TR000_2'"
  },
  {
    "train_idx": 321,
    "db_id": "toxicology",
    "question": "What is the molecule of atom id \"TR000_2\" and atom id 2 \"TR000_4\"?",
    "query": "SELECT T1.molecule_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_2' AND T2.atom_id2 = 'TR000_4'",
    "relevant_table": {
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      },
      "connected": {
        "ddl": "create table connected( foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "new_relevant_table": {
      "bond_connected": {
        "columns": [
          "bond_id",
          "foreign key(molecule_id) references molecule(molecule_id)",
          "bond_type",
          "foreign key(atom_id) references atom(atom_id)",
          "foreign key(atom_id2) references atom(atom_id)",
          "foreign key(bond_id) references bond(bond_id)"
        ],
        "ddl": "create table bond_connected( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text, foreign key(atom_id) references atom(atom_id) text, foreign key(atom_id2) references atom(atom_id) text, foreign key(bond_id) references bond(bond_id) text)"
      }
    },
    "old_new_table_mapping": {
      "bond": "bond_connected",
      "connected": "bond_connected"
    },
    "new_table_primary_key": "bond_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT molecule_id FROM bond_connected WHERE atom_id = 'TR000_2' AND atom_id2 = 'TR000_4'"
  },
  {
    "train_idx": 325,
    "db_id": "toxicology",
    "question": "How many carcinogenic molecules that consisted of Nitrogen?",
    "query": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'n' AND T1.label = '+'",
    "relevant_table": {
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      },
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      }
    },
    "new_relevant_table": {
      "molecule_atom": {
        "columns": [
          "molecule_id",
          "label",
          "atom_id",
          "element"
        ],
        "ddl": "create table molecule_atom( molecule_id text primary key, label text, atom_id text, element text)"
      }
    },
    "old_new_table_mapping": {
      "atom": "molecule_atom",
      "molecule": "molecule_atom"
    },
    "new_table_primary_key": "molecule_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(DISTINCT molecule_id) FROM molecule_atom WHERE element = 'n' AND label = '+'"
  },
  {
    "train_idx": 326,
    "db_id": "toxicology",
    "question": "Which molecule consisted of Sulphur atom with double bond?",
    "query": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 's' AND T2.bond_type = '='",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      }
    },
    "new_relevant_table": {
      "atom_bond": {
        "columns": [
          "atom_id",
          "molecule_id_atom",
          "element",
          "bond_id",
          "molecule_id_bond",
          "bond_type"
        ],
        "ddl": "create table atom_bond( atom_id text primary key, element text, bond_id text, bond_type text)"
      }
    },
    "old_new_table_mapping": {
      "atom": "atom_bond",
      "bond": "atom_bond"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT T1.molecule_id_atom FROM atom_bond AS T1 WHERE T1.element = 's' AND T1.bond_type = '='"
  },
  {
    "train_idx": 327,
    "db_id": "toxicology",
    "question": "Which non-carcinogenic molecules consisted more than 5 atoms?",
    "query": "SELECT T.molecule_id FROM ( SELECT T1.molecule_id, COUNT(T2.atom_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' GROUP BY T1.molecule_id HAVING COUNT(T2.atom_id) > 5 ) t",
    "relevant_table": {
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      },
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      }
    },
    "new_relevant_table": {
      "molecule_atom": {
        "columns": [
          "molecule_id",
          "label",
          "atom_id",
          "element"
        ],
        "ddl": "create table molecule_atom( molecule_id text primary key, label text, atom_id text, element text)"
      }
    },
    "old_new_table_mapping": {
      "atom": "molecule_atom",
      "molecule": "molecule_atom"
    },
    "new_table_primary_key": "molecule_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T.molecule_id FROM ( SELECT T1.molecule_id, COUNT(T1.atom_id) FROM molecule_atom AS T1 WHERE T1.label = '-' GROUP BY T1.molecule_id HAVING COUNT(T1.atom_id) > 5 ) t"
  },
  {
    "train_idx": 328,
    "db_id": "toxicology",
    "question": "List all the elements with double bond, consisted in molecule TR024.",
    "query": "SELECT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR024' AND T2.bond_type = '='",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      }
    },
    "new_relevant_table": {
      "atom_bond": {
        "columns": [
          "atom_id",
          "molecule_id_atom",
          "element",
          "bond_id",
          "molecule_id_bond",
          "bond_type"
        ],
        "ddl": "create table atom_bond( atom_id text primary key, element text, bond_id text, bond_type text)"
      }
    },
    "old_new_table_mapping": {
      "bond": "atom_bond",
      "atom": "atom_bond"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.element FROM atom_bond AS T1 WHERE T1.molecule_id_atom = 'TR024' AND T1.bond_type = '='"
  },
  {
    "train_idx": 329,
    "db_id": "toxicology",
    "question": "Which carcinogenic molecule have the highest number of atoms consisted in it?",
    "query": "SELECT T.molecule_id FROM ( SELECT T2.molecule_id, COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' GROUP BY T2.molecule_id ORDER BY COUNT(T1.atom_id) DESC LIMIT 1 ) t",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "atom_molecule": {
        "columns": [
          "atom_id",
          "molecule_id",
          "element",
          "label"
        ],
        "ddl": "create table atom_molecule( atom_id text primary key, molecule_id text, element text, label text)"
      }
    },
    "old_new_table_mapping": {
      "atom": "atom_molecule",
      "molecule": "atom_molecule"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T.molecule_id FROM ( SELECT molecule_id, COUNT(atom_id) FROM atom_molecule WHERE label = '+' GROUP BY molecule_id ORDER BY COUNT(atom_id) DESC LIMIT 1 ) T"
  },
  {
    "train_idx": 330,
    "db_id": "toxicology",
    "question": "Calculate the percentage of carcinogenic molecules with triple bonded Hidrogen atoms.",
    "query": "SELECT CAST(SUM(CASE WHEN T1.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T2.element = 'h'",
    "relevant_table": {
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      },
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      }
    },
    "new_relevant_table": {
      "molecule_structure": {
        "columns": [
          "atom_id",
          "molecule_id_atom",
          "element",
          "bond_id",
          "molecule_id_bond",
          "bond_type"
        ],
        "ddl": "create table molecule_structure( atom_id text primary key, element text, bond_id text, bond_type text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "old_new_table_mapping": {
      "atom": "molecule_structure",
      "bond": "molecule_structure"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(CASE WHEN T1.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T1.molecule_id) FROM molecule_structure AS T1 WHERE T1.bond_type = '#' AND T1.element = 'h'"
  },
  {
    "train_idx": 334,
    "db_id": "toxicology",
    "question": "What is the element with the atom ID of TR004_7 in molecule that is not carcinogenic?",
    "query": "SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR004_7' AND T2.label = '-'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "atom_molecule": {
        "columns": [
          "atom_id",
          "molecule_id",
          "element",
          "label"
        ],
        "ddl": "create table atom_molecule( atom_id text, molecule_id text, element text, label text)"
      }
    },
    "old_new_table_mapping": {
      "atom": "atom_molecule",
      "molecule": "atom_molecule"
    },
    "new_table_primary_key": "'atom_id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT element FROM atom_molecule WHERE atom_id = 'TR004_7' AND label = '-'"
  },
  {
    "train_idx": 335,
    "db_id": "toxicology",
    "question": "What is the total number of molecules with double bonded oxygen?",
    "query": "SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '=' AND T1.element = 'o'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      }
    },
    "new_relevant_table": {
      "atom_bond": {
        "columns": [
          "atom_id",
          "molecule_id_atom",
          "element",
          "bond_id",
          "molecule_id_bond",
          "bond_type"
        ],
        "ddl": "create table atom_bond( atom_id text primary key, element text, bond_id text, bond_type text)"
      }
    },
    "old_new_table_mapping": {
      "atom": "atom_bond",
      "bond": "atom_bond"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(DISTINCT T1.molecule_id_atom) FROM atom_bond AS T1 WHERE T1.bond_type = '=' AND T1.element = 'o'"
  },
  {
    "train_idx": 336,
    "db_id": "toxicology",
    "question": "in molecules with triple bonds, how many of them are not carcinogenic?",
    "query": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#' AND T1.label = '-'",
    "relevant_table": {
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      },
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      }
    },
    "new_relevant_table": {
      "molecule_bond": {
        "columns": [
          "molecule_id",
          "label",
          "bond_id",
          "bond_type"
        ],
        "ddl": "create table molecule_bond( molecule_id text primary key, label text, bond_id text, bond_type text)"
      }
    },
    "old_new_table_mapping": {
      "bond": "molecule_bond",
      "molecule": "molecule_bond"
    },
    "new_table_primary_key": "molecule_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(DISTINCT molecule_id) FROM molecule_bond WHERE bond_type = '#' AND label = '-'"
  },
  {
    "train_idx": 337,
    "db_id": "toxicology",
    "question": "List the element and bond type included in the molecule with molecule ID of TR002.",
    "query": "SELECT DISTINCT T1.element, T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR002'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      }
    },
    "new_relevant_table": {
      "atom_bond": {
        "columns": [
          "atom_id",
          "molecule_id_atom",
          "element",
          "bond_id",
          "molecule_id_bond",
          "bond_type"
        ],
        "ddl": "create table atom_bond( atom_id text primary key, element text, bond_id text, bond_type text)"
      }
    },
    "old_new_table_mapping": {
      "bond": "atom_bond",
      "atom": "atom_bond"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT atom_bond.element, atom_bond.bond_type FROM atom_bond WHERE atom_bond.molecule_id_atom = 'TR002' AND atom_bond.molecule_id_bond = 'TR002'"
  },
  {
    "train_idx": 338,
    "db_id": "toxicology",
    "question": "What is the atom ID of double bonded carbon in TR012 molecule?",
    "query": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T2.molecule_id = 'TR012' AND T3.bond_type = '=' AND T1.element = 'c'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      },
      "bond": {
        "ddl": "create table bond( bond_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, bond_type text)"
      }
    },
    "new_relevant_table": {
      "molecule_bond": {
        "columns": [
          "molecule_id",
          "label",
          "bond_id",
          "bond_type"
        ],
        "ddl": "create table molecule_bond( molecule_id text primary key, label text, bond_id text, bond_type text)"
      },
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule_bond(molecule_id) text, element text)"
      }
    },
    "old_new_table_mapping": {
      "bond": "molecule_bond",
      "molecule": "molecule_bond"
    },
    "new_table_primary_key": "molecule_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT atom_id FROM atom WHERE molecule_id = 'TR012' AND element = 'c' AND molecule_id IN (SELECT molecule_id FROM molecule_bond WHERE bond_type = '=' AND molecule_id = 'TR012')"
  },
  {
    "train_idx": 339,
    "db_id": "toxicology",
    "question": "List the atom ID of the carcinogenic molecule that contains oxygen?",
    "query": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'o' AND T2.label = '+'",
    "relevant_table": {
      "atom": {
        "ddl": "create table atom( atom_id text primary key, foreign key(molecule_id) references molecule(molecule_id) text, element text)"
      },
      "molecule": {
        "ddl": "create table molecule( molecule_id text primary key, label text)"
      }
    },
    "new_relevant_table": {
      "atom_molecule": {
        "columns": [
          "atom_id",
          "molecule_id",
          "element",
          "label"
        ],
        "ddl": "create table atom_molecule( atom_id text primary key, molecule_id text, element text, label text)"
      }
    },
    "old_new_table_mapping": {
      "atom": "atom_molecule",
      "molecule": "atom_molecule"
    },
    "new_table_primary_key": "atom_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT atom_id FROM atom_molecule WHERE element = 'o' AND label = '+'"
  },
  {
    "train_idx": 344,
    "db_id": "card_games",
    "question": "List all the mythic rarity print cards banned in gladiator format.",
    "query": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "legalities": {
        "ddl": "create table legalities( id integer primary key, format text, status text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "cards_legalities": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "format",
          "status"
        ],
        "ddl": "create table cards_legalities( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, format text, status text)"
      }
    },
    "old_new_table_mapping": {
      "cards": "cards_legalities",
      "legalities": "cards_legalities"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT T1.id FROM cards_legalities AS T1 WHERE T1.format = 'gladiator' AND T1.status = 'Banned' AND T1.rarity = 'mythic'"
  },
  {
    "train_idx": 345,
    "db_id": "card_games",
    "question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format.",
    "query": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'vintage' AND T1.side IS NULL",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "legalities": {
        "ddl": "create table legalities( id integer primary key, format text, status text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "cards_legalities": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "id_legalities",
          "format",
          "status",
          "uuid_legalities"
        ],
        "ddl": "create table cards_legalities( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, id_legalities integer, format text, status text)"
      }
    },
    "old_new_table_mapping": {
      "legalities": "cards_legalities",
      "cards": "cards_legalities"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "id_legalities": {
        "old_table": "legalities",
        "old_column": "id"
      }
    },
    "new_gold_sql": "SELECT DISTINCT status FROM cards_legalities WHERE type = 'Artifact' AND format = 'vintage' AND side IS NULL"
  },
  {
    "train_idx": 346,
    "db_id": "card_games",
    "question": "List all the card id and artist with unknown power which are legal for commander play format.",
    "query": "SELECT T1.id, T1.artist FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Legal' AND T2.format = 'commander' AND (T1.power IS NULL OR T1.power = '*')",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "legalities": {
        "ddl": "create table legalities( id integer primary key, format text, status text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "cards_legalities": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "format",
          "status"
        ],
        "ddl": "create table cards_legalities( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, format text, status text)"
      }
    },
    "old_new_table_mapping": {
      "cards": "cards_legalities",
      "legalities": "cards_legalities"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.id, T1.artist FROM cards_legalities AS T1 WHERE T1.status = 'Legal' AND T1.format = 'commander' AND (T1.power IS NULL OR T1.power = '*')"
  },
  {
    "train_idx": 347,
    "db_id": "card_games",
    "question": "Find all cards illustrated by Stephen Daniel and describe the text of the ruling of these cards. State if these cards have missing or degraded properties and values.",
    "query": "SELECT T1.id, T2.text, T1.hasContentWarning FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Stephen Daniele'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "rulings": {
        "ddl": "create table rulings( id integer primary key, date date, text text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "cards_rulings": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "rulings_id",
          "date",
          "rulings_text"
        ],
        "ddl": "create table cards_rulings( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, date date)"
      }
    },
    "old_new_table_mapping": {
      "cards": "cards_rulings",
      "rulings": "cards_rulings"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.id, T1.rulings_text, T1.hasContentWarning FROM cards_rulings AS T1 WHERE T1.artist = 'Stephen Daniele'"
  },
  {
    "train_idx": 348,
    "db_id": "card_games",
    "question": "Describe the information about rulings for card named 'Sublime Epiphany' with number 74s.",
    "query": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sublime Epiphany' AND T1.number = '74s'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "rulings": {
        "ddl": "create table rulings( id integer primary key, date date, text text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "cards_rulings": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "date",
          "rulings_text",
          "foreign key(uuid) references cards(uuid)"
        ],
        "ddl": "create table cards_rulings( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, date date, rulings_text text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "old_new_table_mapping": {
      "cards": "cards_rulings",
      "rulings": "cards_rulings"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "rulings_text": {
        "old_table": "rulings",
        "old_column": "text"
      }
    },
    "new_gold_sql": "SELECT rulings_text FROM cards_rulings WHERE name = 'Sublime Epiphany' AND number = '74s'"
  },
  {
    "train_idx": 349,
    "db_id": "card_games",
    "question": "Name the card and artist with the most ruling information. Also state if the card is a promotional printing.",
    "query": "SELECT T1.name, T1.artist, T1.isPromo FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.isPromo = 1 AND T1.artist = (SELECT artist FROM cards WHERE isPromo = 1 GROUP BY artist HAVING COUNT(DISTINCT uuid) = (SELECT MAX(count_uuid) FROM ( SELECT COUNT(DISTINCT uuid) AS count_uuid FROM cards WHERE isPromo = 1 GROUP BY artist ))) LIMIT 1",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "rulings": {
        "ddl": "create table rulings( id integer primary key, date date, text text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "cards_rulings": {
        "columns": [
          "id",
          "date",
          "text",
          "uuid",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "variations",
          "watermark"
        ],
        "ddl": "create table cards_rulings( id integer primary key, date date, text text, uuid text, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, variations text, watermark text)"
      }
    },
    "old_new_table_mapping": {
      "rulings": "cards_rulings",
      "cards": "cards_rulings"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.name, T1.artist, T1.isPromo FROM cards_rulings AS T1 WHERE T1.isPromo = 1 AND T1.artist = (SELECT artist FROM cards_rulings WHERE isPromo = 1 GROUP BY artist HAVING COUNT(DISTINCT uuid) = (SELECT MAX(count_uuid) FROM ( SELECT COUNT(DISTINCT uuid) AS count_uuid FROM cards_rulings WHERE isPromo = 1 GROUP BY artist ))) LIMIT 1"
  },
  {
    "train_idx": 350,
    "db_id": "card_games",
    "question": "State the alternative languages available for card named Annul numbered 29.",
    "query": "SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Annul' AND T1.number = 29",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "foreign_data": {
        "ddl": "create table foreign_data( id integer primary key, flavorText text, language text, multiverseid integer, name text, text text, type text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "flavorText_foreign",
          "language",
          "multiverseid_foreign",
          "name_foreign",
          "text_foreign",
          "type_foreign"
        ],
        "ddl": "create table merged_table( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, language text)"
      }
    },
    "old_new_table_mapping": {
      "cards": "merged_table",
      "foreign_data": "merged_table"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['flavorText_foreign', 'name_foreign', 'text_foreign', 'type_foreign', 'multiverseid_foreign']": {
        "old_table": "['foreign_data', 'foreign_data', 'foreign_data', 'foreign_data', 'foreign_data']",
        "old_column": "['flavorText', 'name', 'text', 'type', 'multiverseid']"
      }
    },
    "new_gold_sql": "SELECT T1.language FROM merged_table AS T1 WHERE T1.name = 'Annul' AND T1.number = 29"
  },
  {
    "train_idx": 351,
    "db_id": "card_games",
    "question": "Name all the cards which have alternative language in Japanese.",
    "query": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "foreign_data": {
        "ddl": "create table foreign_data( id integer primary key, flavorText text, language text, multiverseid integer, name text, text text, type text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "merged_data": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText_cards",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name_cards",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text_cards",
          "toughness",
          "type_cards",
          "types",
          "uuid",
          "variations",
          "watermark",
          "flavorText_foreign_data",
          "language",
          "multiverseid",
          "name_foreign_data",
          "text_foreign_data",
          "type_foreign_data"
        ],
        "ddl": "create table merged_data( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, toughness text, types text, uuid text, variations text, watermark text, language text, multiverseid integer)"
      }
    },
    "old_new_table_mapping": {
      "foreign_data": "merged_data",
      "cards": "merged_data"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['flavorText_cards', 'name_cards', 'text_cards', 'type_cards', 'flavorText_foreign_data', 'name_foreign_data', 'text_foreign_data', 'type_foreign_data']": {
        "old_table": "['cards', 'foreign_data', 'cards', 'foreign_data']",
        "old_column": "['flavorText', 'name', 'text', 'type']"
      }
    },
    "new_gold_sql": "SELECT T1.name_cards FROM merged_data AS T1 WHERE T1.language = 'Japanese'"
  },
  {
    "train_idx": 352,
    "db_id": "card_games",
    "question": "Calculate the percentage of the cards availabe in Chinese Simplified.",
    "query": "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "foreign_data": {
        "ddl": "create table foreign_data( id integer primary key, flavorText text, language text, multiverseid integer, name text, text text, type text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "merged_data": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText_cards",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId_cards",
          "name_cards",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text_cards",
          "toughness",
          "type_cards",
          "types",
          "uuid",
          "variations",
          "watermark",
          "flavorText_foreign_data",
          "language",
          "multiverseid",
          "name_foreign_data",
          "text_foreign_data",
          "type_foreign_data"
        ],
        "ddl": "create table merged_data( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, toughness text, types text, uuid text, variations text, watermark text, language text, multiverseid integer)"
      }
    },
    "old_new_table_mapping": {
      "foreign_data": "merged_data",
      "cards": "merged_data"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['flavorText_cards', 'multiverseId_cards', 'name_cards', 'text_cards', 'type_cards']": {
        "old_table": "['cards', 'foreign_data', 'cards', 'cards', 'cards']",
        "old_column": "['flavorText', 'multiverseId', 'name', 'text', 'type']"
      }
    },
    "new_gold_sql": "SELECT CAST(SUM(CASE WHEN T1.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM merged_data AS T1"
  },
  {
    "train_idx": 353,
    "db_id": "card_games",
    "question": "List all the sets available in Italian translation. State the total number of cards per set.",
    "query": "SELECT T1.name, T1.totalSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian'",
    "relevant_table": {
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      },
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      }
    },
    "new_relevant_table": {
      "merged_sets_translations": {
        "columns": [
          "id",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly",
          "isPartialPreview",
          "keyruneCode",
          "mcmId",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type",
          "id_set_translations",
          "language",
          "setCode",
          "translation"
        ],
        "ddl": "create table merged_sets_translations( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text, language text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "sets": "merged_sets_translations",
      "set_translations": "merged_sets_translations"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.name, T1.totalSetSize FROM merged_sets_translations AS T1 WHERE T1.language = 'Italian'"
  },
  {
    "train_idx": 360,
    "db_id": "card_games",
    "question": "cards are not directly linked to language but through table 'set'. you need to add set in covered table & rephrase your question\nWhat are the languages available for the set that card 'Angel of Mercy' is in?",
    "query": "SELECT language FROM set_translations WHERE id IN ( SELECT id FROM cards WHERE name = 'Angel of Mercy' )",
    "relevant_table": {
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      },
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "id_set_translations",
          "language",
          "foreign key(setCode) references sets(code)",
          "translation"
        ],
        "ddl": "create table merged_table( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, language text, foreign key(setCode) references sets(code) text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "cards": "merged_table",
      "set_translations": "merged_table"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT language FROM merged_table WHERE id IN ( SELECT id FROM merged_table WHERE name = 'Angel of Mercy' )"
  },
  {
    "train_idx": 361,
    "db_id": "card_games",
    "question": "How many cards of legalities whose status is restricted have text boxes?",
    "query": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isTextless = 0",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "legalities": {
        "ddl": "create table legalities( id integer primary key, format text, status text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "cards_legalities": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "format",
          "status"
        ],
        "ddl": "create table cards_legalities( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, format text, status text)"
      }
    },
    "old_new_table_mapping": {
      "cards": "cards_legalities",
      "legalities": "cards_legalities"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(DISTINCT T1.id) FROM cards_legalities AS T1 WHERE T1.status = 'Restricted' AND T1.isTextless = 0"
  },
  {
    "train_idx": 362,
    "db_id": "card_games",
    "question": "What is the description about the ruling of card \"Condemn\"?",
    "query": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "rulings": {
        "ddl": "create table rulings( id integer primary key, date date, text text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "cards_rulings": {
        "columns": [
          "id",
          "date",
          "text_rulings",
          "uuid",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text_cards",
          "toughness",
          "type",
          "types",
          "variations",
          "watermark"
        ],
        "ddl": "create table cards_rulings( id integer primary key, date date, text_rulings text, uuid text, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text_cards text, toughness text, type text, types text, variations text, watermark text)"
      }
    },
    "old_new_table_mapping": {
      "rulings": "cards_rulings",
      "cards": "cards_rulings"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "text_rulings": {
        "old_table": "rulings",
        "old_column": "text"
      },
      "text_cards": {
        "old_table": "cards",
        "old_column": "text"
      }
    },
    "new_gold_sql": "SELECT T1.text_rulings FROM cards_rulings AS T1 WHERE T1.name = 'Condemn'"
  },
  {
    "train_idx": 363,
    "db_id": "card_games",
    "question": "How many cards of legalities whose status is restricted are found in a starter deck?",
    "query": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isStarter = 1",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "legalities": {
        "ddl": "create table legalities( id integer primary key, format text, status text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "cards_legalities": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "format",
          "status"
        ],
        "ddl": "create table cards_legalities( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, format text, status text)"
      }
    },
    "old_new_table_mapping": {
      "cards": "cards_legalities",
      "legalities": "cards_legalities"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(DISTINCT T1.id) FROM cards_legalities AS T1 WHERE T1.status = 'Restricted' AND T1.isStarter = 1"
  },
  {
    "train_idx": 364,
    "db_id": "card_games",
    "question": "What is the status of card \"Cloudchaser Eagle\"?",
    "query": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "legalities": {
        "ddl": "create table legalities( id integer primary key, format text, status text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "merged_cards_legalities": {
        "columns": [
          "id",
          "format",
          "status",
          "uuid",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "variations",
          "watermark"
        ],
        "ddl": "create table merged_cards_legalities( id integer primary key, format text, status text, uuid text, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, variations text, watermark text)"
      }
    },
    "old_new_table_mapping": {
      "legalities": "merged_cards_legalities",
      "cards": "merged_cards_legalities"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT status FROM merged_cards_legalities WHERE name = 'Cloudchaser Eagle'"
  },
  {
    "train_idx": 365,
    "db_id": "card_games",
    "question": "What is the type of card \"Benalish Knight\"?",
    "query": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "foreign_data": {
        "ddl": "create table foreign_data( id integer primary key, flavorText text, language text, multiverseid integer, name text, text text, type text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText_cards",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name_cards",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text_cards",
          "toughness",
          "type_cards",
          "types",
          "uuid",
          "variations",
          "watermark",
          "flavorText_foreign_data",
          "language",
          "multiverseid",
          "name_foreign_data",
          "text_foreign_data",
          "type_foreign_data"
        ],
        "ddl": "create table merged_table( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, toughness text, types text, uuid text, variations text, watermark text, language text, multiverseid integer)"
      }
    },
    "old_new_table_mapping": {
      "cards": "merged_table",
      "foreign_data": "merged_table"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['flavorText_cards', 'name_cards', 'text_cards', 'type_cards']": {
        "old_table": "['cards', 'foreign_data', 'foreign_data', 'foreign_data']",
        "old_column": "['flavorText', 'name', 'text', 'type']"
      }
    },
    "new_gold_sql": "SELECT DISTINCT T1.type_cards FROM merged_table AS T1 WHERE T1.name_cards = 'Benalish Knight'"
  },
  {
    "train_idx": 366,
    "db_id": "card_games",
    "question": "What is the rule of playing card \"Benalish Knight\"?",
    "query": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "legalities": {
        "ddl": "create table legalities( id integer primary key, format text, status text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "merged_cards_legalities": {
        "columns": [
          "id",
          "format",
          "status",
          "uuid",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "variations",
          "watermark"
        ],
        "ddl": "create table merged_cards_legalities( id integer primary key, format text, status text, uuid text, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, variations text, watermark text)"
      }
    },
    "old_new_table_mapping": {
      "legalities": "merged_cards_legalities",
      "cards": "merged_cards_legalities"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.format FROM merged_cards_legalities AS T1 WHERE T1.name = 'Benalish Knight'"
  },
  {
    "train_idx": 367,
    "db_id": "card_games",
    "question": "Please provide the names of the artists who illustrated the card art in Phyrexian.",
    "query": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "foreign_data": {
        "ddl": "create table foreign_data( id integer primary key, flavorText text, language text, multiverseid integer, name text, text text, type text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "merged_data": {
        "columns": [
          "id",
          "flavorText_foreign",
          "language",
          "multiverseid",
          "name_foreign",
          "text_foreign",
          "type_foreign",
          "uuid",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText_cards",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name_cards",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text_cards",
          "toughness",
          "type_cards",
          "types",
          "variations",
          "watermark"
        ],
        "ddl": "create table merged_data( id integer primary key, language text, multiverseid integer, uuid text, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, toughness text, types text, variations text, watermark text)"
      }
    },
    "old_new_table_mapping": {
      "foreign_data": "merged_data",
      "cards": "merged_data"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['flavorText_foreign', 'name_foreign', 'text_foreign', 'type_foreign']": {
        "old_table": "['foreign_data', 'cards', 'cards', 'cards']",
        "old_column": "['flavorText', 'name', 'text', 'type']"
      }
    },
    "new_gold_sql": "SELECT T1.artist FROM merged_data AS T1 WHERE T1.language = 'Phyrexian'"
  },
  {
    "train_idx": 369,
    "db_id": "card_games",
    "question": "How many cards that illusrtated in German have been reprinted?",
    "query": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.isReprint = 1",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "foreign_data": {
        "ddl": "create table foreign_data( id integer primary key, flavorText text, language text, multiverseid integer, name text, text text, type text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "merged_data": {
        "columns": [
          "id",
          "flavorText_foreign",
          "language",
          "multiverseid",
          "name_foreign",
          "text_foreign",
          "type_foreign",
          "uuid",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText_cards",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name_cards",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text_cards",
          "toughness",
          "type_cards",
          "types",
          "variations",
          "watermark"
        ],
        "ddl": "create table merged_data( id integer primary key, language text, multiverseid integer, uuid text, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, toughness text, types text, variations text, watermark text)"
      }
    },
    "old_new_table_mapping": {
      "foreign_data": "merged_data",
      "cards": "merged_data"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['flavorText_foreign', 'name_foreign', 'text_foreign', 'type_foreign']": {
        "old_table": "['foreign_data', 'cards', 'cards', 'cards']",
        "old_column": "['flavorText', 'name', 'text', 'type']"
      }
    },
    "new_gold_sql": "SELECT COUNT(T1.id) FROM merged_data AS T1 WHERE T1.language = 'German' AND T1.isReprint = 1"
  },
  {
    "train_idx": 370,
    "db_id": "card_games",
    "question": "How many borderless cards are illustrated in Russian?",
    "query": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.borderColor = 'borderless' AND T2.language = 'Russian'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "foreign_data": {
        "ddl": "create table foreign_data( id integer primary key, flavorText text, language text, multiverseid integer, name text, text text, type text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "merged_data": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "flavorText_foreign",
          "language",
          "multiverseid_foreign",
          "name_foreign",
          "text_foreign",
          "type_foreign"
        ],
        "ddl": "create table merged_data( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, language text)"
      }
    },
    "old_new_table_mapping": {
      "cards": "merged_data",
      "foreign_data": "merged_data"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['flavorText_foreign', 'name_foreign', 'text_foreign', 'type_foreign', 'multiverseid_foreign']": {
        "old_table": "['foreign_data', 'foreign_data', 'foreign_data', 'foreign_data', 'foreign_data']",
        "old_column": "['flavorText', 'name', 'text', 'type', 'multiverseid']"
      }
    },
    "new_gold_sql": "SELECT COUNT(T1.id) FROM merged_data AS T1 WHERE T1.borderColor = 'borderless' AND T1.language = 'Russian'"
  },
  {
    "train_idx": 371,
    "db_id": "card_games",
    "question": "What is the percentage of cards whose language is French among the Story Spotlight cards?",
    "query": "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.isStorySpotlight = 1",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "foreign_data": {
        "ddl": "create table foreign_data( id integer primary key, flavorText text, language text, multiverseid integer, name text, text text, type text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "merged_data": {
        "columns": [
          "id",
          "flavorText_foreign",
          "language",
          "multiverseid",
          "name_foreign",
          "text_foreign",
          "type_foreign",
          "uuid",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText_cards",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name_cards",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text_cards",
          "toughness",
          "type_cards",
          "types",
          "variations",
          "watermark"
        ],
        "ddl": "create table merged_data( id integer primary key, language text, multiverseid integer, uuid text, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, toughness text, types text, variations text, watermark text)"
      }
    },
    "old_new_table_mapping": {
      "foreign_data": "merged_data",
      "cards": "merged_data"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['flavorText_foreign', 'name_foreign', 'text_foreign']": {
        "old_table": "['foreign_data', 'cards', 'cards']",
        "old_column": "['flavorText', 'name', 'text']"
      }
    },
    "new_gold_sql": "SELECT CAST(SUM(CASE WHEN T1.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM merged_data AS T1 WHERE T1.isStorySpotlight = 1"
  },
  {
    "train_idx": 381,
    "db_id": "card_games",
    "question": "List down the name of artists for cards in Chinese Simplified.",
    "query": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "foreign_data": {
        "ddl": "create table foreign_data( id integer primary key, flavorText text, language text, multiverseid integer, name text, text text, type text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "flavorText_foreign",
          "language",
          "multiverseid_foreign",
          "name_foreign",
          "text_foreign",
          "type_foreign"
        ],
        "ddl": "create table merged_table( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, language text)"
      }
    },
    "old_new_table_mapping": {
      "cards": "merged_table",
      "foreign_data": "merged_table"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.artist FROM merged_table AS T1 WHERE T1.language = 'Chinese Simplified'"
  },
  {
    "train_idx": 382,
    "db_id": "card_games",
    "question": "What are the cards that only available in paper and Japanese language?",
    "query": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "foreign_data": {
        "ddl": "create table foreign_data( id integer primary key, flavorText text, language text, multiverseid integer, name text, text text, type text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "merged_data": {
        "columns": [
          "id",
          "flavorText_foreign",
          "language",
          "multiverseid",
          "name_foreign",
          "text_foreign",
          "type_foreign",
          "uuid_foreign",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark"
        ],
        "ddl": "create table merged_data( id integer primary key, language text, multiverseid integer, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      }
    },
    "old_new_table_mapping": {
      "foreign_data": "merged_data",
      "cards": "merged_data"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['flavorText_foreign', 'name_foreign', 'text_foreign', 'type_foreign', 'uuid_foreign']": {
        "old_table": "['foreign_data', 'foreign_data', 'foreign_data', 'foreign_data', 'foreign_data']",
        "old_column": "['flavorText', 'name', 'text', 'type', 'uuid']"
      }
    },
    "new_gold_sql": "SELECT T1.name FROM merged_data AS T1 WHERE T1.availability = 'paper' AND T1.language = 'Japanese'"
  },
  {
    "train_idx": 383,
    "db_id": "card_games",
    "question": "How many of the banned cards are white border?",
    "query": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Banned' AND T1.borderColor = 'white'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "legalities": {
        "ddl": "create table legalities( id integer primary key, format text, status text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "cards_legalities": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "format",
          "status"
        ],
        "ddl": "create table cards_legalities( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, format text, status text)"
      }
    },
    "old_new_table_mapping": {
      "cards": "cards_legalities",
      "legalities": "cards_legalities"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(T1.id) FROM cards_legalities AS T1 WHERE T1.status = 'Banned' AND T1.borderColor = 'white'"
  },
  {
    "train_idx": 384,
    "db_id": "card_games",
    "question": "List down the uuid for legacy cards and the foreign language of these cards.",
    "query": "SELECT T1.uuid, T3.language FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'legacy'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "legalities": {
        "ddl": "create table legalities( id integer primary key, format text, status text, foreign key(uuid) references cards(uuid) text)"
      },
      "foreign_data": {
        "ddl": "create table foreign_data( id integer primary key, flavorText text, language text, multiverseid integer, name text, text text, type text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "id",
          "flavorText",
          "language",
          "multiverseid",
          "name",
          "text",
          "type",
          "format",
          "status",
          "uuid"
        ],
        "ddl": "create table merged_table( id integer, flavorText text, language text, multiverseid integer, name text, text text, type text, format text, status text, foreign key(uuid) references cards(uuid) text)"
      },
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      }
    },
    "old_new_table_mapping": {
      "foreign_data": "merged_table",
      "legalities": "merged_table"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.uuid, T1.language FROM merged_table AS T1 WHERE T1.format = 'legacy'"
  },
  {
    "train_idx": 385,
    "db_id": "card_games",
    "question": "Write down the ruling of Beacon of Immortality.",
    "query": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "rulings": {
        "ddl": "create table rulings( id integer primary key, date date, text text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "cards_rulings": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "date",
          "rulings_text",
          "rulings_id"
        ],
        "ddl": "create table cards_rulings( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, date date)"
      }
    },
    "old_new_table_mapping": {
      "cards": "cards_rulings",
      "rulings": "cards_rulings"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.rulings_text FROM cards_rulings AS T1 WHERE T1.name = 'Beacon of Immortality'"
  },
  {
    "train_idx": 386,
    "db_id": "card_games",
    "question": "How many cards are having future frame version and what are the legality status of these cards?",
    "query": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = 'future'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "legalities": {
        "ddl": "create table legalities( id integer primary key, format text, status text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "cards_legalities": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "format",
          "status"
        ],
        "ddl": "create table cards_legalities( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, format text, status text)"
      }
    },
    "old_new_table_mapping": {
      "cards": "cards_legalities",
      "legalities": "cards_legalities"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(T1.id) FROM cards_legalities AS T1 WHERE T1.frameVersion = 'future'"
  },
  {
    "train_idx": 387,
    "db_id": "card_games",
    "question": "What are the cards for set OGW? State the colour for these cards.",
    "query": "SELECT id, colors FROM cards WHERE id IN ( SELECT id FROM set_translations WHERE setCode = 'OGW' )",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      }
    },
    "new_relevant_table": {
      "cards_translations": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "language",
          "translation"
        ],
        "ddl": "create table cards_translations( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, language text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "cards": "cards_translations",
      "set_translations": "cards_translations"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT id, colors FROM cards_translations WHERE id IN ( SELECT id FROM cards_translations WHERE setCode = 'OGW' )"
  },
  {
    "train_idx": 388,
    "db_id": "card_games",
    "question": "What are the cards in set 10E with converted mana of 5 have translation and what are the languages?",
    "query": "SELECT id, language FROM set_translations WHERE id = ( SELECT id FROM cards WHERE convertedManaCost = 5 ) AND setCode = '10E'",
    "relevant_table": {
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      },
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      }
    },
    "new_relevant_table": {
      "merged_cards_translations": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "language",
          "translation"
        ],
        "ddl": "create table merged_cards_translations( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, language text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "cards": "merged_cards_translations",
      "set_translations": "merged_cards_translations"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT id, language FROM merged_cards_translations WHERE id = ( SELECT id FROM merged_cards_translations WHERE convertedManaCost = 5 ) AND setCode = '10E'"
  },
  {
    "train_idx": 389,
    "db_id": "card_games",
    "question": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.",
    "query": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "rulings": {
        "ddl": "create table rulings( id integer primary key, date date, text text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "cards_rulings": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "rulings_id",
          "date",
          "rulings_text",
          "rulings_uuid"
        ],
        "ddl": "create table cards_rulings( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, rulings_id integer, date date, rulings_text text)"
      }
    },
    "old_new_table_mapping": {
      "rulings": "cards_rulings",
      "cards": "cards_rulings"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "rulings_id": {
        "old_table": "rulings",
        "old_column": "id"
      },
      "rulings_text": {
        "old_table": "rulings",
        "old_column": "text"
      }
    },
    "new_gold_sql": "SELECT T1.id, T1.date FROM cards_rulings AS T1 WHERE T1.originalType = 'Creature - Elf'"
  },
  {
    "train_idx": 390,
    "db_id": "card_games",
    "question": "What are the colors of cards from ID 1-20? What are the format of these cards?",
    "query": "SELECT T1.colors, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.id BETWEEN 1 AND 20",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "legalities": {
        "ddl": "create table legalities( id integer primary key, format text, status text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "cards_legalities": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "format",
          "status"
        ],
        "ddl": "create table cards_legalities( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, format text, status text)"
      }
    },
    "old_new_table_mapping": {
      "legalities": "cards_legalities",
      "cards": "cards_legalities"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.colors, T1.format FROM cards_legalities AS T1 WHERE T1.id BETWEEN 1 AND 20"
  },
  {
    "train_idx": 391,
    "db_id": "card_games",
    "question": "Among the Artifact cards, which are black color and comes with foreign languague translation?",
    "query": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "foreign_data": {
        "ddl": "create table foreign_data( id integer primary key, flavorText text, language text, multiverseid integer, name text, text text, type text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "merged_data": {
        "columns": [
          "id",
          "flavorText_foreign",
          "language",
          "multiverseid",
          "name_foreign",
          "text_foreign",
          "type_foreign",
          "foreign key(uuid) references cards(uuid)",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark"
        ],
        "ddl": "create table merged_data( id integer primary key, language text, multiverseid integer, foreign key(uuid) references cards(uuid) text, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      }
    },
    "old_new_table_mapping": {
      "foreign_data": "merged_data",
      "cards": "merged_data"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['flavorText_foreign', 'name_foreign', 'text_foreign', 'type_foreign']": {
        "old_table": "['foreign_data', 'foreign_data', 'foreign_data', 'foreign_data']",
        "old_column": "['flavorText', 'name', 'text', 'type']"
      }
    },
    "new_gold_sql": "SELECT DISTINCT T1.name FROM merged_data AS T1 WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'"
  },
  {
    "train_idx": 392,
    "db_id": "card_games",
    "question": "Pick 3 cards with rarity of uncommon, list down name these cards according to ascending order of it's ruling date.",
    "query": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "rulings": {
        "ddl": "create table rulings( id integer primary key, date date, text text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "cards_rulings": {
        "columns": [
          "id",
          "date",
          "text",
          "foreign key(uuid) references cards(uuid)",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text_cards",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark"
        ],
        "ddl": "create table cards_rulings( id integer primary key, date date, text text, foreign key(uuid) references cards(uuid) text, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text_cards text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      }
    },
    "old_new_table_mapping": {
      "rulings": "cards_rulings",
      "cards": "cards_rulings"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "text_cards": {
        "old_table": "cards",
        "old_column": "text"
      }
    },
    "new_gold_sql": "SELECT DISTINCT T1.name FROM cards_rulings AS T1 WHERE T1.rarity = 'uncommon' ORDER BY T1.date ASC LIMIT 3"
  },
  {
    "train_idx": 404,
    "db_id": "card_games",
    "question": "Indicates the name of all the languages into which the set whose number of cards is 309 is translated.",
    "query": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.baseSetSize = 309",
    "relevant_table": {
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      },
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      }
    },
    "new_relevant_table": {
      "merged_sets_translations": {
        "columns": [
          "id",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly",
          "isPartialPreview",
          "keyruneCode",
          "mcmId",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type",
          "id_set_translations",
          "language",
          "setCode",
          "translation"
        ],
        "ddl": "create table merged_sets_translations( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text, language text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "set_translations": "merged_sets_translations",
      "sets": "merged_sets_translations"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT language FROM merged_sets_translations WHERE baseSetSize = 309 AND code = setCode"
  },
  {
    "train_idx": 405,
    "db_id": "card_games",
    "question": "How many Brazilian Portuguese translated sets are inside the Commander block?",
    "query": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Portuguese (Brazil)' AND T1.block = 'Commander'",
    "relevant_table": {
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      },
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      }
    },
    "new_relevant_table": {
      "merged_sets_translations": {
        "columns": [
          "id",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly",
          "isPartialPreview",
          "keyruneCode",
          "mcmId",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type",
          "language",
          "setCode",
          "translation"
        ],
        "ddl": "create table merged_sets_translations( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text, language text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "set_translations": "merged_sets_translations",
      "sets": "merged_sets_translations"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(id) FROM merged_sets_translations WHERE language = 'Portuguese (Brazil)' AND block = 'Commander'"
  },
  {
    "train_idx": 406,
    "db_id": "card_games",
    "question": "Lists by ID all Creature-type cards with legal status.",
    "query": "SELECT T1.id FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T3.status = 'Legal' AND T1.types = 'Creature'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "rulings": {
        "ddl": "create table rulings( id integer primary key, date date, text text, foreign key(uuid) references cards(uuid) text)"
      },
      "legalities": {
        "ddl": "create table legalities( id integer primary key, format text, status text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "rulings_legalities": {
        "columns": [
          "id",
          "date",
          "text",
          "uuid_rulings",
          "format",
          "status",
          "uuid_legalities"
        ],
        "ddl": "create table rulings_legalities( id integer primary key, date date, text text, format text, status text)"
      },
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      }
    },
    "old_new_table_mapping": {
      "rulings": "rulings_legalities",
      "legalities": "rulings_legalities"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.id FROM rulings_legalities AS T1 WHERE T1.status = 'Legal' AND T1.types = 'Creature'"
  },
  {
    "train_idx": 407,
    "db_id": "card_games",
    "question": "Lists all types of cards in German.",
    "query": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "foreign_data": {
        "ddl": "create table foreign_data( id integer primary key, flavorText text, language text, multiverseid integer, name text, text text, type text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "merged_data": {
        "columns": [
          "id",
          "flavorText_foreign",
          "language",
          "multiverseid",
          "name_foreign",
          "text_foreign",
          "type_foreign",
          "uuid_foreign",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText_cards",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name_cards",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text_cards",
          "toughness",
          "type_cards",
          "types",
          "uuid_cards",
          "variations",
          "watermark"
        ],
        "ddl": "create table merged_data( id integer primary key, language text, multiverseid integer, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, toughness text, types text, variations text, watermark text)"
      }
    },
    "old_new_table_mapping": {
      "foreign_data": "merged_data",
      "cards": "merged_data"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['flavorText_foreign', 'name_foreign', 'text_foreign', 'type_foreign', 'uuid_foreign']": {
        "old_table": "['foreign_data', 'cards', 'cards', 'cards', 'foreign_data']",
        "old_column": "['flavorText', 'name', 'text', 'type', 'uuid']"
      }
    },
    "new_gold_sql": "SELECT T1.subtypes, T1.supertypes FROM merged_data AS T1 WHERE T1.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL"
  },
  {
    "train_idx": 408,
    "db_id": "card_games",
    "question": "How many unknown power cards contain info about the triggered ability",
    "query": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE (T1.power IS NULL OR T1.power = '*') AND T2.text LIKE '%triggered ability%'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "rulings": {
        "ddl": "create table rulings( id integer primary key, date date, text text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "cards_rulings": {
        "columns": [
          "id",
          "date",
          "text",
          "uuid",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text_cards",
          "toughness",
          "type",
          "types",
          "variations",
          "watermark"
        ],
        "ddl": "create table cards_rulings( id integer primary key, date date, text text, uuid text, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text_cards text, toughness text, type text, types text, variations text, watermark text)"
      }
    },
    "old_new_table_mapping": {
      "rulings": "cards_rulings",
      "cards": "cards_rulings"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "text_cards": {
        "old_table": "cards",
        "old_column": "text"
      }
    },
    "new_gold_sql": "SELECT T1.text FROM cards_rulings AS T1 WHERE (T1.power IS NULL OR T1.power = '*') AND T1.text LIKE '%triggered ability%'"
  },
  {
    "train_idx": 409,
    "db_id": "card_games",
    "question": "Indicates the number of cards with pre-modern format, ruling text \"This is a triggered mana ability.\" that do not have multiple faces.",
    "query": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN rulings AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'premodern' AND T3.text = 'This is a triggered mana ability.' AND T1.Side IS NULL",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "legalities": {
        "ddl": "create table legalities( id integer primary key, format text, status text, foreign key(uuid) references cards(uuid) text)"
      },
      "rulings": {
        "ddl": "create table rulings( id integer primary key, date date, text text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "id",
          "date",
          "text",
          "uuid_rulings",
          "format",
          "status",
          "uuid_legalities"
        ],
        "ddl": "create table merged_table( id integer primary key, date date, text text, format text, status text)"
      },
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      }
    },
    "old_new_table_mapping": {
      "rulings": "merged_table",
      "legalities": "merged_table"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(T1.id) FROM merged_table AS T1 WHERE T1.format = 'premodern' AND T1.text = 'This is a triggered mana ability.' AND T1.Side IS NULL"
  },
  {
    "train_idx": 410,
    "db_id": "card_games",
    "question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.",
    "query": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "legalities": {
        "ddl": "create table legalities( id integer primary key, format text, status text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "cards_legalities": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "id_legalities",
          "format",
          "status",
          "uuid_legalities"
        ],
        "ddl": "create table cards_legalities( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, id_legalities integer, format text, status text)"
      }
    },
    "old_new_table_mapping": {
      "legalities": "cards_legalities",
      "cards": "cards_legalities"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "id_legalities": {
        "old_table": "legalities",
        "old_column": "id"
      }
    },
    "new_gold_sql": "SELECT T1.id FROM cards_legalities AS T1 WHERE T1.artist = 'Erica Yang' AND T1.format = 'pauper' AND T1.availability = 'paper'"
  },
  {
    "train_idx": 411,
    "db_id": "card_games",
    "question": "To which artist does the card with the text \"Das perfekte Gegenmittel zu einer dichten Formation\" belong?",
    "query": "SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.flavorText LIKE '%DAS perfekte Gegenmittel zu einer dichten Formation%'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "foreign_data": {
        "ddl": "create table foreign_data( id integer primary key, flavorText text, language text, multiverseid integer, name text, text text, type text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "merged_data": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText_cards",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name_cards",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text_cards",
          "toughness",
          "type_cards",
          "types",
          "uuid",
          "variations",
          "watermark",
          "flavorText_foreign_data",
          "language",
          "multiverseid",
          "name_foreign_data",
          "text_foreign_data",
          "type_foreign_data"
        ],
        "ddl": "create table merged_data( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, toughness text, types text, uuid text, variations text, watermark text, language text, multiverseid integer)"
      }
    },
    "old_new_table_mapping": {
      "foreign_data": "merged_data",
      "cards": "merged_data"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['flavorText_cards', 'name_cards', 'text_cards', 'type_cards', 'flavorText_foreign_data', 'name_foreign_data', 'text_foreign_data', 'type_foreign_data']": {
        "old_table": "['cards', 'foreign_data', 'cards', 'foreign_data']",
        "old_column": "['flavorText', 'name', 'text', 'type']"
      }
    },
    "new_gold_sql": "SELECT DISTINCT T1.artist FROM merged_data AS T1 WHERE T1.flavorText_foreign_data LIKE '%DAS perfekte Gegenmittel zu einer dichten Formation%'"
  },
  {
    "train_idx": 412,
    "db_id": "card_games",
    "question": "What is the foreign name of the card in French of type Creature, normal layout and black border color, by artist Matthew D. Wilson?",
    "query": "SELECT name FROM foreign_data WHERE uuid IN ( SELECT uuid FROM cards WHERE types = 'Creature' AND layout = 'normal' AND borderColor = 'black' AND artist = 'Matthew D. Wilson' ) AND language = 'French'",
    "relevant_table": {
      "foreign_data": {
        "ddl": "create table foreign_data( id integer primary key, flavorText text, language text, multiverseid integer, name text, text text, type text, foreign key(uuid) references cards(uuid) text)"
      },
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      }
    },
    "new_relevant_table": {
      "merged_data": {
        "columns": [
          "id",
          "flavorText_foreign_data",
          "language",
          "multiverseid",
          "name_foreign_data",
          "text_foreign_data",
          "type_foreign_data",
          "foreign key(uuid) references cards(uuid)",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText_cards",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name_cards",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text_cards",
          "toughness",
          "type_cards",
          "types",
          "uuid",
          "variations",
          "watermark"
        ],
        "ddl": "create table merged_data( id integer primary key, language text, multiverseid integer, foreign key(uuid) references cards(uuid) text, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, toughness text, types text, uuid text, variations text, watermark text)"
      }
    },
    "old_new_table_mapping": {
      "foreign_data": "merged_data",
      "cards": "merged_data"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['flavorText_foreign_data', 'name_foreign_data', 'text_foreign_data', 'type_foreign_data']": {
        "old_table": "['foreign_data', 'cards', 'foreign_data', 'foreign_data']",
        "old_column": "['flavorText', 'name', 'text', 'type']"
      }
    },
    "new_gold_sql": "SELECT name_foreign_data FROM merged_data WHERE uuid IN ( SELECT uuid FROM merged_data WHERE types = 'Creature' AND layout = 'normal' AND borderColor = 'black' AND artist = 'Matthew D. Wilson' ) AND language = 'French'"
  },
  {
    "train_idx": 413,
    "db_id": "card_games",
    "question": "How many cards with print rarity have ruling text printed on 01/02/2007?",
    "query": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T2.date = '2007-02-01'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "rulings": {
        "ddl": "create table rulings( id integer primary key, date date, text text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "cards_rulings": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "date",
          "ruling_text",
          "ruling_id"
        ],
        "ddl": "create table cards_rulings( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, date date)"
      }
    },
    "old_new_table_mapping": {
      "cards": "cards_rulings",
      "rulings": "cards_rulings"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['ruling_id', 'ruling_text']": {
        "old_table": "['rulings', 'rulings']",
        "old_column": "['id', 'text']"
      }
    },
    "new_gold_sql": "SELECT COUNT(DISTINCT T1.id) FROM cards_rulings AS T1 WHERE T1.rarity = 'rare' AND T1.date = '2007-02-01'"
  },
  {
    "train_idx": 414,
    "db_id": "card_games",
    "question": "What language is the set of 180 cards that belongs to the Ravnica block translated into?",
    "query": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ravnica' AND T1.baseSetSize = 180",
    "relevant_table": {
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      },
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      }
    },
    "new_relevant_table": {
      "merged_sets_translations": {
        "columns": [
          "id",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly",
          "isPartialPreview",
          "keyruneCode",
          "mcmId",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type",
          "id_set_translations",
          "language",
          "setCode",
          "translation"
        ],
        "ddl": "create table merged_sets_translations( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text, language text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "set_translations": "merged_sets_translations",
      "sets": "merged_sets_translations"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.language FROM merged_sets_translations AS T1 WHERE T1.block = 'Ravnica' AND T1.baseSetSize = 180"
  },
  {
    "train_idx": 415,
    "db_id": "card_games",
    "question": "What percentage of cards with format commander and legal status do not have a content warning?",
    "query": "SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'Legal'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "legalities": {
        "ddl": "create table legalities( id integer primary key, format text, status text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "merged_cards_legalities": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "format",
          "status",
          "foreign_key_uuid"
        ],
        "ddl": "create table merged_cards_legalities( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, format text, status text)"
      }
    },
    "old_new_table_mapping": {
      "legalities": "merged_cards_legalities",
      "cards": "merged_cards_legalities"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM merged_cards_legalities AS T1 WHERE T1.format = 'commander' AND T1.status = 'Legal'"
  },
  {
    "train_idx": 416,
    "db_id": "card_games",
    "question": "What percentage of cards without power are in French?",
    "query": "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.power IS NULL OR T1.power = '*'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "foreign_data": {
        "ddl": "create table foreign_data( id integer primary key, flavorText text, language text, multiverseid integer, name text, text text, type text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText_cards",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name_cards",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text_cards",
          "toughness",
          "type_cards",
          "types",
          "uuid",
          "variations",
          "watermark",
          "flavorText_foreign_data",
          "language",
          "multiverseid",
          "name_foreign_data",
          "text_foreign_data",
          "type_foreign_data"
        ],
        "ddl": "create table merged_table( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, toughness text, types text, uuid text, variations text, watermark text, language text, multiverseid integer)"
      }
    },
    "old_new_table_mapping": {
      "cards": "merged_table",
      "foreign_data": "merged_table"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['flavorText_cards', 'name_cards', 'text_cards', 'type_cards', 'flavorText_foreign_data', 'name_foreign_data', 'text_foreign_data', 'type_foreign_data']": {
        "old_table": "['cards', 'foreign_data', 'cards', 'foreign_data']",
        "old_column": "['flavorText', 'name', 'text', 'type']"
      }
    },
    "new_gold_sql": "SELECT CAST(SUM(CASE WHEN T1.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM merged_table AS T1 WHERE T1.power IS NULL OR T1.power = '*'"
  },
  {
    "train_idx": 417,
    "db_id": "card_games",
    "question": "What percentage of Japanese translated sets are expansion sets?",
    "query": "SELECT CAST(SUM(CASE WHEN T2.language = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.type = 'expansion'",
    "relevant_table": {
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      },
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      }
    },
    "new_relevant_table": {
      "merged_sets": {
        "columns": [
          "id",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly",
          "isPartialPreview",
          "keyruneCode",
          "mcmId",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type",
          "id_set_translations",
          "language",
          "setCode",
          "translation"
        ],
        "ddl": "create table merged_sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text, language text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "sets": "merged_sets",
      "set_translations": "merged_sets"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(CASE WHEN language = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM merged_sets WHERE type = 'expansion' AND code = setCode"
  },
  {
    "train_idx": 427,
    "db_id": "card_games",
    "question": "What languages are available in the set known as Archenemy on the magic card market and having the code ARC?",
    "query": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.mcmName = 'Archenemy' AND T2.setCode = 'ARC'",
    "relevant_table": {
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      },
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      }
    },
    "new_relevant_table": {
      "merged_sets_translations": {
        "columns": [
          "id",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly",
          "isPartialPreview",
          "keyruneCode",
          "mcmId",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type",
          "id_set_translations",
          "language",
          "setCode",
          "translation"
        ],
        "ddl": "create table merged_sets_translations( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text, language text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "sets": "merged_sets_translations",
      "set_translations": "merged_sets_translations"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.language FROM merged_sets_translations AS T1 WHERE T1.mcmName = 'Archenemy' AND T1.setCode = 'ARC'"
  },
  {
    "train_idx": 428,
    "db_id": "card_games",
    "question": "What is the name of set number 5 and its translation?",
    "query": "SELECT T1.name, T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 5 GROUP BY T1.name, T2.translation",
    "relevant_table": {
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      },
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      }
    },
    "new_relevant_table": {
      "merged_sets_translations": {
        "columns": [
          "id",
          "language",
          "setCode",
          "translation",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly",
          "isPartialPreview",
          "keyruneCode",
          "mcmId",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type"
        ],
        "ddl": "create table merged_sets_translations( id integer primary key, language text, translation text, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      }
    },
    "old_new_table_mapping": {
      "set_translations": "merged_sets_translations",
      "sets": "merged_sets_translations"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT name, translation FROM merged_sets_translations WHERE id = 5 GROUP BY name, translation"
  },
  {
    "train_idx": 429,
    "db_id": "card_games",
    "question": "What is the language and expansion type of set number 206?",
    "query": "SELECT T2.language, T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 206",
    "relevant_table": {
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      },
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      }
    },
    "new_relevant_table": {
      "merged_sets_translations": {
        "columns": [
          "id",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly",
          "isPartialPreview",
          "keyruneCode",
          "mcmId",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type",
          "id_set_translations",
          "language",
          "setCode",
          "translation"
        ],
        "ddl": "create table merged_sets_translations( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text, language text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "set_translations": "merged_sets_translations",
      "sets": "merged_sets_translations"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.language, T1.type FROM merged_sets_translations AS T1 WHERE T1.id_set_translations = 206"
  },
  {
    "train_idx": 430,
    "db_id": "card_games",
    "question": "Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Shadowmoor block in alphabetical order.",
    "query": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Shadowmoor' AND T2.language = 'Italian' ORDER BY T1.id LIMIT 2",
    "relevant_table": {
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      },
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      }
    },
    "new_relevant_table": {
      "merged_sets": {
        "columns": [
          "id",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly",
          "isPartialPreview",
          "keyruneCode",
          "mcmId",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type",
          "id_set_translations",
          "language",
          "setCode",
          "translation"
        ],
        "ddl": "create table merged_sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text, language text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "sets": "merged_sets",
      "set_translations": "merged_sets"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT name, id FROM merged_sets WHERE block = 'Shadowmoor' AND language = 'Italian' ORDER BY id LIMIT 2"
  },
  {
    "train_idx": 431,
    "db_id": "card_games",
    "question": "Which set is not available outside of the United States and has foil cards with Japanese writing on them? Please include the set ID in your response.",
    "query": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Japanese' AND T1.isFoilOnly = 1 AND T1.isForeignOnly = 0",
    "relevant_table": {
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      },
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      }
    },
    "new_relevant_table": {
      "merged_sets_translations": {
        "columns": [
          "id",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly",
          "isPartialPreview",
          "keyruneCode",
          "mcmId",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type",
          "language",
          "setCode",
          "translation"
        ],
        "ddl": "create table merged_sets_translations( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text, language text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "set_translations": "merged_sets_translations",
      "sets": "merged_sets_translations"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.name, T1.id FROM merged_sets_translations AS T1 WHERE T1.language = 'Japanese' AND T1.isFoilOnly = 1 AND T1.isForeignOnly = 0"
  },
  {
    "train_idx": 432,
    "db_id": "card_games",
    "question": "Which Russian set of cards contains the most cards overall?",
    "query": "SELECT T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Russian' GROUP BY T1.baseSetSize ORDER BY T1.baseSetSize DESC LIMIT 1",
    "relevant_table": {
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      },
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      }
    },
    "new_relevant_table": {
      "merged_sets_translations": {
        "columns": [
          "id",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly",
          "isPartialPreview",
          "keyruneCode",
          "mcmId",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type",
          "id_set_translations",
          "language",
          "setCode",
          "translation"
        ],
        "ddl": "create table merged_sets_translations( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text, language text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "sets": "merged_sets_translations",
      "set_translations": "merged_sets_translations"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.id FROM merged_sets_translations AS T1 WHERE T1.language = 'Russian' GROUP BY T1.baseSetSize ORDER BY T1.baseSetSize DESC LIMIT 1"
  },
  {
    "train_idx": 433,
    "db_id": "card_games",
    "question": "What is the percentage of the set of cards that have Chinese Simplified as the language and are only available for online games?",
    "query": "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' AND T1.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode",
    "relevant_table": {
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      },
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      }
    },
    "new_relevant_table": {
      "merged_sets": {
        "columns": [
          "id",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly",
          "isPartialPreview",
          "keyruneCode",
          "mcmId",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type",
          "id_set_translations",
          "language",
          "setCode",
          "translation"
        ],
        "ddl": "create table merged_sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text, language text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "sets": "merged_sets",
      "set_translations": "merged_sets"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(CASE WHEN language = 'Chinese Simplified' AND isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM merged_sets"
  },
  {
    "train_idx": 434,
    "db_id": "card_games",
    "question": "How many sets are available just in Japanese and not in Magic: The Gathering Online?",
    "query": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.language = 'Japanese'  AND (T1.mtgoCode IS NULL OR T1.mtgoCode = '')",
    "relevant_table": {
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      },
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      }
    },
    "new_relevant_table": {
      "merged_sets_translations": {
        "columns": [
          "id",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly",
          "isPartialPreview",
          "keyruneCode",
          "mcmId",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type",
          "set_translations_id",
          "language",
          "setCode",
          "translation"
        ],
        "ddl": "create table merged_sets_translations( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text, language text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "set_translations": "merged_sets_translations",
      "sets": "merged_sets_translations"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(T1.id) FROM merged_sets_translations AS T1 WHERE T1.language = 'Japanese' AND (T1.mtgoCode IS NULL OR T1.mtgoCode = '')"
  },
  {
    "train_idx": 441,
    "db_id": "card_games",
    "question": "State the set code of the set with release date of 07/13/2007?",
    "query": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.releaseDate = '2007-07-13'",
    "relevant_table": {
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      },
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      }
    },
    "new_relevant_table": {
      "merged_sets_translations": {
        "columns": [
          "id",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly",
          "isPartialPreview",
          "keyruneCode",
          "mcmId",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type",
          "id_set_translations",
          "language",
          "setCode",
          "translation"
        ],
        "ddl": "create table merged_sets_translations( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text, language text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "sets": "merged_sets_translations",
      "set_translations": "merged_sets_translations"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.setCode FROM merged_sets_translations AS T1 WHERE T1.releaseDate = '2007-07-13'"
  },
  {
    "train_idx": 442,
    "db_id": "card_games",
    "question": "Mention the base set size and set code of the set that was in block named \"Masques\" and \"Mirage\".",
    "query": "SELECT DISTINCT T1.baseSetSize, T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.block IN ('Masques', 'Mirage')",
    "relevant_table": {
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      },
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      }
    },
    "new_relevant_table": {
      "merged_sets_translations": {
        "columns": [
          "id",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly",
          "isPartialPreview",
          "keyruneCode",
          "mcmId",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type",
          "id_set_translations",
          "language",
          "setCode",
          "translation"
        ],
        "ddl": "create table merged_sets_translations( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text, language text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "sets": "merged_sets_translations",
      "set_translations": "merged_sets_translations"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT T1.baseSetSize, T1.setCode FROM merged_sets_translations AS T1 WHERE T1.block IN ('Masques', 'Mirage')"
  },
  {
    "train_idx": 443,
    "db_id": "card_games",
    "question": "Give the code of sets have expansion type of 'expansion'?",
    "query": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'expansion' GROUP BY T2.setCode",
    "relevant_table": {
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      },
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      }
    },
    "new_relevant_table": {
      "merged_sets": {
        "columns": [
          "id",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly",
          "isPartialPreview",
          "keyruneCode",
          "mcmId",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type",
          "id_set_translations",
          "language",
          "setCode",
          "translation"
        ],
        "ddl": "create table merged_sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text, language text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "sets": "merged_sets",
      "set_translations": "merged_sets"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT setCode FROM merged_sets WHERE type = 'expansion' GROUP BY setCode"
  },
  {
    "train_idx": 444,
    "db_id": "card_games",
    "question": "Name the foreign name of the card that has boros watermark? List out the type of this card.",
    "query": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'boros'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "foreign_data": {
        "ddl": "create table foreign_data( id integer primary key, flavorText text, language text, multiverseid integer, name text, text text, type text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText_cards",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name_cards",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text_cards",
          "toughness",
          "type_cards",
          "types",
          "uuid",
          "variations",
          "watermark",
          "flavorText_foreign",
          "language",
          "multiverseid",
          "name_foreign",
          "text_foreign",
          "type_foreign"
        ],
        "ddl": "create table merged_table( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, toughness text, types text, uuid text, variations text, watermark text, language text, multiverseid integer)"
      }
    },
    "old_new_table_mapping": {
      "cards": "merged_table",
      "foreign_data": "merged_table"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['flavorText_cards', 'name_cards', 'text_cards', 'type_cards', 'flavorText_foreign', 'name_foreign', 'text_foreign', 'type_foreign']": {
        "old_table": "['cards', 'foreign_data', 'cards', 'foreign_data']",
        "old_column": "['flavorText', 'name', 'text', 'type']"
      }
    },
    "new_gold_sql": "SELECT DISTINCT T1.name_cards, T1.type_cards FROM merged_table AS T1 WHERE T1.watermark = 'boros'"
  },
  {
    "train_idx": 445,
    "db_id": "card_games",
    "question": "What is the language and flavor text of the card that has colorpie watermark? List out the type of this card.",
    "query": "SELECT DISTINCT T2.language, T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'colorpie'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "foreign_data": {
        "ddl": "create table foreign_data( id integer primary key, flavorText text, language text, multiverseid integer, name text, text text, type text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "merged_data": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "flavorText_foreign",
          "language",
          "multiverseid_foreign",
          "name_foreign",
          "text_foreign",
          "type_foreign"
        ],
        "ddl": "create table merged_data( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, language text)"
      }
    },
    "old_new_table_mapping": {
      "cards": "merged_data",
      "foreign_data": "merged_data"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT T.language, T.flavorText_foreign FROM merged_data AS T WHERE T.watermark = 'colorpie'"
  },
  {
    "train_idx": 446,
    "db_id": "card_games",
    "question": "What is percentage of the cards with a converted Mana Cost of 10 in set of Abyssal Horror?",
    "query": "SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 10 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id), T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Abyssal Horror'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      }
    },
    "new_relevant_table": {
      "cards_sets": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly_cards",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId_cards",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name_cards",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type_cards",
          "types",
          "uuid",
          "variations",
          "watermark",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly_sets",
          "isPartialPreview",
          "keyruneCode",
          "mcmId_sets",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name_sets",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type_sets"
        ],
        "ddl": "create table cards_sets( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, types text, uuid text, variations text, watermark text, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isPartialPreview integer, keyruneCode text, mcmIdExtras integer, mcmName text, mtgoCode text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer)"
      }
    },
    "old_new_table_mapping": {
      "cards": "cards_sets",
      "sets": "cards_sets"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['isOnlineOnly_cards', 'mcmId_cards', 'name_cards', 'type_cards', 'isOnlineOnly_sets', 'mcmId_sets', 'name_sets', 'type_sets']": {
        "old_table": "['cards', 'cards', 'cards', 'cards', 'sets', 'sets', 'sets', 'sets']",
        "old_column": "['isOnlineOnly', 'mcmId', 'name', 'type']"
      }
    },
    "new_gold_sql": "SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 10 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id), T1.name_cards FROM cards_sets AS T1 WHERE T1.name_cards = 'Abyssal Horror'"
  },
  {
    "train_idx": 447,
    "db_id": "card_games",
    "question": "Give the code of sets have expansion commander type?",
    "query": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'commander'",
    "relevant_table": {
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      },
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      }
    },
    "new_relevant_table": {
      "merged_sets_translations": {
        "columns": [
          "id",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly",
          "isPartialPreview",
          "keyruneCode",
          "mcmId",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type",
          "language",
          "setCode",
          "translation"
        ],
        "ddl": "create table merged_sets_translations( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text, language text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "set_translations": "merged_sets_translations",
      "sets": "merged_sets_translations"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.setCode FROM merged_sets_translations AS T1 WHERE T1.type = 'commander'"
  },
  {
    "train_idx": 448,
    "db_id": "card_games",
    "question": "Name the foreign name of the card that has abzan watermark? List out the type of this card.",
    "query": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'abzan'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "foreign_data": {
        "ddl": "create table foreign_data( id integer primary key, flavorText text, language text, multiverseid integer, name text, text text, type text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText_cards",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name_cards",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text_cards",
          "toughness",
          "type_cards",
          "types",
          "uuid",
          "variations",
          "watermark",
          "flavorText_foreign_data",
          "language",
          "multiverseid",
          "name_foreign_data",
          "text_foreign_data",
          "type_foreign_data"
        ],
        "ddl": "create table merged_table( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, toughness text, types text, uuid text, variations text, watermark text, language text, multiverseid integer)"
      }
    },
    "old_new_table_mapping": {
      "cards": "merged_table",
      "foreign_data": "merged_table"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['flavorText_cards', 'name_cards', 'text_cards', 'type_cards', 'flavorText_foreign_data', 'name_foreign_data', 'text_foreign_data', 'type_foreign_data']": {
        "old_table": "['cards', 'foreign_data', 'cards', 'foreign_data']",
        "old_column": "['flavorText', 'name', 'text', 'type']"
      }
    },
    "new_gold_sql": "SELECT DISTINCT T1.name_cards, T1.type_cards FROM merged_table AS T1 WHERE T1.watermark = 'abzan'"
  },
  {
    "train_idx": 449,
    "db_id": "card_games",
    "question": "What is the language of the card that has azorius watermark? List out the type of this card.",
    "query": "SELECT DISTINCT T2.language, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'azorius'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "foreign_data": {
        "ddl": "create table foreign_data( id integer primary key, flavorText text, language text, multiverseid integer, name text, text text, type text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText_cards",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name_cards",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text_cards",
          "toughness",
          "type_cards",
          "types",
          "uuid",
          "variations",
          "watermark",
          "flavorText_foreign_data",
          "language",
          "multiverseid",
          "name_foreign_data",
          "text_foreign_data",
          "type_foreign_data"
        ],
        "ddl": "create table merged_table( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, toughness text, types text, uuid text, variations text, watermark text, language text, multiverseid integer)"
      }
    },
    "old_new_table_mapping": {
      "cards": "merged_table",
      "foreign_data": "merged_table"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['flavorText_cards', 'name_cards', 'text_cards', 'type_cards', 'flavorText_foreign_data', 'name_foreign_data', 'text_foreign_data', 'type_foreign_data']": {
        "old_table": "['cards', 'foreign_data', 'cards', 'foreign_data']",
        "old_column": "['flavorText', 'name', 'text', 'type']"
      }
    },
    "new_gold_sql": "SELECT DISTINCT T1.language, T1.type_cards FROM merged_table AS T1 WHERE T1.watermark = 'azorius'"
  },
  {
    "train_idx": 462,
    "db_id": "card_games",
    "question": "What's the Italian name of the set of cards with \"Ancestor's Chosen\" is in?",
    "query": "SELECT translation FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Ancestor''s Chosen' ) AND language = 'Italian'",
    "relevant_table": {
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      },
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "language",
          "setCode_translations",
          "translation"
        ],
        "ddl": "create table merged_table( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, language text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "cards": "merged_table",
      "set_translations": "merged_table"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT translation FROM merged_table WHERE setCode IN ( SELECT setCode FROM merged_table WHERE name = 'Ancestor''s Chosen' ) AND language = 'Italian'"
  },
  {
    "train_idx": 463,
    "db_id": "card_games",
    "question": "How many translations are there for the set of cards with \"Angel of Mercy\" in it?",
    "query": "SELECT COUNT(DISTINCT translation) FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Angel of Mercy' ) AND translation IS NOT NULL",
    "relevant_table": {
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      },
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "id",
          "language",
          "setCode",
          "translation",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark"
        ],
        "ddl": "create table merged_table( id integer primary key, language text, setCode text, translation text, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      }
    },
    "old_new_table_mapping": {
      "set_translations": "merged_table",
      "cards": "merged_table"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(DISTINCT translation) FROM merged_table WHERE name = 'Angel of Mercy' AND translation IS NOT NULL"
  },
  {
    "train_idx": 464,
    "db_id": "card_games",
    "question": "Please list the names of the cards in the set \"Hauptset Zehnte Edition\".",
    "query": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Hauptset Zehnte Edition'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      }
    },
    "new_relevant_table": {
      "cards_set_translations": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "id_set_translations",
          "language",
          "foreign key(setCode) references sets(code)",
          "translation"
        ],
        "ddl": "create table cards_set_translations( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, language text, foreign key(setCode) references sets(code) text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "cards": "cards_set_translations",
      "set_translations": "cards_set_translations"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT T1.name FROM cards_set_translations AS T1 WHERE T1.translation = 'Hauptset Zehnte Edition'"
  },
  {
    "train_idx": 465,
    "db_id": "card_games",
    "question": "For the set of cards with \"Ancestor's Chosen\" in it, is there a Korean version of it?",
    "query": "SELECT IIF(SUM(CASE WHEN T2.language = 'Korean' AND T2.translation IS NOT NULL THEN 1 ELSE 0 END) > 0, 'YES', 'NO') FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Ancestor''s Chosen'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      }
    },
    "new_relevant_table": {
      "merged_cards_translations": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "language",
          "translation"
        ],
        "ddl": "create table merged_cards_translations( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, language text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "cards": "merged_cards_translations",
      "set_translations": "merged_cards_translations"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT IIF(SUM(CASE WHEN merged_cards_translations.language = 'Korean' AND merged_cards_translations.translation IS NOT NULL THEN 1 ELSE 0 END) > 0, 'YES', 'NO') FROM merged_cards_translations WHERE merged_cards_translations.name = 'Ancestor''s Chosen'"
  },
  {
    "train_idx": 466,
    "db_id": "card_games",
    "question": "Among the cards in the set \"Hauptset Zehnte Edition\", how many of them are designed by Adam Rex?",
    "query": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Hauptset Zehnte Edition' AND T1.artist = 'Adam Rex'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      }
    },
    "new_relevant_table": {
      "cards_set_translations": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "language",
          "translation"
        ],
        "ddl": "create table cards_set_translations( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, language text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "cards": "cards_set_translations",
      "set_translations": "cards_set_translations"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(T1.id) FROM cards_set_translations AS T1 WHERE T1.translation = 'Hauptset Zehnte Edition' AND T1.artist = 'Adam Rex'"
  },
  {
    "train_idx": 467,
    "db_id": "card_games",
    "question": "How many cards are there in the base set of \"Hauptset Zehnte Edition\"?",
    "query": "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Hauptset Zehnte Edition'",
    "relevant_table": {
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      },
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      }
    },
    "new_relevant_table": {
      "merged_sets_translations": {
        "columns": [
          "id",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly",
          "isPartialPreview",
          "keyruneCode",
          "mcmId",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type",
          "language",
          "setCode",
          "translation"
        ],
        "ddl": "create table merged_sets_translations( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text, language text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "set_translations": "merged_sets_translations",
      "sets": "merged_sets_translations"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.baseSetSize FROM merged_sets_translations AS T1 WHERE T1.translation = 'Hauptset Zehnte Edition'"
  },
  {
    "train_idx": 468,
    "db_id": "card_games",
    "question": "What is the Simplified Chinese translation of the name of the set \"Eighth Edition\"?",
    "query": "SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.name = 'Eighth Edition' AND T2.language = 'Chinese Simplified'",
    "relevant_table": {
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      },
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      }
    },
    "new_relevant_table": {
      "merged_sets_translations": {
        "columns": [
          "id",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly",
          "isPartialPreview",
          "keyruneCode",
          "mcmId",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type",
          "language",
          "setCode",
          "translation"
        ],
        "ddl": "create table merged_sets_translations( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text, language text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "set_translations": "merged_sets_translations",
      "sets": "merged_sets_translations"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT translation FROM merged_sets_translations WHERE name = 'Eighth Edition' AND language = 'Chinese Simplified'"
  },
  {
    "train_idx": 469,
    "db_id": "card_games",
    "question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "query": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      }
    },
    "new_relevant_table": {
      "mergedTable": {
        "columns": [
          "id",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly_sets",
          "isPartialPreview",
          "keyruneCode",
          "mcmId_sets",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name_sets",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type_sets",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly_cards",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId_cards",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name_cards",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type_cards",
          "types",
          "uuid",
          "variations",
          "watermark"
        ],
        "ddl": "create table mergedTable( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isPartialPreview integer, keyruneCode text, mcmIdExtras integer, mcmName text, mtgoCode text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, types text, uuid text, variations text, watermark text)"
      }
    },
    "old_new_table_mapping": {
      "sets": "mergedTable",
      "cards": "mergedTable"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['isOnlineOnly_sets', 'mcmId_sets', 'name_sets', 'type_sets', 'isOnlineOnly_cards', 'mcmId_cards', 'name_cards', 'type_cards']": {
        "old_table": "['sets', 'sets', 'sets', 'sets', 'cards', 'cards', 'cards', 'cards']",
        "old_column": "['isOnlineOnly', 'mcmId', 'name', 'type']"
      }
    },
    "new_gold_sql": "SELECT IIF(T1.mtgoCode IS NOT NULL, 'YES', 'NO') FROM mergedTable AS T1 WHERE T1.name_cards = 'Angel of Mercy'"
  },
  {
    "train_idx": 470,
    "db_id": "card_games",
    "question": "When was the set of cards with \"Ancestor's Chosen\" released?",
    "query": "SELECT DISTINCT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Ancestor''s Chosen'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      }
    },
    "new_relevant_table": {
      "mergedTable": {
        "columns": [
          "id",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly_sets",
          "isPartialPreview",
          "keyruneCode",
          "mcmId_sets",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name_sets",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type_sets",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly_cards",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId_cards",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name_cards",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type_cards",
          "types",
          "uuid",
          "variations",
          "watermark"
        ],
        "ddl": "create table mergedTable( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isPartialPreview integer, keyruneCode text, mcmIdExtras integer, mcmName text, mtgoCode text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, types text, uuid text, variations text, watermark text)"
      }
    },
    "old_new_table_mapping": {
      "sets": "mergedTable",
      "cards": "mergedTable"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['isOnlineOnly_sets', 'mcmId_sets', 'name_sets', 'type_sets', 'isOnlineOnly_cards', 'mcmId_cards', 'name_cards', 'type_cards']": {
        "old_table": "['sets', 'sets', 'sets', 'sets', 'cards', 'cards', 'cards', 'cards']",
        "old_column": "['isOnlineOnly', 'mcmId', 'name', 'type']"
      }
    },
    "new_gold_sql": "SELECT DISTINCT T1.releaseDate FROM mergedTable AS T1 WHERE T1.name_cards = 'Ancestor''s Chosen'"
  },
  {
    "train_idx": 471,
    "db_id": "card_games",
    "question": "What is the expansion type of the set \"Hauptset Zehnte Edition\"?",
    "query": "SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Hauptset Zehnte Edition'",
    "relevant_table": {
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      },
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      }
    },
    "new_relevant_table": {
      "merged_sets_translations": {
        "columns": [
          "id",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly",
          "isPartialPreview",
          "keyruneCode",
          "mcmId",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type",
          "id_set_translations",
          "language",
          "setCode",
          "translation"
        ],
        "ddl": "create table merged_sets_translations( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text, language text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "set_translations": "merged_sets_translations",
      "sets": "merged_sets_translations"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.type FROM merged_sets_translations AS T1 WHERE T1.translation = 'Hauptset Zehnte Edition' AND T1.setCode = T1.code"
  },
  {
    "train_idx": 472,
    "db_id": "card_games",
    "question": "Among the sets in the block \"Ice Age\", how many of them have an Italian translation?",
    "query": "SELECT COUNT(DISTINCT T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.block = 'Ice Age' AND T2.language = 'Italian' AND T2.translation IS NOT NULL",
    "relevant_table": {
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      },
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      }
    },
    "new_relevant_table": {
      "merged_sets_translations": {
        "columns": [
          "id",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly",
          "isPartialPreview",
          "keyruneCode",
          "mcmId",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type",
          "id_set_translations",
          "language",
          "setCode",
          "translation"
        ],
        "ddl": "create table merged_sets_translations( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text, language text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "sets": "merged_sets_translations",
      "set_translations": "merged_sets_translations"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(DISTINCT T1.id) FROM merged_sets_translations AS T1 WHERE T1.block = 'Ice Age' AND T1.language = 'Italian' AND T1.translation IS NOT NULL"
  },
  {
    "train_idx": 473,
    "db_id": "card_games",
    "question": "Is the set of cards with Adarkar Valkyrie only available outside the United States?",
    "query": "SELECT IIF(isForeignOnly = 1, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Adarkar Valkyrie'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      }
    },
    "new_relevant_table": {
      "cards_sets": {
        "columns": [
          "id",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly_sets",
          "isPartialPreview",
          "keyruneCode",
          "mcmId_sets",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name_sets",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type_sets",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly_cards",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId_cards",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name_cards",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type_cards",
          "types",
          "uuid",
          "variations",
          "watermark"
        ],
        "ddl": "create table cards_sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isPartialPreview integer, keyruneCode text, mcmIdExtras integer, mcmName text, mtgoCode text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, types text, uuid text, variations text, watermark text)"
      }
    },
    "old_new_table_mapping": {
      "sets": "cards_sets",
      "cards": "cards_sets"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['isOnlineOnly_sets', 'mcmId_sets', 'name_sets', 'type_sets', 'isOnlineOnly_cards', 'mcmId_cards', 'name_cards', 'type_cards']": {
        "old_table": "['sets', 'sets', 'sets', 'sets', 'cards', 'cards', 'cards', 'cards']",
        "old_column": "['isOnlineOnly', 'mcmId', 'name', 'type']"
      }
    },
    "new_gold_sql": "SELECT IIF(isForeignOnly = 1, 'YES', 'NO') FROM cards_sets WHERE name_cards = 'Adarkar Valkyrie' AND code = setCode"
  },
  {
    "train_idx": 474,
    "db_id": "card_games",
    "question": "Among the sets of cards that have an Italian translation, how many of them have a base set number of under 100?",
    "query": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation IS NOT NULL AND T1.baseSetSize < 100 AND T2.language = 'Italian'",
    "relevant_table": {
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      },
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      }
    },
    "new_relevant_table": {
      "merged_sets_translations": {
        "columns": [
          "id",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly",
          "isPartialPreview",
          "keyruneCode",
          "mcmId",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type",
          "id_set_translations",
          "language",
          "setCode",
          "translation"
        ],
        "ddl": "create table merged_sets_translations( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text, language text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "set_translations": "merged_sets_translations",
      "sets": "merged_sets_translations"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(T1.id) FROM merged_sets_translations AS T1 WHERE T1.translation IS NOT NULL AND T1.baseSetSize < 100 AND T1.language = 'Italian'"
  },
  {
    "train_idx": 475,
    "db_id": "card_games",
    "question": "How many cards in the set Coldsnap have a black border color?",
    "query": "SELECT SUM(CASE WHEN T1.borderColor = 'black' THEN 1 ELSE 0 END) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      }
    },
    "new_relevant_table": {
      "cards_sets": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId_cards",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name_cards",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type_cards",
          "types",
          "uuid",
          "variations",
          "watermark",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly_sets",
          "isPartialPreview",
          "keyruneCode",
          "mcmId_sets",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name_sets",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type_sets"
        ],
        "ddl": "create table cards_sets( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, types text, uuid text, variations text, watermark text, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isPartialPreview integer, keyruneCode text, mcmIdExtras integer, mcmName text, mtgoCode text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer)"
      }
    },
    "old_new_table_mapping": {
      "cards": "cards_sets",
      "sets": "cards_sets"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['mcmId_cards', 'name_cards', 'isOnlineOnly_cards', 'type_cards']": {
        "old_table": "['cards', 'cards', 'cards', 'cards']",
        "old_column": "['mcmId', 'name', 'isOnlineOnly', 'type']"
      }
    },
    "new_gold_sql": "SELECT SUM(CASE WHEN T1.borderColor = 'black' THEN 1 ELSE 0 END) FROM cards_sets AS T1 WHERE T1.name_sets = 'Coldsnap'"
  },
  {
    "train_idx": 476,
    "db_id": "card_games",
    "question": "Please list the name of the cards in the set Coldsnap with the highest converted mana cost.",
    "query": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' ORDER BY T1.convertedManaCost DESC LIMIT 1",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      }
    },
    "new_relevant_table": {
      "cards_sets": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isPartialPreview",
          "keyruneCode",
          "mcmId_sets",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name_sets",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type_sets"
        ],
        "ddl": "create table cards_sets( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId integer, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isPartialPreview integer, keyruneCode text, mcmIdExtras integer, mcmName text, mtgoCode text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer)"
      }
    },
    "old_new_table_mapping": {
      "cards": "cards_sets",
      "sets": "cards_sets"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.name FROM cards_sets AS T1 WHERE T1.name_sets = 'Coldsnap' ORDER BY T1.convertedManaCost DESC LIMIT 1"
  },
  {
    "train_idx": 477,
    "db_id": "card_games",
    "question": "Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy?",
    "query": "SELECT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE (T2.name = 'Coldsnap' AND T1.artist = 'Chippy') OR (T2.name = 'Coldsnap' AND T1.artist = 'Aaron Miller') OR (T2.name = 'Coldsnap' AND T1.artist = 'Jeremy Jarvis') GROUP BY T1.artist",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      }
    },
    "new_relevant_table": {
      "cards_sets": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId_cards",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name_cards",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type_cards",
          "types",
          "uuid",
          "variations",
          "watermark",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly_sets",
          "isPartialPreview",
          "keyruneCode",
          "mcmId_sets",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name_sets",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type_sets"
        ],
        "ddl": "create table cards_sets( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, types text, uuid text, variations text, watermark text, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isPartialPreview integer, keyruneCode text, mcmIdExtras integer, mcmName text, mtgoCode text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer)"
      }
    },
    "old_new_table_mapping": {
      "cards": "cards_sets",
      "sets": "cards_sets"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['mcmId_cards', 'name_cards', 'isOnlineOnly_cards', 'type_cards', 'mcmId_sets', 'name_sets', 'isOnlineOnly_sets', 'type_sets']": {
        "old_table": "['cards', 'cards', 'cards', 'cards', 'sets', 'sets', 'sets', 'sets']",
        "old_column": "['mcmId', 'name', 'isOnlineOnly', 'type']"
      }
    },
    "new_gold_sql": "SELECT T1.artist FROM cards_sets AS T1 WHERE (T1.name_sets = 'Coldsnap' AND T1.artist = 'Chippy') OR (T1.name_sets = 'Coldsnap' AND T1.artist = 'Aaron Miller') OR (T1.name_sets = 'Coldsnap' AND T1.artist = 'Jeremy Jarvis') GROUP BY T1.artist"
  },
  {
    "train_idx": 478,
    "db_id": "card_games",
    "question": "What is card number 4 in the set Coldsnap?",
    "query": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.number = 4",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      }
    },
    "new_relevant_table": {
      "cards_sets": {
        "columns": [
          "id",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly",
          "isPartialPreview",
          "keyruneCode",
          "mcmId",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly_cards",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId_cards",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name_cards",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type_cards",
          "types",
          "uuid",
          "variations",
          "watermark"
        ],
        "ddl": "create table cards_sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId text, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, types text, uuid text, variations text, watermark text)"
      }
    },
    "old_new_table_mapping": {
      "sets": "cards_sets",
      "cards": "cards_sets"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['isOnlineOnly_cards', 'mcmId_cards', 'name_cards', 'type_cards']": {
        "old_table": "['cards', 'cards', 'cards', 'cards']",
        "old_column": "['isOnlineOnly', 'mcmId', 'name', 'type']"
      }
    },
    "new_gold_sql": "SELECT T1.name_cards FROM cards_sets AS T1 WHERE T1.name = 'Coldsnap' AND T1.number = 4"
  },
  {
    "train_idx": 479,
    "db_id": "card_games",
    "question": "Among the cards with converted mana cost higher than 5 in the set Coldsnap, how many of them have unknown power?",
    "query": "SELECT SUM(CASE WHEN T1.power LIKE '*' OR T1.power IS NULL THEN 1 ELSE 0 END) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost > 5",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      }
    },
    "new_relevant_table": {
      "cards_sets": {
        "columns": [
          "id",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly_sets",
          "isPartialPreview",
          "keyruneCode",
          "mcmId_sets",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name_sets",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type_sets",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly_cards",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId_cards",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name_cards",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type_cards",
          "types",
          "uuid",
          "variations",
          "watermark"
        ],
        "ddl": "create table cards_sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isPartialPreview integer, keyruneCode text, mcmIdExtras integer, mcmName text, mtgoCode text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, types text, uuid text, variations text, watermark text)"
      }
    },
    "old_new_table_mapping": {
      "sets": "cards_sets",
      "cards": "cards_sets"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['isOnlineOnly_sets', 'mcmId_sets', 'name_sets', 'type_sets']": {
        "old_table": "['sets', 'sets', 'sets', 'sets']",
        "old_column": "['isOnlineOnly', 'mcmId', 'name', 'type']"
      }
    },
    "new_gold_sql": "SELECT SUM(CASE WHEN T1.power LIKE '*' OR T1.power IS NULL THEN 1 ELSE 0 END) FROM cards_sets AS T1 WHERE T1.name_sets = 'Coldsnap' AND T1.convertedManaCost > 5"
  },
  {
    "train_idx": 480,
    "db_id": "card_games",
    "question": "What is the Italian flavor text of the card \"Ancestor's Chosen\"?",
    "query": "SELECT T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Italian'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "foreign_data": {
        "ddl": "create table foreign_data( id integer primary key, flavorText text, language text, multiverseid integer, name text, text text, type text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "merged_data": {
        "columns": [
          "id",
          "flavorText_foreign",
          "language",
          "multiverseid",
          "name_foreign",
          "text_foreign",
          "type_foreign",
          "uuid",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "variations",
          "watermark"
        ],
        "ddl": "create table merged_data( id integer primary key, language text, multiverseid integer, uuid text, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, variations text, watermark text)"
      }
    },
    "old_new_table_mapping": {
      "foreign_data": "merged_data",
      "cards": "merged_data"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "flavorText_foreign, name_foreign, text_foreign, type_foreign": {
        "old_table": "foreign_data, foreign_data, foreign_data, foreign_data",
        "old_column": "flavorText, name, text, type"
      }
    },
    "new_gold_sql": "SELECT T1.flavorText_foreign FROM merged_data AS T1 WHERE T1.name = 'Ancestor''s Chosen' AND T1.language = 'Italian'"
  },
  {
    "train_idx": 481,
    "db_id": "card_games",
    "question": "Please list all the foreign languages in which the card \"Ancestor's Chosen\" has a flavor text.",
    "query": "SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.flavorText IS NOT NULL",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "foreign_data": {
        "ddl": "create table foreign_data( id integer primary key, flavorText text, language text, multiverseid integer, name text, text text, type text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "merged_data": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "cards_flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "cards_text",
          "toughness",
          "cards_type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "foreign_data_id",
          "foreign_data_flavorText",
          "language",
          "multiverseid",
          "foreign_data_name",
          "foreign_data_text",
          "foreign_data_type"
        ],
        "ddl": "create table merged_data( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, toughness text, types text, uuid text, variations text, watermark text, language text, multiverseid integer)"
      }
    },
    "old_new_table_mapping": {
      "foreign_data": "merged_data",
      "cards": "merged_data"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['cards_flavorText', 'foreign_data_text', 'cards_type']": {
        "old_table": "['cards', 'foreign_data', 'cards']",
        "old_column": "['flavorText', 'text', 'type']"
      }
    },
    "new_gold_sql": "SELECT language FROM merged_data WHERE name = 'Ancestor''s Chosen' AND cards_flavorText IS NOT NULL"
  },
  {
    "train_idx": 482,
    "db_id": "card_games",
    "question": "What's the German type of the card \"Ancestor's Chosen\"?",
    "query": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'German'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "foreign_data": {
        "ddl": "create table foreign_data( id integer primary key, flavorText text, language text, multiverseid integer, name text, text text, type text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText_cards",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name_cards",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text_cards",
          "toughness",
          "type_cards",
          "types",
          "uuid",
          "variations",
          "watermark",
          "flavorText_foreign_data",
          "language",
          "multiverseid",
          "name_foreign_data",
          "text_foreign_data",
          "type_foreign_data"
        ],
        "ddl": "create table merged_table( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, toughness text, types text, uuid text, variations text, watermark text, language text, multiverseid integer)"
      }
    },
    "old_new_table_mapping": {
      "cards": "merged_table",
      "foreign_data": "merged_table"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['flavorText_cards', 'name_cards', 'text_cards', 'type_cards', 'flavorText_foreign_data', 'name_foreign_data', 'text_foreign_data', 'type_foreign_data']": {
        "old_table": "['cards', 'foreign_data', 'cards', 'foreign_data']",
        "old_column": "['flavorText', 'name', 'text', 'type']"
      }
    },
    "new_gold_sql": "SELECT DISTINCT T1.type_cards FROM merged_table AS T1 WHERE T1.name_cards = 'Ancestor''s Chosen' AND T1.language = 'German'"
  },
  {
    "train_idx": 483,
    "db_id": "card_games",
    "question": "Please list the Italian text ruling of all the cards in the set Coldsnap.",
    "query": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian'",
    "relevant_table": {
      "foreign_data": {
        "ddl": "create table foreign_data( id integer primary key, flavorText text, language text, multiverseid integer, name text, text text, type text, foreign key(uuid) references cards(uuid) text)"
      },
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText_cards",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name_cards",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text_cards",
          "toughness",
          "type_cards",
          "types",
          "uuid",
          "variations",
          "watermark",
          "flavorText_foreign_data",
          "language",
          "multiverseid",
          "name_foreign_data",
          "text_foreign_data",
          "type_foreign_data"
        ],
        "ddl": "create table merged_table( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, toughness text, types text, uuid text, variations text, watermark text, language text, multiverseid integer)"
      },
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      }
    },
    "old_new_table_mapping": {
      "cards": "merged_table",
      "foreign_data": "merged_table"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['flavorText_cards', 'name_cards', 'text_cards', 'type_cards']": {
        "old_table": "['cards', 'foreign_data', 'cards', 'foreign_data']",
        "old_column": "['flavorText', 'name', 'text', 'type']"
      }
    },
    "new_gold_sql": "SELECT DISTINCT T1.text_foreign_data FROM merged_table AS T1 WHERE T1.setCode = 'Coldsnap' AND T1.language = 'Italian'"
  },
  {
    "train_idx": 484,
    "db_id": "card_games",
    "question": "Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.",
    "query": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' ORDER BY T2.convertedManaCost DESC",
    "relevant_table": {
      "foreign_data": {
        "ddl": "create table foreign_data( id integer primary key, flavorText text, language text, multiverseid integer, name text, text text, type text, foreign key(uuid) references cards(uuid) text)"
      },
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isPartialPreview",
          "keyruneCode",
          "mcmId_sets",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name_sets",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type_sets"
        ],
        "ddl": "create table merged_table( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId integer, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isPartialPreview integer, keyruneCode text, mcmId_sets integer, mcmIdExtras integer, mcmName text, mtgoCode text, name_sets text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type_sets text)"
      },
      "foreign_data": {
        "ddl": "create table foreign_data( id integer primary key, flavorText text, language text, multiverseid integer, name text, text text, type text, foreign key(uuid) references merged_table(uuid) text)"
      }
    },
    "old_new_table_mapping": {
      "cards": "merged_table",
      "sets": "merged_table"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "mcmId_sets": {
        "old_table": "sets",
        "old_column": "mcmId"
      },
      "name_sets": {
        "old_table": "sets",
        "old_column": "name"
      },
      "type_sets": {
        "old_table": "sets",
        "old_column": "type"
      }
    },
    "new_gold_sql": "SELECT T1.name FROM foreign_data AS T1 WHERE T1.name_sets = 'Coldsnap' AND T1.language = 'Italian' ORDER BY T1.convertedManaCost DESC"
  },
  {
    "train_idx": 485,
    "db_id": "card_games",
    "question": "When was the ruling for the card 'Reminisce' created?",
    "query": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "rulings": {
        "ddl": "create table rulings( id integer primary key, date date, text text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "cards_rulings": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text_cards",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "id_rulings",
          "date",
          "text_rulings",
          "foreign key(uuid) references cards(uuid)"
        ],
        "ddl": "create table cards_rulings( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, toughness text, type text, types text, uuid text, variations text, watermark text, date date, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "old_new_table_mapping": {
      "rulings": "cards_rulings",
      "cards": "cards_rulings"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['id_rulings', 'text_rulings']": {
        "old_table": "['rulings', 'rulings']",
        "old_column": "['id', 'text']"
      }
    },
    "new_gold_sql": "SELECT date FROM cards_rulings WHERE name = 'Reminisce' AND uuid = uuid"
  },
  {
    "train_idx": 486,
    "db_id": "card_games",
    "question": "What is the percentage of the cards with a converted mana cost of 7 in the set Coldsnap?",
    "query": "SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      }
    },
    "new_relevant_table": {
      "cards_sets": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isPartialPreview",
          "keyruneCode",
          "mcmId_sets",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name_sets",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type_sets"
        ],
        "ddl": "create table cards_sets( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId integer, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isPartialPreview integer, keyruneCode text, mcmIdExtras integer, mcmName text, mtgoCode text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer)"
      }
    },
    "old_new_table_mapping": {
      "cards": "cards_sets",
      "sets": "cards_sets"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(CASE WHEN convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards_sets WHERE name_sets = 'Coldsnap'"
  },
  {
    "train_idx": 487,
    "db_id": "card_games",
    "question": "What is the percentage of incredibly powerful cards in the set Coldsnap?",
    "query": "SELECT CAST(SUM(CASE WHEN T1.cardKingdomFoilId IS NOT NULL AND T1.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      }
    },
    "new_relevant_table": {
      "cards_sets": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly_cards",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId_cards",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name_cards",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type_cards",
          "types",
          "uuid",
          "variations",
          "watermark",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly_sets",
          "isPartialPreview",
          "keyruneCode",
          "mcmId_sets",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name_sets",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type_sets"
        ],
        "ddl": "create table cards_sets( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, types text, uuid text, variations text, watermark text, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isPartialPreview integer, keyruneCode text, mcmIdExtras integer, mcmName text, mtgoCode text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer)"
      }
    },
    "old_new_table_mapping": {
      "cards": "cards_sets",
      "sets": "cards_sets"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['isOnlineOnly_cards', 'mcmId_cards', 'name_cards', 'type_cards', 'isOnlineOnly_sets', 'mcmId_sets', 'name_sets', 'type_sets']": {
        "old_table": "['cards', 'cards', 'cards', 'cards', 'sets', 'sets', 'sets', 'sets']",
        "old_column": "['isOnlineOnly', 'mcmId', 'name', 'type']"
      }
    },
    "new_gold_sql": "SELECT CAST(SUM(CASE WHEN T1.cardKingdomFoilId IS NOT NULL AND T1.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards_sets AS T1 WHERE T1.name_sets = 'Coldsnap'"
  },
  {
    "train_idx": 494,
    "db_id": "card_games",
    "question": "For all cards illustrated by Jim Pavelec. and describe the text of the ruling of these cards. Do these cards have missing or degraded properties and values.",
    "query": "SELECT T2.text , CASE WHEN T1.hasContentWarning = 1 THEN 'YES' ELSE 'NO' END FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Jim Pavelec'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "rulings": {
        "ddl": "create table rulings( id integer primary key, date date, text text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "cards_rulings": {
        "columns": [
          "id",
          "date",
          "text_rulings",
          "uuid",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text_cards",
          "toughness",
          "type",
          "types",
          "variations",
          "watermark"
        ],
        "ddl": "create table cards_rulings( id integer primary key, date date, text_rulings text, uuid text, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text_cards text, toughness text, type text, types text, variations text, watermark text)"
      }
    },
    "old_new_table_mapping": {
      "rulings": "cards_rulings",
      "cards": "cards_rulings"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "text_rulings": {
        "old_table": "rulings",
        "old_column": "text"
      },
      "text_cards": {
        "old_table": "cards",
        "old_column": "text"
      }
    },
    "new_gold_sql": "SELECT T1.text_rulings , CASE WHEN T1.hasContentWarning = 1 THEN 'YES' ELSE 'NO' END FROM cards_rulings AS T1 WHERE T1.artist = 'Jim Pavelec'"
  },
  {
    "train_idx": 495,
    "db_id": "card_games",
    "question": "What was the release date for the set which card \"Evacuation\" in it?",
    "query": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      }
    },
    "new_relevant_table": {
      "cards_sets": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isPartialPreview",
          "keyruneCode",
          "mcmId_sets",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name_sets",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type_sets"
        ],
        "ddl": "create table cards_sets( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId integer, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isPartialPreview integer, keyruneCode text, mcmIdExtras integer, mcmName text, mtgoCode text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer)"
      }
    },
    "old_new_table_mapping": {
      "cards": "cards_sets",
      "sets": "cards_sets"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.releaseDate FROM cards_sets AS T1 WHERE T1.name = 'Evacuation'"
  },
  {
    "train_idx": 496,
    "db_id": "card_games",
    "question": "What is the number of cards are there in the set of \"Rinascita di Alara\"?",
    "query": "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Rinascita di Alara'",
    "relevant_table": {
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      },
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      }
    },
    "new_relevant_table": {
      "merged_sets_translations": {
        "columns": [
          "id",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly",
          "isPartialPreview",
          "keyruneCode",
          "mcmId",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type",
          "id_set_translations",
          "language",
          "setCode",
          "translation"
        ],
        "ddl": "create table merged_sets_translations( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text, language text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "set_translations": "merged_sets_translations",
      "sets": "merged_sets_translations"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.baseSetSize FROM merged_sets_translations AS T1 WHERE T1.translation = 'Rinascita di Alara'"
  },
  {
    "train_idx": 497,
    "db_id": "card_games",
    "question": "List the expansion type of the set \"Huiti\u00e8me \u00e9dition\".",
    "query": "SELECT type FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE translation = 'Huiti\u00e8me \u00e9dition' )",
    "relevant_table": {
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      },
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      }
    },
    "new_relevant_table": {
      "merged_sets_translations": {
        "columns": [
          "id",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly",
          "isPartialPreview",
          "keyruneCode",
          "mcmId",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type",
          "id_set_translations",
          "language",
          "setCode",
          "translation"
        ],
        "ddl": "create table merged_sets_translations( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text, language text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "sets": "merged_sets_translations",
      "set_translations": "merged_sets_translations"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT type FROM merged_sets_translations WHERE code IN ( SELECT setCode FROM merged_sets_translations WHERE translation = 'Huiti\u00e8me \u00e9dition' )"
  },
  {
    "train_idx": 498,
    "db_id": "card_games",
    "question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
    "query": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      }
    },
    "new_relevant_table": {
      "merged_cards_translations": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "language",
          "translation"
        ],
        "ddl": "create table merged_cards_translations( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, language text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "cards": "merged_cards_translations",
      "set_translations": "merged_cards_translations"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.translation FROM merged_cards_translations AS T1 WHERE T1.name = 'Tendo Ice Bridge' AND T1.language = 'French' AND T1.translation IS NOT NULL"
  },
  {
    "train_idx": 499,
    "db_id": "card_games",
    "question": "How many translations of the name of the set \"Tenth Edition\"?",
    "query": "SELECT COUNT(DISTINCT T2.translation) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.name = 'Tenth Edition' AND T2.translation IS NOT NULL",
    "relevant_table": {
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      },
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      }
    },
    "new_relevant_table": {
      "merged_sets_translations": {
        "columns": [
          "id",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly",
          "isPartialPreview",
          "keyruneCode",
          "mcmId",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type",
          "id_set_translations",
          "language",
          "setCode",
          "translation"
        ],
        "ddl": "create table merged_sets_translations( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text, language text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "set_translations": "merged_sets_translations",
      "sets": "merged_sets_translations"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(DISTINCT translation) FROM merged_sets_translations WHERE name = 'Tenth Edition' AND translation IS NOT NULL"
  },
  {
    "train_idx": 500,
    "db_id": "card_games",
    "question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.",
    "query": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      }
    },
    "new_relevant_table": {
      "cards_translations": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "language",
          "translation"
        ],
        "ddl": "create table cards_translations( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, language text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "cards": "cards_translations",
      "set_translations": "cards_translations"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.translation FROM cards_translations AS T1 WHERE T1.name = 'Fellwar Stone' AND T1.language = 'Japanese' AND T1.translation IS NOT NULL"
  },
  {
    "train_idx": 501,
    "db_id": "card_games",
    "question": "Which card name in the set 'Journey into Nyx Hero's Path' has the highest converted mana cost.",
    "query": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Journey into Nyx Hero''s Path' ORDER BY T1.convertedManaCost DESC LIMIT 1",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      }
    },
    "new_relevant_table": {
      "cards_sets": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId_cards",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name_cards",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type_cards",
          "types",
          "uuid",
          "variations",
          "watermark",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly_sets",
          "isPartialPreview",
          "keyruneCode",
          "mcmId_sets",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name_sets",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type_sets"
        ],
        "ddl": "create table cards_sets( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, types text, uuid text, variations text, watermark text, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isPartialPreview integer, keyruneCode text, mcmIdExtras integer, mcmName text, mtgoCode text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer)"
      }
    },
    "old_new_table_mapping": {
      "cards": "cards_sets",
      "sets": "cards_sets"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['mcmId_cards', 'name_cards', 'isOnlineOnly_cards', 'type_cards', 'mcmId_sets', 'name_sets', 'isOnlineOnly_sets', 'type_sets']": {
        "old_table": "['cards', 'cards', 'cards', 'cards', 'sets', 'sets', 'sets', 'sets']",
        "old_column": "['mcmId', 'name', 'isOnlineOnly', 'type']"
      }
    },
    "new_gold_sql": "SELECT name_cards FROM cards_sets WHERE name_sets = 'Journey into Nyx Hero''s Path' ORDER BY convertedManaCost DESC LIMIT 1"
  },
  {
    "train_idx": 502,
    "db_id": "card_games",
    "question": "What is the release date for the set \"Ola de fr\u00edo\"?",
    "query": "SELECT T1.releaseDate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Ola de fr\u00edo'",
    "relevant_table": {
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      },
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      }
    },
    "new_relevant_table": {
      "merged_sets_translations": {
        "columns": [
          "id",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly",
          "isPartialPreview",
          "keyruneCode",
          "mcmId",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type",
          "language",
          "setCode",
          "translation"
        ],
        "ddl": "create table merged_sets_translations( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text, language text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "set_translations": "merged_sets_translations",
      "sets": "merged_sets_translations"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT releaseDate FROM merged_sets_translations WHERE translation = 'Ola de fr\u00edo' AND setCode = code"
  },
  {
    "train_idx": 503,
    "db_id": "card_games",
    "question": "What was the expansion type for the set which card \"Samite Pilgrim\" in it?",
    "query": "SELECT type FROM sets WHERE code IN ( SELECT setCode FROM cards WHERE name = 'Samite Pilgrim' )",
    "relevant_table": {
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      },
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      }
    },
    "new_relevant_table": {
      "mergedSetsCards": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId_cards",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name_cards",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type_cards",
          "types",
          "uuid",
          "variations",
          "watermark",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly_sets",
          "isPartialPreview",
          "keyruneCode",
          "mcmId_sets",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name_sets",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type_sets"
        ],
        "ddl": "create table mergedSetsCards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, types text, uuid text, variations text, watermark text, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isPartialPreview integer, keyruneCode text, mcmIdExtras integer, mcmName text, mtgoCode text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer)"
      }
    },
    "old_new_table_mapping": {
      "cards": "mergedSetsCards",
      "sets": "mergedSetsCards"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "mcmId_cards, name_cards, type_cards, isOnlineOnly_sets": {
        "old_table": "cards, cards, cards, sets",
        "old_column": "mcmId, name, type, isOnlineOnly"
      }
    },
    "new_gold_sql": "SELECT type_sets FROM mergedSetsCards WHERE setCode IN ( SELECT setCode FROM mergedSetsCards WHERE name_cards = 'Samite Pilgrim' )"
  },
  {
    "train_idx": 504,
    "db_id": "card_games",
    "question": "How many cards are there in the set 'World Championship Decks 2004' with the converted mana cost as '3'.",
    "query": "SELECT COUNT(id) FROM cards WHERE setCode IN ( SELECT code FROM sets WHERE name = 'World Championship Decks 2004' ) AND convertedManaCost = 3",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      }
    },
    "new_relevant_table": {
      "cards_sets": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId_cards",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name_cards",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type_cards",
          "types",
          "uuid",
          "variations",
          "watermark",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly_sets",
          "isPartialPreview",
          "keyruneCode",
          "mcmId_sets",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name_sets",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type_sets"
        ],
        "ddl": "create table cards_sets( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, types text, uuid text, variations text, watermark text, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isPartialPreview integer, keyruneCode text, mcmIdExtras integer, mcmName text, mtgoCode text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer)"
      }
    },
    "old_new_table_mapping": {
      "cards": "cards_sets",
      "sets": "cards_sets"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['mcmId_cards', 'name_cards', 'isOnlineOnly_cards', 'type_cards', 'mcmId_sets', 'name_sets', 'isOnlineOnly_sets', 'type_sets']": {
        "old_table": "['cards', 'cards', 'cards', 'cards', 'sets', 'sets', 'sets', 'sets']",
        "old_column": "['mcmId', 'name', 'isOnlineOnly', 'type']"
      }
    },
    "new_gold_sql": "SELECT COUNT(id) FROM cards_sets WHERE setCode IN ( SELECT code FROM cards_sets WHERE name_sets = 'World Championship Decks 2004' ) AND convertedManaCost = 3"
  },
  {
    "train_idx": 505,
    "db_id": "card_games",
    "question": "Show the Simplified Chinese translation of the name of the set \"Mirrodin\"?",
    "query": "SELECT translation FROM set_translations WHERE setCode IN ( SELECT code FROM sets WHERE name = 'Mirrodin' ) AND language = 'Chinese Simplified'",
    "relevant_table": {
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      },
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      }
    },
    "new_relevant_table": {
      "merged_sets": {
        "columns": [
          "id",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly",
          "isPartialPreview",
          "keyruneCode",
          "mcmId",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type",
          "id_set_translations",
          "language",
          "setCode",
          "translation"
        ],
        "ddl": "create table merged_sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text, language text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "sets": "merged_sets",
      "set_translations": "merged_sets"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT translation FROM merged_sets WHERE name = 'Mirrodin' AND language = 'Chinese Simplified'"
  },
  {
    "train_idx": 506,
    "db_id": "card_games",
    "question": "For all the set of cards that has Japanese translation, what is the percentage of them are only available in non-foil?",
    "query": "SELECT CAST(SUM(CASE WHEN isNonFoilOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Japanese' )",
    "relevant_table": {
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      },
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      }
    },
    "new_relevant_table": {
      "merged_sets": {
        "columns": [
          "id",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly",
          "isPartialPreview",
          "keyruneCode",
          "mcmId",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type",
          "id_set_translations",
          "language",
          "setCode",
          "translation"
        ],
        "ddl": "create table merged_sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text, language text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "sets": "merged_sets",
      "set_translations": "merged_sets"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(CASE WHEN isNonFoilOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM merged_sets WHERE code IN ( SELECT setCode FROM merged_sets WHERE language = 'Japanese' )"
  },
  {
    "train_idx": 507,
    "db_id": "card_games",
    "question": "For all the set of cards that has Brazil Portuguese translation, what is the percentage of them are only available online?",
    "query": "SELECT CAST(SUM(CASE WHEN isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Portuguese (Brazil)' )",
    "relevant_table": {
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      },
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      }
    },
    "new_relevant_table": {
      "merged_sets_translations": {
        "columns": [
          "id",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly",
          "isPartialPreview",
          "keyruneCode",
          "mcmId",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type",
          "language",
          "setCode",
          "translation"
        ],
        "ddl": "create table merged_sets_translations( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text, language text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "set_translations": "merged_sets_translations",
      "sets": "merged_sets_translations"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(CASE WHEN isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM merged_sets_translations WHERE code IN ( SELECT setCode FROM merged_sets_translations WHERE language = 'Portuguese (Brazil)' )"
  },
  {
    "train_idx": 514,
    "db_id": "card_games",
    "question": "In duels, what are the top 10 cards with the highest uncoverted mana cost?",
    "query": "SELECT DISTINCT name FROM cards WHERE uuid IN ( SELECT uuid FROM legalities WHERE format = 'duel' ) ORDER BY manaCost DESC LIMIT 0, 10",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "legalities": {
        "ddl": "create table legalities( id integer primary key, format text, status text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "cards_legalities": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "format",
          "status",
          "foreign key(uuid) references cards(uuid)"
        ],
        "ddl": "create table cards_legalities( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, format text, status text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "old_new_table_mapping": {
      "legalities": "cards_legalities",
      "cards": "cards_legalities"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT name FROM cards_legalities WHERE format = 'duel' ORDER BY manaCost DESC LIMIT 0, 10"
  },
  {
    "train_idx": 515,
    "db_id": "card_games",
    "question": "When was the oldest mythic card released and what are its legal play formats?",
    "query": "SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal' ORDER BY T1.originalReleaseDate LIMIT 1",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "legalities": {
        "ddl": "create table legalities( id integer primary key, format text, status text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "cards_legalities": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "id_legalities",
          "format",
          "status",
          "foreign_key_uuid"
        ],
        "ddl": "create table cards_legalities( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, id_legalities integer, format text, status text)"
      }
    },
    "old_new_table_mapping": {
      "legalities": "cards_legalities",
      "cards": "cards_legalities"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "id_legalities": {
        "old_table": "legalities",
        "old_column": "id"
      }
    },
    "new_gold_sql": "SELECT originalReleaseDate, format FROM cards_legalities WHERE rarity = 'mythic' AND originalReleaseDate IS NOT NULL AND status = 'Legal' ORDER BY originalReleaseDate LIMIT 1"
  },
  {
    "train_idx": 516,
    "db_id": "card_games",
    "question": "How many cards did Volkan Ba\u00c7\u00b5a illustrated whose foreign language is in French?",
    "query": "SELECT COUNT(T3.id) FROM ( SELECT T1.id FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Volkan Ba\u01f5a' AND T2.language = 'French' GROUP BY T1.id ) AS T3",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "foreign_data": {
        "ddl": "create table foreign_data( id integer primary key, flavorText text, language text, multiverseid integer, name text, text text, type text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "merged_data": {
        "columns": [
          "id",
          "flavorText_foreign",
          "language",
          "multiverseid",
          "name_foreign",
          "text_foreign",
          "type_foreign",
          "uuid",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName_cards",
          "flavorText_cards",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name_cards",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text_cards",
          "toughness",
          "type_cards",
          "types",
          "variations",
          "watermark"
        ],
        "ddl": "create table merged_data( id integer primary key, language text, multiverseid integer, uuid text, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, toughness text, types text, variations text, watermark text)"
      }
    },
    "old_new_table_mapping": {
      "foreign_data": "merged_data",
      "cards": "merged_data"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['flavorText_foreign', 'name_foreign', 'text_foreign']": {
        "old_table": "['foreign_data', 'cards', 'cards']",
        "old_column": "['flavorText', 'name', 'text']"
      }
    },
    "new_gold_sql": "SELECT COUNT(id) FROM ( SELECT id FROM merged_data WHERE artist = 'Volkan Ba\u01f5a' AND language = 'French' GROUP BY id )"
  },
  {
    "train_idx": 517,
    "db_id": "card_games",
    "question": "How many rare enchantment Abundance cards are there whose play format status are all legal?",
    "query": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.rarity = 'rare' AND T1.types = 'Enchantment' AND T1.name = 'Abundance' AND T2.status = 'Legal'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "legalities": {
        "ddl": "create table legalities( id integer primary key, format text, status text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "cards_legalities": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "format",
          "status"
        ],
        "ddl": "create table cards_legalities( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, format text, status text)"
      }
    },
    "old_new_table_mapping": {
      "cards": "cards_legalities",
      "legalities": "cards_legalities"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(id) FROM cards_legalities WHERE rarity = 'rare' AND types = 'Enchantment' AND name = 'Abundance' AND status = 'Legal'"
  },
  {
    "train_idx": 518,
    "db_id": "card_games",
    "question": "Which of the play format has the highest number of banned status? Indicate the play format and the names of all the card meet the condition.",
    "query": "WITH MaxBanned AS (SELECT format, COUNT(*) AS count_banned FROM legalities WHERE status = 'Banned' GROUP BY format ORDER BY COUNT(*) DESC LIMIT 1) SELECT T2.format, T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid INNER JOIN MaxBanned MB ON MB.format = T2.format WHERE T2.status = 'Banned'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "legalities": {
        "ddl": "create table legalities( id integer primary key, format text, status text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "merged_cards_legalities": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "format",
          "status"
        ],
        "ddl": "create table merged_cards_legalities( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, format text, status text)"
      }
    },
    "old_new_table_mapping": {
      "cards": "merged_cards_legalities",
      "legalities": "merged_cards_legalities"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "WITH MaxBanned AS (SELECT format, COUNT(*) AS count_banned FROM merged_cards_legalities WHERE status = 'Banned' GROUP BY format ORDER BY COUNT(*) DESC LIMIT 1) SELECT format, name FROM merged_cards_legalities WHERE status = 'Banned' AND format IN (SELECT format FROM MaxBanned)"
  },
  {
    "train_idx": 519,
    "db_id": "card_games",
    "question": "What is the language of the \"Battlebond\" set?",
    "query": "SELECT language FROM set_translations WHERE id IN ( SELECT id FROM sets WHERE name = 'Battlebond' )",
    "relevant_table": {
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      },
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      }
    },
    "new_relevant_table": {
      "merged_sets": {
        "columns": [
          "id",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly",
          "isPartialPreview",
          "keyruneCode",
          "mcmId",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type",
          "language",
          "setCode",
          "translation"
        ],
        "ddl": "create table merged_sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text, language text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "sets": "merged_sets",
      "set_translations": "merged_sets"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT language FROM merged_sets WHERE id IN ( SELECT id FROM merged_sets WHERE name = 'Battlebond' )"
  },
  {
    "train_idx": 520,
    "db_id": "card_games",
    "question": "Who is the illustrator that illustrated the least amount of cards? List the format of play of the cards that he/she illustrated.",
    "query": "SELECT T1.artist, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid GROUP BY T1.artist ORDER BY COUNT(T1.id) ASC LIMIT 1",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "legalities": {
        "ddl": "create table legalities( id integer primary key, format text, status text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "cards_legalities": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "id_legalities",
          "format",
          "status",
          "foreign_key_uuid"
        ],
        "ddl": "create table cards_legalities( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, id_legalities integer, format text, status text)"
      }
    },
    "old_new_table_mapping": {
      "legalities": "cards_legalities",
      "cards": "cards_legalities"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "id_legalities": {
        "old_table": "legalities",
        "old_column": "id"
      }
    },
    "new_gold_sql": "SELECT artist, format FROM cards_legalities GROUP BY artist ORDER BY COUNT(id) ASC LIMIT 1"
  },
  {
    "train_idx": 521,
    "db_id": "card_games",
    "question": "Among the cards whose version of frame style is 1997, what is the status of the card illustrated by D. Alexander Gregory in legacy play format that has sensitive content or Wizards of the Coast?",
    "query": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.frameVersion = 1997 AND T1.hasContentWarning = 1 AND T1.artist = 'D. Alexander Gregory' AND T2.format = 'legacy'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "legalities": {
        "ddl": "create table legalities( id integer primary key, format text, status text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "merged_cards_legalities": {
        "columns": [
          "id",
          "format",
          "status",
          "uuid",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "variations",
          "watermark"
        ],
        "ddl": "create table merged_cards_legalities( id integer primary key, format text, status text, uuid text, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, variations text, watermark text)"
      }
    },
    "old_new_table_mapping": {
      "legalities": "merged_cards_legalities",
      "cards": "merged_cards_legalities"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT status FROM merged_cards_legalities WHERE frameVersion = 1997 AND hasContentWarning = 1 AND artist = 'D Alexander Gregory' AND format = 'legacy'"
  },
  {
    "train_idx": 522,
    "db_id": "card_games",
    "question": "Which cards are ranked 1st on EDHRec? List all of the cards name and its banned play format.",
    "query": "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned' GROUP BY T1.name, T2.format",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "legalities": {
        "ddl": "create table legalities( id integer primary key, format text, status text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "cards_legalities": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "format",
          "status"
        ],
        "ddl": "create table cards_legalities( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, format text, status text)"
      }
    },
    "old_new_table_mapping": {
      "cards": "cards_legalities",
      "legalities": "cards_legalities"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT name, format FROM cards_legalities WHERE edhrecRank = 1 AND status = 'Banned' GROUP BY name, format"
  },
  {
    "train_idx": 523,
    "db_id": "card_games",
    "question": "What is the annual average number of sets that were released between 1/1/2012 to 12/31/2015? Indicate the common langugage of the card.",
    "query": "SELECT (CAST(SUM(T1.id) AS REAL) / COUNT(T1.id)) / 4, T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.id = T2.id WHERE T1.releaseDate BETWEEN '2012-01-01' AND '2015-12-31' GROUP BY T1.releaseDate ORDER BY COUNT(T2.language) DESC LIMIT 1",
    "relevant_table": {
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      },
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      }
    },
    "new_relevant_table": {
      "merged_sets": {
        "columns": [
          "id",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly",
          "isPartialPreview",
          "keyruneCode",
          "mcmId",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type",
          "language",
          "setCode",
          "translation"
        ],
        "ddl": "create table merged_sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text, language text, translation text)"
      }
    },
    "old_new_table_mapping": {
      "sets": "merged_sets",
      "set_translations": "merged_sets"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT (CAST(SUM(merged_setsid) AS REAL) / COUNT(merged_setsid)) / 4, merged_setslanguage FROM merged_sets WHERE merged_setsreleaseDate BETWEEN '2012-01-01' AND '2015-12-31' GROUP BY merged_setsreleaseDate ORDER BY COUNT(merged_setslanguage) DESC LIMIT 1"
  },
  {
    "train_idx": 527,
    "db_id": "card_games",
    "question": "What are the rulings for the card named and designed by Kev Walker? List them in descending order of dates.",
    "query": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "rulings": {
        "ddl": "create table rulings( id integer primary key, date date, text text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "cards_rulings": {
        "columns": [
          "id",
          "date",
          "text_rulings",
          "uuid",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text_cards",
          "toughness",
          "type",
          "types",
          "variations",
          "watermark"
        ],
        "ddl": "create table cards_rulings( id integer primary key, date date, text_rulings text, uuid text, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text_cards text, toughness text, type text, types text, variations text, watermark text)"
      }
    },
    "old_new_table_mapping": {
      "rulings": "cards_rulings",
      "cards": "cards_rulings"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "text_rulings": {
        "old_table": "rulings",
        "old_column": "text"
      },
      "text_cards": {
        "old_table": "cards",
        "old_column": "text"
      }
    },
    "new_gold_sql": "SELECT text_rulings FROM cards_rulings WHERE artist = 'Kev Walker' ORDER BY date DESC"
  },
  {
    "train_idx": 528,
    "db_id": "card_games",
    "question": "List the names of all the cards in the set Hour of Devastation and find the formats in which these cards are legal.",
    "query": "SELECT DISTINCT T2.name , CASE WHEN T1.status = 'Legal' THEN T1.format ELSE NULL END FROM legalities AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid WHERE T2.setCode IN ( SELECT code FROM sets WHERE name = 'Hour of Devastation' )",
    "relevant_table": {
      "legalities": {
        "ddl": "create table legalities( id integer primary key, format text, status text, foreign key(uuid) references cards(uuid) text)"
      },
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "id",
          "format",
          "status",
          "uuid",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "variations",
          "watermark"
        ],
        "ddl": "create table merged_table( id integer primary key, format text, status text, uuid text, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, variations text, watermark text)"
      },
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      }
    },
    "old_new_table_mapping": {
      "legalities": "merged_table",
      "cards": "merged_table"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT T2.name , CASE WHEN T2.status = 'Legal' THEN T2.format ELSE NULL END FROM merged_table AS T2 WHERE T2.setCode IN ( SELECT code FROM sets WHERE name = 'Hour of Devastation' )"
  },
  {
    "train_idx": 529,
    "db_id": "card_games",
    "question": "Find and list the names of sets which doesn't have Japanese translation but have Korean translation.",
    "query": "SELECT name FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Korean' AND language NOT LIKE '%Japanese%' )",
    "relevant_table": {
      "sets": {
        "ddl": "create table sets( id integer primary key, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      },
      "set_translations": {
        "ddl": "create table set_translations( id integer primary key, language text, foreign key(setCode) references sets(code) text, translation text)"
      }
    },
    "new_relevant_table": {
      "merged_sets_translations": {
        "columns": [
          "id",
          "language",
          "setCode",
          "translation",
          "baseSetSize",
          "block",
          "booster",
          "code",
          "isFoilOnly",
          "isForeignOnly",
          "isNonFoilOnly",
          "isOnlineOnly",
          "isPartialPreview",
          "keyruneCode",
          "mcmId",
          "mcmIdExtras",
          "mcmName",
          "mtgoCode",
          "name",
          "parentCode",
          "releaseDate",
          "tcgplayerGroupId",
          "totalSetSize",
          "type"
        ],
        "ddl": "create table merged_sets_translations( id integer primary key, language text, translation text, baseSetSize integer, block text, booster text, code text, isFoilOnly integer, isForeignOnly integer, isNonFoilOnly integer, isOnlineOnly integer, isPartialPreview integer, keyruneCode text, mcmId integer, mcmIdExtras integer, mcmName text, mtgoCode text, name text, parentCode text, releaseDate date, tcgplayerGroupId integer, totalSetSize integer, type text)"
      }
    },
    "old_new_table_mapping": {
      "set_translations": "merged_sets_translations",
      "sets": "merged_sets_translations"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT name FROM merged_sets_translations WHERE code IN ( SELECT setCode FROM merged_sets_translations WHERE language = 'Korean' AND language NOT LIKE '%Japanese%' )"
  },
  {
    "train_idx": 530,
    "db_id": "card_games",
    "question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
    "query": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'",
    "relevant_table": {
      "cards": {
        "ddl": "create table cards( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text)"
      },
      "legalities": {
        "ddl": "create table legalities( id integer primary key, format text, status text, foreign key(uuid) references cards(uuid) text)"
      }
    },
    "new_relevant_table": {
      "cards_legalities": {
        "columns": [
          "id",
          "artist",
          "asciiName",
          "availability",
          "borderColor",
          "cardKingdomFoilId",
          "cardKingdomId",
          "colorIdentity",
          "colorIndicator",
          "colors",
          "convertedManaCost",
          "duelDeck",
          "edhrecRank",
          "faceConvertedManaCost",
          "faceName",
          "flavorName",
          "flavorText",
          "frameEffects",
          "frameVersion",
          "hand",
          "hasAlternativeDeckLimit",
          "hasContentWarning",
          "hasFoil",
          "hasNonFoil",
          "isAlternative",
          "isFullArt",
          "isOnlineOnly",
          "isOversized",
          "isPromo",
          "isReprint",
          "isReserved",
          "isStarter",
          "isStorySpotlight",
          "isTextless",
          "isTimeshifted",
          "keywords",
          "layout",
          "leadershipSkills",
          "life",
          "loyalty",
          "manaCost",
          "mcmId",
          "mcmMetaId",
          "mtgArenaId",
          "mtgjsonV4Id",
          "mtgoFoilId",
          "mtgoId",
          "multiverseId",
          "name",
          "number",
          "originalReleaseDate",
          "originalText",
          "originalType",
          "otherFaceIds",
          "power",
          "printings",
          "promoTypes",
          "purchaseUrls",
          "rarity",
          "scryfallId",
          "scryfallIllustrationId",
          "scryfallOracleId",
          "setCode",
          "side",
          "subtypes",
          "supertypes",
          "tcgplayerProductId",
          "text",
          "toughness",
          "type",
          "types",
          "uuid",
          "variations",
          "watermark",
          "id_legalities",
          "format",
          "status",
          "foreign_key_uuid"
        ],
        "ddl": "create table cards_legalities( id integer primary key, artist text, asciiName text, availability text, borderColor text, cardKingdomFoilId text, cardKingdomId text, colorIdentity text, colorIndicator text, colors text, convertedManaCost real, duelDeck text, edhrecRank integer, faceConvertedManaCost real, faceName text, flavorName text, flavorText text, frameEffects text, frameVersion text, hand text, hasAlternativeDeckLimit integer, hasContentWarning integer, hasFoil integer, hasNonFoil integer, isAlternative integer, isFullArt integer, isOnlineOnly integer, isOversized integer, isPromo integer, isReprint integer, isReserved integer, isStarter integer, isStorySpotlight integer, isTextless integer, isTimeshifted integer, keywords text, layout text, leadershipSkills text, life text, loyalty text, manaCost text, mcmId text, mcmMetaId text, mtgArenaId text, mtgjsonV4Id text, mtgoFoilId text, mtgoId text, multiverseId text, name text, number text, originalReleaseDate text, originalText text, originalType text, otherFaceIds text, power text, printings text, promoTypes text, purchaseUrls text, rarity text, scryfallId text, scryfallIllustrationId text, scryfallOracleId text, setCode text, side text, subtypes text, supertypes text, tcgplayerProductId text, text text, toughness text, type text, types text, uuid text, variations text, watermark text, format text, status text)"
      }
    },
    "old_new_table_mapping": {
      "legalities": "cards_legalities",
      "cards": "cards_legalities"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT frameVersion, name , IIF(status = 'Banned', name, 'NO') FROM cards_legalities WHERE artist = 'Allen Williams'"
  },
  {
    "train_idx": 537,
    "db_id": "codebase_community",
    "question": "How many posts does the user csgillespie own?",
    "query": "SELECT COUNT(T1.id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "relevant_table": {
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate_posts",
          "Score",
          "ViewCount_posts",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName"
        ],
        "ddl": "create table merged_table( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, PostTypeId integer, AcceptedAnswerId integer, Score integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "users": "merged_table",
      "posts": "merged_table"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['CreationDate_posts', 'ViewCount_posts']": {
        "old_table": "['posts', 'posts']",
        "old_column": "['CreationDate', 'ViewCount']"
      }
    },
    "new_gold_sql": "SELECT COUNT(Id) FROM merged_table WHERE DisplayName = 'csgillespie'"
  },
  {
    "train_idx": 538,
    "db_id": "codebase_community",
    "question": "Please list the titles of the posts owned by the user csgillespie?",
    "query": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "relevant_table": {
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "new_relevant_table": {
      "posts_users": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl"
        ],
        "ddl": "create table posts_users( Id integer, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "old_new_table_mapping": {
      "posts": "posts_users",
      "users": "posts_users"
    },
    "new_table_primary_key": "'Id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Title FROM posts_users WHERE DisplayName = 'csgillespie'"
  },
  {
    "train_idx": 539,
    "db_id": "codebase_community",
    "question": "Who is the owner of the post \"Eliciting priors from experts\"?",
    "query": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "relevant_table": {
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate_posts",
          "Score",
          "ViewCount_posts",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName"
        ],
        "ddl": "create table merged_table( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, PostTypeId integer, AcceptedAnswerId integer, Score integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "users": "merged_table",
      "posts": "merged_table"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['CreationDate_posts', 'ViewCount_posts']": {
        "old_table": "['posts', 'users']",
        "old_column": "['CreationDate', 'ViewCount']"
      }
    },
    "new_gold_sql": "SELECT DisplayName FROM merged_table WHERE Title = 'Eliciting priors from experts' AND OwnerUserId = Id"
  },
  {
    "train_idx": 540,
    "db_id": "codebase_community",
    "question": "What is the title of the post that is owned by csgillespie and has the highest popularity?",
    "query": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1",
    "relevant_table": {
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate_posts",
          "Score",
          "ViewCount_posts",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName"
        ],
        "ddl": "create table merged_table( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, PostTypeId integer, AcceptedAnswerId integer, Score integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "users": "merged_table",
      "posts": "merged_table"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['CreationDate_users', 'ViewCount_posts']": {
        "old_table": "['users', 'posts']",
        "old_column": "['CreationDate', 'ViewCount']"
      }
    },
    "new_gold_sql": "SELECT Title FROM merged_table WHERE DisplayName = 'csgillespie' ORDER BY ViewCount_posts DESC LIMIT 1"
  },
  {
    "train_idx": 541,
    "db_id": "codebase_community",
    "question": "What is the display name of the user who is the owner of the most valuable post?",
    "query": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id ORDER BY T1.FavoriteCount DESC LIMIT 1",
    "relevant_table": {
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "new_relevant_table": {
      "merged_posts_users": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "Reputation",
          "CreationDate_users",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views_users",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl"
        ],
        "ddl": "create table merged_posts_users( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, Reputation integer, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "old_new_table_mapping": {
      "posts": "merged_posts_users",
      "users": "merged_posts_users"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "CreationDate_users, Views_users": {
        "old_table": "users, users",
        "old_column": "CreationDate, Views"
      }
    },
    "new_gold_sql": "SELECT DisplayName FROM merged_posts_users ORDER BY FavoriteCount DESC LIMIT 1"
  },
  {
    "train_idx": 542,
    "db_id": "codebase_community",
    "question": "What is the total number of comments of all the posts owned by csgillespie?",
    "query": "SELECT SUM(T1.CommentCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "relevant_table": {
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "new_relevant_table": {
      "merged_posts_users": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl"
        ],
        "ddl": "create table merged_posts_users( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "old_new_table_mapping": {
      "posts": "merged_posts_users",
      "users": "merged_posts_users"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT SUM(CommentCount) FROM merged_posts_users WHERE DisplayName = 'csgillespie'"
  },
  {
    "train_idx": 543,
    "db_id": "codebase_community",
    "question": "For the post that got the most number of answers owned by csgillespie, how many answers did it get?",
    "query": "SELECT MAX(T1.AnswerCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "relevant_table": {
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "Reputation",
          "CreationDate_users",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views_users",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl"
        ],
        "ddl": "create table merged_table( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, Reputation integer, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "old_new_table_mapping": {
      "posts": "merged_table",
      "users": "merged_table"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "CreationDate_users, Views_users": {
        "old_table": "users, users",
        "old_column": "CreationDate, Views"
      }
    },
    "new_gold_sql": "SELECT MAX(AnswerCount) FROM merged_table WHERE DisplayName = 'csgillespie'"
  },
  {
    "train_idx": 544,
    "db_id": "codebase_community",
    "question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
    "query": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'",
    "relevant_table": {
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "Reputation",
          "CreationDate_users",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl"
        ],
        "ddl": "create table merged_table( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, Reputation integer, CreationDate_users datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "old_new_table_mapping": {
      "posts": "merged_table",
      "users": "merged_table"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "CreationDate_users": {
        "old_table": "users",
        "old_column": "CreationDate"
      }
    },
    "new_gold_sql": "SELECT DisplayName FROM merged_table WHERE Title = 'Examples for teaching: Correlation does not mean causation' AND LastEditorUserId = Id"
  },
  {
    "train_idx": 545,
    "db_id": "codebase_community",
    "question": "Among the posts owned by csgillespie, how many of them are root posts?",
    "query": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND T1.ParentId IS NULL",
    "relevant_table": {
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "Reputation",
          "CreationDate_users",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views_users",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl"
        ],
        "ddl": "create table merged_table( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, Reputation integer, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "old_new_table_mapping": {
      "posts": "merged_table",
      "users": "merged_table"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "CreationDate_users, Views_users": {
        "old_table": "users, users",
        "old_column": "CreationDate, Views"
      }
    },
    "new_gold_sql": "SELECT COUNT(Id) FROM merged_table WHERE DisplayName = 'csgillespie' AND ParentId IS NULL"
  },
  {
    "train_idx": 546,
    "db_id": "codebase_community",
    "question": "Please list the display names of all the users who owns a post that is well-finished.",
    "query": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.ClosedDate IS NOT NULL",
    "relevant_table": {
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate_posts",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName"
        ],
        "ddl": "create table merged_table( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, PostTypeId integer, AcceptedAnswerId integer, CreaionDate_posts datetime, Score integer, ViewCount integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "users": "merged_table",
      "posts": "merged_table"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "CreaionDate_posts": {
        "old_table": "posts",
        "old_column": "CreaionDate"
      }
    },
    "new_gold_sql": "SELECT DisplayName FROM merged_table WHERE ClosedDate IS NOT NULL"
  },
  {
    "train_idx": 547,
    "db_id": "codebase_community",
    "question": "Among the posts owned by an elder user, how many of them have a score of over 19?",
    "query": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score >= 20 AND T2.Age > 65",
    "relevant_table": {
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "new_relevant_table": {
      "posts_users": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl"
        ],
        "ddl": "create table posts_users( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "old_new_table_mapping": {
      "posts": "posts_users",
      "users": "posts_users"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(Id) FROM posts_users WHERE Score >= 20 AND Age > 65"
  },
  {
    "train_idx": 548,
    "db_id": "codebase_community",
    "question": "What is the location of the owner of the post \"Eliciting priors from experts\"?",
    "query": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "relevant_table": {
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate_posts",
          "Score",
          "ViewCount_posts",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName"
        ],
        "ddl": "create table merged_table( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, PostTypeId integer, AcceptedAnswerId integer, Score integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "users": "merged_table",
      "posts": "merged_table"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Location FROM merged_table WHERE Title = 'Eliciting priors from experts'"
  },
  {
    "train_idx": 549,
    "db_id": "codebase_community",
    "question": "From which post is the tag \"bayesian\" excerpted from? Please give the body of the post.",
    "query": "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'bayesian'",
    "relevant_table": {
      "tags": {
        "ddl": "create table tags( Id integer primary key, TagName text, Count integer, foreign key(ExcerptPostId) references posts(Id) integer, WikiPostId integer)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "Id",
          "TagName",
          "Count",
          "ExcerptPostId",
          "WikiPostId",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName"
        ],
        "ddl": "create table merged_table( Id integer primary key, TagName text, Count integer, WikiPostId integer, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "tags": "merged_table",
      "posts": "merged_table"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT merged_tableBody FROM merged_table WHERE merged_tableTagName = 'bayesian' AND merged_tableExcerptPostId = merged_tableId"
  },
  {
    "train_idx": 550,
    "db_id": "codebase_community",
    "question": "From which post is the most popular tag excerpted from? Please give the body of the post.",
    "query": "SELECT Body FROM posts WHERE id = ( SELECT ExcerptPostId FROM tags ORDER BY Count DESC LIMIT 1 )",
    "relevant_table": {
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "tags": {
        "ddl": "create table tags( Id integer primary key, TagName text, Count integer, foreign key(ExcerptPostId) references posts(Id) integer, WikiPostId integer)"
      }
    },
    "new_relevant_table": {
      "posts_tags": {
        "columns": [
          "Id",
          "TagName",
          "Count",
          "ExcerptPostId",
          "WikiPostId",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName"
        ],
        "ddl": "create table posts_tags( Id integer primary key, TagName text, Count integer, WikiPostId integer, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "tags": "posts_tags",
      "posts": "posts_tags"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Body FROM posts_tags WHERE id = ( SELECT ExcerptPostId FROM posts_tags ORDER BY Count DESC LIMIT 1 )"
  },
  {
    "train_idx": 551,
    "db_id": "codebase_community",
    "question": "How many badges has the user csgillespie obtained?",
    "query": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "relevant_table": {
      "badges": {
        "ddl": "create table badges( Id integer primary key, foreign key(UserId) references users(Id) integer, Name text, Date datetime)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "new_relevant_table": {
      "users_badges": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "BadgeId",
          "UserId",
          "Name",
          "Date"
        ],
        "ddl": "create table users_badges( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, BadgeId integer, Name text, Date datetime)"
      }
    },
    "old_new_table_mapping": {
      "users": "users_badges",
      "badges": "users_badges"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "BadgeId": {
        "old_table": "badges",
        "old_column": "Id"
      }
    },
    "new_gold_sql": "SELECT COUNT(Id) FROM users_badges WHERE DisplayName = 'csgillespie'"
  },
  {
    "train_idx": 552,
    "db_id": "codebase_community",
    "question": "Please list the names of the badges obtained by csgillespie.",
    "query": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "relevant_table": {
      "badges": {
        "ddl": "create table badges( Id integer primary key, foreign key(UserId) references users(Id) integer, Name text, Date datetime)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "new_relevant_table": {
      "badges_users": {
        "columns": [
          "Id",
          "UserId",
          "Name",
          "Date",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl"
        ],
        "ddl": "create table badges_users( Id integer primary key, Name text, Date datetime, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "old_new_table_mapping": {
      "badges": "badges_users",
      "users": "badges_users"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT `Name` FROM badges_users WHERE DisplayName = 'csgillespie'"
  },
  {
    "train_idx": 554,
    "db_id": "codebase_community",
    "question": "What is the display name of the user who has obtained the most number of badges?",
    "query": "SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T2.DisplayName ORDER BY COUNT(T1.Id) DESC LIMIT 1",
    "relevant_table": {
      "badges": {
        "ddl": "create table badges( Id integer primary key, foreign key(UserId) references users(Id) integer, Name text, Date datetime)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "new_relevant_table": {
      "users_badges": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "UserId",
          "Name",
          "Date"
        ],
        "ddl": "create table users_badges( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, Name text, Date datetime)"
      }
    },
    "old_new_table_mapping": {
      "users": "users_badges",
      "badges": "users_badges"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DisplayName FROM users_badges GROUP BY DisplayName ORDER BY COUNT(Id) DESC LIMIT 1"
  },
  {
    "train_idx": 555,
    "db_id": "codebase_community",
    "question": "What is the average score of the posts owned by the user csgillespie?",
    "query": "SELECT AVG(T1.Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "relevant_table": {
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "Reputation",
          "CreationDate_users",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl"
        ],
        "ddl": "create table merged_table( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, Reputation integer, CreationDate_users datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "old_new_table_mapping": {
      "posts": "merged_table",
      "users": "merged_table"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "CreationDate_users": {
        "old_table": "users",
        "old_column": "CreationDate"
      }
    },
    "new_gold_sql": "SELECT AVG(Score) FROM merged_table WHERE DisplayName = 'csgillespie'"
  },
  {
    "train_idx": 556,
    "db_id": "codebase_community",
    "question": "What is the average number of badges obtained by a user with over 200 views?",
    "query": "SELECT CAST(COUNT(T1.Id) AS REAL) / COUNT(DISTINCT T2.DisplayName) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Views > 200",
    "relevant_table": {
      "badges": {
        "ddl": "create table badges( Id integer primary key, foreign key(UserId) references users(Id) integer, Name text, Date datetime)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "new_relevant_table": {
      "badges_users": {
        "columns": [
          "Id",
          "UserId",
          "Name",
          "Date",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl"
        ],
        "ddl": "create table badges_users( Id integer primary key, Name text, Date datetime, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "old_new_table_mapping": {
      "badges": "badges_users",
      "users": "badges_users"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(COUNT(Id) AS REAL) / COUNT(DISTINCT DisplayName) FROM badges_users WHERE Views > 200"
  },
  {
    "train_idx": 557,
    "db_id": "codebase_community",
    "question": "Among the posts with a score of over 5, what is the percentage of them being owned by an elder user?",
    "query": "SELECT CAST(SUM(IIF(T2.Age > 65, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score > 5",
    "relevant_table": {
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate_posts",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName"
        ],
        "ddl": "create table merged_table( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, PostTypeId integer, AcceptedAnswerId integer, CreaionDate_posts datetime, Score integer, ViewCount integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "users": "merged_table",
      "posts": "merged_table"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "CreaionDate_posts": {
        "old_table": "posts",
        "old_column": "CreaionDate"
      }
    },
    "new_gold_sql": "SELECT CAST(SUM(IIF(merged_tableAge > 65, 1, 0)) AS REAL) * 100 / COUNT(merged_tableId) FROM merged_table WHERE merged_tableScore > 5"
  },
  {
    "train_idx": 561,
    "db_id": "codebase_community",
    "question": "What is the title for the post which got the highest score comment?",
    "query": "SELECT Title FROM posts WHERE Id = ( SELECT PostId FROM comments ORDER BY Score DESC LIMIT 1 )",
    "relevant_table": {
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "comments": {
        "ddl": "create table comments( Id integer primary key, foreign key(PostId) references posts(Id) integer, Score integer, Text text, CreationDate datetime, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      }
    },
    "new_relevant_table": {
      "posts_comments": {
        "columns": [
          "Id",
          "PostId",
          "Score_comments",
          "Text",
          "CreationDate_comments",
          "UserId",
          "UserDisplayName",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate_posts",
          "Score_posts",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName"
        ],
        "ddl": "create table posts_comments( Id integer primary key, Text text, foreign key(UserId) references users(Id) integer, UserDisplayName text, PostTypeId integer, AcceptedAnswerId integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "comments": "posts_comments",
      "posts": "posts_comments"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['Score_comments', 'CreationDate_comments']": {
        "old_table": "['comments', 'posts']",
        "old_column": "['Score', 'CreationDate']"
      }
    },
    "new_gold_sql": "SELECT Title FROM posts_comments WHERE Id = ( SELECT PostId FROM posts_comments ORDER BY Score_comments DESC LIMIT 1 )"
  },
  {
    "train_idx": 562,
    "db_id": "codebase_community",
    "question": "For the post which got 1910 view counts, how many comments does it get?",
    "query": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ViewCount = 1910",
    "relevant_table": {
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "comments": {
        "ddl": "create table comments( Id integer primary key, foreign key(PostId) references posts(Id) integer, Score integer, Text text, CreationDate datetime, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      }
    },
    "new_relevant_table": {
      "posts_comments": {
        "columns": [
          "Id",
          "PostId",
          "Score_comments",
          "Text",
          "CreationDate_comments",
          "UserId",
          "UserDisplayName",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate_posts",
          "Score_posts",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName"
        ],
        "ddl": "create table posts_comments( Id integer primary key, Text text, foreign key(UserId) references users(Id) integer, UserDisplayName text, PostTypeId integer, AcceptedAnswerId integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "comments": "posts_comments",
      "posts": "posts_comments"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['Score_comments', 'CreationDate_comments']": {
        "old_table": "['comments', 'posts']",
        "old_column": "['Score', 'CreationDate']"
      }
    },
    "new_gold_sql": "SELECT COUNT(Id) FROM posts_comments WHERE ViewCount = 1910"
  },
  {
    "train_idx": 563,
    "db_id": "codebase_community",
    "question": "User No.3025 gave a comment at 20:29:39 on 2014/4/23 to a post, how many favorite counts did that post get?",
    "query": "SELECT T1.FavoriteCount FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.CreationDate = '2014-04-23 20:29:39.0' AND T2.UserId = 3025",
    "relevant_table": {
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "comments": {
        "ddl": "create table comments( Id integer primary key, foreign key(PostId) references posts(Id) integer, Score integer, Text text, CreationDate datetime, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      }
    },
    "new_relevant_table": {
      "posts_comments": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score_posts",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "Id_comments",
          "PostId",
          "Score_comments",
          "Text",
          "CreationDate_comments",
          "UserId",
          "UserDisplayName"
        ],
        "ddl": "create table posts_comments( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, Text text, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "posts": "posts_comments",
      "comments": "posts_comments"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['Id_comments', 'Score_comments', 'CreationDate_comments']": {
        "old_table": "['comments', 'comments', 'comments']",
        "old_column": "['Id', 'Score', 'CreationDate']"
      }
    },
    "new_gold_sql": "SELECT FavoriteCount FROM posts_comments WHERE CreationDate_comments = '2014-04-23 20:29:39.0' AND UserId = 3025"
  },
  {
    "train_idx": 564,
    "db_id": "codebase_community",
    "question": "Give the only one comment text of the post with parent id 107829.",
    "query": "SELECT T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ParentId = 107829 AND T1.CommentCount = 1",
    "relevant_table": {
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "comments": {
        "ddl": "create table comments( Id integer primary key, foreign key(PostId) references posts(Id) integer, Score integer, Text text, CreationDate datetime, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      }
    },
    "new_relevant_table": {
      "posts_comments": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score_posts",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "PostId",
          "Score_comments",
          "Text",
          "CreationDate_comments",
          "UserId",
          "UserDisplayName"
        ],
        "ddl": "create table posts_comments( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, Text text, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "posts": "posts_comments",
      "comments": "posts_comments"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['Score_posts', 'CreationDate_comments']": {
        "old_table": "['posts', 'comments']",
        "old_column": "['Score', 'CreationDate']"
      }
    },
    "new_gold_sql": "SELECT Text FROM posts_comments WHERE ParentId = 107829 AND CommentCount = 1"
  },
  {
    "train_idx": 565,
    "db_id": "codebase_community",
    "question": "User No.23853 gave a comment to a post at 9:08:18 on 2013/7/12, was that post well-finished?",
    "query": "SELECT IIF(T2.ClosedDate IS NULL, 'NOT well-finished', 'well-finished') AS resylt FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 23853 AND T1.CreationDate = '2013-07-12 09:08:18.0'",
    "relevant_table": {
      "comments": {
        "ddl": "create table comments( Id integer primary key, foreign key(PostId) references posts(Id) integer, Score integer, Text text, CreationDate datetime, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score_posts",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "Id_comments",
          "PostId",
          "Score_comments",
          "Text",
          "CreationDate_comments",
          "UserId",
          "UserDisplayName"
        ],
        "ddl": "create table merged_table( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, Text text, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "posts": "merged_table",
      "comments": "merged_table"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "Score_posts, Id_comments, CreationDate_comments": {
        "old_table": "posts, comments, comments",
        "old_column": "Score, Id, CreationDate"
      }
    },
    "new_gold_sql": "SELECT IIF(merged_table.ClosedDate IS NULL, 'NOT well-finished', 'well-finished') AS resylt FROM merged_table WHERE merged_table.UserId = 23853 AND merged_table.CreationDate_comments = '2013-07-12 09:08:180'"
  },
  {
    "train_idx": 566,
    "db_id": "codebase_community",
    "question": "For the owner user of post No. 65041, what is his/her reputation points?",
    "query": "SELECT T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Id = 65041",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "users_posts": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl"
        ],
        "ddl": "create table users_posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "old_new_table_mapping": {
      "posts": "users_posts",
      "users": "users_posts"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Reputation FROM users_posts WHERE Id = 65041"
  },
  {
    "train_idx": 567,
    "db_id": "codebase_community",
    "question": "For the user with the display name of \"Tiago Pasqualini\", how many posts did he/she own?",
    "query": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Tiago Pasqualini'",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "users_posts": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl"
        ],
        "ddl": "create table users_posts( Id integer, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "old_new_table_mapping": {
      "posts": "users_posts",
      "users": "users_posts"
    },
    "new_table_primary_key": "'Id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(Id) FROM users_posts WHERE DisplayName = 'Tiago Pasqualini'"
  },
  {
    "train_idx": 568,
    "db_id": "codebase_community",
    "question": "Provide the display name of the user who made the vote No.6347.",
    "query": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T2.Id = 6347",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "votes": {
        "ddl": "create table votes( Id integer primary key, foreign key(PostId) references posts(Id) integer, VoteTypeId integer, CreationDate date, foreign key(UserId) references users(Id) integer, BountyAmount integer)"
      }
    },
    "new_relevant_table": {
      "users_votes": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "PostId",
          "VoteTypeId",
          "VoteCreationDate",
          "BountyAmount"
        ],
        "ddl": "create table users_votes( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, foreign key(PostId) references posts(Id) integer, VoteTypeId integer, BountyAmount integer)"
      }
    },
    "old_new_table_mapping": {
      "votes": "users_votes",
      "users": "users_votes"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DisplayName FROM users_votes WHERE Id = 6347"
  },
  {
    "train_idx": 569,
    "db_id": "codebase_community",
    "question": "Give the number of votes for the post about data visualization.",
    "query": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data visualization%'",
    "relevant_table": {
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "votes": {
        "ddl": "create table votes( Id integer primary key, foreign key(PostId) references posts(Id) integer, VoteTypeId integer, CreationDate date, foreign key(UserId) references users(Id) integer, BountyAmount integer)"
      }
    },
    "new_relevant_table": {
      "posts_votes": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "PostId",
          "VoteTypeId",
          "CreationDate",
          "UserId",
          "BountyAmount"
        ],
        "ddl": "create table posts_votes( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, VoteTypeId integer, CreationDate date, foreign key(UserId) references users(Id) integer, BountyAmount integer)"
      }
    },
    "old_new_table_mapping": {
      "posts": "posts_votes",
      "votes": "posts_votes"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(Id) FROM posts_votes WHERE Title LIKE '%data visualization%'"
  },
  {
    "train_idx": 570,
    "db_id": "codebase_community",
    "question": "For the user whose display name is \"DatEpicCoderGuyWhoPrograms\", what is his/her badge's name?",
    "query": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "badges": {
        "ddl": "create table badges( Id integer primary key, foreign key(UserId) references users(Id) integer, Name text, Date datetime)"
      }
    },
    "new_relevant_table": {
      "users_badges": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "BadgeId",
          "UserId",
          "BadgeName",
          "BadgeDate"
        ],
        "ddl": "create table users_badges( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, BadgeId integer)"
      }
    },
    "old_new_table_mapping": {
      "badges": "users_badges",
      "users": "users_badges"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "BadgeId": {
        "old_table": "badges",
        "old_column": "Id"
      }
    },
    "new_gold_sql": "SELECT BadgeName FROM users_badges WHERE DisplayName = 'DatEpicCoderGuyWhoPrograms'"
  },
  {
    "train_idx": 571,
    "db_id": "codebase_community",
    "question": "For the user No.24, how many times is the number of his/her posts compared to his/her votes?",
    "query": "SELECT CAST(COUNT(T2.Id) AS REAL) / COUNT(DISTINCT T1.Id) FROM votes AS T1 INNER JOIN posts AS T2 ON T1.UserId = T2.OwnerUserId WHERE T1.UserId = 24",
    "relevant_table": {
      "votes": {
        "ddl": "create table votes( Id integer primary key, foreign key(PostId) references posts(Id) integer, VoteTypeId integer, CreationDate date, foreign key(UserId) references users(Id) integer, BountyAmount integer)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "Id",
          "PostId_votes",
          "VoteTypeId",
          "CreationDate_votes",
          "UserId_votes",
          "BountyAmount",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate_posts",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId_posts",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId_posts",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId_posts",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName"
        ],
        "ddl": "create table merged_table( Id integer primary key, VoteTypeId integer, BountyAmount integer, PostTypeId integer, AcceptedAnswerId integer, Score integer, ViewCount integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "votes": "merged_table",
      "posts": "merged_table"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['PostId_votes', 'CreationDate_votes', 'UserId_votes', 'OwnerUserId_posts', 'LastEditorUserId_posts', 'ParentId_posts']": {
        "old_table": "['votes', 'votes', 'votes', 'posts', 'posts', 'posts']",
        "old_column": "['PostId', 'CreationDate', 'UserId', 'OwnerUserId', 'LastEditorUserId', 'ParentId']"
      }
    },
    "new_gold_sql": "SELECT CAST(COUNT(Id) AS REAL) / COUNT(DISTINCT Id) FROM merged_table WHERE UserId_votes = 24"
  },
  {
    "train_idx": 575,
    "db_id": "codebase_community",
    "question": "What is the badge name that user 'SilentGhost' obtained?",
    "query": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost'",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "badges": {
        "ddl": "create table badges( Id integer primary key, foreign key(UserId) references users(Id) integer, Name text, Date datetime)"
      }
    },
    "new_relevant_table": {
      "users_badges": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "UserId",
          "Name",
          "Date"
        ],
        "ddl": "create table users_badges( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, Name text, Date datetime)"
      }
    },
    "old_new_table_mapping": {
      "users": "users_badges",
      "badges": "users_badges"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Name FROM users_badges WHERE DisplayName = 'SilentGhost'"
  },
  {
    "train_idx": 576,
    "db_id": "codebase_community",
    "question": "Name the user that commented 'thank you user93!'",
    "query": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Text = 'thank you user93!'",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "comments": {
        "ddl": "create table comments( Id integer primary key, foreign key(PostId) references posts(Id) integer, Score integer, Text text, CreationDate datetime, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      }
    },
    "new_relevant_table": {
      "users_comments": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "PostId",
          "Score",
          "Text",
          "CommentCreationDate",
          "UserId",
          "UserDisplayName"
        ],
        "ddl": "create table users_comments( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, foreign key(PostId) references posts(Id) integer, Score integer, Text text, UserDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "comments": "users_comments",
      "users": "users_comments"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DisplayName FROM users_comments WHERE Text = 'thank you user93!' AND UserId = Id"
  },
  {
    "train_idx": 577,
    "db_id": "codebase_community",
    "question": "Write all comments made by user 'A Lion.'",
    "query": "SELECT T2.Text FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'A Lion'",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "comments": {
        "ddl": "create table comments( Id integer primary key, foreign key(PostId) references posts(Id) integer, Score integer, Text text, CreationDate datetime, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      }
    },
    "new_relevant_table": {
      "users_comments": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "PostId",
          "Score",
          "Text",
          "CommentCreationDate",
          "UserId",
          "UserDisplayName"
        ],
        "ddl": "create table users_comments( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, foreign key(PostId) references posts(Id) integer, Score integer, Text text, CommentCreationDate datetime, UserDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "comments": "users_comments",
      "users": "users_comments"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "CommentCreationDate": {
        "old_table": "comments",
        "old_column": "CreationDate"
      }
    },
    "new_gold_sql": "SELECT Text FROM users_comments WHERE DisplayName = 'A Lion'"
  },
  {
    "train_idx": 578,
    "db_id": "codebase_community",
    "question": "Which user made a post titled 'Understanding what Dassault iSight is doing?' and how much is the reputation of the user?",
    "query": "SELECT T1.DisplayName, T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Title = 'Understanding what Dassault iSight is doing?'",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "users_posts": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl"
        ],
        "ddl": "create table users_posts( Id integer, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "old_new_table_mapping": {
      "posts": "users_posts",
      "users": "users_posts"
    },
    "new_table_primary_key": "'Id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DisplayName, Reputation FROM users_posts WHERE Title = 'Understanding what Dassault iSight is doing?'"
  },
  {
    "train_idx": 579,
    "db_id": "codebase_community",
    "question": "Write all comments made on the post titled 'How does gentle boosting differ from AdaBoost?'",
    "query": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'How does gentle boosting differ from AdaBoost?'",
    "relevant_table": {
      "comments": {
        "ddl": "create table comments( Id integer primary key, foreign key(PostId) references posts(Id) integer, Score integer, Text text, CreationDate datetime, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score_posts",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "Id_comments",
          "PostId",
          "Score_comments",
          "Text",
          "CreationDate_comments",
          "UserId",
          "UserDisplayName"
        ],
        "ddl": "create table merged_table( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, Text text, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "posts": "merged_table",
      "comments": "merged_table"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['Score_posts', 'Id_comments', 'CreationDate_comments']": {
        "old_table": "['posts', 'comments', 'comments']",
        "old_column": "['Score', 'Id', 'CreationDate']"
      }
    },
    "new_gold_sql": "SELECT Text FROM merged_table WHERE Title = 'How does gentle boosting differ from AdaBoost?'"
  },
  {
    "train_idx": 580,
    "db_id": "codebase_community",
    "question": "Name 10 users with the badge name 'Necromancer.'",
    "query": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "badges": {
        "ddl": "create table badges( Id integer primary key, foreign key(UserId) references users(Id) integer, Name text, Date datetime)"
      }
    },
    "new_relevant_table": {
      "users_badges": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "UserId",
          "Name",
          "Date"
        ],
        "ddl": "create table users_badges( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, Name text, Date datetime)"
      }
    },
    "old_new_table_mapping": {
      "badges": "users_badges",
      "users": "users_badges"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DisplayName FROM users_badges WHERE Name = 'Necromancer' LIMIT 10"
  },
  {
    "train_idx": 581,
    "db_id": "codebase_community",
    "question": "Who is the editor of the post titled 'Open source tools for visualizing multi-dimensional data?'",
    "query": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Open source tools for visualizing multi-dimensional data?'",
    "relevant_table": {
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "new_relevant_table": {
      "posts_users": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl"
        ],
        "ddl": "create table posts_users( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "old_new_table_mapping": {
      "posts": "posts_users",
      "users": "posts_users"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DisplayName FROM posts_users WHERE Title = 'Open source tools for visualizing multi-dimensional data?' AND OwnerUserId = Id"
  },
  {
    "train_idx": 582,
    "db_id": "codebase_community",
    "question": "List the title of posts which were edited by Vebjorn Ljosa.",
    "query": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa'",
    "relevant_table": {
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "new_relevant_table": {
      "posts_users": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl"
        ],
        "ddl": "create table posts_users( Id integer, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "old_new_table_mapping": {
      "posts": "posts_users",
      "users": "posts_users"
    },
    "new_table_primary_key": "'Id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Title FROM posts_users WHERE DisplayName = 'Vebjorn Ljosa'"
  },
  {
    "train_idx": 583,
    "db_id": "codebase_community",
    "question": "What is the total score of the posts edited by Yevgeny and include the user's website URL.",
    "query": "SELECT SUM(T1.Score), T2.WebsiteUrl FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Yevgeny' GROUP BY T2.WebsiteUrl",
    "relevant_table": {
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "Reputation",
          "CreationDate_users",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl"
        ],
        "ddl": "create table merged_table( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, Reputation integer, CreationDate_users datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "old_new_table_mapping": {
      "posts": "merged_table",
      "users": "merged_table"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "CreationDate_users": {
        "old_table": "users",
        "old_column": "CreationDate"
      }
    },
    "new_gold_sql": "SELECT SUM(Score), WebsiteUrl FROM merged_table WHERE DisplayName = 'Yevgeny' GROUP BY WebsiteUrl"
  },
  {
    "train_idx": 584,
    "db_id": "codebase_community",
    "question": "Write all the comments left by users who edited the post titled 'Why square the difference instead of taking the absolute value in standard deviation?'",
    "query": "SELECT T2.Comment FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'",
    "relevant_table": {
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "posthistory": {
        "ddl": "create table posthistory( Id integer primary key, PostHistoryTypeId integer, foreign key(PostId) references posts(Id) integer, RevisionGUID text, CreationDate datetime, foreign key(UserId) references users(Id) integer, Text text, Comment text, UserDisplayName text)"
      }
    },
    "new_relevant_table": {
      "mergedPostsHistory": {
        "columns": [
          "Id",
          "PostHistoryTypeId",
          "PostId",
          "RevisionGUID",
          "CreationDate",
          "UserId",
          "Text",
          "Comment",
          "UserDisplayName",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName"
        ],
        "ddl": "create table mergedPostsHistory( Id integer primary key, PostHistoryTypeId integer, RevisionGUID text, CreationDate datetime, foreign key(UserId) references users(Id) integer, Text text, Comment text, UserDisplayName text, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "posthistory": "mergedPostsHistory",
      "posts": "mergedPostsHistory"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Comment FROM mergedPostsHistory WHERE Title = 'Why square the difference instead of taking the absolute value in standard deviation?'"
  },
  {
    "train_idx": 585,
    "db_id": "codebase_community",
    "question": "How much is the total bounty amount of the post titled about 'data'",
    "query": "SELECT SUM(T2.BountyAmount) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data%'",
    "relevant_table": {
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "votes": {
        "ddl": "create table votes( Id integer primary key, foreign key(PostId) references posts(Id) integer, VoteTypeId integer, CreationDate date, foreign key(UserId) references users(Id) integer, BountyAmount integer)"
      }
    },
    "new_relevant_table": {
      "posts_votes": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "PostId",
          "VoteTypeId",
          "VoteCreationDate",
          "UserId",
          "BountyAmount"
        ],
        "ddl": "create table posts_votes( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, VoteTypeId integer, foreign key(UserId) references users(Id) integer, BountyAmount integer)"
      }
    },
    "old_new_table_mapping": {
      "votes": "posts_votes",
      "posts": "posts_votes"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT SUM(BountyAmount) FROM posts_votes WHERE Title LIKE '%data%'"
  },
  {
    "train_idx": 586,
    "db_id": "codebase_community",
    "question": "Which user added a bounty amount of 50 to the post title mentioning variance?",
    "query": "SELECT T3.DisplayName, T1.Title FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T3.Id = T2.UserId WHERE T2.BountyAmount = 50 AND T1.Title LIKE '%variance%'",
    "relevant_table": {
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "votes": {
        "ddl": "create table votes( Id integer primary key, foreign key(PostId) references posts(Id) integer, VoteTypeId integer, CreationDate date, foreign key(UserId) references users(Id) integer, BountyAmount integer)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "new_relevant_table": {
      "UserVotes": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate_users",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "PostId",
          "VoteTypeId",
          "CreationDate_votes",
          "UserId",
          "BountyAmount"
        ],
        "ddl": "create table UserVotes( Id integer primary key, Reputation integer, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, foreign key(PostId) references posts(Id) integer, VoteTypeId integer, BountyAmount integer)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references UserVotes(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references UserVotes(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "users": "UserVotes",
      "votes": "UserVotes"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['CreationDate_users', 'CreationDate_votes']": {
        "old_table": "['users', 'votes']",
        "old_column": "['CreationDate', 'CreationDate']"
      }
    },
    "new_gold_sql": "SELECT TDisplayName, Title FROM UserVotes WHERE BountyAmount = 50 AND Title LIKE '%variance%'"
  },
  {
    "train_idx": 587,
    "db_id": "codebase_community",
    "question": "Calculate the average view count of each post tagged as 'humor' and list the title and the comment of each post.",
    "query": "SELECT AVG(T2.ViewCount), T2.Title, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.PostId  WHERE T2.Tags = '<humor>' GROUP BY T2.Title, T1.Text ",
    "relevant_table": {
      "comments": {
        "ddl": "create table comments( Id integer primary key, foreign key(PostId) references posts(Id) integer, Score integer, Text text, CreationDate datetime, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score_posts",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "Id_comments",
          "PostId",
          "Score_comments",
          "Text",
          "CreationDate_comments",
          "UserId",
          "UserDisplayName"
        ],
        "ddl": "create table merged_table( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, Text text, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "posts": "merged_table",
      "comments": "merged_table"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['Score_posts', 'Id_comments', 'CreationDate_comments']": {
        "old_table": "['posts', 'comments', 'comments']",
        "old_column": "['Score', 'Id', 'CreationDate']"
      }
    },
    "new_gold_sql": "SELECT AVG(ViewCount), Title, Text FROM merged_table WHERE Tags = '<humor>' GROUP BY Title, Text"
  },
  {
    "train_idx": 593,
    "db_id": "codebase_community",
    "question": "How many users from New York have a teacher and supporter badge?",
    "query": "SELECT COUNT(DISTINCT T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name IN ('Supporter', 'Teacher') AND T2.Location = 'New York'",
    "relevant_table": {
      "badges": {
        "ddl": "create table badges( Id integer primary key, foreign key(UserId) references users(Id) integer, Name text, Date datetime)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "new_relevant_table": {
      "badges_users": {
        "columns": [
          "Id",
          "UserId",
          "Name",
          "Date",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl"
        ],
        "ddl": "create table badges_users( Id integer primary key, Name text, Date datetime, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "old_new_table_mapping": {
      "badges": "badges_users",
      "users": "badges_users"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(DISTINCT Id) FROM badges_users WHERE Name IN ('Supporter', 'Teacher') AND Location = 'New York'"
  },
  {
    "train_idx": 594,
    "db_id": "codebase_community",
    "question": "Which user created post ID 1 and what is the reputation of this user?",
    "query": "SELECT T2.Id, T2.Reputation FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.PostId = 1",
    "relevant_table": {
      "comments": {
        "ddl": "create table comments( Id integer primary key, foreign key(PostId) references posts(Id) integer, Score integer, Text text, CreationDate datetime, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "new_relevant_table": {
      "users_comments": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "Id_comments",
          "PostId",
          "Score",
          "Text",
          "CreationDate_comments",
          "UserId",
          "UserDisplayName"
        ],
        "ddl": "create table users_comments( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, foreign key(PostId) references posts(Id) integer, Score integer, Text text, UserDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "users": "users_comments",
      "comments": "users_comments"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "Id_comments, CreationDate_comments": {
        "old_table": "comments, comments",
        "old_column": "Id, CreationDate"
      }
    },
    "new_gold_sql": "SELECT Id, Reputation FROM users_comments WHERE PostId = 1"
  },
  {
    "train_idx": 595,
    "db_id": "codebase_community",
    "question": "Which user have only one post history per post and having at least 1000 views?",
    "query": "SELECT T2.UserId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T3.ViewCount >= 1000 GROUP BY T2.UserId HAVING COUNT(DISTINCT T2.PostHistoryTypeId) = 1",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "posthistory": {
        "ddl": "create table posthistory( Id integer primary key, PostHistoryTypeId integer, foreign key(PostId) references posts(Id) integer, RevisionGUID text, CreationDate datetime, foreign key(UserId) references users(Id) integer, Text text, Comment text, UserDisplayName text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "user_post_history": {
        "columns": [
          "Id",
          "PostHistoryTypeId",
          "PostId",
          "RevisionGUID",
          "PostHistoryCreationDate",
          "UserId",
          "Text",
          "Comment",
          "UserDisplayName",
          "Reputation",
          "UserCreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl"
        ],
        "ddl": "create table user_post_history( Id integer primary key, PostHistoryTypeId integer, foreign key(PostId) references posts(Id) integer, RevisionGUID text, Text text, Comment text, UserDisplayName text, Reputation integer, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references user_post_history(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references user_post_history(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "posthistory": "user_post_history",
      "users": "user_post_history"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['PostHistoryCreationDate', 'UserId']": {
        "old_table": "['posthistory', 'users']",
        "old_column": "['CreationDate', 'Id']"
      }
    },
    "new_gold_sql": "SELECT UserId FROM user_post_history WHERE ViewCount >= 1000 GROUP BY UserId HAVING COUNT(DISTINCT PostHistoryTypeId) = 1"
  },
  {
    "train_idx": 596,
    "db_id": "codebase_community",
    "question": "Which users have posted the most comments. List out the user's badge?",
    "query": "SELECT Name FROM badges AS T1 INNER JOIN comments AS T2 ON T1.UserId = t2.UserId GROUP BY T2.UserId ORDER BY COUNT(T2.UserId) DESC LIMIT 1",
    "relevant_table": {
      "badges": {
        "ddl": "create table badges( Id integer primary key, foreign key(UserId) references users(Id) integer, Name text, Date datetime)"
      },
      "comments": {
        "ddl": "create table comments( Id integer primary key, foreign key(PostId) references posts(Id) integer, Score integer, Text text, CreationDate datetime, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      }
    },
    "new_relevant_table": {
      "badges_comments": {
        "columns": [
          "Id",
          "PostId",
          "Score",
          "Text",
          "CreationDate",
          "UserId",
          "UserDisplayName",
          "BadgeName",
          "BadgeDate"
        ],
        "ddl": "create table badges_comments( Id integer primary key, foreign key(PostId) references posts(Id) integer, Score integer, Text text, CreationDate datetime, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "comments": "badges_comments",
      "badges": "badges_comments"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT BadgeName FROM badges_comments GROUP BY UserId ORDER BY COUNT(UserId) DESC LIMIT 1"
  },
  {
    "train_idx": 597,
    "db_id": "codebase_community",
    "question": "How many users from India have the teacher badges?",
    "query": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'India' AND T1.Name = 'Teacher'",
    "relevant_table": {
      "badges": {
        "ddl": "create table badges( Id integer primary key, foreign key(UserId) references users(Id) integer, Name text, Date datetime)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "new_relevant_table": {
      "users_badges": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "BadgeId",
          "UserId",
          "Name",
          "Date"
        ],
        "ddl": "create table users_badges( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, BadgeId integer, Name text, Date datetime)"
      }
    },
    "old_new_table_mapping": {
      "users": "users_badges",
      "badges": "users_badges"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "BadgeId": {
        "old_table": "badges",
        "old_column": "Id"
      }
    },
    "new_gold_sql": "SELECT COUNT(Id) FROM users_badges WHERE Location = 'India' AND Name = 'Teacher'"
  },
  {
    "train_idx": 600,
    "db_id": "codebase_community",
    "question": "List out all post that are related to post ID 61217 and what is the popularity of this post?",
    "query": "SELECT T1.ViewCount FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 61217",
    "relevant_table": {
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "postlinks": {
        "ddl": "create table postlinks( Id integer primary key, CreationDate datetime, foreign key(PostId) references posts(Id) integer, foreign key(RelatedPostId) references posts(Id) integer, LinkTypeId integer)"
      }
    },
    "new_relevant_table": {
      "mergedPostsLinks": {
        "columns": [
          "Id",
          "CreationDate",
          "PostId",
          "RelatedPostId",
          "LinkTypeId",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName"
        ],
        "ddl": "create table mergedPostsLinks( Id integer primary key, CreationDate datetime, LinkTypeId integer, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "postlinks": "mergedPostsLinks",
      "posts": "mergedPostsLinks"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT ViewCount FROM mergedPostsLinks WHERE PostId = 61217"
  },
  {
    "train_idx": 601,
    "db_id": "codebase_community",
    "question": "What is the score and the link type ID for post ID 395?",
    "query": "SELECT T1.Score, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 395",
    "relevant_table": {
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "postlinks": {
        "ddl": "create table postlinks( Id integer primary key, CreationDate datetime, foreign key(PostId) references posts(Id) integer, foreign key(RelatedPostId) references posts(Id) integer, LinkTypeId integer)"
      }
    },
    "new_relevant_table": {
      "mergedPostsLinks": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "CreationDate",
          "PostId",
          "RelatedPostId",
          "LinkTypeId"
        ],
        "ddl": "create table mergedPostsLinks( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, CreationDate datetime, LinkTypeId integer)"
      }
    },
    "old_new_table_mapping": {
      "posts": "mergedPostsLinks",
      "postlinks": "mergedPostsLinks"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Score, LinkTypeId FROM mergedPostsLinks WHERE PostId = 395"
  },
  {
    "train_idx": 602,
    "db_id": "codebase_community",
    "question": "List out all post ID with score more than 60 and list out all the user ID that created these post.",
    "query": "SELECT PostId, UserId FROM postHistory WHERE PostId IN ( SELECT Id FROM posts WHERE Score > 60 )",
    "relevant_table": {
      "posthistory": {
        "ddl": "create table posthistory( Id integer primary key, PostHistoryTypeId integer, foreign key(PostId) references posts(Id) integer, RevisionGUID text, CreationDate datetime, foreign key(UserId) references users(Id) integer, Text text, Comment text, UserDisplayName text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "mergedPostsHistory": {
        "columns": [
          "Id",
          "PostHistoryTypeId",
          "PostId_posthistory",
          "RevisionGUID",
          "CreationDate_posthistory",
          "UserId_posthistory",
          "Text",
          "Comment_posthistory",
          "UserDisplayName_posthistory",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName"
        ],
        "ddl": "create table mergedPostsHistory( Id integer, PostHistoryTypeId integer, RevisionGUID text, Text text, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "posthistory": "mergedPostsHistory",
      "posts": "mergedPostsHistory"
    },
    "new_table_primary_key": "'Id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['PostId_posthistory', 'CreationDate_posthistory', 'UserId_posthistory', 'Comment_posthistory', 'UserDisplayName_posthistory']": {
        "old_table": "['posthistory', 'posthistory', 'posthistory', 'posthistory', 'posthistory']",
        "old_column": "['PostId', 'CreationDate', 'UserId', 'Comment', 'UserDisplayName']"
      }
    },
    "new_gold_sql": "SELECT PostId_posthistory, UserId_posthistory FROM mergedPostsHistory WHERE PostId_posthistory IN ( SELECT Id FROM mergedPostsHistory WHERE Score > 60 )"
  },
  {
    "train_idx": 603,
    "db_id": "codebase_community",
    "question": "What is the sum of favourite count gained by user ID 686 in 2011?",
    "query": "SELECT SUM(DISTINCT FavoriteCount) FROM posts WHERE Id IN ( SELECT PostId FROM postHistory WHERE UserId = 686 AND STRFTIME('%Y', CreationDate) = '2011' )",
    "relevant_table": {
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "posthistory": {
        "ddl": "create table posthistory( Id integer primary key, PostHistoryTypeId integer, foreign key(PostId) references posts(Id) integer, RevisionGUID text, CreationDate datetime, foreign key(UserId) references users(Id) integer, Text text, Comment text, UserDisplayName text)"
      }
    },
    "new_relevant_table": {
      "merged_posts_history": {
        "columns": [
          "Id",
          "PostHistoryTypeId",
          "PostId",
          "RevisionGUID",
          "CreationDate_posthistory",
          "UserId_posthistory",
          "Text",
          "Comment_posthistory",
          "UserDisplayName_posthistory",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate_posts",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount_posts",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName"
        ],
        "ddl": "create table merged_posts_history( Id integer primary key, PostHistoryTypeId integer, RevisionGUID text, Text text, PostTypeId integer, AcceptedAnswerId integer, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "posthistory": "merged_posts_history",
      "posts": "merged_posts_history"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['CreationDate_posthistory', 'UserId_posthistory', 'Comment_posthistory', 'CommentCount_posts']": {
        "old_table": "['posthistory', 'posthistory', 'posthistory', 'posts']",
        "old_column": "['CreationDate', 'UserId', 'Comment', 'CommentCount']"
      }
    },
    "new_gold_sql": "SELECT SUM(DISTINCT FavoriteCount) FROM merged_posts_history WHERE Id IN ( SELECT PostId FROM merged_posts_history WHERE UserId_posthistory = 686 AND STRFTIME('%Y', CreationDate_posthistory) = '2011' )"
  },
  {
    "train_idx": 604,
    "db_id": "codebase_community",
    "question": "What is the average of the up votes and the average user age for users creating more than 10 posts?",
    "query": "SELECT AVG(T1.UpVotes), AVG(T1.Age) FROM users AS T1 INNER JOIN ( SELECT OwnerUserId, COUNT(*) AS post_count FROM posts GROUP BY OwnerUserId HAVING post_count > 10) AS T2 ON T1.Id = T2.OwnerUserId",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "users_posts": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate_posts",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName"
        ],
        "ddl": "create table users_posts( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, PostTypeId integer, AcceptedAnswerId integer, CreaionDate_posts datetime, Score integer, ViewCount integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "users": "users_posts",
      "posts": "users_posts"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "CreaionDate_posts": {
        "old_table": "posts",
        "old_column": "CreaionDate"
      }
    },
    "new_gold_sql": "SELECT AVG(T1.UpVotes), AVG(T1.Age) FROM users_posts AS T1 INNER JOIN ( SELECT OwnerUserId, COUNT(*) AS post_count FROM users_posts GROUP BY OwnerUserId HAVING post_count > 10) AS T2 ON T1.Id = T2.OwnerUserId"
  },
  {
    "train_idx": 610,
    "db_id": "codebase_community",
    "question": "What are the name of badge that users who have the highest reputation obtained?",
    "query": "SELECT T2.name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId ORDER BY T1.Reputation DESC LIMIT 1",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "badges": {
        "ddl": "create table badges( Id integer primary key, foreign key(UserId) references users(Id) integer, Name text, Date datetime)"
      }
    },
    "new_relevant_table": {
      "users_badges": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "BadgeId",
          "BadgeName",
          "BadgeDate"
        ],
        "ddl": "create table users_badges( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, BadgeId integer)"
      }
    },
    "old_new_table_mapping": {
      "badges": "users_badges",
      "users": "users_badges"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "BadgeId": {
        "old_table": "badges",
        "old_column": "Id"
      }
    },
    "new_gold_sql": "SELECT BadgeName FROM users_badges ORDER BY Reputation DESC LIMIT 1"
  },
  {
    "train_idx": 612,
    "db_id": "codebase_community",
    "question": "What is the name of badge that the user whose display name is \"Pierre\" obtained?",
    "query": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre'",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "badges": {
        "ddl": "create table badges( Id integer primary key, foreign key(UserId) references users(Id) integer, Name text, Date datetime)"
      }
    },
    "new_relevant_table": {
      "users_badges": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "UserId",
          "Name",
          "Date"
        ],
        "ddl": "create table users_badges( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, Name text, Date datetime)"
      }
    },
    "old_new_table_mapping": {
      "users": "users_badges",
      "badges": "users_badges"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Name FROM users_badges WHERE DisplayName = 'Pierre'"
  },
  {
    "train_idx": 613,
    "db_id": "codebase_community",
    "question": "List out the dates that users who are located in Rochester, NY obtained their badges?",
    "query": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Rochester, NY'",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "badges": {
        "ddl": "create table badges( Id integer primary key, foreign key(UserId) references users(Id) integer, Name text, Date datetime)"
      }
    },
    "new_relevant_table": {
      "users_badges": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "UserId",
          "Name",
          "Date"
        ],
        "ddl": "create table users_badges( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, Name text, Date datetime)"
      }
    },
    "old_new_table_mapping": {
      "users": "users_badges",
      "badges": "users_badges"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Date FROM users_badges WHERE Location = 'Rochester, NY'"
  },
  {
    "train_idx": 614,
    "db_id": "codebase_community",
    "question": "Among the users who obtained the \"Teacher\" badge, calculate their percentage of users",
    "query": "SELECT CAST(COUNT(T1.Id) AS REAL) * 100 / (SELECT COUNT(Id) FROM users) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Teacher'",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "badges": {
        "ddl": "create table badges( Id integer primary key, foreign key(UserId) references users(Id) integer, Name text, Date datetime)"
      }
    },
    "new_relevant_table": {
      "users_badges": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "BadgeId",
          "UserId",
          "BadgeName",
          "BadgeDate"
        ],
        "ddl": "create table users_badges( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, BadgeId integer)"
      }
    },
    "old_new_table_mapping": {
      "badges": "users_badges",
      "users": "users_badges"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "BadgeId": {
        "old_table": "badges",
        "old_column": "Id"
      }
    },
    "new_gold_sql": "SELECT CAST(COUNT(T1.Id) AS REAL) * 100 / (SELECT COUNT(Id) FROM users_badges) FROM users_badges AS T1 WHERE T1.BadgeName = 'Teacher'"
  },
  {
    "train_idx": 615,
    "db_id": "codebase_community",
    "question": "Among the users who obtained the \"Organizer\" badges, calculate the percentage of users who are teenagers.",
    "query": "SELECT CAST(SUM(IIF(T2.Age BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.`Name` = 'Organizer'",
    "relevant_table": {
      "badges": {
        "ddl": "create table badges( Id integer primary key, foreign key(UserId) references users(Id) integer, Name text, Date datetime)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "new_relevant_table": {
      "users_badges": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "UserId",
          "Name",
          "Date"
        ],
        "ddl": "create table users_badges( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, Name text, Date datetime)"
      }
    },
    "old_new_table_mapping": {
      "users": "users_badges",
      "badges": "users_badges"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(IIF(users_badgesAge BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(users_badgesId) FROM users_badges WHERE users_badges`Name` = 'Organizer'"
  },
  {
    "train_idx": 616,
    "db_id": "codebase_community",
    "question": "What is the comment's rating score of the post which was created on 7/19/2010 7:19:56 PM",
    "query": "SELECT T1.Score FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = '2010-07-19 19:19:56.0'",
    "relevant_table": {
      "comments": {
        "ddl": "create table comments( Id integer primary key, foreign key(PostId) references posts(Id) integer, Score integer, Text text, CreationDate datetime, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "comments_posts": {
        "columns": [
          "Id",
          "PostId_comments",
          "Score_comments",
          "Text",
          "CreationDate_comments",
          "UserId_comments",
          "UserDisplayName",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate_posts",
          "Score_posts",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName"
        ],
        "ddl": "create table comments_posts( Id integer primary key, Text text, UserDisplayName text, PostTypeId integer, AcceptedAnswerId integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "comments": "comments_posts",
      "posts": "comments_posts"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['Id_comments', 'Score_comments', 'CreationDate_comments']": {
        "old_table": "['comments', 'posts', 'comments']",
        "old_column": "['Id', 'Score', 'CreationDate']"
      }
    },
    "new_gold_sql": "SELECT Score_comments FROM comments_posts WHERE CreationDate_comments = '2010-07-19 19:19:560'"
  },
  {
    "train_idx": 617,
    "db_id": "codebase_community",
    "question": "What is the detailed content of the comment of the post which was created on 7/19/2010 7:37:33 PM?",
    "query": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = '2010-07-19 19:37:33.0'",
    "relevant_table": {
      "comments": {
        "ddl": "create table comments( Id integer primary key, foreign key(PostId) references posts(Id) integer, Score integer, Text text, CreationDate datetime, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score_posts",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "Id_comments",
          "PostId",
          "Score_comments",
          "Text",
          "CreationDate_comments",
          "UserId",
          "UserDisplayName"
        ],
        "ddl": "create table merged_table( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, Text text, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "posts": "merged_table",
      "comments": "merged_table"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['Score_posts', 'Id_comments', 'CreationDate_comments']": {
        "old_table": "['posts', 'comments', 'comments']",
        "old_column": "['Score', 'Id', 'CreationDate']"
      }
    },
    "new_gold_sql": "SELECT Text FROM merged_table WHERE CreationDate_comments = '2010-07-19 19:37:33.0'"
  },
  {
    "train_idx": 618,
    "db_id": "codebase_community",
    "question": "List out the age of users who located in Vienna, Austria obtained the badge?",
    "query": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "badges": {
        "ddl": "create table badges( Id integer primary key, foreign key(UserId) references users(Id) integer, Name text, Date datetime)"
      }
    },
    "new_relevant_table": {
      "users_badges": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "UserId",
          "BadgeName",
          "BadgeDate"
        ],
        "ddl": "create table users_badges( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "old_new_table_mapping": {
      "badges": "users_badges",
      "users": "users_badges"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT users_badgesAge FROM users_badges WHERE users_badgesLocation = 'Vienna, Austria'"
  },
  {
    "train_idx": 619,
    "db_id": "codebase_community",
    "question": "How many adults who obtained the badge Supporter?",
    "query": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Supporter' AND T1.Age BETWEEN 19 AND 65",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "badges": {
        "ddl": "create table badges( Id integer primary key, foreign key(UserId) references users(Id) integer, Name text, Date datetime)"
      }
    },
    "new_relevant_table": {
      "users_badges": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "UserId",
          "BadgeName",
          "BadgeDate"
        ],
        "ddl": "create table users_badges( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "old_new_table_mapping": {
      "badges": "users_badges",
      "users": "users_badges"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(Id) FROM users_badges WHERE BadgeName = 'Supporter' AND Age BETWEEN 19 AND 65"
  },
  {
    "train_idx": 620,
    "db_id": "codebase_community",
    "question": "State the number of views of users who obtained the badge on 7/19/2010 7:39:08 PM.",
    "query": "SELECT T1.Views FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Date = '2010-07-19 19:39:08.0'",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "badges": {
        "ddl": "create table badges( Id integer primary key, foreign key(UserId) references users(Id) integer, Name text, Date datetime)"
      }
    },
    "new_relevant_table": {
      "users_badges": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "UserId",
          "BadgeName",
          "BadgeDate"
        ],
        "ddl": "create table users_badges( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "old_new_table_mapping": {
      "badges": "users_badges",
      "users": "users_badges"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Views FROM users_badges WHERE BadgeDate = '2010-07-19 19:39:08.0'"
  },
  {
    "train_idx": 621,
    "db_id": "codebase_community",
    "question": "What are the name of badges that users who have the lowest reputation obtained?",
    "query": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Reputation = (SELECT MIN(Reputation) FROM users)",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "badges": {
        "ddl": "create table badges( Id integer primary key, foreign key(UserId) references users(Id) integer, Name text, Date datetime)"
      }
    },
    "new_relevant_table": {
      "users_badges": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "UserId",
          "Name",
          "Date"
        ],
        "ddl": "create table users_badges( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, Name text, Date datetime)"
      }
    },
    "old_new_table_mapping": {
      "users": "users_badges",
      "badges": "users_badges"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T2.Name FROM users_badges AS T1 WHERE T1.Reputation = (SELECT MIN(Reputation) FROM users_badges)"
  },
  {
    "train_idx": 622,
    "db_id": "codebase_community",
    "question": "State the name of badge that the user whose display name is \"Sharpie\" obtained.",
    "query": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "badges": {
        "ddl": "create table badges( Id integer primary key, foreign key(UserId) references users(Id) integer, Name text, Date datetime)"
      }
    },
    "new_relevant_table": {
      "users_badges": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "UserId",
          "Name",
          "Date"
        ],
        "ddl": "create table users_badges( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, Name text, Date datetime)"
      }
    },
    "old_new_table_mapping": {
      "users": "users_badges",
      "badges": "users_badges"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Name FROM users_badges WHERE DisplayName = 'Sharpie'"
  },
  {
    "train_idx": 623,
    "db_id": "codebase_community",
    "question": "How many elders obtained the \"Supporter\" badge?",
    "query": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Age > 65 AND T2.Name = 'Supporter'",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "badges": {
        "ddl": "create table badges( Id integer primary key, foreign key(UserId) references users(Id) integer, Name text, Date datetime)"
      }
    },
    "new_relevant_table": {
      "users_badges": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "UserId",
          "Name",
          "Date"
        ],
        "ddl": "create table users_badges( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, Name text, Date datetime)"
      }
    },
    "old_new_table_mapping": {
      "users": "users_badges",
      "badges": "users_badges"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(Id) FROM users_badges WHERE Age > 65 AND Name = 'Supporter'"
  },
  {
    "train_idx": 630,
    "db_id": "codebase_community",
    "question": "What is the name of tags used by John Salvatier's?",
    "query": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'John Salvatier'",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "posthistory": {
        "ddl": "create table posthistory( Id integer primary key, PostHistoryTypeId integer, foreign key(PostId) references posts(Id) integer, RevisionGUID text, CreationDate datetime, foreign key(UserId) references users(Id) integer, Text text, Comment text, UserDisplayName text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "merged_posts_history": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "PostHistoryTypeId",
          "PostId",
          "RevisionGUID",
          "CreationDate",
          "UserId",
          "Text",
          "Comment",
          "UserDisplayName"
        ],
        "ddl": "create table merged_posts_history( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, PostHistoryTypeId integer, RevisionGUID text, CreationDate datetime, foreign key(UserId) references users(Id) integer, Text text, Comment text, UserDisplayName text)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "old_new_table_mapping": {
      "posts": "merged_posts_history",
      "posthistory": "merged_posts_history"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Tags FROM users WHERE DisplayName = 'John Salvatier'"
  },
  {
    "train_idx": 631,
    "db_id": "codebase_community",
    "question": "How many posts were created by Daniel Vassallo?",
    "query": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Daniel Vassallo'",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "posthistory": {
        "ddl": "create table posthistory( Id integer primary key, PostHistoryTypeId integer, foreign key(PostId) references posts(Id) integer, RevisionGUID text, CreationDate datetime, foreign key(UserId) references users(Id) integer, Text text, Comment text, UserDisplayName text)"
      }
    },
    "new_relevant_table": {
      "users_posthistory": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate_users",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "PostHistoryTypeId",
          "PostId",
          "RevisionGUID",
          "CreationDate_posthistory",
          "UserId",
          "Text",
          "Comment",
          "UserDisplayName"
        ],
        "ddl": "create table users_posthistory( Id integer primary key, Reputation integer, CreationDate_users datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, PostHistoryTypeId integer, foreign key(PostId) references posts(Id) integer, RevisionGUID text, CreationDate_posthistory datetime, Text text, Comment text, UserDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "users": "users_posthistory",
      "posthistory": "users_posthistory"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "CreationDate_users": {
        "old_table": "users",
        "old_column": "CreationDate"
      },
      "CreationDate_posthistory": {
        "old_table": "posthistory",
        "old_column": "CreationDate"
      }
    },
    "new_gold_sql": "SELECT COUNT(Id) FROM users_posthistory WHERE DisplayName = 'Daniel Vassallo'"
  },
  {
    "train_idx": 632,
    "db_id": "codebase_community",
    "question": "How many votes were made by Harlan?",
    "query": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN votes AS T3 ON T3.PostId = T2.PostId WHERE T1.DisplayName = 'Harlan'",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "posthistory": {
        "ddl": "create table posthistory( Id integer primary key, PostHistoryTypeId integer, foreign key(PostId) references posts(Id) integer, RevisionGUID text, CreationDate datetime, foreign key(UserId) references users(Id) integer, Text text, Comment text, UserDisplayName text)"
      },
      "votes": {
        "ddl": "create table votes( Id integer primary key, foreign key(PostId) references posts(Id) integer, VoteTypeId integer, CreationDate date, foreign key(UserId) references users(Id) integer, BountyAmount integer)"
      }
    },
    "new_relevant_table": {
      "users_posthistory": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate_users",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "PostHistoryTypeId",
          "PostId",
          "RevisionGUID",
          "CreationDate_posthistory",
          "UserId",
          "Text",
          "Comment",
          "UserDisplayName"
        ],
        "ddl": "create table users_posthistory( Id integer primary key, Reputation integer, CreationDate_users datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, PostHistoryTypeId integer, foreign key(PostId) references posts(Id) integer, RevisionGUID text, CreationDate_posthistory datetime, Text text, Comment text, UserDisplayName text)"
      },
      "votes": {
        "ddl": "create table votes( Id integer primary key, foreign key(PostId) references posts(Id) integer, VoteTypeId integer, CreationDate date, foreign key(UserId) references users_posthistory(Id) integer, BountyAmount integer)"
      }
    },
    "old_new_table_mapping": {
      "users": "users_posthistory",
      "posthistory": "users_posthistory"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "CreationDate_users": {
        "old_table": "users",
        "old_column": "CreationDate"
      },
      "CreationDate_posthistory": {
        "old_table": "posthistory",
        "old_column": "CreationDate"
      }
    },
    "new_gold_sql": "SELECT COUNT(Id) FROM users_posthistory WHERE DisplayName = 'Harlan'"
  },
  {
    "train_idx": 633,
    "db_id": "codebase_community",
    "question": "Which post by slashnick has the most answers count? State the post ID.",
    "query": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC LIMIT 1",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "posthistory": {
        "ddl": "create table posthistory( Id integer primary key, PostHistoryTypeId integer, foreign key(PostId) references posts(Id) integer, RevisionGUID text, CreationDate datetime, foreign key(UserId) references users(Id) integer, Text text, Comment text, UserDisplayName text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "mergedTable": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate_posts",
          "Score",
          "ViewCount_posts",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName"
        ],
        "ddl": "create table mergedTable( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, PostTypeId integer, AcceptedAnswerId integer, Score integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "posthistory": {
        "ddl": "create table posthistory( Id integer primary key, PostHistoryTypeId integer, foreign key(PostId) references mergedTable(Id) integer, RevisionGUID text, CreationDate datetime, foreign key(UserId) references mergedTable(Id) integer, Text text, Comment text, UserDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "users": "mergedTable",
      "posts": "mergedTable"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['CreationDate_users', 'ViewCount_posts']": {
        "old_table": "['users', 'posts']",
        "old_column": "['CreationDate', 'ViewCount']"
      }
    },
    "new_gold_sql": "SELECT PostId FROM mergedTable WHERE DisplayName = 'slashnick' ORDER BY AnswerCount DESC LIMIT 1"
  },
  {
    "train_idx": 634,
    "db_id": "codebase_community",
    "question": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?",
    "query": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "posthistory": {
        "ddl": "create table posthistory( Id integer primary key, PostHistoryTypeId integer, foreign key(PostId) references posts(Id) integer, RevisionGUID text, CreationDate datetime, foreign key(UserId) references users(Id) integer, Text text, Comment text, UserDisplayName text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "users_posts": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate_posts",
          "Score",
          "ViewCount_posts",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName"
        ],
        "ddl": "create table users_posts( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, PostTypeId integer, AcceptedAnswerId integer, Score integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "posthistory": {
        "ddl": "create table posthistory( Id integer primary key, PostHistoryTypeId integer, foreign key(PostId) references users_posts(Id) integer, RevisionGUID text, CreationDate datetime, foreign key(UserId) references users_posts(Id) integer, Text text, Comment text, UserDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "users": "users_posts",
      "posts": "users_posts"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['CreaionDate_posts', 'ViewCount_posts']": {
        "old_table": "['posts', 'posts']",
        "old_column": "['CreationDate', 'ViewCount']"
      }
    },
    "new_gold_sql": "SELECT DisplayName FROM users_posts WHERE DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder' GROUP BY DisplayName ORDER BY SUM(ViewCount_posts) DESC LIMIT 1"
  },
  {
    "train_idx": 635,
    "db_id": "codebase_community",
    "question": "How many posts by Matt Parker have more than 4 votes?",
    "query": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id INNER JOIN votes AS T4 ON T4.PostId = T3.Id WHERE T1.DisplayName = 'Matt Parker' GROUP BY T2.PostId, T4.Id HAVING COUNT(T4.Id) > 4",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "posthistory": {
        "ddl": "create table posthistory( Id integer primary key, PostHistoryTypeId integer, foreign key(PostId) references posts(Id) integer, RevisionGUID text, CreationDate datetime, foreign key(UserId) references users(Id) integer, Text text, Comment text, UserDisplayName text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "votes": {
        "ddl": "create table votes( Id integer primary key, foreign key(PostId) references posts(Id) integer, VoteTypeId integer, CreationDate date, foreign key(UserId) references users(Id) integer, BountyAmount integer)"
      }
    },
    "new_relevant_table": {
      "user_posts": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl"
        ],
        "ddl": "create table user_posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "posthistory": {
        "ddl": "create table posthistory( Id integer primary key, PostHistoryTypeId integer, foreign key(PostId) references user_posts(Id) integer, RevisionGUID text, CreationDate datetime, foreign key(UserId) references user_posts(Id) integer, Text text, Comment text, UserDisplayName text)"
      },
      "votes": {
        "ddl": "create table votes( Id integer primary key, foreign key(PostId) references user_posts(Id) integer, VoteTypeId integer, CreationDate date, foreign key(UserId) references user_posts(Id) integer, BountyAmount integer)"
      }
    },
    "old_new_table_mapping": {
      "posts": "user_posts",
      "users": "user_posts"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(Id) FROM user_posts WHERE DisplayName = 'Matt Parker' GROUP BY PostId, Id HAVING COUNT(Id) > 4"
  },
  {
    "train_idx": 636,
    "db_id": "codebase_community",
    "question": "How many negative comments did Neil McGuigan get in his posts?",
    "query": "SELECT COUNT(T3.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T1.DisplayName = 'Neil McGuigan' AND T3.Score < 60",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "comments": {
        "ddl": "create table comments( Id integer primary key, foreign key(PostId) references posts(Id) integer, Score integer, Text text, CreationDate datetime, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      }
    },
    "new_relevant_table": {
      "users_comments": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "PostId",
          "Score",
          "Text",
          "CommentCreationDate",
          "UserId",
          "UserDisplayName"
        ],
        "ddl": "create table users_comments( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, foreign key(PostId) references posts(Id) integer, Score integer, Text text, CommentCreationDate datetime, UserDisplayName text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users_comments(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users_comments(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "comments": "users_comments",
      "users": "users_comments"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "CommentCreationDate": {
        "old_table": "comments",
        "old_column": "CreationDate"
      }
    },
    "new_gold_sql": "SELECT COUNT(Id) FROM users_comments WHERE DisplayName = 'Neil McGuigan' AND Score < 60"
  },
  {
    "train_idx": 638,
    "db_id": "codebase_community",
    "question": "List all the name of users that obtained the Organizer Badges.",
    "query": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "badges": {
        "ddl": "create table badges( Id integer primary key, foreign key(UserId) references users(Id) integer, Name text, Date datetime)"
      }
    },
    "new_relevant_table": {
      "users_badges": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "UserId",
          "Name",
          "Date"
        ],
        "ddl": "create table users_badges( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, Name text, Date datetime)"
      }
    },
    "old_new_table_mapping": {
      "badges": "users_badges",
      "users": "users_badges"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DisplayName FROM users_badges WHERE `Name` = 'Organizer'"
  },
  {
    "train_idx": 639,
    "db_id": "codebase_community",
    "question": "Based on posts posted by Community, calculate the percentage of posts that use the R language.",
    "query": "SELECT CAST(SUM(IIF(T3.TagName = 'r', 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN tags AS T3 ON T3.ExcerptPostId = T2.PostId WHERE T1.DisplayName = 'Community'",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "posthistory": {
        "ddl": "create table posthistory( Id integer primary key, PostHistoryTypeId integer, foreign key(PostId) references posts(Id) integer, RevisionGUID text, CreationDate datetime, foreign key(UserId) references users(Id) integer, Text text, Comment text, UserDisplayName text)"
      },
      "tags": {
        "ddl": "create table tags( Id integer primary key, TagName text, Count integer, foreign key(ExcerptPostId) references posts(Id) integer, WikiPostId integer)"
      }
    },
    "new_relevant_table": {
      "mergedTable": {
        "columns": [
          "Id",
          "TagName",
          "Count",
          "ExcerptPostId",
          "WikiPostId",
          "PostHistoryTypeId",
          "PostId",
          "RevisionGUID",
          "CreationDate",
          "UserId",
          "Text",
          "Comment",
          "UserDisplayName"
        ],
        "ddl": "create table mergedTable( Id integer primary key, TagName text, Count integer, foreign key(ExcerptPostId) references posts(Id) integer, WikiPostId integer, PostHistoryTypeId integer, foreign key(PostId) references posts(Id) integer, RevisionGUID text, CreationDate datetime, foreign key(UserId) references users(Id) integer, Text text, Comment text, UserDisplayName text)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "old_new_table_mapping": {
      "tags": "mergedTable",
      "posthistory": "mergedTable"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(IIF(TagName = 'r', 1, 0)) AS REAL) * 100 / COUNT(Id) FROM mergedTable WHERE DisplayName = 'Community'"
  },
  {
    "train_idx": 640,
    "db_id": "codebase_community",
    "question": "Calculate the difference in view count from post posted by Mornington and view count from posts posted by Amos.",
    "query": "SELECT SUM(IIF(T1.DisplayName = 'Mornington', T3.ViewCount, 0)) - SUM(IIF(T1.DisplayName = 'Amos', T3.ViewCount, 0)) AS diff FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "posthistory": {
        "ddl": "create table posthistory( Id integer primary key, PostHistoryTypeId integer, foreign key(PostId) references posts(Id) integer, RevisionGUID text, CreationDate datetime, foreign key(UserId) references users(Id) integer, Text text, Comment text, UserDisplayName text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "users_posts": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl"
        ],
        "ddl": "create table users_posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "posthistory": {
        "ddl": "create table posthistory( Id integer primary key, PostHistoryTypeId integer, foreign key(PostId) references users_posts(Id) integer, RevisionGUID text, CreationDate datetime, foreign key(UserId) references users_posts(Id) integer, Text text, Comment text, UserDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "posts": "users_posts",
      "users": "users_posts"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT SUM(IIF(DisplayName = 'Mornington', ViewCount, 0)) - SUM(IIF(DisplayName = 'Amos', ViewCount, 0)) AS diff FROM users_posts WHERE Id IN (SELECT UserId FROM postHistory WHERE Id = PostId)"
  },
  {
    "train_idx": 646,
    "db_id": "codebase_community",
    "question": "Describe the post title which got positive comments and display names of the users who posted those comments.",
    "query": "SELECT T1.Title, T2.UserDisplayName FROM posts AS T1 INNER JOIN comments AS T2 ON T2.PostId = T2.Id WHERE T1.Score > 60",
    "relevant_table": {
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "comments": {
        "ddl": "create table comments( Id integer primary key, foreign key(PostId) references posts(Id) integer, Score integer, Text text, CreationDate datetime, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      }
    },
    "new_relevant_table": {
      "posts_comments": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score_posts",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "Id_comments",
          "PostId",
          "Score_comments",
          "Text",
          "CreationDate_comments",
          "UserId",
          "UserDisplayName"
        ],
        "ddl": "create table posts_comments( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, Text text, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "posts": "posts_comments",
      "comments": "posts_comments"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['Score_posts', 'Id_comments', 'CreationDate_comments']": {
        "old_table": "['posts', 'comments', 'comments']",
        "old_column": "['Score', 'Id', 'CreationDate']"
      }
    },
    "new_gold_sql": "SELECT Title, UserDisplayName FROM posts_comments WHERE Score_posts > 60"
  },
  {
    "train_idx": 647,
    "db_id": "codebase_community",
    "question": "Provide the badge names received in 2011 for the user whose location is in the North Pole.",
    "query": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'North Pole'",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "badges": {
        "ddl": "create table badges( Id integer primary key, foreign key(UserId) references users(Id) integer, Name text, Date datetime)"
      }
    },
    "new_relevant_table": {
      "users_badges": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "BadgeId",
          "UserId",
          "BadgeName",
          "BadgeDate"
        ],
        "ddl": "create table users_badges( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, BadgeId integer)"
      }
    },
    "old_new_table_mapping": {
      "badges": "users_badges",
      "users": "users_badges"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "BadgeId": {
        "old_table": "badges",
        "old_column": "Id"
      }
    },
    "new_gold_sql": "SELECT BadgeName FROM users_badges WHERE STRFTIME('%Y', BadgeDate) = '2011' AND Location = 'North Pole'"
  },
  {
    "train_idx": 648,
    "db_id": "codebase_community",
    "question": "Provide the users' display names and available website URLs of the post with favorite count of more than 150.",
    "query": "SELECT T1.DisplayName, T1.WebsiteUrl FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.FavoriteCount > 150",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "users_posts": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl"
        ],
        "ddl": "create table users_posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "old_new_table_mapping": {
      "posts": "users_posts",
      "users": "users_posts"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DisplayName, WebsiteUrl FROM users_posts WHERE FavoriteCount > 150"
  },
  {
    "train_idx": 649,
    "db_id": "codebase_community",
    "question": "Describe the post history counts and last edit date of the post title \"What is the best introductory Bayesian statistics textbook?\"",
    "query": "SELECT T1.Id, T2.LastEditDate FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'What is the best introductory Bayesian statistics textbook?'",
    "relevant_table": {
      "posthistory": {
        "ddl": "create table posthistory( Id integer primary key, PostHistoryTypeId integer, foreign key(PostId) references posts(Id) integer, RevisionGUID text, CreationDate datetime, foreign key(UserId) references users(Id) integer, Text text, Comment text, UserDisplayName text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "mergedPostsHistory": {
        "columns": [
          "Id",
          "PostHistoryTypeId",
          "PostId",
          "RevisionGUID",
          "CreationDate",
          "UserId",
          "Text",
          "Comment",
          "UserDisplayName",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName"
        ],
        "ddl": "create table mergedPostsHistory( Id integer primary key, PostHistoryTypeId integer, RevisionGUID text, CreationDate datetime, foreign key(UserId) references users(Id) integer, Text text, Comment text, UserDisplayName text, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "posthistory": "mergedPostsHistory",
      "posts": "mergedPostsHistory"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Id, LastEditDate FROM mergedPostsHistory WHERE Title = 'What is the best introductory Bayesian statistics textbook?'"
  },
  {
    "train_idx": 650,
    "db_id": "codebase_community",
    "question": "Describe the last accessed date and location of the users who received the outliers badge.",
    "query": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "badges": {
        "ddl": "create table badges( Id integer primary key, foreign key(UserId) references users(Id) integer, Name text, Date datetime)"
      }
    },
    "new_relevant_table": {
      "users_badges": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "UserId",
          "Name",
          "Date"
        ],
        "ddl": "create table users_badges( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, Name text, Date datetime)"
      }
    },
    "old_new_table_mapping": {
      "users": "users_badges",
      "badges": "users_badges"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT LastAccessDate, Location FROM users_badges WHERE Name = 'outliers'"
  },
  {
    "train_idx": 651,
    "db_id": "codebase_community",
    "question": "Provide the related post title of \"How to tell if something happened in a data set which monitors a value over time\".",
    "query": "SELECT T3.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN posts AS T3 ON T1.RelatedPostId = T3.Id WHERE T2.Title = 'How to tell if something happened in a data set which monitors a value over time'",
    "relevant_table": {
      "postlinks": {
        "ddl": "create table postlinks( Id integer primary key, CreationDate datetime, foreign key(PostId) references posts(Id) integer, foreign key(RelatedPostId) references posts(Id) integer, LinkTypeId integer)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "mergedPostsLinks": {
        "columns": [
          "Id",
          "CreationDate",
          "PostId",
          "RelatedPostId",
          "LinkTypeId",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName"
        ],
        "ddl": "create table mergedPostsLinks( Id integer, CreationDate datetime, LinkTypeId integer, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "postlinks": "mergedPostsLinks",
      "posts": "mergedPostsLinks"
    },
    "new_table_primary_key": "'Id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Title FROM mergedPostsLinks WHERE Title = 'How to tell if something happened in a data set which monitors a value over time'"
  },
  {
    "train_idx": 652,
    "db_id": "codebase_community",
    "question": "List the post IDs and badge names of the user Samuel in 2013.",
    "query": "SELECT T1.PostId, T2.Name FROM postHistory AS T1 INNER JOIN badges AS T2 ON T1.UserId = T2.UserId WHERE T1.UserDisplayName = 'Samuel' AND STRFTIME('%Y', T1.CreationDate) = '2013' AND STRFTIME('%Y', T2.Date) = '2013'",
    "relevant_table": {
      "posthistory": {
        "ddl": "create table posthistory( Id integer primary key, PostHistoryTypeId integer, foreign key(PostId) references posts(Id) integer, RevisionGUID text, CreationDate datetime, foreign key(UserId) references users(Id) integer, Text text, Comment text, UserDisplayName text)"
      },
      "badges": {
        "ddl": "create table badges( Id integer primary key, foreign key(UserId) references users(Id) integer, Name text, Date datetime)"
      }
    },
    "new_relevant_table": {
      "posthistory_badges": {
        "columns": [
          "Id",
          "PostHistoryTypeId",
          "PostId_posthistory",
          "RevisionGUID",
          "CreationDate_posthistory",
          "UserId_posthistory",
          "Text",
          "Comment",
          "UserDisplayName",
          "UserId_badges",
          "Name",
          "Date_badges"
        ],
        "ddl": "create table posthistory_badges( Id integer primary key, PostHistoryTypeId integer, RevisionGUID text, Text text, Comment text, UserDisplayName text, Name text)"
      }
    },
    "old_new_table_mapping": {
      "posthistory": "posthistory_badges",
      "badges": "posthistory_badges"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['PostId_posthistory', 'CreationDate_posthistory', 'UserId_posthistory', 'Date_badges']": {
        "old_table": "['posthistory', 'posthistory', 'posthistory', 'badges']",
        "old_column": "['PostId', 'CreationDate', 'UserId', 'Date']"
      }
    },
    "new_gold_sql": "SELECT PostId_posthistory, Name FROM posthistory_badges WHERE UserDisplayName = 'Samuel' AND STRFTIME('%Y', CreationDate_posthistory) = '2013' AND STRFTIME('%Y', Date_badges) = '2013'"
  },
  {
    "train_idx": 653,
    "db_id": "codebase_community",
    "question": "What is the owner's display name of the most popular post?",
    "query": "SELECT DisplayName FROM users WHERE Id = ( SELECT OwnerUserId FROM posts ORDER BY ViewCount DESC LIMIT 1 )",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "users_posts": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl"
        ],
        "ddl": "create table users_posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "old_new_table_mapping": {
      "posts": "users_posts",
      "users": "users_posts"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DisplayName FROM users_posts WHERE Id = ( SELECT OwnerUserId FROM users_posts ORDER BY ViewCount DESC LIMIT 1 )"
  },
  {
    "train_idx": 654,
    "db_id": "codebase_community",
    "question": "Mention the display name and location of the user who owned the excerpt post with hypothesis-testing tag.",
    "query": "SELECT T3.DisplayName, T3.Location FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T3.Id = T2.OwnerUserId WHERE T1.TagName = 'hypothesis-testing'",
    "relevant_table": {
      "tags": {
        "ddl": "create table tags( Id integer primary key, TagName text, Count integer, foreign key(ExcerptPostId) references posts(Id) integer, WikiPostId integer)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "Id",
          "TagName",
          "Count",
          "ExcerptPostId",
          "WikiPostId",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl"
        ],
        "ddl": "create table merged_table( Id integer primary key, TagName text, Count integer, foreign key(ExcerptPostId) references posts(Id) integer, WikiPostId integer, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references merged_table(Id) integer, LasActivityDate datetime, Title text, merged_table text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references merged_table(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "tags": "merged_table",
      "users": "merged_table"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DisplayName, Location FROM merged_table WHERE TagName = 'hypothesis-testing'"
  },
  {
    "train_idx": 655,
    "db_id": "codebase_community",
    "question": "Write down the related posts titles and link type IDs of the post \"What are principal component scores?\".",
    "query": "SELECT T3.Title, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId INNER JOIN posts AS T3 ON T2.RelatedPostId = T3.Id WHERE T1.Title = 'What are principal component scores?'",
    "relevant_table": {
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "postlinks": {
        "ddl": "create table postlinks( Id integer primary key, CreationDate datetime, foreign key(PostId) references posts(Id) integer, foreign key(RelatedPostId) references posts(Id) integer, LinkTypeId integer)"
      }
    },
    "new_relevant_table": {
      "mergedPostsLinks": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "CreationDate",
          "PostId",
          "RelatedPostId",
          "LinkTypeId"
        ],
        "ddl": "create table mergedPostsLinks( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, CreationDate datetime, LinkTypeId integer)"
      }
    },
    "old_new_table_mapping": {
      "posts": "mergedPostsLinks",
      "postlinks": "mergedPostsLinks"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Title, LinkTypeId FROM mergedPostsLinks WHERE Title = 'What are principal component scores?'"
  },
  {
    "train_idx": 656,
    "db_id": "codebase_community",
    "question": "Describe the display name of the parent ID for child post with the highest score.",
    "query": "SELECT DisplayName FROM users WHERE Id = ( SELECT OwnerUserId FROM posts WHERE ParentId IS NOT NULL ORDER BY Score DESC LIMIT 1 )",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "users_posts": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl"
        ],
        "ddl": "create table users_posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "old_new_table_mapping": {
      "posts": "users_posts",
      "users": "users_posts"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DisplayName FROM users_posts WHERE Id = ( SELECT OwnerUserId FROM users_posts WHERE ParentId IS NOT NULL ORDER BY Score DESC LIMIT 1 )"
  },
  {
    "train_idx": 657,
    "db_id": "codebase_community",
    "question": "Under the vote type of 8, provide the display names and websites URLs of the user who got the highest bounty amount.",
    "query": "SELECT DisplayName, WebsiteUrl FROM users WHERE Id = ( SELECT UserId FROM votes WHERE VoteTypeId = 8 ORDER BY BountyAmount DESC LIMIT 1 )",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "votes": {
        "ddl": "create table votes( Id integer primary key, foreign key(PostId) references posts(Id) integer, VoteTypeId integer, CreationDate date, foreign key(UserId) references users(Id) integer, BountyAmount integer)"
      }
    },
    "new_relevant_table": {
      "users_votes": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "VoteId",
          "PostId",
          "VoteTypeId",
          "VoteCreationDate",
          "UserId",
          "BountyAmount"
        ],
        "ddl": "create table users_votes( Id integer primary key, Reputation integer, CreationDate date, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, foreign key(PostId) references posts(Id) integer, VoteTypeId integer, BountyAmount integer)"
      }
    },
    "old_new_table_mapping": {
      "users": "users_votes",
      "votes": "users_votes"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DisplayName, WebsiteUrl FROM users_votes WHERE Id = ( SELECT UserId FROM users_votes WHERE VoteTypeId = 8 ORDER BY BountyAmount DESC LIMIT 1 )"
  },
  {
    "train_idx": 662,
    "db_id": "codebase_community",
    "question": "How many posts with votes that were created in 2011 have a bounty of 50?",
    "query": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T2.BountyAmount = 50 AND STRFTIME('%Y', T2.CreationDate) = '2011'",
    "relevant_table": {
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "votes": {
        "ddl": "create table votes( Id integer primary key, foreign key(PostId) references posts(Id) integer, VoteTypeId integer, CreationDate date, foreign key(UserId) references users(Id) integer, BountyAmount integer)"
      }
    },
    "new_relevant_table": {
      "posts_votes": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "VoteId",
          "VoteTypeId",
          "VoteCreationDate",
          "VoterId",
          "BountyAmount"
        ],
        "ddl": "create table posts_votes( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, VoteTypeId integer, BountyAmount integer)"
      }
    },
    "old_new_table_mapping": {
      "posts": "posts_votes",
      "votes": "posts_votes"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(Id) FROM posts_votes WHERE BountyAmount = 50 AND STRFTIME('%Y', VoteCreationDate) = '2011'"
  },
  {
    "train_idx": 665,
    "db_id": "codebase_community",
    "question": "What is the average monthly number of links created in 2010 for posts that have no more than 2 answers?",
    "query": "SELECT CAST(COUNT(T1.Id) AS REAL) / 12 FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.AnswerCount <= 2 AND STRFTIME('%Y', T1.CreationDate) = '2010'",
    "relevant_table": {
      "postlinks": {
        "ddl": "create table postlinks( Id integer primary key, CreationDate datetime, foreign key(PostId) references posts(Id) integer, foreign key(RelatedPostId) references posts(Id) integer, LinkTypeId integer)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "mergedPostsLinks": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "CreationDate",
          "PostId",
          "RelatedPostId",
          "LinkTypeId"
        ],
        "ddl": "create table mergedPostsLinks( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, CreationDate datetime, LinkTypeId integer)"
      }
    },
    "old_new_table_mapping": {
      "posts": "mergedPostsLinks",
      "postlinks": "mergedPostsLinks"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(COUNT(Id) AS REAL) / 12 FROM mergedPostsLinks WHERE AnswerCount <= 2 AND STRFTIME('%Y', CreationDate) = '2010'"
  },
  {
    "train_idx": 666,
    "db_id": "codebase_community",
    "question": "Among the posts that were voted by user 1465, what is the id of the most valuable post?",
    "query": "SELECT T2.Id FROM votes AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 1465 ORDER BY T2.FavoriteCount DESC LIMIT 1",
    "relevant_table": {
      "votes": {
        "ddl": "create table votes( Id integer primary key, foreign key(PostId) references posts(Id) integer, VoteTypeId integer, CreationDate date, foreign key(UserId) references users(Id) integer, BountyAmount integer)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "merged_posts_votes": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "PostId",
          "VoteTypeId",
          "CreationDate",
          "UserId",
          "BountyAmount"
        ],
        "ddl": "create table merged_posts_votes( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, VoteTypeId integer, CreationDate date, foreign key(UserId) references users(Id) integer, BountyAmount integer)"
      }
    },
    "old_new_table_mapping": {
      "posts": "merged_posts_votes",
      "votes": "merged_posts_votes"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Id FROM merged_posts_votes WHERE UserId = 1465 ORDER BY FavoriteCount DESC LIMIT 1"
  },
  {
    "train_idx": 667,
    "db_id": "codebase_community",
    "question": "What is the title of the post with the oldest post link?",
    "query": "SELECT T1.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T2.PostId = T1.Id ORDER BY T1.CreaionDate LIMIT 1",
    "relevant_table": {
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "postlinks": {
        "ddl": "create table postlinks( Id integer primary key, CreationDate datetime, foreign key(PostId) references posts(Id) integer, foreign key(RelatedPostId) references posts(Id) integer, LinkTypeId integer)"
      }
    },
    "new_relevant_table": {
      "mergedPostsLinks": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "CreationDate",
          "PostId",
          "RelatedPostId",
          "LinkTypeId"
        ],
        "ddl": "create table mergedPostsLinks( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, CreationDate datetime, LinkTypeId integer)"
      }
    },
    "old_new_table_mapping": {
      "posts": "mergedPostsLinks",
      "postlinks": "mergedPostsLinks"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Title FROM mergedPostsLinks ORDER BY CreaionDate LIMIT 1"
  },
  {
    "train_idx": 668,
    "db_id": "codebase_community",
    "question": "What is the display name of the user who acquired the highest amount of badges?",
    "query": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId GROUP BY T1.DisplayName ORDER BY COUNT(T1.Id) DESC LIMIT 1",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "badges": {
        "ddl": "create table badges( Id integer primary key, foreign key(UserId) references users(Id) integer, Name text, Date datetime)"
      }
    },
    "new_relevant_table": {
      "users_badges": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "UserId",
          "Name",
          "Date"
        ],
        "ddl": "create table users_badges( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, Name text, Date datetime)"
      }
    },
    "old_new_table_mapping": {
      "users": "users_badges",
      "badges": "users_badges"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DisplayName FROM users_badges GROUP BY DisplayName ORDER BY COUNT(Id) DESC LIMIT 1"
  },
  {
    "train_idx": 669,
    "db_id": "codebase_community",
    "question": "When did 'chl' cast its first vote in a post?",
    "query": "SELECT T2.CreationDate FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'chl' ORDER BY T2.CreationDate LIMIT 1",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "votes": {
        "ddl": "create table votes( Id integer primary key, foreign key(PostId) references posts(Id) integer, VoteTypeId integer, CreationDate date, foreign key(UserId) references users(Id) integer, BountyAmount integer)"
      }
    },
    "new_relevant_table": {
      "users_votes": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate_users",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "PostId",
          "VoteTypeId",
          "CreationDate_votes",
          "UserId",
          "BountyAmount"
        ],
        "ddl": "create table users_votes( Id integer primary key, Reputation integer, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, foreign key(PostId) references posts(Id) integer, VoteTypeId integer, BountyAmount integer)"
      }
    },
    "old_new_table_mapping": {
      "users": "users_votes",
      "votes": "users_votes"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['CreationDate_users', 'CreationDate_votes']": {
        "old_table": "['users', 'votes']",
        "old_column": "['CreationDate', 'CreationDate']"
      }
    },
    "new_gold_sql": "SELECT CreationDate_votes FROM users_votes WHERE DisplayName = 'chl' ORDER BY CreationDate_votes LIMIT 1"
  },
  {
    "train_idx": 670,
    "db_id": "codebase_community",
    "question": "What is the date when the youngest user made his or her first post?",
    "query": "SELECT T2.CreaionDate FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Age IS NOT NULL ORDER BY T1.Age, T2.CreaionDate LIMIT 1",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "users_posts": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl"
        ],
        "ddl": "create table users_posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "old_new_table_mapping": {
      "posts": "users_posts",
      "users": "users_posts"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CreaionDate FROM users_posts WHERE Age IS NOT NULL ORDER BY Age, CreaionDate LIMIT 1"
  },
  {
    "train_idx": 671,
    "db_id": "codebase_community",
    "question": "What is the display name of the user who acquired the first Autobiographer badge?",
    "query": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "badges": {
        "ddl": "create table badges( Id integer primary key, foreign key(UserId) references users(Id) integer, Name text, Date datetime)"
      }
    },
    "new_relevant_table": {
      "users_badges": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "UserId",
          "BadgeName",
          "BadgeDate"
        ],
        "ddl": "create table users_badges( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "old_new_table_mapping": {
      "badges": "users_badges",
      "users": "users_badges"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DisplayName FROM users_badges WHERE BadgeName = 'Autobiographer' ORDER BY BadgeDate LIMIT 1"
  },
  {
    "train_idx": 672,
    "db_id": "codebase_community",
    "question": "Among the users located in United Kingdom, how many users whose post have a total favorite amount of 4 or more?",
    "query": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Location = 'United Kingdom' AND T2.FavoriteCount >= 4",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "users_posts": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate_posts",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName"
        ],
        "ddl": "create table users_posts( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, PostTypeId integer, AcceptedAnswerId integer, CreaionDate_posts datetime, Score integer, ViewCount integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "users": "users_posts",
      "posts": "users_posts"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "CreaionDate_posts": {
        "old_table": "posts",
        "old_column": "CreaionDate"
      }
    },
    "new_gold_sql": "SELECT COUNT(Id) FROM users_posts WHERE Location = 'United Kingdom' AND FavoriteCount >= 4"
  },
  {
    "train_idx": 673,
    "db_id": "codebase_community",
    "question": "What is the average number of posts voted by the oldest users?",
    "query": "SELECT AVG(PostId) FROM votes WHERE UserId IN ( SELECT Id FROM users WHERE Age = ( SELECT MAX(Age) FROM users ) )",
    "relevant_table": {
      "votes": {
        "ddl": "create table votes( Id integer primary key, foreign key(PostId) references posts(Id) integer, VoteTypeId integer, CreationDate date, foreign key(UserId) references users(Id) integer, BountyAmount integer)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate_users",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "PostId",
          "VoteTypeId",
          "CreationDate_votes",
          "UserId",
          "BountyAmount"
        ],
        "ddl": "create table merged_table( Id integer primary key, Reputation integer, CreationDate_users date, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, foreign key(PostId) references posts(Id) integer, VoteTypeId integer, CreationDate_votes date, BountyAmount integer)"
      }
    },
    "old_new_table_mapping": {
      "users": "merged_table",
      "votes": "merged_table"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "CreationDate_users": {
        "old_table": "users",
        "old_column": "CreationDate"
      },
      "CreationDate_votes": {
        "old_table": "votes",
        "old_column": "CreationDate"
      }
    },
    "new_gold_sql": "SELECT AVG(PostId) FROM merged_table WHERE UserId IN ( SELECT Id FROM merged_table WHERE Age = ( SELECT MAX(Age) FROM merged_table ) )"
  },
  {
    "train_idx": 677,
    "db_id": "codebase_community",
    "question": "How many posts did Jay Stevens have in 2010?",
    "query": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T2.CreaionDate) = '2010' AND T1.DisplayName = 'Jay Stevens'",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "users_posts": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl"
        ],
        "ddl": "create table users_posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "old_new_table_mapping": {
      "posts": "users_posts",
      "users": "users_posts"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(Id) FROM users_posts WHERE STRFTIME('%Y', CreaionDate) = '2010' AND DisplayName = 'Jay Stevens'"
  },
  {
    "train_idx": 678,
    "db_id": "codebase_community",
    "question": "Which post by Harvey Motulsky has the most views? Please give the id and title of this post.",
    "query": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Harvey Motulsky' ORDER BY T2.ViewCount DESC LIMIT 1",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "users_posts": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl"
        ],
        "ddl": "create table users_posts( Id integer, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "old_new_table_mapping": {
      "posts": "users_posts",
      "users": "users_posts"
    },
    "new_table_primary_key": "'Id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Id, Title FROM users_posts WHERE DisplayName = 'Harvey Motulsky' ORDER BY ViewCount DESC LIMIT 1"
  },
  {
    "train_idx": 679,
    "db_id": "codebase_community",
    "question": "Which post has the highest score? Please give its id and title's name.",
    "query": "SELECT T1.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId ORDER BY T2.Score DESC LIMIT 1",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "users_posts": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl"
        ],
        "ddl": "create table users_posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "old_new_table_mapping": {
      "posts": "users_posts",
      "users": "users_posts"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Id, Title FROM users_posts ORDER BY Score DESC LIMIT 1"
  },
  {
    "train_idx": 680,
    "db_id": "codebase_community",
    "question": "What is the average score of Stephen Turner's posts?",
    "query": "SELECT AVG(T2.Score) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Stephen Turner'",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "users_posts": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate_posts",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName"
        ],
        "ddl": "create table users_posts( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, PostTypeId integer, AcceptedAnswerId integer, CreaionDate_posts datetime, Score integer, ViewCount integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "users": "users_posts",
      "posts": "users_posts"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "CreaionDate_posts": {
        "old_table": "posts",
        "old_column": "CreationDate"
      }
    },
    "new_gold_sql": "SELECT AVG(Score) FROM users_posts WHERE DisplayName = 'Stephen Turner'"
  },
  {
    "train_idx": 681,
    "db_id": "codebase_community",
    "question": "Please list the users' display names whose posts had over 20000 views in 2011.",
    "query": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T2.CreaionDate) = '2011' AND T2.ViewCount > 20000",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "users_posts": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl"
        ],
        "ddl": "create table users_posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "old_new_table_mapping": {
      "posts": "users_posts",
      "users": "users_posts"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DisplayName FROM users_posts WHERE STRFTIME('%Y', CreaionDate) = '2011' AND ViewCount > 20000"
  },
  {
    "train_idx": 682,
    "db_id": "codebase_community",
    "question": "Which is the most valuable post in 2010? Please give its id and the owner's display name.",
    "query": "SELECT T2.OwnerUserId, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T1.CreationDate) = '2010' ORDER BY T2.FavoriteCount DESC LIMIT 1",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate_posts",
          "Score",
          "ViewCount_posts",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName"
        ],
        "ddl": "create table merged_table( Id integer, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, PostTypeId integer, AcceptedAnswerId integer, Score integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "users": "merged_table",
      "posts": "merged_table"
    },
    "new_table_primary_key": "'Id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "'CreationDate_posts', 'ViewCount_posts'": {
        "old_table": "'posts', 'posts'",
        "old_column": "'CreationDate', 'ViewCount'"
      }
    },
    "new_gold_sql": "SELECT OwnerUserId, DisplayName FROM merged_table WHERE STRFTIME('%Y', CreationDate) = '2010' ORDER BY FavoriteCount DESC LIMIT 1"
  },
  {
    "train_idx": 683,
    "db_id": "codebase_community",
    "question": "What is the percentage of posts whose owners had a reputation of over 1000 in 2011?",
    "query": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T2.CreaionDate) = '2011' AND T1.Reputation > 1000, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "users_posts": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl"
        ],
        "ddl": "create table users_posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "old_new_table_mapping": {
      "posts": "users_posts",
      "users": "users_posts"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(IIF(STRFTIME('%Y', users_postsCreaionDate) = '2011' AND users_postsReputation > 1000, 1, 0)) AS REAL) * 100 / COUNT(users_postsId) FROM users_posts WHERE users_postsId = users_postsOwnerUserId"
  },
  {
    "train_idx": 685,
    "db_id": "codebase_community",
    "question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time.",
    "query": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'",
    "relevant_table": {
      "posthistory": {
        "ddl": "create table posthistory( Id integer primary key, PostHistoryTypeId integer, foreign key(PostId) references posts(Id) integer, RevisionGUID text, CreationDate datetime, foreign key(UserId) references users(Id) integer, Text text, Comment text, UserDisplayName text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "new_relevant_table": {
      "mergedTable": {
        "columns": [
          "Id",
          "PostHistoryTypeId",
          "PostId",
          "RevisionGUID",
          "CreationDate_posthistory",
          "UserId_posthistory",
          "Text",
          "Comment",
          "UserDisplayName",
          "Reputation",
          "CreationDate_users",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl"
        ],
        "ddl": "create table mergedTable( Id integer primary key, PostHistoryTypeId integer, foreign key(PostId) references posts(Id) integer, RevisionGUID text, Text text, Comment text, UserDisplayName text, Reputation integer, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references mergedTable(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references mergedTable(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "posthistory": "mergedTable",
      "users": "mergedTable"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['CreationDate_posthistory', 'UserId_posthistory']": {
        "old_table": "['posthistory', 'posthistory']",
        "old_column": "['CreationDate', 'UserId']"
      }
    },
    "new_gold_sql": "SELECT ViewCount, DisplayName FROM mergedTable WHERE Text = 'Computer Game Datasets'"
  },
  {
    "train_idx": 687,
    "db_id": "codebase_community",
    "question": "How many comments were added to the post with the highest score?",
    "query": "SELECT COUNT(T2.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId GROUP BY T1.Id ORDER BY SUM(T1.Score) DESC LIMIT 1",
    "relevant_table": {
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "comments": {
        "ddl": "create table comments( Id integer primary key, foreign key(PostId) references posts(Id) integer, Score integer, Text text, CreationDate datetime, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      }
    },
    "new_relevant_table": {
      "posts_comments": {
        "columns": [
          "Id",
          "PostId",
          "Score_comments",
          "Text",
          "CreationDate_comments",
          "UserId_comments",
          "UserDisplayName",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate_posts",
          "Score_posts",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName"
        ],
        "ddl": "create table posts_comments( Id integer primary key, Text text, UserDisplayName text, PostTypeId integer, AcceptedAnswerId integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "comments": "posts_comments",
      "posts": "posts_comments"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['Score_comments', 'CreationDate_comments']": {
        "old_table": "['comments', 'posts']",
        "old_column": "['Score', 'CreationDate']"
      }
    },
    "new_gold_sql": "SELECT COUNT(Id) FROM posts_comments GROUP BY Id ORDER BY SUM(Score_posts) DESC LIMIT 1"
  },
  {
    "train_idx": 689,
    "db_id": "codebase_community",
    "question": "Identify the display name and location of the user, who was the last to edit the post with ID 183.",
    "query": "SELECT T2.DisplayName, T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Id = 183 ORDER BY T1.LastEditDate DESC LIMIT 1",
    "relevant_table": {
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate_posts",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName"
        ],
        "ddl": "create table merged_table( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, PostTypeId integer, AcceptedAnswerId integer, CreaionDate_posts datetime, Score integer, ViewCount integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "users": "merged_table",
      "posts": "merged_table"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "CreaionDate_posts": {
        "old_table": "posts",
        "old_column": "CreaionDate"
      }
    },
    "new_gold_sql": "SELECT DisplayName, Location FROM merged_table WHERE Id = 183 ORDER BY LastEditDate DESC LIMIT 1"
  },
  {
    "train_idx": 690,
    "db_id": "codebase_community",
    "question": "Identify the latest badge awarded to the user with the display name Emmett.",
    "query": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1",
    "relevant_table": {
      "badges": {
        "ddl": "create table badges( Id integer primary key, foreign key(UserId) references users(Id) integer, Name text, Date datetime)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "new_relevant_table": {
      "users_badges": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "BadgeId",
          "UserId",
          "Name",
          "Date"
        ],
        "ddl": "create table users_badges( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, Name text, Date datetime)"
      }
    },
    "old_new_table_mapping": {
      "users": "users_badges",
      "badges": "users_badges"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Name FROM users_badges WHERE DisplayName = 'Emmett' ORDER BY Date DESC LIMIT 1"
  },
  {
    "train_idx": 692,
    "db_id": "codebase_community",
    "question": "How long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created.",
    "query": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'",
    "relevant_table": {
      "badges": {
        "ddl": "create table badges( Id integer primary key, foreign key(UserId) references users(Id) integer, Name text, Date datetime)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "new_relevant_table": {
      "users_badges": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "BadgeId",
          "UserId",
          "Name",
          "Date"
        ],
        "ddl": "create table users_badges( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, Name text, Date datetime)"
      }
    },
    "old_new_table_mapping": {
      "users": "users_badges",
      "badges": "users_badges"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Date - CreationDate FROM users_badges WHERE DisplayName = 'Zolomon'"
  },
  {
    "train_idx": 693,
    "db_id": "codebase_community",
    "question": "Identify the number of posts and comments left by the user, who has the latest created user account.",
    "query": "SELECT COUNT(T2.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T3.PostId = T2.Id ORDER BY T1.CreationDate DESC LIMIT 1",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "comments": {
        "ddl": "create table comments( Id integer primary key, foreign key(PostId) references posts(Id) integer, Score integer, Text text, CreationDate datetime, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      }
    },
    "new_relevant_table": {
      "users_posts": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate_posts",
          "Score",
          "ViewCount_posts",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName"
        ],
        "ddl": "create table users_posts( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, PostTypeId integer, AcceptedAnswerId integer, Score integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "comments": {
        "ddl": "create table comments( Id integer primary key, foreign key(PostId) references users_posts(Id) integer, Score integer, Text text, CreationDate datetime, foreign key(UserId) references users_posts(Id) integer, UserDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "users": "users_posts",
      "posts": "users_posts"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['CreaionDate_posts', 'ViewCount_posts']": {
        "old_table": "['posts', 'posts']",
        "old_column": "['CreationDate', 'ViewCount']"
      }
    },
    "new_gold_sql": "SELECT COUNT(T2Id) FROM users_posts ORDER BY CreationDate DESC LIMIT 1"
  },
  {
    "train_idx": 694,
    "db_id": "codebase_community",
    "question": "Provide the text of the latest 10 comments to the post with the title 'Analysing wind data with R' and the display name of the user who left it.",
    "query": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Analysing wind data with R' ORDER BY T1.CreationDate DESC LIMIT 10",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      },
      "comments": {
        "ddl": "create table comments( Id integer primary key, foreign key(PostId) references posts(Id) integer, Score integer, Text text, CreationDate datetime, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      }
    },
    "new_relevant_table": {
      "users_comments": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "Id_comments",
          "PostId",
          "Score",
          "Text_comments",
          "CreationDate_comments",
          "UserId",
          "UserDisplayName"
        ],
        "ddl": "create table users_comments( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, foreign key(PostId) references posts(Id) integer, Score integer, UserDisplayName text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users_comments(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users_comments(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "users": "users_comments",
      "comments": "users_comments"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Text_comments, DisplayName FROM users_comments WHERE Title = 'Analysing wind data with R' ORDER BY CreationDate DESC LIMIT 10"
  },
  {
    "train_idx": 701,
    "db_id": "codebase_community",
    "question": "Among all the posts posted by the most influential user, identify the percentage with a score above 50.",
    "query": "SELECT CAST(SUM(CASE WHEN T2.Score > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM users T1 INNER JOIN posts T2 ON T1.Id = T2.OwnerUserId INNER JOIN ( SELECT MAX(Reputation) AS max_reputation FROM users ) T3 ON T1.Reputation = T3.max_reputation",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "users_posts": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl"
        ],
        "ddl": "create table users_posts( Id integer, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "old_new_table_mapping": {
      "posts": "users_posts",
      "users": "users_posts"
    },
    "new_table_primary_key": "'Id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(CASE WHEN users_posts.Score > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(users_posts.Id) FROM users_posts INNER JOIN ( SELECT MAX(Reputation) AS max_reputation FROM users_posts ) T3 ON users_posts.Reputation = T3.max_reputation"
  },
  {
    "train_idx": 705,
    "db_id": "codebase_community",
    "question": "Give the user's reputation and up vote number of the user that commented \"fine, you win :)\".",
    "query": "SELECT T2.Reputation, T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'fine, you win :)'",
    "relevant_table": {
      "comments": {
        "ddl": "create table comments( Id integer primary key, foreign key(PostId) references posts(Id) integer, Score integer, Text text, CreationDate datetime, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "new_relevant_table": {
      "comments_users": {
        "columns": [
          "Id",
          "PostId",
          "Score",
          "CommentText",
          "CommentCreationDate",
          "UserId",
          "UserDisplayName",
          "Reputation",
          "UserCreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl"
        ],
        "ddl": "create table comments_users( Id integer primary key, foreign key(PostId) references posts(Id) integer, Score integer, UserDisplayName text, Reputation integer, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "old_new_table_mapping": {
      "comments": "comments_users",
      "users": "comments_users"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['CommentText', 'CommentCreationDate']": {
        "old_table": "['comments', 'users']",
        "old_column": "['Text', 'CreationDate']"
      }
    },
    "new_gold_sql": "SELECT Reputation, UpVotes FROM comments_users WHERE CommentText = 'fine, you win :)'"
  },
  {
    "train_idx": 706,
    "db_id": "codebase_community",
    "question": "Give the texts commented on the post about linear regression.",
    "query": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title LIKE '%linear regression%'",
    "relevant_table": {
      "comments": {
        "ddl": "create table comments( Id integer primary key, foreign key(PostId) references posts(Id) integer, Score integer, Text text, CreationDate datetime, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "comments_posts": {
        "columns": [
          "Id",
          "PostId_comments",
          "Score_comments",
          "Text",
          "CreationDate_comments",
          "UserId_comments",
          "UserDisplayName",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate_posts",
          "Score_posts",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName"
        ],
        "ddl": "create table comments_posts( Id integer primary key, Text text, UserDisplayName text, PostTypeId integer, AcceptedAnswerId integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "comments": "comments_posts",
      "posts": "comments_posts"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['Score_comments', 'CreationDate_comments', 'Score_posts', 'CreaionDate_posts']": {
        "old_table": "['comments', 'posts']",
        "old_column": "['Score', 'CreationDate']"
      }
    },
    "new_gold_sql": "SELECT Text FROM comments_posts WHERE Title LIKE '%linear regression%'"
  },
  {
    "train_idx": 707,
    "db_id": "codebase_community",
    "question": "Among the posts with views ranging from 100 to 150, what is the comment with the highest score?",
    "query": "SELECT Text FROM comments WHERE PostId IN ( SELECT Id FROM posts WHERE ViewCount BETWEEN 100 AND 150 ) ORDER BY Score DESC LIMIT 1",
    "relevant_table": {
      "comments": {
        "ddl": "create table comments( Id integer primary key, foreign key(PostId) references posts(Id) integer, Score integer, Text text, CreationDate datetime, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score_posts",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "Id_comments",
          "PostId",
          "Score_comments",
          "Text",
          "CreationDate_comments",
          "UserId",
          "UserDisplayName"
        ],
        "ddl": "create table merged_table( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, Text text, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "posts": "merged_table",
      "comments": "merged_table"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['Score_posts', 'Id_comments', 'CreationDate_comments']": {
        "old_table": "['posts', 'comments', 'comments']",
        "old_column": "['Score', 'Id', 'CreationDate']"
      }
    },
    "new_gold_sql": "SELECT Text FROM merged_table WHERE PostId IN ( SELECT Id FROM merged_table WHERE ViewCount BETWEEN 100 AND 150 ) ORDER BY Score_comments DESC LIMIT 1"
  },
  {
    "train_idx": 708,
    "db_id": "codebase_community",
    "question": "List the creation date and age of the user that commented with webiste.",
    "query": "SELECT T2.CreationDate, T2.Age FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.text LIKE '%http://%'",
    "relevant_table": {
      "comments": {
        "ddl": "create table comments( Id integer primary key, foreign key(PostId) references posts(Id) integer, Score integer, Text text, CreationDate datetime, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "new_relevant_table": {
      "users_comments": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate_users",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "Id_comments",
          "PostId",
          "Score",
          "Text",
          "CreationDate_comments",
          "UserId",
          "UserDisplayName"
        ],
        "ddl": "create table users_comments( Id integer primary key, Reputation integer, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, foreign key(PostId) references posts(Id) integer, Score integer, Text text, UserDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "users": "users_comments",
      "comments": "users_comments"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "CreationDate_users, Id_comments": {
        "old_table": "users, comments",
        "old_column": "CreationDate, Id"
      }
    },
    "new_gold_sql": "SELECT CreationDate_users, Age FROM users_comments WHERE Text LIKE '%http://%'"
  },
  {
    "train_idx": 709,
    "db_id": "codebase_community",
    "question": "In comments with 0 score, how many of the posts have view count lower than 5?",
    "query": "SELECT COUNT(T1.Id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.ViewCount < 5 AND T2.Score = 0",
    "relevant_table": {
      "comments": {
        "ddl": "create table comments( Id integer primary key, foreign key(PostId) references posts(Id) integer, Score integer, Text text, CreationDate datetime, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score_posts",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "Id_comments",
          "PostId",
          "Score_comments",
          "Text",
          "CreationDate_comments",
          "UserId",
          "UserDisplayName"
        ],
        "ddl": "create table merged_table( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, Text text, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "posts": "merged_table",
      "comments": "merged_table"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['Score_posts', 'Id_comments', 'CreationDate_comments']": {
        "old_table": "['posts', 'comments', 'comments']",
        "old_column": "['Score', 'Id', 'CreationDate']"
      }
    },
    "new_gold_sql": "SELECT COUNT(Id_comments) FROM merged_table WHERE ViewCount < 5 AND Score_posts = 0"
  },
  {
    "train_idx": 710,
    "db_id": "codebase_community",
    "question": "In posts with 1 comment, how many of the comments have 0 score?",
    "query": "SELECT COUNT(T1.id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CommentCount = 1 AND T2.Score = 0",
    "relevant_table": {
      "comments": {
        "ddl": "create table comments( Id integer primary key, foreign key(PostId) references posts(Id) integer, Score integer, Text text, CreationDate datetime, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "comments_posts": {
        "columns": [
          "Id",
          "PostId",
          "Score_comments",
          "Text",
          "CreationDate_comments",
          "UserId",
          "UserDisplayName",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate_posts",
          "Score_posts",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName"
        ],
        "ddl": "create table comments_posts( Id integer primary key, Text text, foreign key(UserId) references users(Id) integer, UserDisplayName text, PostTypeId integer, AcceptedAnswerId integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "comments": "comments_posts",
      "posts": "comments_posts"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['Score_comments', 'CreationDate_comments']": {
        "old_table": "['comments', 'posts']",
        "old_column": "['Score', 'CreationDate']"
      }
    },
    "new_gold_sql": "SELECT COUNT(Id) FROM comments_posts WHERE CommentCount = 1 AND Score_posts = 0"
  },
  {
    "train_idx": 711,
    "db_id": "codebase_community",
    "question": "Among products comments with 0 score, what is the total number of users ages 40 years old?",
    "query": "SELECT COUNT(DISTINCT T1.id) FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score = 0 AND T2.Age = 40",
    "relevant_table": {
      "comments": {
        "ddl": "create table comments( Id integer primary key, foreign key(PostId) references posts(Id) integer, Score integer, Text text, CreationDate datetime, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "new_relevant_table": {
      "comments_users": {
        "columns": [
          "Id",
          "PostId",
          "Score",
          "Text",
          "CommentCreationDate",
          "UserId",
          "UserDisplayName",
          "Reputation",
          "UserCreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl"
        ],
        "ddl": "create table comments_users( Id integer primary key, foreign key(PostId) references posts(Id) integer, Score integer, Text text, CommentCreationDate datetime, UserDisplayName text, Reputation integer, UserCreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "old_new_table_mapping": {
      "comments": "comments_users",
      "users": "comments_users"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "CommentCreationDate": {
        "old_table": "comments",
        "old_column": "CreationDate"
      },
      "UserCreationDate": {
        "old_table": "users",
        "old_column": "CreationDate"
      }
    },
    "new_gold_sql": "SELECT COUNT(DISTINCT Id) FROM comments_users WHERE Score = 0 AND Age = 40"
  },
  {
    "train_idx": 712,
    "db_id": "codebase_community",
    "question": "What is the post ID and the comments commented in the post titled by \"Group differences on a five point Likert item\"?",
    "query": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Group differences on a five point Likert item'",
    "relevant_table": {
      "comments": {
        "ddl": "create table comments( Id integer primary key, foreign key(PostId) references posts(Id) integer, Score integer, Text text, CreationDate datetime, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      },
      "posts": {
        "ddl": "create table posts( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, Score integer, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, foreign key(ParentId) references posts(Id) integer, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "Id",
          "PostTypeId",
          "AcceptedAnswerId",
          "CreaionDate",
          "Score_posts",
          "ViewCount",
          "Body",
          "OwnerUserId",
          "LasActivityDate",
          "Title",
          "Tags",
          "AnswerCount",
          "CommentCount",
          "FavoriteCount",
          "LastEditorUserId",
          "LastEditDate",
          "CommunityOwnedDate",
          "ParentId",
          "ClosedDate",
          "OwnerDisplayName",
          "LastEditorDisplayName",
          "Id_comments",
          "PostId",
          "Score_comments",
          "Text",
          "CreationDate_comments",
          "UserId",
          "UserDisplayName"
        ],
        "ddl": "create table merged_table( Id integer primary key, PostTypeId integer, AcceptedAnswerId integer, CreaionDate datetime, ViewCount integer, Body text, foreign key(OwnerUserId) references users(Id) integer, LasActivityDate datetime, Title text, Tags text, AnswerCount integer, CommentCount integer, FavoriteCount integer, foreign key(LastEditorUserId) references users(Id) integer, LastEditDate datetime, CommunityOwnedDate datetime, ClosedDate datetime, OwnerDisplayName text, LastEditorDisplayName text, Text text, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "posts": "merged_table",
      "comments": "merged_table"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['Id_comments', 'Score_comments', 'CreationDate_comments']": {
        "old_table": "['comments', 'posts', 'comments']",
        "old_column": "['Id', 'Score', 'CreationDate']"
      }
    },
    "new_gold_sql": "SELECT Id, Text FROM merged_table WHERE Title = 'Group differences on a five point Likert item'"
  },
  {
    "train_idx": 713,
    "db_id": "codebase_community",
    "question": "What is the up vote number of the user that commented \"R is also lazy evaluated.\"?",
    "query": "SELECT T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'R is also lazy evaluated.'",
    "relevant_table": {
      "comments": {
        "ddl": "create table comments( Id integer primary key, foreign key(PostId) references posts(Id) integer, Score integer, Text text, CreationDate datetime, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "new_relevant_table": {
      "comments_users": {
        "columns": [
          "Id",
          "PostId",
          "Score",
          "Text",
          "CreationDate",
          "UserId",
          "UserDisplayName",
          "Reputation",
          "UserCreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl"
        ],
        "ddl": "create table comments_users( Id integer primary key, foreign key(PostId) references posts(Id) integer, Score integer, Text text, CreationDate datetime, UserDisplayName text, Reputation integer, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "old_new_table_mapping": {
      "comments": "comments_users",
      "users": "comments_users"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT UpVotes FROM comments_users WHERE Text = 'R is also lazy evaluated.'"
  },
  {
    "train_idx": 714,
    "db_id": "codebase_community",
    "question": "List the comments commented by the user with a username of Harvey Motulsky.",
    "query": "SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky'",
    "relevant_table": {
      "comments": {
        "ddl": "create table comments( Id integer primary key, foreign key(PostId) references posts(Id) integer, Score integer, Text text, CreationDate datetime, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "new_relevant_table": {
      "users_comments": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "Id_comments",
          "PostId",
          "Score",
          "Text_comments",
          "CreationDate_comments",
          "UserId",
          "UserDisplayName"
        ],
        "ddl": "create table users_comments( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, foreign key(PostId) references posts(Id) integer, Score integer, UserDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "users": "users_comments",
      "comments": "users_comments"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['Id_comments', 'CreationDate_comments', 'Text_comments']": {
        "old_table": "['comments', 'comments', 'comments']",
        "old_column": "['Id', 'CreationDate', 'Text']"
      }
    },
    "new_gold_sql": "SELECT Text_comments FROM users_comments WHERE DisplayName = 'Harvey Motulsky'"
  },
  {
    "train_idx": 715,
    "db_id": "codebase_community",
    "question": "In comments with score between 1 to 5, list down the display names of the users with 0 down votes.",
    "query": "SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score BETWEEN 1 AND 5 AND T2.DownVotes = 0",
    "relevant_table": {
      "comments": {
        "ddl": "create table comments( Id integer primary key, foreign key(PostId) references posts(Id) integer, Score integer, Text text, CreationDate datetime, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      },
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "new_relevant_table": {
      "comments_users": {
        "columns": [
          "Id",
          "PostId",
          "Score",
          "Text",
          "CommentCreationDate",
          "UserId",
          "UserDisplayName",
          "Reputation",
          "UserCreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl"
        ],
        "ddl": "create table comments_users( Id integer primary key, foreign key(PostId) references posts(Id) integer, Score integer, Text text, CommentCreationDate datetime, UserDisplayName text, Reputation integer, UserCreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      }
    },
    "old_new_table_mapping": {
      "comments": "comments_users",
      "users": "comments_users"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "CommentCreationDate": {
        "old_table": "comments",
        "old_column": "CreationDate"
      },
      "UserCreationDate": {
        "old_table": "users",
        "old_column": "CreationDate"
      }
    },
    "new_gold_sql": "SELECT DisplayName FROM comments_users WHERE Score BETWEEN 1 AND 5 AND DownVotes = 0"
  },
  {
    "train_idx": 716,
    "db_id": "codebase_community",
    "question": "Among the comments with scores between 5 to 10, what is the percentage of the users with 0 up votes?",
    "query": "SELECT CAST(SUM(IIF(T1.UpVotes = 0, 1, 0)) AS REAL) * 100/ COUNT(T1.Id) AS per FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Score BETWEEN 5 AND 10",
    "relevant_table": {
      "users": {
        "ddl": "create table users( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text)"
      },
      "comments": {
        "ddl": "create table comments( Id integer primary key, foreign key(PostId) references posts(Id) integer, Score integer, Text text, CreationDate datetime, foreign key(UserId) references users(Id) integer, UserDisplayName text)"
      }
    },
    "new_relevant_table": {
      "users_comments": {
        "columns": [
          "Id",
          "Reputation",
          "CreationDate",
          "DisplayName",
          "LastAccessDate",
          "WebsiteUrl",
          "Location",
          "AboutMe",
          "Views",
          "UpVotes",
          "DownVotes",
          "AccountId",
          "Age",
          "ProfileImageUrl",
          "CommentId",
          "PostId",
          "Score",
          "Text",
          "CommentCreationDate",
          "UserId",
          "UserDisplayName"
        ],
        "ddl": "create table users_comments( Id integer primary key, Reputation integer, CreationDate datetime, DisplayName text, LastAccessDate datetime, WebsiteUrl text, Location text, AboutMe text, Views integer, UpVotes integer, DownVotes integer, AccountId integer, Age integer, ProfileImageUrl text, CommentId integer, foreign key(PostId) references posts(Id) integer, Score integer, Text text, CommentCreationDate datetime, UserDisplayName text)"
      }
    },
    "old_new_table_mapping": {
      "users": "users_comments",
      "comments": "users_comments"
    },
    "new_table_primary_key": "Id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "CommentId": {
        "old_table": "comments",
        "old_column": "Id"
      },
      "CommentCreationDate": {
        "old_table": "comments",
        "old_column": "CreationDate"
      }
    },
    "new_gold_sql": "SELECT CAST(SUM(IIF(users_commentsUpVotes = 0, 1, 0)) AS REAL) * 100/ COUNT(users_commentsId) AS per FROM users_comments WHERE users_commentsScore BETWEEN 5 AND 10"
  },
  {
    "train_idx": 717,
    "db_id": "superhero",
    "question": "Please list all the superpowers of 3-D Man.",
    "query": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = '3-D Man'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "hero_power": {
        "ddl": "create table hero_power( foreign key(hero_id) references superhero(id) integer, foreign key(power_id) references superpower(id) integer)"
      },
      "superpower": {
        "ddl": "create table superpower( id integer primary key, power_name text)"
      }
    },
    "new_relevant_table": {
      "superhero_power": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "power_id",
          "power_name"
        ],
        "ddl": "create table superhero_power( id integer, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, power_name text)"
      },
      "hero_power": {
        "ddl": "create table hero_power( foreign key(hero_id) references superhero_power(id) integer, foreign key(power_id) references superhero_power(id) integer)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_power",
      "superpower": "superhero_power"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT power_name FROM superhero_power WHERE superhero_name = '3-D Man'"
  },
  {
    "train_idx": 718,
    "db_id": "superhero",
    "question": "How many superheroes have the super power of \"Super Strength\"?",
    "query": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Super Strength'",
    "relevant_table": {
      "hero_power": {
        "ddl": "create table hero_power( foreign key(hero_id) references superhero(id) integer, foreign key(power_id) references superpower(id) integer)"
      },
      "superpower": {
        "ddl": "create table superpower( id integer primary key, power_name text)"
      }
    },
    "new_relevant_table": {
      "hero_superpower": {
        "columns": [
          "id",
          "power_name",
          "hero_id",
          "power_id"
        ],
        "ddl": "create table hero_superpower( id integer, power_name text, foreign key(hero_id) references superhero(id) integer)"
      }
    },
    "old_new_table_mapping": {
      "superpower": "hero_superpower",
      "hero_power": "hero_superpower"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(hero_id) FROM hero_superpower WHERE power_name = 'Super Strength'"
  },
  {
    "train_idx": 719,
    "db_id": "superhero",
    "question": "Among the superheroes with the super power of \"Super Strength\", how many of them have a height of over 200cm?",
    "query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "hero_power": {
        "ddl": "create table hero_power( foreign key(hero_id) references superhero(id) integer, foreign key(power_id) references superpower(id) integer)"
      },
      "superpower": {
        "ddl": "create table superpower( id integer primary key, power_name text)"
      }
    },
    "new_relevant_table": {
      "super_hero_power": {
        "columns": [
          "id",
          "hero_id",
          "power_id",
          "power_name"
        ],
        "ddl": "create table super_hero_power( id integer, foreign key(hero_id) references superhero(id) integer, power_name text)"
      },
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      }
    },
    "old_new_table_mapping": {
      "hero_power": "super_hero_power",
      "superpower": "super_hero_power"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(id) FROM super_hero_power WHERE power_name = 'Super Strength' AND hero_id > 200"
  },
  {
    "train_idx": 720,
    "db_id": "superhero",
    "question": "Please list the full names of all the superheroes with over 15 super powers.",
    "query": "SELECT DISTINCT T1.full_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.full_name HAVING COUNT(T2.power_id) > 15",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "hero_power": {
        "ddl": "create table hero_power( foreign key(hero_id) references superhero(id) integer, foreign key(power_id) references superpower(id) integer)"
      }
    },
    "new_relevant_table": {
      "super_hero_power": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "hero_id",
          "power_id"
        ],
        "ddl": "create table super_hero_power( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, foreign key(power_id) references superpower(id) integer)"
      }
    },
    "old_new_table_mapping": {
      "hero_power": "super_hero_power",
      "superhero": "super_hero_power"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT super_hero_powerfull_name FROM super_hero_power GROUP BY super_hero_powerfull_name HAVING COUNT(super_hero_powerpower_id) > 15"
  },
  {
    "train_idx": 721,
    "db_id": "superhero",
    "question": "How many superheroes have blue eyes?",
    "query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "colour": {
        "ddl": "create table colour( id integer primary key, colour text)"
      }
    },
    "new_relevant_table": {
      "superhero_colour": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "colour_id",
          "colour"
        ],
        "ddl": "create table superhero_colour( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, colour text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_colour",
      "colour": "superhero_colour"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(id) FROM superhero_colour WHERE colour = 'Blue'"
  },
  {
    "train_idx": 722,
    "db_id": "superhero",
    "question": "What is the colour of Apocalypse's skin?",
    "query": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "colour": {
        "ddl": "create table colour( id integer primary key, colour text)"
      }
    },
    "new_relevant_table": {
      "superhero_colour": {
        "columns": [
          "id",
          "colour",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg"
        ],
        "ddl": "create table superhero_colour( id integer primary key, colour text, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      }
    },
    "old_new_table_mapping": {
      "colour": "superhero_colour",
      "superhero": "superhero_colour"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT colour FROM superhero_colour WHERE superhero_name = 'Apocalypse'"
  },
  {
    "train_idx": 723,
    "db_id": "superhero",
    "question": "Among the superheroes with blue eyes, how many of them have the super power of \"Agility\"?",
    "query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN colour AS T4 ON T1.eye_colour_id = T4.id WHERE T3.power_name = 'Agility' AND T4.colour = 'Blue'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "hero_power": {
        "ddl": "create table hero_power( foreign key(hero_id) references superhero(id) integer, foreign key(power_id) references superpower(id) integer)"
      },
      "superpower": {
        "ddl": "create table superpower( id integer primary key, power_name text)"
      },
      "colour": {
        "ddl": "create table colour( id integer primary key, colour text)"
      }
    },
    "new_relevant_table": {
      "superhero_colour": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "colour_id",
          "colour"
        ],
        "ddl": "create table superhero_colour( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, colour text)"
      },
      "hero_power": {
        "ddl": "create table hero_power( foreign key(hero_id) references superhero_colour(id) integer, foreign key(power_id) references superpower(id) integer)"
      },
      "superpower": {
        "ddl": "create table superpower( id integer primary key, power_name text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_colour",
      "colour": "superhero_colour"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(id) FROM superhero_colour WHERE power_name = 'Agility' AND colour = 'Blue'"
  },
  {
    "train_idx": 724,
    "db_id": "superhero",
    "question": "Please list the superhero names of all the superheroes that have blue eyes and blond hair.",
    "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "colour": {
        "ddl": "create table colour( id integer primary key, colour text)"
      }
    },
    "new_relevant_table": {
      "superhero_colour": {
        "columns": [
          "id",
          "colour",
          "superhero_id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg"
        ],
        "ddl": "create table superhero_colour( id integer primary key, colour text, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      }
    },
    "old_new_table_mapping": {
      "colour": "superhero_colour",
      "superhero": "superhero_colour"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT superhero_name FROM superhero_colour WHERE eye_colour_id = 'Blue' AND hair_colour_id = 'Blond'"
  },
  {
    "train_idx": 725,
    "db_id": "superhero",
    "question": "How many superheroes are published by Marvel Comics?",
    "query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "publisher": {
        "ddl": "create table publisher( id integer primary key, publisher_name text)"
      }
    },
    "new_relevant_table": {
      "superhero_publisher": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "publisher_id_2",
          "publisher_name"
        ],
        "ddl": "create table superhero_publisher( id integer, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, publisher_name text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_publisher",
      "publisher": "superhero_publisher"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "'publisher_id_2'": {
        "old_table": "'publisher'",
        "old_column": "'id'"
      }
    },
    "new_gold_sql": "SELECT COUNT(id) FROM superhero_publisher WHERE publisher_name = 'Marvel Comics'"
  },
  {
    "train_idx": 726,
    "db_id": "superhero",
    "question": "Rank heroes published by Marvel Comics by their height in descending order.",
    "query": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "publisher": {
        "ddl": "create table publisher( id integer primary key, publisher_name text)"
      }
    },
    "new_relevant_table": {
      "superhero_publisher": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "publisher_name"
        ],
        "ddl": "create table superhero_publisher( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, publisher_name text)"
      }
    },
    "old_new_table_mapping": {
      "publisher": "superhero_publisher",
      "superhero": "superhero_publisher"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero_publisher WHERE publisher_name = 'Marvel Comics'"
  },
  {
    "train_idx": 727,
    "db_id": "superhero",
    "question": "Who is the publisher of Sauron?",
    "query": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "publisher": {
        "ddl": "create table publisher( id integer primary key, publisher_name text)"
      }
    },
    "new_relevant_table": {
      "superhero_publisher": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "publisher_name"
        ],
        "ddl": "create table superhero_publisher( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, publisher_name text)"
      }
    },
    "old_new_table_mapping": {
      "publisher": "superhero_publisher",
      "superhero": "superhero_publisher"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT publisher_name FROM superhero_publisher WHERE superhero_name = 'Sauron'"
  },
  {
    "train_idx": 728,
    "db_id": "superhero",
    "question": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color.",
    "query": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "colour": {
        "ddl": "create table colour( id integer primary key, colour text)"
      },
      "publisher": {
        "ddl": "create table publisher( id integer primary key, publisher_name text)"
      }
    },
    "new_relevant_table": {
      "SuperheroPublisher": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "publisher_name"
        ],
        "ddl": "create table SuperheroPublisher( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, publisher_name text)"
      },
      "colour": {
        "ddl": "create table colour( id integer primary key, colour text)"
      }
    },
    "old_new_table_mapping": {
      "publisher": "SuperheroPublisher",
      "superhero": "SuperheroPublisher"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT colourcolour AS EyeColor, COUNT(SuperheroPublisherid) AS Count, RANK() OVER (ORDER BY COUNT(SuperheroPublisherid) DESC) AS PopularityRank FROM SuperheroPublisher INNER JOIN colour ON SuperheroPublishereye_colour_id = colourid WHERE SuperheroPublisherpublisher_name = 'Marvel Comics' GROUP BY colourcolour"
  },
  {
    "train_idx": 729,
    "db_id": "superhero",
    "question": "What is the average height of the superheroes from Marvel Comics?",
    "query": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "publisher": {
        "ddl": "create table publisher( id integer primary key, publisher_name text)"
      }
    },
    "new_relevant_table": {
      "SuperheroPublisher": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "publisher_name"
        ],
        "ddl": "create table SuperheroPublisher( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, publisher_name text)"
      }
    },
    "old_new_table_mapping": {
      "publisher": "SuperheroPublisher",
      "superhero": "SuperheroPublisher"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT AVG(SuperheroPublisherheight_cm) FROM SuperheroPublisher WHERE SuperheroPublisherpublisher_name = 'Marvel Comics'"
  },
  {
    "train_idx": 730,
    "db_id": "superhero",
    "question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "query": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "hero_power": {
        "ddl": "create table hero_power( foreign key(hero_id) references superhero(id) integer, foreign key(power_id) references superpower(id) integer)"
      },
      "superpower": {
        "ddl": "create table superpower( id integer primary key, power_name text)"
      },
      "publisher": {
        "ddl": "create table publisher( id integer primary key, publisher_name text)"
      }
    },
    "new_relevant_table": {
      "superhero_publisher": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "publisher_name"
        ],
        "ddl": "create table superhero_publisher( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, publisher_name text)"
      },
      "hero_power": {
        "ddl": "create table hero_power( foreign key(hero_id) references superhero_publisher(id) integer, foreign key(power_id) references superpower(id) integer)"
      },
      "superpower": {
        "ddl": "create table superpower( id integer primary key, power_name text)"
      }
    },
    "old_new_table_mapping": {
      "publisher": "superhero_publisher",
      "superhero": "superhero_publisher"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT superhero_name FROM superhero_publisher WHERE EXISTS (SELECT 1 FROM hero_power AS T2 WHERE power_name = 'Super Strength' AND id = hero_id) AND EXISTS (SELECT 1 FROM superhero_publisher WHERE publisher_name = 'Marvel Comics' AND publisher_id = id)"
  },
  {
    "train_idx": 731,
    "db_id": "superhero",
    "question": "How many superheroes did DC Comics publish?",
    "query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "publisher": {
        "ddl": "create table publisher( id integer primary key, publisher_name text)"
      }
    },
    "new_relevant_table": {
      "superhero_publisher": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "publisher_name"
        ],
        "ddl": "create table superhero_publisher( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, publisher_name text)"
      }
    },
    "old_new_table_mapping": {
      "publisher": "superhero_publisher",
      "superhero": "superhero_publisher"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(id) FROM superhero_publisher WHERE publisher_name = 'DC Comics'"
  },
  {
    "train_idx": 732,
    "db_id": "superhero",
    "question": "Which publisher published the slowest superhero?",
    "query": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Speed' ORDER BY T3.attribute_value LIMIT 1",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "publisher": {
        "ddl": "create table publisher( id integer primary key, publisher_name text)"
      },
      "hero_attribute": {
        "ddl": "create table hero_attribute( foreign key(hero_id) references superhero(id) integer, foreign key(attribute_id) references attribute(id) integer, attribute_value integer)"
      },
      "attribute": {
        "ddl": "create table attribute( id integer primary key, attribute_name text)"
      }
    },
    "new_relevant_table": {
      "hero_attribute_detail": {
        "columns": [
          "id",
          "hero_id",
          "attribute_id",
          "attribute_value",
          "attribute_name"
        ],
        "ddl": "create table hero_attribute_detail( id integer, foreign key(hero_id) references superhero(id) integer, attribute_value integer, attribute_name text)"
      },
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "publisher": {
        "ddl": "create table publisher( id integer primary key, publisher_name text)"
      }
    },
    "old_new_table_mapping": {
      "hero_attribute": "hero_attribute_detail",
      "attribute": "hero_attribute_detail"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT publisher_name FROM superhero WHERE attribute_name = 'Speed' ORDER BY attribute_value LIMIT 1"
  },
  {
    "train_idx": 733,
    "db_id": "superhero",
    "question": "How many gold-eyed superheroes did Marvel Comics publish?",
    "query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.colour = 'Gold'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "publisher": {
        "ddl": "create table publisher( id integer primary key, publisher_name text)"
      },
      "colour": {
        "ddl": "create table colour( id integer primary key, colour text)"
      }
    },
    "new_relevant_table": {
      "SuperheroPublisher": {
        "columns": [
          "id",
          "publisher_name",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg"
        ],
        "ddl": "create table SuperheroPublisher( id integer primary key, publisher_name text, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "colour": {
        "ddl": "create table colour( id integer primary key, colour text)"
      }
    },
    "old_new_table_mapping": {
      "publisher": "SuperheroPublisher",
      "superhero": "SuperheroPublisher"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(id) FROM SuperheroPublisher WHERE publisher_name = 'Marvel Comics' AND colour = 'Gold'"
  },
  {
    "train_idx": 734,
    "db_id": "superhero",
    "question": "What is the publisher's name of Blue Beetle II?",
    "query": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "publisher": {
        "ddl": "create table publisher( id integer primary key, publisher_name text)"
      }
    },
    "new_relevant_table": {
      "superhero_publisher": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "publisher_name"
        ],
        "ddl": "create table superhero_publisher( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, publisher_name text)"
      }
    },
    "old_new_table_mapping": {
      "publisher": "superhero_publisher",
      "superhero": "superhero_publisher"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT publisher_name FROM superhero_publisher WHERE superhero_name = 'Blue Beetle II'"
  },
  {
    "train_idx": 735,
    "db_id": "superhero",
    "question": "How many superheroes with blonde hair are there?",
    "query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id WHERE T2.colour = 'Blond'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "colour": {
        "ddl": "create table colour( id integer primary key, colour text)"
      }
    },
    "new_relevant_table": {
      "superhero_colour": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "colour_id",
          "colour"
        ],
        "ddl": "create table superhero_colour( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, colour text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_colour",
      "colour": "superhero_colour"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(id) FROM superhero_colour WHERE colour = 'Blond' AND hair_colour_id = colour_id"
  },
  {
    "train_idx": 736,
    "db_id": "superhero",
    "question": "Who is the dumbest superhero?",
    "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value LIMIT 1",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "hero_attribute": {
        "ddl": "create table hero_attribute( foreign key(hero_id) references superhero(id) integer, foreign key(attribute_id) references attribute(id) integer, attribute_value integer)"
      },
      "attribute": {
        "ddl": "create table attribute( id integer primary key, attribute_name text)"
      }
    },
    "new_relevant_table": {
      "superhero_attributes": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "hero_id",
          "attribute_id",
          "attribute_value"
        ],
        "ddl": "create table superhero_attributes( id integer, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, foreign key(attribute_id) references attribute(id) integer, attribute_value integer)"
      },
      "attribute": {
        "ddl": "create table attribute( id integer primary key, attribute_name text)"
      }
    },
    "old_new_table_mapping": {
      "hero_attribute": "superhero_attributes",
      "superhero": "superhero_attributes"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.superhero_name FROM superhero_attributes AS T1 WHERE T1.attribute_id IN (SELECT id FROM attribute WHERE attribute_name = 'Intelligence') ORDER BY T1.attribute_value LIMIT 1"
  },
  {
    "train_idx": 737,
    "db_id": "superhero",
    "question": "What is Copycat's race?",
    "query": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "race": {
        "ddl": "create table race( id integer primary key, race text)"
      }
    },
    "new_relevant_table": {
      "superhero_race": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "race_text"
        ],
        "ddl": "create table superhero_race( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      }
    },
    "old_new_table_mapping": {
      "race": "superhero_race",
      "superhero": "superhero_race"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT race_text FROM superhero_race WHERE superhero_name = 'Copycat'"
  },
  {
    "train_idx": 738,
    "db_id": "superhero",
    "question": "Which superheroes have a durability attribute value of less than 50?",
    "query": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_attribute AS T2 INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Durability' AND T2.attribute_value < 50 AND T1.id = T2.hero_id)",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "hero_attribute": {
        "ddl": "create table hero_attribute( foreign key(hero_id) references superhero(id) integer, foreign key(attribute_id) references attribute(id) integer, attribute_value integer)"
      },
      "attribute": {
        "ddl": "create table attribute( id integer primary key, attribute_name text)"
      }
    },
    "new_relevant_table": {
      "hero_attribute_merged": {
        "columns": [
          "id",
          "hero_id",
          "attribute_id",
          "attribute_value",
          "attribute_name"
        ],
        "ddl": "create table hero_attribute_merged( id integer, foreign key(hero_id) references superhero(id) integer, attribute_value integer, attribute_name text)"
      },
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      }
    },
    "old_new_table_mapping": {
      "hero_attribute": "hero_attribute_merged",
      "attribute": "hero_attribute_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_attribute_merged AS T2 WHERE T2.attribute_name = 'Durability' AND T2.attribute_value < 50 AND T1.id = T2.hero_id)"
  },
  {
    "train_idx": 739,
    "db_id": "superhero",
    "question": "What are the names of the superheroes with the power of death touch?",
    "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "hero_power": {
        "ddl": "create table hero_power( foreign key(hero_id) references superhero(id) integer, foreign key(power_id) references superpower(id) integer)"
      },
      "superpower": {
        "ddl": "create table superpower( id integer primary key, power_name text)"
      }
    },
    "new_relevant_table": {
      "hero_superpower": {
        "columns": [
          "id",
          "power_name",
          "hero_id",
          "power_id"
        ],
        "ddl": "create table hero_superpower( id integer, power_name text, foreign key(hero_id) references superhero(id) integer)"
      },
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      }
    },
    "old_new_table_mapping": {
      "superpower": "hero_superpower",
      "hero_power": "hero_superpower"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT superhero_name FROM superhero WHERE power_name = 'Death Touch'"
  },
  {
    "train_idx": 740,
    "db_id": "superhero",
    "question": "How many female superheroes have a strength value of 100?",
    "query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.attribute_name = 'Strength' AND T2.attribute_value = 100 AND T4.gender = 'Female'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "hero_attribute": {
        "ddl": "create table hero_attribute( foreign key(hero_id) references superhero(id) integer, foreign key(attribute_id) references attribute(id) integer, attribute_value integer)"
      },
      "attribute": {
        "ddl": "create table attribute( id integer primary key, attribute_name text)"
      },
      "gender": {
        "ddl": "create table gender( id integer primary key, gender text)"
      }
    },
    "new_relevant_table": {
      "hero_attribute_merged": {
        "columns": [
          "hero_id",
          "attribute_id",
          "attribute_value",
          "id",
          "attribute_name"
        ],
        "ddl": "create table hero_attribute_merged( foreign key(hero_id) references superhero(id) integer, attribute_value integer, id integer, attribute_name text)"
      },
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "gender": {
        "ddl": "create table gender( id integer primary key, gender text)"
      }
    },
    "old_new_table_mapping": {
      "hero_attribute": "hero_attribute_merged",
      "attribute": "hero_attribute_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(id) FROM superhero WHERE attribute_name = 'Strength' AND attribute_value = 100 AND gender = 'Female'"
  },
  {
    "train_idx": 741,
    "db_id": "superhero",
    "question": "What is the name of the superhero that has the most powers?",
    "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.superhero_name ORDER BY COUNT(T2.hero_id) DESC LIMIT 1",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "hero_power": {
        "ddl": "create table hero_power( foreign key(hero_id) references superhero(id) integer, foreign key(power_id) references superpower(id) integer)"
      }
    },
    "new_relevant_table": {
      "superhero_power": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "hero_id",
          "power_id"
        ],
        "ddl": "create table superhero_power( id integer, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, foreign key(power_id) references superpower(id) integer)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_power",
      "hero_power": "superhero_power"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT superhero_name FROM superhero_power GROUP BY superhero_name ORDER BY COUNT(hero_id) DESC LIMIT 1"
  },
  {
    "train_idx": 742,
    "db_id": "superhero",
    "question": "How many vampire superheroes are there?",
    "query": "SELECT COUNT(T1.superhero_name) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "race": {
        "ddl": "create table race( id integer primary key, race text)"
      }
    },
    "new_relevant_table": {
      "superhero_race": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "race"
        ],
        "ddl": "create table superhero_race( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, race text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_race",
      "race": "superhero_race"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(superhero_name) FROM superhero_race WHERE race = 'Vampire'"
  },
  {
    "train_idx": 743,
    "db_id": "superhero",
    "question": "What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics.",
    "query": "SELECT (CAST(COUNT(*) AS REAL) * 100 / (SELECT COUNT(*) FROM superhero)), CAST(SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T3.id = T1.alignment_id WHERE T3.alignment = 'Bad'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "publisher": {
        "ddl": "create table publisher( id integer primary key, publisher_name text)"
      },
      "alignment": {
        "ddl": "create table alignment( id integer primary key, alignment text)"
      }
    },
    "new_relevant_table": {
      "superhero_alignment": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "alignment_id_2",
          "alignment"
        ],
        "ddl": "create table superhero_alignment( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, height_cm integer, weight_kg integer, alignment text)"
      },
      "publisher": {
        "ddl": "create table publisher( id integer primary key, publisher_name text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_alignment",
      "alignment": "superhero_alignment"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT (CAST(COUNT(*) AS REAL) * 100 / (SELECT COUNT(*) FROM superhero_alignment)), CAST(SUM(CASE WHEN publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) FROM superhero_alignment WHERE alignment = 'Bad'"
  },
  {
    "train_idx": 744,
    "db_id": "superhero",
    "question": "Between DC and Marvel Comics, which publisher has published more superheroes? Find the difference in the number of superheroes they have published.",
    "query": "SELECT SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "publisher": {
        "ddl": "create table publisher( id integer primary key, publisher_name text)"
      }
    },
    "new_relevant_table": {
      "superhero_publisher": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "publisher_name"
        ],
        "ddl": "create table superhero_publisher( id integer, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, publisher_name text)"
      }
    },
    "old_new_table_mapping": {
      "publisher": "superhero_publisher",
      "superhero": "superhero_publisher"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT SUM(CASE WHEN publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN publisher_name = 'DC Comics' THEN 1 ELSE 0 END) FROM superhero_publisher"
  },
  {
    "train_idx": 748,
    "db_id": "superhero",
    "question": "What is the eye colour of superhero with superhero ID 75?",
    "query": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.id = 75",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "colour": {
        "ddl": "create table colour( id integer primary key, colour text)"
      }
    },
    "new_relevant_table": {
      "superhero_colour": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "colour_id",
          "colour"
        ],
        "ddl": "create table superhero_colour( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, colour text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_colour",
      "colour": "superhero_colour"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT colour FROM superhero_colour WHERE id = 75"
  },
  {
    "train_idx": 749,
    "db_id": "superhero",
    "question": "Provide the superpowers of the superhero called Deathlok.",
    "query": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "hero_power": {
        "ddl": "create table hero_power( foreign key(hero_id) references superhero(id) integer, foreign key(power_id) references superpower(id) integer)"
      },
      "superpower": {
        "ddl": "create table superpower( id integer primary key, power_name text)"
      }
    },
    "new_relevant_table": {
      "superhero_power": {
        "columns": [
          "id",
          "power_name",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg"
        ],
        "ddl": "create table superhero_power( id integer primary key, power_name text, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "hero_power": {
        "ddl": "create table hero_power( foreign key(hero_id) references superhero_power(id) integer, foreign key(power_id) references superhero_power(id) integer)"
      }
    },
    "old_new_table_mapping": {
      "superpower": "superhero_power",
      "superhero": "superhero_power"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT power_name FROM superhero_power WHERE superhero_name = 'Deathlok'"
  },
  {
    "train_idx": 750,
    "db_id": "superhero",
    "question": "What is the average weight of all female superheroes?",
    "query": "SELECT AVG(T1.weight_kg) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Female'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "gender": {
        "ddl": "create table gender( id integer primary key, gender text)"
      }
    },
    "new_relevant_table": {
      "superhero_gender": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "gender_id_2",
          "gender"
        ],
        "ddl": "create table superhero_gender( id integer primary key, superhero_name text, full_name text, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, gender text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_gender",
      "gender": "superhero_gender"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT AVG(weight_kg) FROM superhero_gender WHERE gender = 'Female'"
  },
  {
    "train_idx": 751,
    "db_id": "superhero",
    "question": "List down at least five superpowers of male superheroes.",
    "query": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN gender AS T4 ON T4.id = T1.gender_id WHERE T4.gender = 'Male' LIMIT 5",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "hero_power": {
        "ddl": "create table hero_power( foreign key(hero_id) references superhero(id) integer, foreign key(power_id) references superpower(id) integer)"
      },
      "superpower": {
        "ddl": "create table superpower( id integer primary key, power_name text)"
      },
      "gender": {
        "ddl": "create table gender( id integer primary key, gender text)"
      }
    },
    "new_relevant_table": {
      "hero_gender_power": {
        "columns": [
          "hero_id",
          "power_id",
          "id",
          "gender"
        ],
        "ddl": "create table hero_gender_power( foreign key(hero_id) references superhero(id) integer, foreign key(power_id) references superpower(id) integer, id integer, gender text)"
      },
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references hero_gender_power(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "superpower": {
        "ddl": "create table superpower( id integer primary key, power_name text)"
      }
    },
    "old_new_table_mapping": {
      "hero_power": "hero_gender_power",
      "gender": "hero_gender_power"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT power_name FROM hero_gender_power WHERE gender = 'Male' LIMIT 5"
  },
  {
    "train_idx": 752,
    "db_id": "superhero",
    "question": "Give the name of the alien superheroes.",
    "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "race": {
        "ddl": "create table race( id integer primary key, race text)"
      }
    },
    "new_relevant_table": {
      "superhero_race": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "race"
        ],
        "ddl": "create table superhero_race( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, race text)"
      }
    },
    "old_new_table_mapping": {
      "race": "superhero_race",
      "superhero": "superhero_race"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT superhero_name FROM superhero_race WHERE race = 'Alien'"
  },
  {
    "train_idx": 753,
    "db_id": "superhero",
    "question": "Among the superheroes with height from 170 to 190, list the names of the superheroes with no eye color.",
    "query": "SELECT DISTINCT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.height_cm BETWEEN 170 AND 190 AND T2.colour = 'No Colour'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "colour": {
        "ddl": "create table colour( id integer primary key, colour text)"
      }
    },
    "new_relevant_table": {
      "superhero_colour": {
        "columns": [
          "id",
          "colour",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg"
        ],
        "ddl": "create table superhero_colour( id integer primary key, colour text, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      }
    },
    "old_new_table_mapping": {
      "colour": "superhero_colour",
      "superhero": "superhero_colour"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT superhero_name FROM superhero_colour WHERE height_cm BETWEEN 170 AND 190 AND colour = 'No Colour'"
  },
  {
    "train_idx": 754,
    "db_id": "superhero",
    "question": "What is the superpower of hero ID 56?",
    "query": "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 56",
    "relevant_table": {
      "hero_power": {
        "ddl": "create table hero_power( foreign key(hero_id) references superhero(id) integer, foreign key(power_id) references superpower(id) integer)"
      },
      "superpower": {
        "ddl": "create table superpower( id integer primary key, power_name text)"
      }
    },
    "new_relevant_table": {
      "hero_superpower": {
        "columns": [
          "id",
          "power_name",
          "hero_id",
          "power_id"
        ],
        "ddl": "create table hero_superpower( id integer, power_name text, foreign key(hero_id) references superhero(id) integer)"
      }
    },
    "old_new_table_mapping": {
      "superpower": "hero_superpower",
      "hero_power": "hero_superpower"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT power_name FROM hero_superpower WHERE hero_id = 56"
  },
  {
    "train_idx": 755,
    "db_id": "superhero",
    "question": "List down at least five full name of Demi-God superheroes.",
    "query": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "race": {
        "ddl": "create table race( id integer primary key, race text)"
      }
    },
    "new_relevant_table": {
      "superhero_race": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "race_id_race",
          "race"
        ],
        "ddl": "create table superhero_race( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, race text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_race",
      "race": "superhero_race"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT full_name FROM superhero_race WHERE race = 'Demi-God'"
  },
  {
    "train_idx": 756,
    "db_id": "superhero",
    "question": "How many bad superheroes are there?",
    "query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Bad'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "alignment": {
        "ddl": "create table alignment( id integer primary key, alignment text)"
      }
    },
    "new_relevant_table": {
      "superhero_alignment": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "alignment_id_2",
          "alignment"
        ],
        "ddl": "create table superhero_alignment( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, height_cm integer, weight_kg integer, alignment text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_alignment",
      "alignment": "superhero_alignment"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(id) FROM superhero_alignment WHERE alignment = 'Bad'"
  },
  {
    "train_idx": 757,
    "db_id": "superhero",
    "question": "Identify the race of the superhero who weighed 169 kg.",
    "query": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 169",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "race": {
        "ddl": "create table race( id integer primary key, race text)"
      }
    },
    "new_relevant_table": {
      "superhero_race": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "race"
        ],
        "ddl": "create table superhero_race( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, race text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_race",
      "race": "superhero_race"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT race FROM superhero_race WHERE weight_kg = 169"
  },
  {
    "train_idx": 758,
    "db_id": "superhero",
    "question": "Provide the hair colour of the human superhero who is 185 cm tall.",
    "query": "SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'Human'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "race": {
        "ddl": "create table race( id integer primary key, race text)"
      },
      "colour": {
        "ddl": "create table colour( id integer primary key, colour text)"
      }
    },
    "new_relevant_table": {
      "superhero_race_colour": {
        "columns": [
          "id",
          "colour",
          "race"
        ],
        "ddl": "create table superhero_race_colour( id integer, colour text, race text)"
      },
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references superhero_race_colour(id) integer, foreign key(hair_colour_id) references superhero_race_colour(id) integer, foreign key(skin_colour_id) references superhero_race_colour(id) integer, foreign key(race_id) references superhero_race_colour(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      }
    },
    "old_new_table_mapping": {
      "colour": "superhero_race_colour",
      "race": "superhero_race_colour"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT colour FROM superhero_race_colour WHERE height_cm = 185 AND race = 'Human'"
  },
  {
    "train_idx": 759,
    "db_id": "superhero",
    "question": "What is the eye clolour of the heaviest superhero?",
    "query": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id ORDER BY T1.weight_kg DESC LIMIT 1",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "colour": {
        "ddl": "create table colour( id integer primary key, colour text)"
      }
    },
    "new_relevant_table": {
      "superhero_colour": {
        "columns": [
          "id",
          "colour",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg"
        ],
        "ddl": "create table superhero_colour( id integer primary key, colour text, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      }
    },
    "old_new_table_mapping": {
      "colour": "superhero_colour",
      "superhero": "superhero_colour"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT colour FROM superhero_colour ORDER BY weight_kg DESC LIMIT 1"
  },
  {
    "train_idx": 760,
    "db_id": "superhero",
    "question": "In superheroes with height between 150 to 180, what is the percentage of heroes published by Marvel Comics?",
    "query": "SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.height_cm BETWEEN 150 AND 180",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "publisher": {
        "ddl": "create table publisher( id integer primary key, publisher_name text)"
      }
    },
    "new_relevant_table": {
      "superhero_publisher": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "publisher_name"
        ],
        "ddl": "create table superhero_publisher( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, publisher_name text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_publisher",
      "publisher": "superhero_publisher"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(COUNT(CASE WHEN publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(id) FROM superhero_publisher WHERE height_cm BETWEEN 150 AND 180"
  },
  {
    "train_idx": 761,
    "db_id": "superhero",
    "question": "Among the male superheroes, list the super hero names of superheroes with weight greater than the 79% average weight of all superheroes.",
    "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Male' AND T1.weight_kg * 100 > ( SELECT AVG(weight_kg) FROM superhero ) * 79",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "gender": {
        "ddl": "create table gender( id integer primary key, gender text)"
      }
    },
    "new_relevant_table": {
      "superhero_gender": {
        "columns": [
          "id",
          "gender",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg"
        ],
        "ddl": "create table superhero_gender( id integer primary key, gender text, superhero_name text, full_name text, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      }
    },
    "old_new_table_mapping": {
      "gender": "superhero_gender",
      "superhero": "superhero_gender"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT superhero_name FROM superhero_gender WHERE gender = 'Male' AND weight_kg * 100 > ( SELECT AVG(weight_kg) FROM superhero_gender ) * 79"
  },
  {
    "train_idx": 762,
    "db_id": "superhero",
    "question": "Which power do superheroes have the most of?",
    "query": "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id GROUP BY T2.power_name ORDER BY COUNT(T1.hero_id) DESC LIMIT 1",
    "relevant_table": {
      "hero_power": {
        "ddl": "create table hero_power( foreign key(hero_id) references superhero(id) integer, foreign key(power_id) references superpower(id) integer)"
      },
      "superpower": {
        "ddl": "create table superpower( id integer primary key, power_name text)"
      }
    },
    "new_relevant_table": {
      "super_hero_power": {
        "columns": [
          "id",
          "power_name",
          "hero_id",
          "power_id"
        ],
        "ddl": "create table super_hero_power( id integer, power_name text, foreign key(hero_id) references superhero(id) integer)"
      }
    },
    "old_new_table_mapping": {
      "hero_power": "super_hero_power",
      "superpower": "super_hero_power"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT power_name FROM super_hero_power GROUP BY power_name ORDER BY COUNT(hero_id) DESC LIMIT 1"
  },
  {
    "train_idx": 763,
    "db_id": "superhero",
    "question": "Indicate the attribute value of superhero Abomination.",
    "query": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Abomination'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "hero_attribute": {
        "ddl": "create table hero_attribute( foreign key(hero_id) references superhero(id) integer, foreign key(attribute_id) references attribute(id) integer, attribute_value integer)"
      }
    },
    "new_relevant_table": {
      "superhero_attributes": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "hero_id",
          "attribute_id",
          "attribute_value"
        ],
        "ddl": "create table superhero_attributes( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, foreign key(attribute_id) references attribute(id) integer, attribute_value integer)"
      }
    },
    "old_new_table_mapping": {
      "hero_attribute": "superhero_attributes",
      "superhero": "superhero_attributes"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT attribute_value FROM superhero_attributes WHERE superhero_name = 'Abomination'"
  },
  {
    "train_idx": 764,
    "db_id": "superhero",
    "question": "What are the superpowers of heroes with ID 1?",
    "query": "SELECT DISTINCT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 1",
    "relevant_table": {
      "hero_power": {
        "ddl": "create table hero_power( foreign key(hero_id) references superhero(id) integer, foreign key(power_id) references superpower(id) integer)"
      },
      "superpower": {
        "ddl": "create table superpower( id integer primary key, power_name text)"
      }
    },
    "new_relevant_table": {
      "hero_superpower": {
        "columns": [
          "id",
          "power_name",
          "hero_id",
          "power_id"
        ],
        "ddl": "create table hero_superpower( id integer, power_name text, foreign key(hero_id) references superhero(id) integer)"
      }
    },
    "old_new_table_mapping": {
      "superpower": "hero_superpower",
      "hero_power": "hero_superpower"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT power_name FROM hero_superpower WHERE hero_id = 1"
  },
  {
    "train_idx": 765,
    "db_id": "superhero",
    "question": "How many heroes have stealth power?",
    "query": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Stealth'",
    "relevant_table": {
      "hero_power": {
        "ddl": "create table hero_power( foreign key(hero_id) references superhero(id) integer, foreign key(power_id) references superpower(id) integer)"
      },
      "superpower": {
        "ddl": "create table superpower( id integer primary key, power_name text)"
      }
    },
    "new_relevant_table": {
      "hero_superpower": {
        "columns": [
          "id",
          "power_name",
          "hero_id",
          "power_id"
        ],
        "ddl": "create table hero_superpower( id integer, power_name text, foreign key(hero_id) references superhero(id) integer)"
      }
    },
    "old_new_table_mapping": {
      "superpower": "hero_superpower",
      "hero_power": "hero_superpower"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(hero_id) FROM hero_superpower WHERE power_name = 'Stealth'"
  },
  {
    "train_idx": 766,
    "db_id": "superhero",
    "question": "What is the hero's full name with the highest attribute in strength?",
    "query": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "hero_attribute": {
        "ddl": "create table hero_attribute( foreign key(hero_id) references superhero(id) integer, foreign key(attribute_id) references attribute(id) integer, attribute_value integer)"
      },
      "attribute": {
        "ddl": "create table attribute( id integer primary key, attribute_name text)"
      }
    },
    "new_relevant_table": {
      "superhero_attribute": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "attribute_id",
          "attribute_name"
        ],
        "ddl": "create table superhero_attribute( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, attribute_name text)"
      },
      "hero_attribute": {
        "ddl": "create table hero_attribute( foreign key(hero_id) references superhero_attribute(id) integer, foreign key(attribute_id) references superhero_attribute(id) integer, attribute_value integer)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_attribute",
      "attribute": "superhero_attribute"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT full_name FROM superhero_attribute WHERE attribute_name = 'Strength' ORDER BY attribute_value DESC LIMIT 1"
  },
  {
    "train_idx": 767,
    "db_id": "superhero",
    "question": "What is the average of superheroes with no skin colour?",
    "query": "SELECT CAST(COUNT(*) AS REAL) / SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "colour": {
        "ddl": "create table colour( id integer primary key, colour text)"
      }
    },
    "new_relevant_table": {
      "superhero_colour": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "colour_id",
          "colour"
        ],
        "ddl": "create table superhero_colour( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, colour text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_colour",
      "colour": "superhero_colour"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(COUNT(*) AS REAL) / SUM(CASE WHEN superhero_colourcolour_id = 1 THEN 1 ELSE 0 END) FROM superhero_colour WHERE superhero_colourskin_colour_id = superhero_colourcolour_id"
  },
  {
    "train_idx": 768,
    "db_id": "superhero",
    "question": "How many superheroes were published by Dark Horse Comics?",
    "query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Dark Horse Comics'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "publisher": {
        "ddl": "create table publisher( id integer primary key, publisher_name text)"
      }
    },
    "new_relevant_table": {
      "superhero_publisher": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "publisher_name"
        ],
        "ddl": "create table superhero_publisher( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, publisher_name text)"
      }
    },
    "old_new_table_mapping": {
      "publisher": "superhero_publisher",
      "superhero": "superhero_publisher"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(id) FROM superhero_publisher WHERE publisher_name = 'Dark Horse Comics'"
  },
  {
    "train_idx": 769,
    "db_id": "superhero",
    "question": "Which superhero has the most durability published by Dark Horse Comics?",
    "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "hero_attribute": {
        "ddl": "create table hero_attribute( foreign key(hero_id) references superhero(id) integer, foreign key(attribute_id) references attribute(id) integer, attribute_value integer)"
      },
      "attribute": {
        "ddl": "create table attribute( id integer primary key, attribute_name text)"
      },
      "publisher": {
        "ddl": "create table publisher( id integer primary key, publisher_name text)"
      }
    },
    "new_relevant_table": {
      "superhero_attributes": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "hero_id",
          "attribute_id",
          "attribute_value"
        ],
        "ddl": "create table superhero_attributes( id integer, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, foreign key(attribute_id) references attribute(id) integer, attribute_value integer)"
      },
      "attribute": {
        "ddl": "create table attribute( id integer primary key, attribute_name text)"
      },
      "publisher": {
        "ddl": "create table publisher( id integer primary key, publisher_name text)"
      }
    },
    "old_new_table_mapping": {
      "hero_attribute": "superhero_attributes",
      "superhero": "superhero_attributes"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT superhero_name FROM superhero_attributes WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics') AND attribute_id IN (SELECT id FROM attribute WHERE attribute_name = 'Durability') ORDER BY attribute_value DESC LIMIT 1"
  },
  {
    "train_idx": 770,
    "db_id": "superhero",
    "question": "What is the eyes colour of Abraham Sapien?",
    "query": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "colour": {
        "ddl": "create table colour( id integer primary key, colour text)"
      }
    },
    "new_relevant_table": {
      "superhero_colour": {
        "columns": [
          "id",
          "colour",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg"
        ],
        "ddl": "create table superhero_colour( id integer primary key, colour text, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      }
    },
    "old_new_table_mapping": {
      "colour": "superhero_colour",
      "superhero": "superhero_colour"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT colour FROM superhero_colour WHERE full_name = 'Abraham Sapien'"
  },
  {
    "train_idx": 771,
    "db_id": "superhero",
    "question": "List the name of superheroes with flight power.",
    "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "hero_power": {
        "ddl": "create table hero_power( foreign key(hero_id) references superhero(id) integer, foreign key(power_id) references superpower(id) integer)"
      },
      "superpower": {
        "ddl": "create table superpower( id integer primary key, power_name text)"
      }
    },
    "new_relevant_table": {
      "superhero_power": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "hero_id",
          "power_id"
        ],
        "ddl": "create table superhero_power( id integer, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, foreign key(power_id) references superpower(id) integer)"
      },
      "superpower": {
        "ddl": "create table superpower( id integer primary key, power_name text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_power",
      "hero_power": "superhero_power"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT superhero_name FROM superhero_power WHERE power_name = 'Flight'"
  },
  {
    "train_idx": 772,
    "db_id": "superhero",
    "question": "List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics.",
    "query": "SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T2.id = T1.publisher_id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.gender = 'Female'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "publisher": {
        "ddl": "create table publisher( id integer primary key, publisher_name text)"
      },
      "gender": {
        "ddl": "create table gender( id integer primary key, gender text)"
      }
    },
    "new_relevant_table": {
      "SuperheroPublisher": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "publisher_name"
        ],
        "ddl": "create table SuperheroPublisher( id integer, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, publisher_name text)"
      },
      "gender": {
        "ddl": "create table gender( id integer primary key, gender text)"
      }
    },
    "old_new_table_mapping": {
      "publisher": "SuperheroPublisher",
      "superhero": "SuperheroPublisher"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT eye_colour_id, hair_colour_id, skin_colour_id FROM SuperheroPublisher WHERE publisher_name = 'Dark Horse Comics' AND gender = 'Female'"
  },
  {
    "train_idx": 773,
    "db_id": "superhero",
    "question": "Which superhero has the same eyes, hair and skin colour? Indicate the publisher of the superhero.",
    "query": "SELECT T1.superhero_name, T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.eye_colour_id = T1.hair_colour_id AND T1.eye_colour_id = T1.skin_colour_id",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "publisher": {
        "ddl": "create table publisher( id integer primary key, publisher_name text)"
      }
    },
    "new_relevant_table": {
      "superhero_publisher": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "publisher_name"
        ],
        "ddl": "create table superhero_publisher( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, publisher_name text)"
      }
    },
    "old_new_table_mapping": {
      "publisher": "superhero_publisher",
      "superhero": "superhero_publisher"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT superhero_name, publisher_name FROM superhero_publisher WHERE eye_colour_id = hair_colour_id AND eye_colour_id = skin_colour_id"
  },
  {
    "train_idx": 774,
    "db_id": "superhero",
    "question": "Which group does superhero A-Bomb belong to?",
    "query": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "race": {
        "ddl": "create table race( id integer primary key, race text)"
      }
    },
    "new_relevant_table": {
      "superhero_race": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "race"
        ],
        "ddl": "create table superhero_race( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, race text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_race",
      "race": "superhero_race"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT race FROM superhero_race WHERE superhero_name = 'A-Bomb'"
  },
  {
    "train_idx": 775,
    "db_id": "superhero",
    "question": "What is the percentage of blue female superheroes among all female superheroes?",
    "query": "SELECT CAST(COUNT(CASE WHEN T3.colour = 'Blue' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.gender = 'Female'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "gender": {
        "ddl": "create table gender( id integer primary key, gender text)"
      },
      "colour": {
        "ddl": "create table colour( id integer primary key, colour text)"
      }
    },
    "new_relevant_table": {
      "superhero_colour": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "colour_id",
          "colour"
        ],
        "ddl": "create table superhero_colour( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, colour text)"
      },
      "gender": {
        "ddl": "create table gender( id integer primary key, gender text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_colour",
      "colour": "superhero_colour"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(COUNT(CASE WHEN colour = 'Blue' THEN id ELSE NULL END) AS REAL) * 100 / COUNT(id) FROM superhero_colour WHERE gender = 'Female'"
  },
  {
    "train_idx": 776,
    "db_id": "superhero",
    "question": "Provide the hero name and race of Charles Chandler.",
    "query": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "race": {
        "ddl": "create table race( id integer primary key, race text)"
      }
    },
    "new_relevant_table": {
      "superhero_race": {
        "columns": [
          "id",
          "race",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg"
        ],
        "ddl": "create table superhero_race( id integer primary key, race text, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      }
    },
    "old_new_table_mapping": {
      "race": "superhero_race",
      "superhero": "superhero_race"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT superhero_name, race FROM superhero_race WHERE full_name = 'Charles Chandler'"
  },
  {
    "train_idx": 777,
    "db_id": "superhero",
    "question": "What is the gender of Agent 13 hero?",
    "query": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "gender": {
        "ddl": "create table gender( id integer primary key, gender text)"
      }
    },
    "new_relevant_table": {
      "superhero_gender": {
        "columns": [
          "id",
          "gender",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg"
        ],
        "ddl": "create table superhero_gender( id integer, gender text, superhero_name text, full_name text, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      }
    },
    "old_new_table_mapping": {
      "gender": "superhero_gender",
      "superhero": "superhero_gender"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT gender FROM superhero_gender WHERE superhero_name = 'Agent 13'"
  },
  {
    "train_idx": 778,
    "db_id": "superhero",
    "question": "Provide superheroes' names who have the adaptation power.",
    "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "hero_power": {
        "ddl": "create table hero_power( foreign key(hero_id) references superhero(id) integer, foreign key(power_id) references superpower(id) integer)"
      },
      "superpower": {
        "ddl": "create table superpower( id integer primary key, power_name text)"
      }
    },
    "new_relevant_table": {
      "superhero_power": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "hero_id",
          "power_id"
        ],
        "ddl": "create table superhero_power( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, foreign key(power_id) references superpower(id) integer)"
      },
      "superpower": {
        "ddl": "create table superpower( id integer primary key, power_name text)"
      }
    },
    "old_new_table_mapping": {
      "hero_power": "superhero_power",
      "superhero": "superhero_power"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT superhero_name FROM superhero_power WHERE power_name = 'Adaptation'"
  },
  {
    "train_idx": 779,
    "db_id": "superhero",
    "question": "How many powers does Amazo hero have?",
    "query": "SELECT COUNT(T1.power_id) FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.superhero_name = 'Amazo'",
    "relevant_table": {
      "hero_power": {
        "ddl": "create table hero_power( foreign key(hero_id) references superhero(id) integer, foreign key(power_id) references superpower(id) integer)"
      },
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      }
    },
    "new_relevant_table": {
      "super_hero_power": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "hero_id",
          "power_id"
        ],
        "ddl": "create table super_hero_power( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, foreign key(power_id) references superpower(id) integer)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "super_hero_power",
      "hero_power": "super_hero_power"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(power_id) FROM super_hero_power WHERE superhero_name = 'Amazo'"
  },
  {
    "train_idx": 780,
    "db_id": "superhero",
    "question": "List the powers of Hunter Zolomon.",
    "query": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Hunter Zolomon'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "hero_power": {
        "ddl": "create table hero_power( foreign key(hero_id) references superhero(id) integer, foreign key(power_id) references superpower(id) integer)"
      },
      "superpower": {
        "ddl": "create table superpower( id integer primary key, power_name text)"
      }
    },
    "new_relevant_table": {
      "superhero_power": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "hero_id",
          "power_id"
        ],
        "ddl": "create table superhero_power( id integer, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, foreign key(power_id) references superpower(id) integer)"
      },
      "superpower": {
        "ddl": "create table superpower( id integer primary key, power_name text)"
      }
    },
    "old_new_table_mapping": {
      "hero_power": "superhero_power",
      "superhero": "superhero_power"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT power_name FROM superhero_power WHERE full_name = 'Hunter Zolomon'"
  },
  {
    "train_idx": 781,
    "db_id": "superhero",
    "question": "Provide the heights of the heroes whose eye colours are amber.",
    "query": "SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "colour": {
        "ddl": "create table colour( id integer primary key, colour text)"
      }
    },
    "new_relevant_table": {
      "superhero_colour": {
        "columns": [
          "id",
          "colour",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg"
        ],
        "ddl": "create table superhero_colour( id integer primary key, colour text, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      }
    },
    "old_new_table_mapping": {
      "colour": "superhero_colour",
      "superhero": "superhero_colour"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.height_cm FROM superhero_colour AS T1 WHERE T1.eye_colour_id IN (SELECT id FROM superhero_colour WHERE colour = 'Amber')"
  },
  {
    "train_idx": 782,
    "db_id": "superhero",
    "question": "List the heroes' names whose eyes and hair colours are both black.",
    "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id AND T1.hair_colour_id = T2.id WHERE T2.colour = 'Black'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "colour": {
        "ddl": "create table colour( id integer primary key, colour text)"
      }
    },
    "new_relevant_table": {
      "superhero_colour": {
        "columns": [
          "id",
          "colour",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg"
        ],
        "ddl": "create table superhero_colour( id integer primary key, colour text, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      }
    },
    "old_new_table_mapping": {
      "colour": "superhero_colour",
      "superhero": "superhero_colour"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT superhero_name FROM superhero_colour WHERE eye_colour_id = hair_colour_id AND colour = 'Black'"
  },
  {
    "train_idx": 783,
    "db_id": "superhero",
    "question": "Provide the eye colours of the heroes whose skin colours are gold.",
    "query": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T3.colour = 'Gold'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "colour": {
        "ddl": "create table colour( id integer primary key, colour text)"
      }
    },
    "new_relevant_table": {
      "superhero_colour": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "colour_id",
          "colour"
        ],
        "ddl": "create table superhero_colour( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, colour text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_colour",
      "colour": "superhero_colour"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT colour FROM superhero_colour WHERE colour = 'Gold'"
  },
  {
    "train_idx": 784,
    "db_id": "superhero",
    "question": "Provide the full names of vampire heroes.",
    "query": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "race": {
        "ddl": "create table race( id integer primary key, race text)"
      }
    },
    "new_relevant_table": {
      "superhero_race": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "race"
        ],
        "ddl": "create table superhero_race( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, race text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_race",
      "race": "superhero_race"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT full_name FROM superhero_race WHERE race = 'Vampire'"
  },
  {
    "train_idx": 785,
    "db_id": "superhero",
    "question": "Describe the names of neutral alignment superheroes.",
    "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "alignment": {
        "ddl": "create table alignment( id integer primary key, alignment text)"
      }
    },
    "new_relevant_table": {
      "superhero_alignment": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "alignment_id_2",
          "alignment"
        ],
        "ddl": "create table superhero_alignment( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, height_cm integer, weight_kg integer, alignment text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_alignment",
      "alignment": "superhero_alignment"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT superhero_name FROM superhero_alignment WHERE alignment = 'Neutral'"
  },
  {
    "train_idx": 786,
    "db_id": "superhero",
    "question": "How many heroes have the highest attribute value in strength?",
    "query": "SELECT COUNT(T1.hero_id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Strength' AND T1.attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute )",
    "relevant_table": {
      "hero_attribute": {
        "ddl": "create table hero_attribute( foreign key(hero_id) references superhero(id) integer, foreign key(attribute_id) references attribute(id) integer, attribute_value integer)"
      },
      "attribute": {
        "ddl": "create table attribute( id integer primary key, attribute_name text)"
      }
    },
    "new_relevant_table": {
      "hero_attribute_merged": {
        "columns": [
          "id",
          "hero_id",
          "attribute_id",
          "attribute_name",
          "attribute_value"
        ],
        "ddl": "create table hero_attribute_merged( id integer, foreign key(hero_id) references superhero(id) integer, attribute_name text, attribute_value integer)"
      }
    },
    "old_new_table_mapping": {
      "attribute": "hero_attribute_merged",
      "hero_attribute": "hero_attribute_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(hero_id) FROM hero_attribute_merged WHERE attribute_name = 'Strength' AND attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute_merged )"
  },
  {
    "train_idx": 787,
    "db_id": "superhero",
    "question": "What are the race and alignment of Cameron Hicks?",
    "query": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Cameron Hicks'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "race": {
        "ddl": "create table race( id integer primary key, race text)"
      },
      "alignment": {
        "ddl": "create table alignment( id integer primary key, alignment text)"
      }
    },
    "new_relevant_table": {
      "superhero_race": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "race"
        ],
        "ddl": "create table superhero_race( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, race text)"
      },
      "alignment": {
        "ddl": "create table alignment( id integer primary key, alignment text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_race",
      "race": "superhero_race"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT race, alignment_id FROM superhero_race WHERE superhero_name = 'Cameron Hicks'"
  },
  {
    "train_idx": 788,
    "db_id": "superhero",
    "question": "How many percent of female heroes were published by Marvel Comics?",
    "query": "SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T3.gender = 'Female'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "publisher": {
        "ddl": "create table publisher( id integer primary key, publisher_name text)"
      },
      "gender": {
        "ddl": "create table gender( id integer primary key, gender text)"
      }
    },
    "new_relevant_table": {
      "superhero_gender": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "gender_id_2",
          "gender"
        ],
        "ddl": "create table superhero_gender( id integer primary key, superhero_name text, full_name text, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, gender_id_2 integer, gender text)"
      },
      "publisher": {
        "ddl": "create table publisher( id integer primary key, publisher_name text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_gender",
      "gender": "superhero_gender"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "gender_id_2": {
        "old_table": "gender",
        "old_column": "id"
      }
    },
    "new_gold_sql": "SELECT CAST(COUNT(CASE WHEN publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(id) FROM superhero_gender WHERE gender = 'Female'"
  },
  {
    "train_idx": 789,
    "db_id": "superhero",
    "question": "Find the average weight of the heroes who are aliens.",
    "query": "SELECT CAST(SUM(T1.weight_kg) AS REAL) / COUNT(T1.id) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "race": {
        "ddl": "create table race( id integer primary key, race text)"
      }
    },
    "new_relevant_table": {
      "superhero_race": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "race"
        ],
        "ddl": "create table superhero_race( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, race text)"
      }
    },
    "old_new_table_mapping": {
      "race": "superhero_race",
      "superhero": "superhero_race"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(weight_kg) AS REAL) / COUNT(id) FROM superhero_race WHERE race = 'Alien'"
  },
  {
    "train_idx": 792,
    "db_id": "superhero",
    "question": "What is Abomination's superpower?",
    "query": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "hero_power": {
        "ddl": "create table hero_power( foreign key(hero_id) references superhero(id) integer, foreign key(power_id) references superpower(id) integer)"
      },
      "superpower": {
        "ddl": "create table superpower( id integer primary key, power_name text)"
      }
    },
    "new_relevant_table": {
      "superhero_power": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "hero_id",
          "power_id"
        ],
        "ddl": "create table superhero_power( id integer, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, foreign key(power_id) references superpower(id) integer)"
      },
      "superpower": {
        "ddl": "create table superpower( id integer primary key, power_name text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_power",
      "hero_power": "superhero_power"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT power_name FROM superhero_power WHERE superhero_name = 'Abomination'"
  },
  {
    "train_idx": 793,
    "db_id": "superhero",
    "question": "Among the superheroes with the race of god/eternal, how many of them are male",
    "query": "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T1.race_id = 21 AND T1.gender_id = 1",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "race": {
        "ddl": "create table race( id integer primary key, race text)"
      },
      "gender": {
        "ddl": "create table gender( id integer primary key, gender text)"
      }
    },
    "new_relevant_table": {
      "superhero_gender": {
        "columns": [
          "id",
          "gender",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg"
        ],
        "ddl": "create table superhero_gender( id integer primary key, gender text, superhero_name text, full_name text, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "race": {
        "ddl": "create table race( id integer primary key, race text)"
      }
    },
    "old_new_table_mapping": {
      "gender": "superhero_gender",
      "superhero": "superhero_gender"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(*) FROM superhero_gender WHERE race_id = 21 AND gender_id = 1"
  },
  {
    "train_idx": 794,
    "db_id": "superhero",
    "question": "Which hero was the fastest?",
    "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "hero_attribute": {
        "ddl": "create table hero_attribute( foreign key(hero_id) references superhero(id) integer, foreign key(attribute_id) references attribute(id) integer, attribute_value integer)"
      },
      "attribute": {
        "ddl": "create table attribute( id integer primary key, attribute_name text)"
      }
    },
    "new_relevant_table": {
      "superhero_attribute": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "attribute_id",
          "attribute_name"
        ],
        "ddl": "create table superhero_attribute( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, attribute_name text)"
      },
      "hero_attribute": {
        "ddl": "create table hero_attribute( foreign key(hero_id) references superhero_attribute(id) integer, foreign key(attribute_id) references superhero_attribute(id) integer, attribute_value integer)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_attribute",
      "attribute": "superhero_attribute"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT superhero_name FROM superhero_attribute WHERE attribute_name = 'Speed' ORDER BY attribute_id DESC LIMIT 1"
  },
  {
    "train_idx": 795,
    "db_id": "superhero",
    "question": "How many superheroes have a neutral alignment?",
    "query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "alignment": {
        "ddl": "create table alignment( id integer primary key, alignment text)"
      }
    },
    "new_relevant_table": {
      "superhero_alignment": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "alignment_id_2",
          "alignment"
        ],
        "ddl": "create table superhero_alignment( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, height_cm integer, weight_kg integer, alignment text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_alignment",
      "alignment": "superhero_alignment"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(id) FROM superhero_alignment WHERE alignment = 'Neutral'"
  },
  {
    "train_idx": 796,
    "db_id": "superhero",
    "question": "State all of 3-D Man's attributes along with their values.",
    "query": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = '3-D Man'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "hero_attribute": {
        "ddl": "create table hero_attribute( foreign key(hero_id) references superhero(id) integer, foreign key(attribute_id) references attribute(id) integer, attribute_value integer)"
      },
      "attribute": {
        "ddl": "create table attribute( id integer primary key, attribute_name text)"
      }
    },
    "new_relevant_table": {
      "superhero_attribute": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "hero_id",
          "attribute_id",
          "attribute_value"
        ],
        "ddl": "create table superhero_attribute( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, foreign key(attribute_id) references attribute(id) integer, attribute_value integer)"
      },
      "attribute": {
        "ddl": "create table attribute( id integer primary key, attribute_name text)"
      }
    },
    "old_new_table_mapping": {
      "hero_attribute": "superhero_attribute",
      "superhero": "superhero_attribute"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT attribute_name, T2attribute_value FROM superhero_attribute WHERE superhero_name = '3-D Man'"
  },
  {
    "train_idx": 797,
    "db_id": "superhero",
    "question": "Which superheroes have blue eyes with brown hair?",
    "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Brown'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "colour": {
        "ddl": "create table colour( id integer primary key, colour text)"
      }
    },
    "new_relevant_table": {
      "superhero_colour": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "colour_id",
          "colour"
        ],
        "ddl": "create table superhero_colour( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, colour text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_colour",
      "colour": "superhero_colour"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.superhero_name FROM superhero_colour AS T1 WHERE T1.eye_colour_id = (SELECT colour_id FROM superhero_colour WHERE colour = 'Blue') AND T1.hair_colour_id = (SELECT colour_id FROM superhero_colour WHERE colour = 'Brown')"
  },
  {
    "train_idx": 798,
    "db_id": "superhero",
    "question": "What is the publisher for Hawkman, Karate Kid and Speedy?",
    "query": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "publisher": {
        "ddl": "create table publisher( id integer primary key, publisher_name text)"
      }
    },
    "new_relevant_table": {
      "superhero_publisher": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "publisher_id_2",
          "publisher_name"
        ],
        "ddl": "create table superhero_publisher( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, publisher_name text)"
      }
    },
    "old_new_table_mapping": {
      "publisher": "superhero_publisher",
      "superhero": "superhero_publisher"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT publisher_name FROM superhero_publisher WHERE superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')"
  },
  {
    "train_idx": 799,
    "db_id": "superhero",
    "question": "How many superheroes didn't have any publisher?",
    "query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.id = 1",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "publisher": {
        "ddl": "create table publisher( id integer primary key, publisher_name text)"
      }
    },
    "new_relevant_table": {
      "superhero_publisher": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "publisher_id_2",
          "publisher_name"
        ],
        "ddl": "create table superhero_publisher( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, publisher_id_2 integer, publisher_name text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_publisher",
      "publisher": "superhero_publisher"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "publisher_id_2": {
        "old_table": "publisher",
        "old_column": "id"
      }
    },
    "new_gold_sql": "SELECT COUNT(id) FROM superhero_publisher WHERE publisher_id_2 = 1"
  },
  {
    "train_idx": 800,
    "db_id": "superhero",
    "question": "Calculate the percentage of superheroes with blue eyes.",
    "query": "SELECT CAST(COUNT(CASE WHEN T2.colour = 'Blue' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "colour": {
        "ddl": "create table colour( id integer primary key, colour text)"
      }
    },
    "new_relevant_table": {
      "superhero_colour": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "colour_id",
          "colour"
        ],
        "ddl": "create table superhero_colour( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, colour text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_colour",
      "colour": "superhero_colour"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(COUNT(CASE WHEN colour = 'Blue' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(id) FROM superhero_colour"
  },
  {
    "train_idx": 801,
    "db_id": "superhero",
    "question": "Find the ratio between male superheroes and female superheroes.",
    "query": "SELECT CAST(COUNT(CASE WHEN T2.gender = 'Male' THEN T1.id ELSE NULL END) AS REAL) / COUNT(CASE WHEN T2.gender = 'Female' THEN T1.id ELSE NULL END) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "gender": {
        "ddl": "create table gender( id integer primary key, gender text)"
      }
    },
    "new_relevant_table": {
      "superhero_gender": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "gender"
        ],
        "ddl": "create table superhero_gender( id integer primary key, superhero_name text, full_name text, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, gender text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_gender",
      "gender": "superhero_gender"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(COUNT(CASE WHEN superhero_gendergender = 'Male' THEN superhero_genderid ELSE NULL END) AS REAL) / COUNT(CASE WHEN superhero_gendergender = 'Female' THEN superhero_genderid ELSE NULL END) FROM superhero_gender"
  },
  {
    "train_idx": 806,
    "db_id": "superhero",
    "question": "Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name.",
    "query": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "colour": {
        "ddl": "create table colour( id integer primary key, colour text)"
      }
    },
    "new_relevant_table": {
      "superhero_colour": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "colour_id",
          "colour"
        ],
        "ddl": "create table superhero_colour( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, colour text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_colour",
      "colour": "superhero_colour"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT colour FROM superhero_colour WHERE full_name = 'Karen Beecher-Duncan'"
  },
  {
    "train_idx": 807,
    "db_id": "superhero",
    "question": "What is the superpowers of the superhero has Helen Parr as their full name?",
    "query": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Helen Parr'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "hero_power": {
        "ddl": "create table hero_power( foreign key(hero_id) references superhero(id) integer, foreign key(power_id) references superpower(id) integer)"
      },
      "superpower": {
        "ddl": "create table superpower( id integer primary key, power_name text)"
      }
    },
    "new_relevant_table": {
      "hero_superpower": {
        "columns": [
          "hero_id",
          "power_id",
          "id",
          "power_name"
        ],
        "ddl": "create table hero_superpower( foreign key(hero_id) references superhero(id) integer, id integer, power_name text)"
      },
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      }
    },
    "old_new_table_mapping": {
      "hero_power": "hero_superpower",
      "superpower": "hero_superpower"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT hero_superpower.power_name FROM hero_superpower WHERE hero_superpower.hero_id = (SELECT id FROM superhero WHERE full_name = 'Helen Parr')"
  },
  {
    "train_idx": 808,
    "db_id": "superhero",
    "question": "Find the race of the superhero who weighs 108kg and is 188cm tall.",
    "query": "SELECT DISTINCT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "race": {
        "ddl": "create table race( id integer primary key, race text)"
      }
    },
    "new_relevant_table": {
      "superhero_race": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "race_text"
        ],
        "ddl": "create table superhero_race( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      }
    },
    "old_new_table_mapping": {
      "race": "superhero_race",
      "superhero": "superhero_race"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT superhero_racerace_text FROM superhero_race WHERE superhero_raceweight_kg = 108 AND superhero_raceheight_cm = 188"
  },
  {
    "train_idx": 809,
    "db_id": "superhero",
    "question": "What is the publisher name of the superhero ID 38?",
    "query": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 38",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "publisher": {
        "ddl": "create table publisher( id integer primary key, publisher_name text)"
      }
    },
    "new_relevant_table": {
      "superhero_publisher": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "publisher_name"
        ],
        "ddl": "create table superhero_publisher( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, publisher_name text)"
      }
    },
    "old_new_table_mapping": {
      "publisher": "superhero_publisher",
      "superhero": "superhero_publisher"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT publisher_name FROM superhero_publisher WHERE id = 38"
  },
  {
    "train_idx": 810,
    "db_id": "superhero",
    "question": "What is the race of the superhero with maximum attribute value?",
    "query": "SELECT T3.race FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN race AS T3 ON T1.race_id = T3.id ORDER BY T2.attribute_value DESC LIMIT 1",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "hero_attribute": {
        "ddl": "create table hero_attribute( foreign key(hero_id) references superhero(id) integer, foreign key(attribute_id) references attribute(id) integer, attribute_value integer)"
      },
      "race": {
        "ddl": "create table race( id integer primary key, race text)"
      }
    },
    "new_relevant_table": {
      "superhero_race": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "race"
        ],
        "ddl": "create table superhero_race( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, race text)"
      },
      "hero_attribute": {
        "ddl": "create table hero_attribute( foreign key(hero_id) references superhero_race(id) integer, foreign key(attribute_id) references attribute(id) integer, attribute_value integer)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_race",
      "race": "superhero_race"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT race FROM superhero_race ORDER BY attribute_value DESC LIMIT 1"
  },
  {
    "train_idx": 811,
    "db_id": "superhero",
    "question": "Give the alignment and superpowers of the superhero named Atom IV.",
    "query": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Atom IV'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "hero_power": {
        "ddl": "create table hero_power( foreign key(hero_id) references superhero(id) integer, foreign key(power_id) references superpower(id) integer)"
      },
      "superpower": {
        "ddl": "create table superpower( id integer primary key, power_name text)"
      },
      "alignment": {
        "ddl": "create table alignment( id integer primary key, alignment text)"
      }
    },
    "new_relevant_table": {
      "hero_attributes": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "hero_id",
          "power_id"
        ],
        "ddl": "create table hero_attributes( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, foreign key(power_id) references superpower(id) integer)"
      },
      "superpower": {
        "ddl": "create table superpower( id integer primary key, power_name text)"
      },
      "alignment": {
        "ddl": "create table alignment( id integer primary key, alignment text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "hero_attributes",
      "hero_power": "hero_attributes"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT alignment, power_name FROM hero_attributes WHERE superhero_name = 'Atom IV'"
  },
  {
    "train_idx": 812,
    "db_id": "superhero",
    "question": "List down at least five full names of superheroes with blue eyes.",
    "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' LIMIT 5",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "colour": {
        "ddl": "create table colour( id integer primary key, colour text)"
      }
    },
    "new_relevant_table": {
      "superhero_colour": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "colour_id",
          "colour"
        ],
        "ddl": "create table superhero_colour( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, colour text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_colour",
      "colour": "superhero_colour"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT superhero_name FROM superhero_colour WHERE colour = 'Blue' LIMIT 5"
  },
  {
    "train_idx": 813,
    "db_id": "superhero",
    "question": "Calculate the average attribute value of all neutral superheroes.",
    "query": "SELECT AVG(T1.attribute_value) FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id INNER JOIN alignment AS T3 ON T2.alignment_id = T3.id WHERE T3.alignment = 'Neutral'",
    "relevant_table": {
      "hero_attribute": {
        "ddl": "create table hero_attribute( foreign key(hero_id) references superhero(id) integer, foreign key(attribute_id) references attribute(id) integer, attribute_value integer)"
      },
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "alignment": {
        "ddl": "create table alignment( id integer primary key, alignment text)"
      }
    },
    "new_relevant_table": {
      "superhero_alignment": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "alignment"
        ],
        "ddl": "create table superhero_alignment( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, height_cm integer, weight_kg integer, alignment text)"
      },
      "hero_attribute": {
        "ddl": "create table hero_attribute( foreign key(hero_id) references superhero_alignment(id) integer, foreign key(attribute_id) references attribute(id) integer, attribute_value integer)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_alignment",
      "alignment": "superhero_alignment"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT AVG(attribute_value) FROM hero_attribute WHERE alignment = 'Neutral'"
  },
  {
    "train_idx": 814,
    "db_id": "superhero",
    "question": "List the skin colour of the superheroes with 100 attribute value.",
    "query": "SELECT DISTINCT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id WHERE T3.attribute_value = 100",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "colour": {
        "ddl": "create table colour( id integer primary key, colour text)"
      },
      "hero_attribute": {
        "ddl": "create table hero_attribute( foreign key(hero_id) references superhero(id) integer, foreign key(attribute_id) references attribute(id) integer, attribute_value integer)"
      }
    },
    "new_relevant_table": {
      "superhero_attribute": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "hero_id",
          "attribute_id",
          "attribute_value"
        ],
        "ddl": "create table superhero_attribute( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, foreign key(attribute_id) references attribute(id) integer, attribute_value integer)"
      },
      "colour": {
        "ddl": "create table colour( id integer primary key, colour text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_attribute",
      "hero_attribute": "superhero_attribute"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT colour FROM superhero_attribute WHERE attribute_value = 100"
  },
  {
    "train_idx": 815,
    "db_id": "superhero",
    "question": "Count the good female superheroes.",
    "query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.alignment = 'Good' AND T3.gender = 'Female'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "alignment": {
        "ddl": "create table alignment( id integer primary key, alignment text)"
      },
      "gender": {
        "ddl": "create table gender( id integer primary key, gender text)"
      }
    },
    "new_relevant_table": {
      "superhero_alignment_gender": {
        "columns": [
          "id",
          "gender",
          "alignment"
        ],
        "ddl": "create table superhero_alignment_gender( id integer, gender text, alignment text)"
      },
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references superhero_alignment_gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references superhero_alignment_gender(id) integer, height_cm integer, weight_kg integer)"
      }
    },
    "old_new_table_mapping": {
      "gender": "superhero_alignment_gender",
      "alignment": "superhero_alignment_gender"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(id) FROM superhero_alignment_gender WHERE alignment = 'Good' AND gender = 'Female'"
  },
  {
    "train_idx": 816,
    "db_id": "superhero",
    "question": "Provide the names of superheroes with attribute value between 75 to 80.",
    "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T2.attribute_value BETWEEN 75 AND 80",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "hero_attribute": {
        "ddl": "create table hero_attribute( foreign key(hero_id) references superhero(id) integer, foreign key(attribute_id) references attribute(id) integer, attribute_value integer)"
      }
    },
    "new_relevant_table": {
      "superhero_attributes": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "hero_id",
          "attribute_id",
          "attribute_value"
        ],
        "ddl": "create table superhero_attributes( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, foreign key(attribute_id) references attribute(id) integer, attribute_value integer)"
      }
    },
    "old_new_table_mapping": {
      "hero_attribute": "superhero_attributes",
      "superhero": "superhero_attributes"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT superhero_name FROM superhero_attributes WHERE attribute_value BETWEEN 75 AND 80"
  },
  {
    "train_idx": 817,
    "db_id": "superhero",
    "question": "Give the race of the blue-haired male superhero.",
    "query": "SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Blue' AND T4.gender = 'Male'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "colour": {
        "ddl": "create table colour( id integer primary key, colour text)"
      },
      "race": {
        "ddl": "create table race( id integer primary key, race text)"
      },
      "gender": {
        "ddl": "create table gender( id integer primary key, gender text)"
      }
    },
    "new_relevant_table": {
      "colour_race": {
        "columns": [
          "id",
          "colour",
          "race"
        ],
        "ddl": "create table colour_race( id integer, colour text, race text)"
      },
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour_race(id) integer, foreign key(hair_colour_id) references colour_race(id) integer, foreign key(skin_colour_id) references colour_race(id) integer, foreign key(race_id) references colour_race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "gender": {
        "ddl": "create table gender( id integer primary key, gender text)"
      }
    },
    "old_new_table_mapping": {
      "colour": "colour_race",
      "race": "colour_race"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T3race FROM superhero WHERE colour = 'Blue' AND gender = 'Male'"
  },
  {
    "train_idx": 818,
    "db_id": "superhero",
    "question": "Among the bad superheroes, what is the percentage of female superheroes?",
    "query": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.alignment = 'Bad'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "alignment": {
        "ddl": "create table alignment( id integer primary key, alignment text)"
      },
      "gender": {
        "ddl": "create table gender( id integer primary key, gender text)"
      }
    },
    "new_relevant_table": {
      "superhero_info": {
        "columns": [
          "id",
          "gender",
          "alignment"
        ],
        "ddl": "create table superhero_info( id integer, gender text, alignment text)"
      },
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references superhero_info(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references superhero_info(id) integer, height_cm integer, weight_kg integer)"
      }
    },
    "old_new_table_mapping": {
      "gender": "superhero_info",
      "alignment": "superhero_info"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(COUNT(CASE WHEN superhero_infogender = 'Female' THEN superhero_infoid ELSE NULL END) AS REAL) * 100 / COUNT(superhero_infoid) FROM superhero_info WHERE superhero_infoalignment = 'Bad'"
  },
  {
    "train_idx": 819,
    "db_id": "superhero",
    "question": "In superheroes with missing weight data, calculate the difference between the number of superheroes with blue eyes and no eye color.",
    "query": "SELECT SUM(CASE WHEN T2.id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg = 0 OR T1.weight_kg is NULL",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "colour": {
        "ddl": "create table colour( id integer primary key, colour text)"
      }
    },
    "new_relevant_table": {
      "superhero_colour": {
        "columns": [
          "id",
          "colour",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg"
        ],
        "ddl": "create table superhero_colour( id integer primary key, colour text, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      }
    },
    "old_new_table_mapping": {
      "colour": "superhero_colour",
      "superhero": "superhero_colour"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT SUM(CASE WHEN superhero_colourid = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN superhero_colourid = 1 THEN 1 ELSE 0 END) FROM superhero_colour WHERE superhero_colourweight_kg = 0 OR superhero_colourweight_kg is NULL"
  },
  {
    "train_idx": 820,
    "db_id": "superhero",
    "question": "How strong is the Hulk?",
    "query": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Hulk' AND T3.attribute_name = 'Strength'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "hero_attribute": {
        "ddl": "create table hero_attribute( foreign key(hero_id) references superhero(id) integer, foreign key(attribute_id) references attribute(id) integer, attribute_value integer)"
      },
      "attribute": {
        "ddl": "create table attribute( id integer primary key, attribute_name text)"
      }
    },
    "new_relevant_table": {
      "superhero_attribute": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "attribute_id",
          "attribute_name"
        ],
        "ddl": "create table superhero_attribute( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, attribute_name text)"
      },
      "hero_attribute": {
        "ddl": "create table hero_attribute( foreign key(hero_id) references superhero_attribute(id) integer, foreign key(attribute_id) references superhero_attribute(id) integer, attribute_value integer)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_attribute",
      "attribute": "superhero_attribute"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT attribute_value FROM superhero_attribute WHERE superhero_name = 'Hulk' AND attribute_name = 'Strength'"
  },
  {
    "train_idx": 821,
    "db_id": "superhero",
    "question": "List down Ajax's superpowers.",
    "query": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ajax'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "hero_power": {
        "ddl": "create table hero_power( foreign key(hero_id) references superhero(id) integer, foreign key(power_id) references superpower(id) integer)"
      },
      "superpower": {
        "ddl": "create table superpower( id integer primary key, power_name text)"
      }
    },
    "new_relevant_table": {
      "super_hero_power": {
        "columns": [
          "id",
          "power_name",
          "hero_id",
          "power_id"
        ],
        "ddl": "create table super_hero_power( id integer, power_name text, foreign key(hero_id) references superhero(id) integer)"
      },
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      }
    },
    "old_new_table_mapping": {
      "hero_power": "super_hero_power",
      "superpower": "super_hero_power"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT power_name FROM super_hero_power WHERE hero_id = (SELECT id FROM superhero WHERE superhero_name = 'Ajax')"
  },
  {
    "train_idx": 822,
    "db_id": "superhero",
    "question": "How many green-skinned villains are there in the superhero universe?",
    "query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.alignment = 'Bad' AND T3.colour = 'Green'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "alignment": {
        "ddl": "create table alignment( id integer primary key, alignment text)"
      },
      "colour": {
        "ddl": "create table colour( id integer primary key, colour text)"
      }
    },
    "new_relevant_table": {
      "superhero_alignment_colour": {
        "columns": [
          "id",
          "alignment",
          "colour"
        ],
        "ddl": "create table superhero_alignment_colour( id integer, alignment text, colour text)"
      },
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references superhero_alignment_colour(id) integer, foreign key(hair_colour_id) references superhero_alignment_colour(id) integer, foreign key(skin_colour_id) references superhero_alignment_colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references superhero_alignment_colour(id) integer, height_cm integer, weight_kg integer)"
      }
    },
    "old_new_table_mapping": {
      "alignment": "superhero_alignment_colour",
      "colour": "superhero_alignment_colour"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(id) FROM superhero_alignment_colour WHERE alignment = 'Bad' AND colour = 'Green'"
  },
  {
    "train_idx": 823,
    "db_id": "superhero",
    "question": "How many female superheroes are in Marvel Comics?",
    "query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.gender = 'Female'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "publisher": {
        "ddl": "create table publisher( id integer primary key, publisher_name text)"
      },
      "gender": {
        "ddl": "create table gender( id integer primary key, gender text)"
      }
    },
    "new_relevant_table": {
      "superhero_gender": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "gender_id_2",
          "gender"
        ],
        "ddl": "create table superhero_gender( id integer primary key, superhero_name text, full_name text, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, gender_id_2 integer, gender text)"
      },
      "publisher": {
        "ddl": "create table publisher( id integer primary key, publisher_name text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_gender",
      "gender": "superhero_gender"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "gender_id_2": {
        "old_table": "gender",
        "old_column": "id"
      }
    },
    "new_gold_sql": "SELECT COUNT(id) FROM superhero_gender WHERE publisher_name = 'Marvel Comics' AND gender = 'Female'"
  },
  {
    "train_idx": 824,
    "db_id": "superhero",
    "question": "Identify superheroes who can control wind and list their names in alphabetical order.",
    "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Wind Control' ORDER BY T1.superhero_name",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "hero_power": {
        "ddl": "create table hero_power( foreign key(hero_id) references superhero(id) integer, foreign key(power_id) references superpower(id) integer)"
      },
      "superpower": {
        "ddl": "create table superpower( id integer primary key, power_name text)"
      }
    },
    "new_relevant_table": {
      "superhero_power": {
        "columns": [
          "id",
          "power_name",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg"
        ],
        "ddl": "create table superhero_power( id integer, power_name text, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "hero_power": {
        "ddl": "create table hero_power( foreign key(hero_id) references superhero_power(id) integer, foreign key(power_id) references superhero_power(id) integer)"
      }
    },
    "old_new_table_mapping": {
      "superpower": "superhero_power",
      "superhero": "superhero_power"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT superhero_name FROM superhero_power WHERE power_name = 'Wind Control' ORDER BY superhero_name"
  },
  {
    "train_idx": 825,
    "db_id": "superhero",
    "question": "Identify the gender of the superhero who has the ability of Phoenix Force.",
    "query": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "hero_power": {
        "ddl": "create table hero_power( foreign key(hero_id) references superhero(id) integer, foreign key(power_id) references superpower(id) integer)"
      },
      "superpower": {
        "ddl": "create table superpower( id integer primary key, power_name text)"
      },
      "gender": {
        "ddl": "create table gender( id integer primary key, gender text)"
      }
    },
    "new_relevant_table": {
      "Superhero_Power": {
        "columns": [
          "id",
          "power_name",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg"
        ],
        "ddl": "create table Superhero_Power( id integer, power_name text, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "hero_power": {
        "ddl": "create table hero_power( foreign key(hero_id) references Superhero_Power(id) integer, foreign key(power_id) references Superhero_Power(id) integer)"
      },
      "gender": {
        "ddl": "create table gender( id integer primary key, gender text)"
      }
    },
    "old_new_table_mapping": {
      "superpower": "Superhero_Power",
      "superhero": "Superhero_Power"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT gender FROM Superhero_Power WHERE power_name = 'Phoenix Force'"
  },
  {
    "train_idx": 826,
    "db_id": "superhero",
    "question": "Identify the heaviest superhero in DC Comics.",
    "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' ORDER BY T1.weight_kg DESC LIMIT 1",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "publisher": {
        "ddl": "create table publisher( id integer primary key, publisher_name text)"
      }
    },
    "new_relevant_table": {
      "superhero_publisher": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "publisher_id_2",
          "publisher_name"
        ],
        "ddl": "create table superhero_publisher( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, publisher_name text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_publisher",
      "publisher": "superhero_publisher"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT superhero_name FROM superhero_publisher WHERE publisher_name = 'DC Comics' ORDER BY weight_kg DESC LIMIT 1"
  },
  {
    "train_idx": 827,
    "db_id": "superhero",
    "question": "What is the average height of a non-human superhero in Dark Horse Comics?",
    "query": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.race != 'Human'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "publisher": {
        "ddl": "create table publisher( id integer primary key, publisher_name text)"
      },
      "race": {
        "ddl": "create table race( id integer primary key, race text)"
      }
    },
    "new_relevant_table": {
      "superhero_race": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "race_id_2",
          "race"
        ],
        "ddl": "create table superhero_race( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, race text)"
      },
      "publisher": {
        "ddl": "create table publisher( id integer primary key, publisher_name text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_race",
      "race": "superhero_race"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT AVG(height_cm) FROM superhero_race WHERE publisher_name = 'Dark Horse Comics' AND race != 'Human'"
  },
  {
    "train_idx": 828,
    "db_id": "superhero",
    "question": "Count the fastest superheroes.",
    "query": "SELECT COUNT(T3.superhero_name) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id WHERE T2.attribute_name = 'Speed' AND T1.attribute_value = 100",
    "relevant_table": {
      "hero_attribute": {
        "ddl": "create table hero_attribute( foreign key(hero_id) references superhero(id) integer, foreign key(attribute_id) references attribute(id) integer, attribute_value integer)"
      },
      "attribute": {
        "ddl": "create table attribute( id integer primary key, attribute_name text)"
      },
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      }
    },
    "new_relevant_table": {
      "hero_attribute_merged": {
        "columns": [
          "id",
          "hero_id",
          "attribute_id",
          "attribute_value",
          "attribute_name"
        ],
        "ddl": "create table hero_attribute_merged( id integer, foreign key(hero_id) references superhero(id) integer, attribute_value integer, attribute_name text)"
      },
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      }
    },
    "old_new_table_mapping": {
      "attribute": "hero_attribute_merged",
      "hero_attribute": "hero_attribute_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(superhero_name) FROM hero_attribute_merged WHERE attribute_name = 'Speed' AND attribute_value = 100"
  },
  {
    "train_idx": 829,
    "db_id": "superhero",
    "question": "Which publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes.",
    "query": "SELECT SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "publisher": {
        "ddl": "create table publisher( id integer primary key, publisher_name text)"
      }
    },
    "new_relevant_table": {
      "superhero_publisher": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "publisher_name"
        ],
        "ddl": "create table superhero_publisher( id integer, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, publisher_name text)"
      }
    },
    "old_new_table_mapping": {
      "publisher": "superhero_publisher",
      "superhero": "superhero_publisher"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT SUM(CASE WHEN publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) FROM superhero_publisher"
  },
  {
    "train_idx": 830,
    "db_id": "superhero",
    "question": "Identify the weakest attribute of the Black Panther.",
    "query": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Black Panther' ORDER BY T2.attribute_value ASC LIMIT 1",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "hero_attribute": {
        "ddl": "create table hero_attribute( foreign key(hero_id) references superhero(id) integer, foreign key(attribute_id) references attribute(id) integer, attribute_value integer)"
      },
      "attribute": {
        "ddl": "create table attribute( id integer primary key, attribute_name text)"
      }
    },
    "new_relevant_table": {
      "superhero_attribute": {
        "columns": [
          "id",
          "attribute_name",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg"
        ],
        "ddl": "create table superhero_attribute( id integer primary key, attribute_name text, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "hero_attribute": {
        "ddl": "create table hero_attribute( foreign key(hero_id) references superhero_attribute(id) integer, foreign key(attribute_id) references superhero_attribute(id) integer, attribute_value integer)"
      }
    },
    "old_new_table_mapping": {
      "attribute": "superhero_attribute",
      "superhero": "superhero_attribute"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT attribute_name FROM superhero_attribute WHERE superhero_name = 'Black Panther' ORDER BY attribute_name ASC LIMIT 1"
  },
  {
    "train_idx": 831,
    "db_id": "superhero",
    "question": "What is Abomination's eye colour?",
    "query": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "colour": {
        "ddl": "create table colour( id integer primary key, colour text)"
      }
    },
    "new_relevant_table": {
      "superhero_colour": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "colour_id",
          "colour"
        ],
        "ddl": "create table superhero_colour( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, colour text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_colour",
      "colour": "superhero_colour"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT colour FROM superhero_colour WHERE superhero_name = 'Abomination'"
  },
  {
    "train_idx": 834,
    "db_id": "superhero",
    "question": "Among all superheroes created by George Lucas, identify the percentage of female superheroes.",
    "query": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'George Lucas'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "publisher": {
        "ddl": "create table publisher( id integer primary key, publisher_name text)"
      },
      "gender": {
        "ddl": "create table gender( id integer primary key, gender text)"
      }
    },
    "new_relevant_table": {
      "publisher_gender": {
        "columns": [
          "id",
          "publisher_name",
          "gender"
        ],
        "ddl": "create table publisher_gender( id integer, publisher_name text, gender text)"
      },
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references publisher_gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher_gender(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      }
    },
    "old_new_table_mapping": {
      "publisher": "publisher_gender",
      "gender": "publisher_gender"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(COUNT(CASE WHEN T3gender = 'Female' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(id) FROM superhero WHERE publisher_name = 'George Lucas'"
  },
  {
    "train_idx": 835,
    "db_id": "superhero",
    "question": "Among all superheroes in Marvel Comics, identify the percentage of 'good' superheroes.",
    "query": "SELECT CAST(COUNT(CASE WHEN T3.alignment = 'Good' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T2.publisher_name = 'Marvel Comics'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "publisher": {
        "ddl": "create table publisher( id integer primary key, publisher_name text)"
      },
      "alignment": {
        "ddl": "create table alignment( id integer primary key, alignment text)"
      }
    },
    "new_relevant_table": {
      "publisher_alignment": {
        "columns": [
          "id",
          "publisher_name",
          "alignment"
        ],
        "ddl": "create table publisher_alignment( id integer, publisher_name text, alignment text)"
      },
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher_alignment(id) integer, foreign key(alignment_id) references publisher_alignment(id) integer, height_cm integer, weight_kg integer)"
      }
    },
    "old_new_table_mapping": {
      "publisher": "publisher_alignment",
      "alignment": "publisher_alignment"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(COUNT(CASE WHEN alignment = 'Good' THEN id ELSE NULL END) AS REAL) * 100 / COUNT(id) FROM superhero WHERE publisher_name = 'Marvel Comics'"
  },
  {
    "train_idx": 839,
    "db_id": "superhero",
    "question": "In superheroes with weight less than 100, list the full name of the superheroes with brown eyes.",
    "query": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'Brown'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "colour": {
        "ddl": "create table colour( id integer primary key, colour text)"
      }
    },
    "new_relevant_table": {
      "superhero_colour": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "colour_id",
          "colour"
        ],
        "ddl": "create table superhero_colour( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, colour text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_colour",
      "colour": "superhero_colour"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT full_name FROM superhero_colour WHERE weight_kg < 100 AND colour = 'Brown'"
  },
  {
    "train_idx": 840,
    "db_id": "superhero",
    "question": "List the attribute value of the superhero named Aquababy.",
    "query": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Aquababy'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "hero_attribute": {
        "ddl": "create table hero_attribute( foreign key(hero_id) references superhero(id) integer, foreign key(attribute_id) references attribute(id) integer, attribute_value integer)"
      }
    },
    "new_relevant_table": {
      "superhero_attribute": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "hero_id",
          "attribute_id",
          "attribute_value"
        ],
        "ddl": "create table superhero_attribute( id integer, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, foreign key(attribute_id) references attribute(id) integer, attribute_value integer)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_attribute",
      "hero_attribute": "superhero_attribute"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT attribute_value FROM superhero_attribute WHERE superhero_name = 'Aquababy'"
  },
  {
    "train_idx": 841,
    "db_id": "superhero",
    "question": "Provide the weight and race of the superhero with superhero ID 40.",
    "query": "SELECT T1.weight_kg, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.id = 40",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "race": {
        "ddl": "create table race( id integer primary key, race text)"
      }
    },
    "new_relevant_table": {
      "superhero_race": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "race"
        ],
        "ddl": "create table superhero_race( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, race text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_race",
      "race": "superhero_race"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT weight_kg, race FROM superhero_race WHERE id = 40"
  },
  {
    "train_idx": 842,
    "db_id": "superhero",
    "question": "Calculate the average height of all neutral superheroes.",
    "query": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "alignment": {
        "ddl": "create table alignment( id integer primary key, alignment text)"
      }
    },
    "new_relevant_table": {
      "superhero_alignment": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "alignment_id_2",
          "alignment"
        ],
        "ddl": "create table superhero_alignment( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, height_cm integer, weight_kg integer, alignment text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_alignment",
      "alignment": "superhero_alignment"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT AVG(height_cm) FROM superhero_alignment WHERE alignment = 'Neutral'"
  },
  {
    "train_idx": 843,
    "db_id": "superhero",
    "question": "List the hero ID of superheroes have intellegence as their power.",
    "query": "SELECT T1.hero_id FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Intelligence'",
    "relevant_table": {
      "hero_power": {
        "ddl": "create table hero_power( foreign key(hero_id) references superhero(id) integer, foreign key(power_id) references superpower(id) integer)"
      },
      "superpower": {
        "ddl": "create table superpower( id integer primary key, power_name text)"
      }
    },
    "new_relevant_table": {
      "super_hero_power": {
        "columns": [
          "id",
          "power_name",
          "hero_id",
          "power_id"
        ],
        "ddl": "create table super_hero_power( id integer, power_name text, foreign key(hero_id) references superhero(id) integer)"
      }
    },
    "old_new_table_mapping": {
      "hero_power": "super_hero_power",
      "superpower": "super_hero_power"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT super_hero_powerhero_id FROM super_hero_power WHERE super_hero_powerpower_name = 'Intelligence'"
  },
  {
    "train_idx": 844,
    "db_id": "superhero",
    "question": "Give the eye colour of Blackwulf.",
    "query": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf'",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "colour": {
        "ddl": "create table colour( id integer primary key, colour text)"
      }
    },
    "new_relevant_table": {
      "superhero_colour": {
        "columns": [
          "id",
          "superhero_name",
          "full_name",
          "gender_id",
          "eye_colour_id",
          "hair_colour_id",
          "skin_colour_id",
          "race_id",
          "publisher_id",
          "alignment_id",
          "height_cm",
          "weight_kg",
          "colour_id",
          "colour"
        ],
        "ddl": "create table superhero_colour( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer, colour text)"
      }
    },
    "old_new_table_mapping": {
      "superhero": "superhero_colour",
      "colour": "superhero_colour"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT colour FROM superhero_colour WHERE superhero_name = 'Blackwulf' AND eye_colour_id = colour_id"
  },
  {
    "train_idx": 845,
    "db_id": "superhero",
    "question": "List the power of superheroes with height greater than 80% of the average height of all superheroes.",
    "query": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.height_cm * 100 > ( SELECT AVG(height_cm) FROM superhero ) * 80",
    "relevant_table": {
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      },
      "hero_power": {
        "ddl": "create table hero_power( foreign key(hero_id) references superhero(id) integer, foreign key(power_id) references superpower(id) integer)"
      },
      "superpower": {
        "ddl": "create table superpower( id integer primary key, power_name text)"
      }
    },
    "new_relevant_table": {
      "super_hero_power": {
        "columns": [
          "id",
          "power_name",
          "hero_id",
          "power_id"
        ],
        "ddl": "create table super_hero_power( id integer, power_name text, foreign key(hero_id) references superhero(id) integer)"
      },
      "superhero": {
        "ddl": "create table superhero( id integer primary key, superhero_name text, full_name text, foreign key(gender_id) references gender(id) integer, foreign key(eye_colour_id) references colour(id) integer, foreign key(hair_colour_id) references colour(id) integer, foreign key(skin_colour_id) references colour(id) integer, foreign key(race_id) references race(id) integer, foreign key(publisher_id) references publisher(id) integer, foreign key(alignment_id) references alignment(id) integer, height_cm integer, weight_kg integer)"
      }
    },
    "old_new_table_mapping": {
      "hero_power": "super_hero_power",
      "superpower": "super_hero_power"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT power_name FROM super_hero_power WHERE hero_id * 100 > ( SELECT AVG(hero_id) FROM super_hero_power ) * 80"
  },
  {
    "train_idx": 846,
    "db_id": "formula_1",
    "question": "Please list the reference names of the drivers who are eliminated in the first period in race number 20.",
    "query": "SELECT T2.driverRef FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 20 ORDER BY T1.q1 DESC LIMIT 5",
    "relevant_table": {
      "qualifying": {
        "ddl": "create table qualifying( qualifyId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, position integer, q1 text, q2 text, q3 text)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "drivers_qualifying": {
        "columns": [
          "driverId",
          "driverRef",
          "number_drivers",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url",
          "qualifyId",
          "raceId",
          "constructorId",
          "number_qualifying",
          "position",
          "q1",
          "q2",
          "q3"
        ],
        "ddl": "create table drivers_qualifying( driverId integer primary key, driverRef text, number_drivers integer, code text, forename text, surname text, dob date, nationality text, url text, qualifyId integer, foreign key(raceId) references races(raceId) integer, foreign key(constructorId) references constructors(constructorId) integer, number_qualifying integer, position integer, q1 text, q2 text, q3 text)"
      }
    },
    "old_new_table_mapping": {
      "drivers": "drivers_qualifying",
      "qualifying": "drivers_qualifying"
    },
    "new_table_primary_key": "driverId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "number_drivers": {
        "old_table": "drivers",
        "old_column": "number"
      },
      "number_qualifying": {
        "old_table": "qualifying",
        "old_column": "number"
      }
    },
    "new_gold_sql": "SELECT driverRef FROM drivers_qualifying WHERE raceId = 20 ORDER BY q1 DESC LIMIT 5"
  },
  {
    "train_idx": 847,
    "db_id": "formula_1",
    "question": "What is the surname of the driver with the best lap time in race number 19 in the second qualifying period?",
    "query": "SELECT T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 19 ORDER BY T1.q2 ASC LIMIT 1",
    "relevant_table": {
      "qualifying": {
        "ddl": "create table qualifying( qualifyId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, position integer, q1 text, q2 text, q3 text)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "drivers_qualifying": {
        "columns": [
          "driverId",
          "driverRef",
          "number_drivers",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url",
          "qualifyId",
          "raceId",
          "constructorId",
          "number_qualifying",
          "position",
          "q1",
          "q2",
          "q3"
        ],
        "ddl": "create table drivers_qualifying( driverId integer primary key, driverRef text, number_drivers integer, code text, forename text, surname text, dob date, nationality text, url text, qualifyId integer, foreign key(raceId) references races(raceId) integer, foreign key(constructorId) references constructors(constructorId) integer, number_qualifying integer, position integer, q1 text, q2 text, q3 text)"
      }
    },
    "old_new_table_mapping": {
      "drivers": "drivers_qualifying",
      "qualifying": "drivers_qualifying"
    },
    "new_table_primary_key": "driverId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "number_drivers": {
        "old_table": "drivers",
        "old_column": "number"
      },
      "number_qualifying": {
        "old_table": "qualifying",
        "old_column": "number"
      }
    },
    "new_gold_sql": "SELECT surname FROM drivers_qualifying WHERE raceId = 19 ORDER BY q2 ASC LIMIT 1"
  },
  {
    "train_idx": 849,
    "db_id": "formula_1",
    "question": "Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?",
    "query": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
    "relevant_table": {
      "circuits": {
        "ddl": "create table circuits( circuitId integer primary key, circuitRef text, name text, location text, country text, lat real, lng real, alt integer, url text)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "circuits_races": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId",
          "races_name",
          "date",
          "time",
          "races_url",
          "circuitRef",
          "circuits_name",
          "location",
          "country",
          "lat",
          "lng",
          "alt",
          "circuits_url"
        ],
        "ddl": "create table circuits_races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, circuitId integer, date date, time text, circuitRef text, location text, country text, lat real, lng real, alt integer)"
      }
    },
    "old_new_table_mapping": {
      "races": "circuits_races",
      "circuits": "circuits_races"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['races_name', 'races_url', 'circuits_name', 'circuits_url']": {
        "old_table": "['races', 'circuits']",
        "old_column": "['name', 'url']"
      }
    },
    "new_gold_sql": "SELECT DISTINCT circuits_url FROM circuits_races WHERE circuits_name = 'Circuit de Barcelona-Catalunya'"
  },
  {
    "train_idx": 850,
    "db_id": "formula_1",
    "question": "Please give the name of the race held on the circuits in Germany.",
    "query": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Germany'",
    "relevant_table": {
      "circuits": {
        "ddl": "create table circuits( circuitId integer primary key, circuitRef text, name text, location text, country text, lat real, lng real, alt integer, url text)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "circuits_races": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId",
          "race_name",
          "date",
          "time",
          "race_url",
          "circuitRef",
          "circuit_name",
          "location",
          "country",
          "lat",
          "lng",
          "alt",
          "circuit_url"
        ],
        "ddl": "create table circuits_races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, circuitId integer, race_name text, date date, time text, race_url text, circuitRef text, circuit_name text, location text, country text, lat real, lng real, alt integer, circuit_url text)"
      }
    },
    "old_new_table_mapping": {
      "races": "circuits_races",
      "circuits": "circuits_races"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "race_name": {
        "old_table": "races",
        "old_column": "name"
      },
      "circuit_name": {
        "old_table": "circuits",
        "old_column": "name"
      },
      "race_url": {
        "old_table": "races",
        "old_column": "url"
      },
      "circuit_url": {
        "old_table": "circuits",
        "old_column": "url"
      }
    },
    "new_gold_sql": "SELECT DISTINCT circuit_name FROM circuits_races WHERE country = 'Germany'"
  },
  {
    "train_idx": 851,
    "db_id": "formula_1",
    "question": "Please list the positions of the circuits built by the constructor Renault.",
    "query": "SELECT DISTINCT T1.position FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T2.name = 'Renault'",
    "relevant_table": {
      "constructorstandings": {
        "ddl": "create table constructorstandings( constructorStandingsId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(constructorId) references constructors(constructorId) integer, points real, position integer, positionText text, wins integer)"
      },
      "constructors": {
        "ddl": "create table constructors( constructorId integer primary key, constructorRef text, name text, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "constructorStandings_Constructors": {
        "columns": [
          "constructorStandingsId",
          "raceId",
          "constructorId",
          "points",
          "position",
          "positionText",
          "wins",
          "constructorRef",
          "name",
          "nationality",
          "url"
        ],
        "ddl": "create table constructorStandings_Constructors( constructorStandingsId integer primary key, foreign key(raceId) references races(raceId) integer, constructorId integer, points real, position integer, positionText text, wins integer, constructorRef text, name text, nationality text, url text)"
      }
    },
    "old_new_table_mapping": {
      "constructorstandings": "constructorStandings_Constructors",
      "constructors": "constructorStandings_Constructors"
    },
    "new_table_primary_key": "constructorStandingsId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT position FROM constructorStandings_Constructors WHERE name = 'Renault'"
  },
  {
    "train_idx": 853,
    "db_id": "formula_1",
    "question": "Please give the names of the races held on the circuits in Spain.",
    "query": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Spain'",
    "relevant_table": {
      "circuits": {
        "ddl": "create table circuits( circuitId integer primary key, circuitRef text, name text, location text, country text, lat real, lng real, alt integer, url text)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "circuits_races": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId",
          "races_name",
          "date",
          "time",
          "races_url",
          "circuitRef",
          "circuits_name",
          "location",
          "country",
          "lat",
          "lng",
          "alt",
          "circuits_url"
        ],
        "ddl": "create table circuits_races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, circuitId integer, date date, time text, circuitRef text, location text, country text, lat real, lng real, alt integer)"
      }
    },
    "old_new_table_mapping": {
      "races": "circuits_races",
      "circuits": "circuits_races"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "races_name, races_url, circuits_name, circuits_url": {
        "old_table": "races, circuits",
        "old_column": "name, url"
      }
    },
    "new_gold_sql": "SELECT DISTINCT races_name FROM circuits_races WHERE country = 'Spain'"
  },
  {
    "train_idx": 854,
    "db_id": "formula_1",
    "question": "What is the coordinates location of the circuits for Australian grand prix?",
    "query": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Australian Grand Prix'",
    "relevant_table": {
      "circuits": {
        "ddl": "create table circuits( circuitId integer primary key, circuitRef text, name text, location text, country text, lat real, lng real, alt integer, url text)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "circuits_races": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId",
          "race_name",
          "date",
          "time",
          "race_url",
          "circuitRef",
          "circuit_name",
          "location",
          "country",
          "lat",
          "lng",
          "alt",
          "circuit_url"
        ],
        "ddl": "create table circuits_races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, circuitId integer, race_name text, date date, time text, race_url text, circuitRef text, circuit_name text, location text, country text, lat real, lng real, alt integer, circuit_url text)"
      }
    },
    "old_new_table_mapping": {
      "races": "circuits_races",
      "circuits": "circuits_races"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "race_name": {
        "old_table": "races",
        "old_column": "name"
      },
      "race_url": {
        "old_table": "races",
        "old_column": "url"
      },
      "circuit_name": {
        "old_table": "circuits",
        "old_column": "name"
      },
      "circuit_url": {
        "old_table": "circuits",
        "old_column": "url"
      }
    },
    "new_gold_sql": "SELECT DISTINCT lat, lng FROM circuits_races WHERE race_name = 'Australian Grand Prix'"
  },
  {
    "train_idx": 856,
    "db_id": "formula_1",
    "question": "Please list the time of the races held on Sepang International Circuit.",
    "query": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
    "relevant_table": {
      "circuits": {
        "ddl": "create table circuits( circuitId integer primary key, circuitRef text, name text, location text, country text, lat real, lng real, alt integer, url text)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "circuit_races": {
        "columns": [
          "circuitId",
          "circuitRef",
          "name_circuits",
          "location",
          "country",
          "lat",
          "lng",
          "alt",
          "url_circuits",
          "raceId",
          "year",
          "round",
          "name_races",
          "date",
          "time",
          "url_races"
        ],
        "ddl": "create table circuit_races( circuitId integer primary key, circuitRef text, location text, country text, lat real, lng real, alt integer, raceId integer, foreign key(year) references seasons(year) integer, round integer, date date, time text)"
      }
    },
    "old_new_table_mapping": {
      "circuits": "circuit_races",
      "races": "circuit_races"
    },
    "new_table_primary_key": "circuitId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "name_circuits, url_circuits, name_races, url_races": {
        "old_table": "circuits, races",
        "old_column": "name, url"
      }
    },
    "new_gold_sql": "SELECT DISTINCT time FROM circuit_races WHERE name_circuits = 'Sepang International Circuit'"
  },
  {
    "train_idx": 858,
    "db_id": "formula_1",
    "question": "Which country is the constructor which got 1 point in the race No. 24 from?",
    "query": "SELECT T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T1.raceId = 24 AND T1.points = 1",
    "relevant_table": {
      "constructorresults": {
        "ddl": "create table constructorresults( constructorResultsId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(constructorId) references constructors(constructorId) integer, points real, status text)"
      },
      "constructors": {
        "ddl": "create table constructors( constructorId integer primary key, constructorRef text, name text, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "constructorResultsConstructors": {
        "columns": [
          "constructorId",
          "constructorRef",
          "name",
          "nationality",
          "url",
          "constructorResultsId",
          "raceId",
          "points",
          "status"
        ],
        "ddl": "create table constructorResultsConstructors( constructorId integer primary key, constructorRef text, name text, nationality text, url text, constructorResultsId integer, foreign key(raceId) references races(raceId) integer, points real, status text)"
      }
    },
    "old_new_table_mapping": {
      "constructors": "constructorResultsConstructors",
      "constructorresults": "constructorResultsConstructors"
    },
    "new_table_primary_key": "constructorId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT nationality FROM constructorResultsConstructors WHERE raceId = 24 AND points = 1"
  },
  {
    "train_idx": 859,
    "db_id": "formula_1",
    "question": "What's Bruno Senna's Q1 result in the qualifying race No. 354?",
    "query": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 354 AND T2.forename = 'Bruno' AND T2.surname = 'Senna'",
    "relevant_table": {
      "qualifying": {
        "ddl": "create table qualifying( qualifyId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, position integer, q1 text, q2 text, q3 text)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "qualifying_drivers": {
        "columns": [
          "qualifyId",
          "raceId",
          "driverId",
          "constructorId",
          "qualifying_number",
          "position",
          "q1",
          "q2",
          "q3",
          "driverRef",
          "drivers_number",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url"
        ],
        "ddl": "create table qualifying_drivers( qualifyId integer primary key, foreign key(raceId) references races(raceId) integer, driverId integer, foreign key(constructorId) references constructors(constructorId) integer, qualifying_number integer, position integer, q1 text, q2 text, q3 text, driverRef text, drivers_number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "old_new_table_mapping": {
      "qualifying": "qualifying_drivers",
      "drivers": "qualifying_drivers"
    },
    "new_table_primary_key": "qualifyId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "qualifying_number": {
        "old_table": "qualifying",
        "old_column": "number"
      },
      "drivers_number": {
        "old_table": "drivers",
        "old_column": "number"
      }
    },
    "new_gold_sql": "SELECT q1 FROM qualifying_drivers WHERE raceId = 354 AND forename = 'Bruno' AND surname = 'Senna'"
  },
  {
    "train_idx": 860,
    "db_id": "formula_1",
    "question": "For the driver who had the Q2 time as 0:01:40 in the qualifying race No. 355, what is his nationality?",
    "query": "SELECT DISTINCT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 355 AND T1.q2 LIKE '1:40%'",
    "relevant_table": {
      "qualifying": {
        "ddl": "create table qualifying( qualifyId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, position integer, q1 text, q2 text, q3 text)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "drivers_qualifying": {
        "columns": [
          "driverId",
          "driverRef",
          "number_drivers",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url",
          "qualifyId",
          "raceId",
          "constructorId",
          "number_qualifying",
          "position",
          "q1",
          "q2",
          "q3"
        ],
        "ddl": "create table drivers_qualifying( driverId integer primary key, driverRef text, number_drivers integer, code text, forename text, surname text, dob date, nationality text, url text, qualifyId integer, foreign key(raceId) references races(raceId) integer, foreign key(constructorId) references constructors(constructorId) integer, number_qualifying integer, position integer, q1 text, q2 text, q3 text)"
      }
    },
    "old_new_table_mapping": {
      "drivers": "drivers_qualifying",
      "qualifying": "drivers_qualifying"
    },
    "new_table_primary_key": "driverId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "number_drivers": {
        "old_table": "drivers",
        "old_column": "number"
      },
      "number_qualifying": {
        "old_table": "qualifying",
        "old_column": "number"
      }
    },
    "new_gold_sql": "SELECT DISTINCT nationality FROM drivers_qualifying WHERE raceId = 355 AND q2 LIKE '1:40%'"
  },
  {
    "train_idx": 861,
    "db_id": "formula_1",
    "question": "What is his number of the driver who finished 0:01:54 in the Q3 of qualifying race No.903?",
    "query": "SELECT T2.number FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 903 AND T1.q3 LIKE '1:54%'",
    "relevant_table": {
      "qualifying": {
        "ddl": "create table qualifying( qualifyId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, position integer, q1 text, q2 text, q3 text)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "qualifying_drivers": {
        "columns": [
          "qualifyId",
          "raceId",
          "driverId",
          "constructorId",
          "qualifying_number",
          "position",
          "q1",
          "q2",
          "q3",
          "driverRef",
          "drivers_number",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url"
        ],
        "ddl": "create table qualifying_drivers( qualifyId integer primary key, foreign key(raceId) references races(raceId) integer, driverId integer, foreign key(constructorId) references constructors(constructorId) integer, qualifying_number integer, position integer, q1 text, q2 text, q3 text, driverRef text, drivers_number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "old_new_table_mapping": {
      "qualifying": "qualifying_drivers",
      "drivers": "qualifying_drivers"
    },
    "new_table_primary_key": "qualifyId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "qualifying_number": {
        "old_table": "qualifying",
        "old_column": "number"
      },
      "drivers_number": {
        "old_table": "drivers",
        "old_column": "number"
      }
    },
    "new_gold_sql": "SELECT drivers_number FROM qualifying_drivers WHERE raceId = 903 AND q3 LIKE '1:54%'"
  },
  {
    "train_idx": 862,
    "db_id": "formula_1",
    "question": "For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",
    "query": "SELECT COUNT(T3.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2007 AND T1.name = 'Bahrain Grand Prix' AND T2.time IS NULL",
    "relevant_table": {
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      },
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "race_drivers": {
        "columns": [
          "driverId",
          "driverRef",
          "number",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "driver_url",
          "raceId",
          "year",
          "round",
          "circuitId",
          "name",
          "date",
          "time",
          "race_url"
        ],
        "ddl": "create table race_drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, driver_url text, raceId integer, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, race_url text)"
      },
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references race_drivers(raceId) integer, foreign key(driverId) references race_drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      }
    },
    "old_new_table_mapping": {
      "drivers": "race_drivers",
      "races": "race_drivers"
    },
    "new_table_primary_key": "driverId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "driver_url": {
        "old_table": "drivers",
        "old_column": "url"
      },
      "race_url": {
        "old_table": "races",
        "old_column": "url"
      }
    },
    "new_gold_sql": "SELECT COUNT(driverId) FROM race_drivers WHERE year = 2007 AND name = 'Bahrain Grand Prix' AND time IS NULL"
  },
  {
    "train_idx": 863,
    "db_id": "formula_1",
    "question": "Show me the season page of year when the race No. 901 took place.",
    "query": "SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.raceId = 901",
    "relevant_table": {
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      },
      "seasons": {
        "ddl": "create table seasons( year integer primary key, url text)"
      }
    },
    "new_relevant_table": {
      "race_seasons": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId",
          "name",
          "date",
          "time",
          "url_races",
          "url_seasons"
        ],
        "ddl": "create table race_seasons( raceId integer primary key, year integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url_races text, url_seasons text)"
      }
    },
    "old_new_table_mapping": {
      "seasons": "race_seasons",
      "races": "race_seasons"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "url_races": {
        "old_table": "races",
        "old_column": "url"
      },
      "url_seasons": {
        "old_table": "seasons",
        "old_column": "url"
      }
    },
    "new_gold_sql": "SELECT url_seasons FROM race_seasons WHERE raceId = 901"
  },
  {
    "train_idx": 864,
    "db_id": "formula_1",
    "question": "For the race happened on 2015/11/29, how many drivers finished the game?",
    "query": "SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '2015-11-29' AND T2.time IS NOT NULL",
    "relevant_table": {
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      },
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      }
    },
    "new_relevant_table": {
      "race_results": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId",
          "name",
          "date",
          "race_time",
          "url",
          "resultId",
          "driverId",
          "constructorId",
          "number",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "result_time",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId"
        ],
        "ddl": "create table race_results( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, race_time text, url text, resultId integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, result_time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      }
    },
    "old_new_table_mapping": {
      "races": "race_results",
      "results": "race_results"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "race_time": {
        "old_table": "races",
        "old_column": "time"
      },
      "result_time": {
        "old_table": "results",
        "old_column": "time"
      }
    },
    "new_gold_sql": "SELECT COUNT(driverId) FROM race_results WHERE date = '2015-11-29' AND result_time IS NOT NULL"
  },
  {
    "train_idx": 865,
    "db_id": "formula_1",
    "question": "For all the drivers who finished the game in race No. 592, who is the oldest?",
    "query": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 592 AND T2.time IS NOT NULL AND T1.dob IS NOT NULL ORDER BY T1.dob ASC LIMIT 1",
    "relevant_table": {
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      },
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      }
    },
    "new_relevant_table": {
      "drivers_results": {
        "columns": [
          "resultId",
          "raceId",
          "driverId_results",
          "constructorId",
          "number_results",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "time",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId",
          "driverId_drivers",
          "driverRef",
          "number_drivers",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url"
        ],
        "ddl": "create table drivers_results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(constructorId) references constructors(constructorId) integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer, driverRef text, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "old_new_table_mapping": {
      "results": "drivers_results",
      "drivers": "drivers_results"
    },
    "new_table_primary_key": "resultId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "driverId_results, number_results, driverId_drivers, number_drivers": {
        "old_table": "results, drivers",
        "old_column": "driverId, number"
      }
    },
    "new_gold_sql": "SELECT forename, surname FROM drivers_results WHERE raceId = 592 AND time IS NOT NULL AND dob IS NOT NULL ORDER BY dob ASC LIMIT 1"
  },
  {
    "train_idx": 866,
    "db_id": "formula_1",
    "question": "Who was the player that got the lap time of 0:01:27 in the race No. 161? Show his introduction website.",
    "query": "SELECT DISTINCT T2.forename, T2.surname, T2.url FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 161 AND T1.time LIKE '1:27%'",
    "relevant_table": {
      "laptimes": {
        "ddl": "create table laptimes( foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, lap integer, position integer, time text, milliseconds integer)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "mergedTable": {
        "columns": [
          "driverId",
          "driverRef",
          "number",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url",
          "raceId",
          "lap",
          "position",
          "time",
          "milliseconds"
        ],
        "ddl": "create table mergedTable( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text, foreign key(raceId) references races(raceId) integer, lap integer, position integer, time text, milliseconds integer)"
      }
    },
    "old_new_table_mapping": {
      "drivers": "mergedTable",
      "laptimes": "mergedTable"
    },
    "new_table_primary_key": "driverId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT forename, surname, url FROM mergedTable WHERE raceId = 161 AND time LIKE '1:27%'"
  },
  {
    "train_idx": 867,
    "db_id": "formula_1",
    "question": "For the driver who set the fastest lap speed in race No.933, where does he come from?",
    "query": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 933 AND T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
    "relevant_table": {
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      },
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      }
    },
    "new_relevant_table": {
      "drivers_results": {
        "columns": [
          "resultId",
          "raceId",
          "driverId",
          "constructorId",
          "results_number",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "time",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId",
          "driverRef",
          "drivers_number",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url"
        ],
        "ddl": "create table drivers_results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, driverId integer, foreign key(constructorId) references constructors(constructorId) integer, results_number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer, driverRef text, drivers_number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "old_new_table_mapping": {
      "results": "drivers_results",
      "drivers": "drivers_results"
    },
    "new_table_primary_key": "resultId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "drivers_number": {
        "old_table": "drivers",
        "old_column": "number"
      },
      "results_number": {
        "old_table": "results",
        "old_column": "number"
      }
    },
    "new_gold_sql": "SELECT nationality FROM drivers_results WHERE raceId = 933 AND fastestLapTime IS NOT NULL ORDER BY fastestLapSpeed DESC LIMIT 1"
  },
  {
    "train_idx": 868,
    "db_id": "formula_1",
    "question": "Where is Malaysian Grand Prix held? Give the location coordinates.",
    "query": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Malaysian Grand Prix'",
    "relevant_table": {
      "circuits": {
        "ddl": "create table circuits( circuitId integer primary key, circuitRef text, name text, location text, country text, lat real, lng real, alt integer, url text)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "circuits_races": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId",
          "race_name",
          "date",
          "time",
          "race_url",
          "circuitRef",
          "circuit_name",
          "location",
          "country",
          "lat",
          "lng",
          "alt",
          "circuit_url"
        ],
        "ddl": "create table circuits_races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, circuitId integer, date date, time text, circuitRef text, location text, country text, lat real, lng real, alt integer)"
      }
    },
    "old_new_table_mapping": {
      "races": "circuits_races",
      "circuits": "circuits_races"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "race_name, race_url, circuit_name, circuit_url": {
        "old_table": "races, circuits",
        "old_column": "name, url"
      }
    },
    "new_gold_sql": "SELECT DISTINCT lat, lng FROM circuits_races WHERE race_name = 'Malaysian Grand Prix'"
  },
  {
    "train_idx": 869,
    "db_id": "formula_1",
    "question": "For the constructor which got the highest point in the race No. 9 , what is its introduction website?",
    "query": "SELECT T2.url FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T1.raceId = 9 ORDER BY T1.points DESC LIMIT 1",
    "relevant_table": {
      "constructorresults": {
        "ddl": "create table constructorresults( constructorResultsId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(constructorId) references constructors(constructorId) integer, points real, status text)"
      },
      "constructors": {
        "ddl": "create table constructors( constructorId integer primary key, constructorRef text, name text, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "mergedConstructorsResults": {
        "columns": [
          "constructorId",
          "constructorRef",
          "name",
          "nationality",
          "url",
          "constructorResultsId",
          "raceId",
          "points",
          "status"
        ],
        "ddl": "create table mergedConstructorsResults( constructorId integer primary key, constructorRef text, name text, nationality text, url text, constructorResultsId integer, foreign key(raceId) references races(raceId) integer, points real, status text)"
      }
    },
    "old_new_table_mapping": {
      "constructors": "mergedConstructorsResults",
      "constructorresults": "mergedConstructorsResults"
    },
    "new_table_primary_key": "constructorId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT url FROM mergedConstructorsResults WHERE raceId = 9 ORDER BY points DESC LIMIT 1"
  },
  {
    "train_idx": 870,
    "db_id": "formula_1",
    "question": "What's Lucas di Grassi's Q1 result in the race No. 345?",
    "query": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 345 AND T2.forename = 'Lucas' AND T2.surname = 'di Grassi'",
    "relevant_table": {
      "qualifying": {
        "ddl": "create table qualifying( qualifyId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, position integer, q1 text, q2 text, q3 text)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "qualifying_drivers": {
        "columns": [
          "qualifyId",
          "raceId",
          "driverId",
          "constructorId",
          "qualifying_number",
          "position",
          "q1",
          "q2",
          "q3",
          "driverRef",
          "drivers_number",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url"
        ],
        "ddl": "create table qualifying_drivers( qualifyId integer primary key, foreign key(raceId) references races(raceId) integer, driverId integer, foreign key(constructorId) references constructors(constructorId) integer, qualifying_number integer, position integer, q1 text, q2 text, q3 text, driverRef text, drivers_number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "old_new_table_mapping": {
      "qualifying": "qualifying_drivers",
      "drivers": "qualifying_drivers"
    },
    "new_table_primary_key": "qualifyId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "qualifying_number": {
        "old_table": "qualifying",
        "old_column": "number"
      },
      "drivers_number": {
        "old_table": "drivers",
        "old_column": "number"
      }
    },
    "new_gold_sql": "SELECT q1 FROM qualifying_drivers WHERE raceId = 345 AND forename = 'Lucas' AND surname = 'di Grassi'"
  },
  {
    "train_idx": 871,
    "db_id": "formula_1",
    "question": "For the driver who had the Q2 time as 0:01:15 in race No. 347, where is he from?",
    "query": "SELECT DISTINCT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 347 AND T1.q2 LIKE '1:15%'",
    "relevant_table": {
      "qualifying": {
        "ddl": "create table qualifying( qualifyId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, position integer, q1 text, q2 text, q3 text)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "drivers_qualifying": {
        "columns": [
          "driverId",
          "driverRef",
          "number_drivers",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url",
          "qualifyId",
          "raceId",
          "constructorId",
          "number_qualifying",
          "position",
          "q1",
          "q2",
          "q3"
        ],
        "ddl": "create table drivers_qualifying( driverId integer primary key, driverRef text, code text, forename text, surname text, dob date, nationality text, url text, qualifyId integer, foreign key(raceId) references races(raceId) integer, foreign key(constructorId) references constructors(constructorId) integer, position integer, q1 text, q2 text, q3 text)"
      }
    },
    "old_new_table_mapping": {
      "drivers": "drivers_qualifying",
      "qualifying": "drivers_qualifying"
    },
    "new_table_primary_key": "driverId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "number_drivers, number_qualifying": {
        "old_table": "drivers, qualifying",
        "old_column": "number, number"
      }
    },
    "new_gold_sql": "SELECT DISTINCT nationality FROM drivers_qualifying WHERE raceId = 347 AND q2 LIKE '1:15%'"
  },
  {
    "train_idx": 872,
    "db_id": "formula_1",
    "question": "In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?",
    "query": "SELECT T2.code FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 45 AND T1.q3 LIKE '1:33%'",
    "relevant_table": {
      "qualifying": {
        "ddl": "create table qualifying( qualifyId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, position integer, q1 text, q2 text, q3 text)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "drivers_qualifying": {
        "columns": [
          "driverId",
          "driverRef",
          "number_drivers",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url",
          "qualifyId",
          "raceId",
          "constructorId",
          "number_qualifying",
          "position",
          "q1",
          "q2",
          "q3"
        ],
        "ddl": "create table drivers_qualifying( driverId integer primary key, driverRef text, number_drivers integer, code text, forename text, surname text, dob date, nationality text, url text, qualifyId integer, foreign key(raceId) references races(raceId) integer, foreign key(constructorId) references constructors(constructorId) integer, number_qualifying integer, position integer, q1 text, q2 text, q3 text)"
      }
    },
    "old_new_table_mapping": {
      "drivers": "drivers_qualifying",
      "qualifying": "drivers_qualifying"
    },
    "new_table_primary_key": "driverId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "number_drivers": {
        "old_table": "drivers",
        "old_column": "number"
      },
      "number_qualifying": {
        "old_table": "qualifying",
        "old_column": "number"
      }
    },
    "new_gold_sql": "SELECT code FROM drivers_qualifying WHERE raceId = 45 AND q3 LIKE '1:33%'"
  },
  {
    "train_idx": 873,
    "db_id": "formula_1",
    "question": "What is the actual finish time for Bruce McLaren in the race No.743?",
    "query": "SELECT T2.time FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 743 AND T1.forename = 'Bruce' AND T1.surname = 'McLaren'",
    "relevant_table": {
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      },
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      }
    },
    "new_relevant_table": {
      "drivers_results": {
        "columns": [
          "resultId",
          "raceId",
          "driverId_results",
          "constructorId",
          "number_results",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "time",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId",
          "driverId_drivers",
          "driverRef",
          "number_drivers",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url"
        ],
        "ddl": "create table drivers_results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(constructorId) references constructors(constructorId) integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer, driverRef text, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "old_new_table_mapping": {
      "results": "drivers_results",
      "drivers": "drivers_results"
    },
    "new_table_primary_key": "resultId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "driverId_results, number_results, driverId_drivers, number_drivers": {
        "old_table": "results, drivers",
        "old_column": "driverId, number"
      }
    },
    "new_gold_sql": "SELECT time FROM drivers_results WHERE raceId = 743 AND forename = 'Bruce' AND surname = 'McLaren'"
  },
  {
    "train_idx": 874,
    "db_id": "formula_1",
    "question": "Who finished second in the San Marino Grand Prix in 2006?",
    "query": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2006 AND T1.name = 'San Marino Grand Prix' AND T2.position = 2",
    "relevant_table": {
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      },
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "race_results": {
        "columns": [
          "resultId",
          "raceId",
          "driverId",
          "constructorId",
          "number",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "time_results",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId",
          "year",
          "round",
          "circuitId",
          "name",
          "date",
          "time_races",
          "url"
        ],
        "ddl": "create table race_results( resultId integer primary key, raceId integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time_results text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time_races text, url text)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "old_new_table_mapping": {
      "results": "race_results",
      "races": "race_results"
    },
    "new_table_primary_key": "resultId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "time_results": {
        "old_table": "results",
        "old_column": "time"
      },
      "time_races": {
        "old_table": "races",
        "old_column": "time"
      }
    },
    "new_gold_sql": "SELECT forename, surname FROM race_results WHERE year = 2006 AND name = 'San Marino Grand Prix' AND position = 2"
  },
  {
    "train_idx": 875,
    "db_id": "formula_1",
    "question": "Show me the season page of year when the race No. 901 took place.",
    "query": "SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.raceId = 901",
    "relevant_table": {
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      },
      "seasons": {
        "ddl": "create table seasons( year integer primary key, url text)"
      }
    },
    "new_relevant_table": {
      "races_seasons": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId",
          "name",
          "date",
          "time",
          "url_races",
          "url_seasons"
        ],
        "ddl": "create table races_seasons( raceId integer primary key, year integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url_races text, url_seasons text)"
      }
    },
    "old_new_table_mapping": {
      "seasons": "races_seasons",
      "races": "races_seasons"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "url_races": {
        "old_table": "races",
        "old_column": "url"
      },
      "url_seasons": {
        "old_table": "seasons",
        "old_column": "url"
      }
    },
    "new_gold_sql": "SELECT url_seasons FROM races_seasons WHERE raceId = 901"
  },
  {
    "train_idx": 876,
    "db_id": "formula_1",
    "question": "For the race happened in 2015/11/29, how many drivers did not finish the game?",
    "query": "SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '2015-11-29' AND T2.time IS NULL",
    "relevant_table": {
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      },
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      }
    },
    "new_relevant_table": {
      "race_results": {
        "columns": [
          "resultId",
          "raceId",
          "driverId",
          "constructorId",
          "number",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "time_results",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId",
          "year",
          "round",
          "circuitId",
          "name",
          "date",
          "time_races",
          "url"
        ],
        "ddl": "create table race_results( resultId integer primary key, raceId integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time_results text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time_races text, url text)"
      }
    },
    "old_new_table_mapping": {
      "results": "race_results",
      "races": "race_results"
    },
    "new_table_primary_key": "resultId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "time_results": {
        "old_table": "results",
        "old_column": "time"
      },
      "time_races": {
        "old_table": "races",
        "old_column": "time"
      }
    },
    "new_gold_sql": "SELECT COUNT(driverId) FROM race_results WHERE date = '2015-11-29' AND time_results IS NULL"
  },
  {
    "train_idx": 877,
    "db_id": "formula_1",
    "question": "For all the drivers who finished the game in race No. 872, who is the youngest?",
    "query": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 872 AND T2.time IS NOT NULL ORDER BY T1.dob DESC LIMIT 1",
    "relevant_table": {
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      },
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      }
    },
    "new_relevant_table": {
      "drivers_results": {
        "columns": [
          "driverId",
          "driverRef",
          "number_drivers",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url",
          "resultId",
          "raceId",
          "constructorId",
          "number_results",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "time",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId"
        ],
        "ddl": "create table drivers_results( driverId integer primary key, driverRef text, number_drivers integer, code text, forename text, surname text, dob date, nationality text, url text, resultId integer, foreign key(raceId) references races(raceId) integer, foreign key(constructorId) references constructors(constructorId) integer, number_results integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      }
    },
    "old_new_table_mapping": {
      "drivers": "drivers_results",
      "results": "drivers_results"
    },
    "new_table_primary_key": "driverId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "number_drivers": {
        "old_table": "drivers",
        "old_column": "number"
      },
      "number_results": {
        "old_table": "results",
        "old_column": "number"
      }
    },
    "new_gold_sql": "SELECT forename, surname FROM drivers_results WHERE raceId = 872 AND time IS NOT NULL ORDER BY dob DESC LIMIT 1"
  },
  {
    "train_idx": 878,
    "db_id": "formula_1",
    "question": "Who was the driver that got the best lap time in the race No. 348? Give his full name.",
    "query": "SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 348 ORDER BY T1.time ASC LIMIT 1",
    "relevant_table": {
      "laptimes": {
        "ddl": "create table laptimes( foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, lap integer, position integer, time text, milliseconds integer)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "mergedTable": {
        "columns": [
          "raceId",
          "driverId",
          "lap",
          "position",
          "time",
          "milliseconds",
          "driverRef",
          "number",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url"
        ],
        "ddl": "create table mergedTable( foreign key(raceId) references races(raceId) integer, driverId integer primary key, lap integer, position integer, time text, milliseconds integer, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "old_new_table_mapping": {
      "laptimes": "mergedTable",
      "drivers": "mergedTable"
    },
    "new_table_primary_key": "driverId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT forename, surname FROM mergedTable WHERE raceId = 348 ORDER BY time ASC LIMIT 1"
  },
  {
    "train_idx": 879,
    "db_id": "formula_1",
    "question": "For the driver who set the fastest lap speed, what is his nationality?",
    "query": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
    "relevant_table": {
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      },
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      }
    },
    "new_relevant_table": {
      "drivers_results": {
        "columns": [
          "resultId",
          "raceId",
          "driverId",
          "constructorId",
          "number_results",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "time",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId",
          "driverRef",
          "number_drivers",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url"
        ],
        "ddl": "create table drivers_results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, driverId integer, foreign key(constructorId) references constructors(constructorId) integer, number_results integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer, driverRef text, number_drivers integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "old_new_table_mapping": {
      "results": "drivers_results",
      "drivers": "drivers_results"
    },
    "new_table_primary_key": "resultId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "number_results": {
        "old_table": "results",
        "old_column": "number"
      },
      "number_drivers": {
        "old_table": "drivers",
        "old_column": "number"
      }
    },
    "new_gold_sql": "SELECT nationality FROM drivers_results ORDER BY fastestLapSpeed DESC LIMIT 1"
  },
  {
    "train_idx": 880,
    "db_id": "formula_1",
    "question": "Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed?",
    "query": "SELECT (SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) - SUM(IIF(T2.raceId = 854, T2.fastestLapSpeed, 0))) * 100 / SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Paul' AND T1.surname = 'di Resta'",
    "relevant_table": {
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      },
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      }
    },
    "new_relevant_table": {
      "merged_drivers_results": {
        "columns": [
          "driverId",
          "driverRef",
          "number_drivers",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url",
          "resultId",
          "raceId",
          "constructorId",
          "number_results",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "time",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId"
        ],
        "ddl": "create table merged_drivers_results( driverId integer primary key, driverRef text, number_drivers integer, code text, forename text, surname text, dob date, nationality text, url text, resultId integer, foreign key(raceId) references races(raceId) integer, foreign key(constructorId) references constructors(constructorId) integer, number_results integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      }
    },
    "old_new_table_mapping": {
      "drivers": "merged_drivers_results",
      "results": "merged_drivers_results"
    },
    "new_table_primary_key": "driverId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "number_drivers": {
        "old_table": "drivers",
        "old_column": "number"
      },
      "number_results": {
        "old_table": "results",
        "old_column": "number"
      }
    },
    "new_gold_sql": "SELECT (SUM(IIF(raceId = 853, fastestLapSpeed, 0)) - SUM(IIF(raceId = 854, fastestLapSpeed, 0))) * 100 / SUM(IIF(raceId = 853, fastestLapSpeed, 0)) FROM merged_drivers_results WHERE forename = 'Paul' AND surname = 'di Resta'"
  },
  {
    "train_idx": 881,
    "db_id": "formula_1",
    "question": "For the drivers who took part in the race in 1983/7/16, what's their race completion rate?",
    "query": "SELECT CAST(COUNT(CASE WHEN T2.time IS NOT NULL THEN T2.driverId END) AS REAL) * 100 / COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '1983-07-16'",
    "relevant_table": {
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      },
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      }
    },
    "new_relevant_table": {
      "race_results": {
        "columns": [
          "resultId",
          "raceId",
          "driverId",
          "constructorId",
          "number",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "time_results",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId",
          "year",
          "round",
          "circuitId",
          "name",
          "date",
          "time_races",
          "url"
        ],
        "ddl": "create table race_results( resultId integer primary key, raceId integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time_results text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time_races text, url text)"
      }
    },
    "old_new_table_mapping": {
      "results": "race_results",
      "races": "race_results"
    },
    "new_table_primary_key": "resultId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "time_results": {
        "old_table": "results",
        "old_column": "time"
      },
      "time_races": {
        "old_table": "races",
        "old_column": "time"
      }
    },
    "new_gold_sql": "SELECT CAST(COUNT(CASE WHEN time_results IS NOT NULL THEN driverId END) AS REAL) * 100 / COUNT(driverId) FROM race_results WHERE date = '1983-07-16'"
  },
  {
    "train_idx": 888,
    "db_id": "formula_1",
    "question": "In which country was the first European Grand Prix hosted? Name the circuit and location.",
    "query": "SELECT T1.country, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix' ORDER BY T2.year ASC LIMIT 1",
    "relevant_table": {
      "circuits": {
        "ddl": "create table circuits( circuitId integer primary key, circuitRef text, name text, location text, country text, lat real, lng real, alt integer, url text)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "circuits_races": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId",
          "races_name",
          "date",
          "time",
          "races_url",
          "circuitRef",
          "circuits_name",
          "location",
          "country",
          "lat",
          "lng",
          "alt",
          "circuits_url"
        ],
        "ddl": "create table circuits_races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, circuitId integer, date date, time text, circuitRef text, location text, country text, lat real, lng real, alt integer)"
      }
    },
    "old_new_table_mapping": {
      "races": "circuits_races",
      "circuits": "circuits_races"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['races_name', 'circuits_name', 'races_url', 'circuits_url']": {
        "old_table": "['races', 'circuits']",
        "old_column": "['name', 'url']"
      }
    },
    "new_gold_sql": "SELECT country, location FROM circuits_races WHERE races_name = 'European Grand Prix' ORDER BY year ASC LIMIT 1"
  },
  {
    "train_idx": 889,
    "db_id": "formula_1",
    "question": "When was the last f1 season whereby Brands Hatch hosted the British Grand Prix?",
    "query": "SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Brands Hatch' AND T2.name = 'British Grand Prix' ORDER BY T2.year DESC LIMIT 1",
    "relevant_table": {
      "circuits": {
        "ddl": "create table circuits( circuitId integer primary key, circuitRef text, name text, location text, country text, lat real, lng real, alt integer, url text)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "race_circuit": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId_races",
          "name_races",
          "date",
          "time",
          "url_races",
          "circuitId_circuits",
          "circuitRef",
          "name_circuits",
          "location",
          "country",
          "lat",
          "lng",
          "alt",
          "url_circuits"
        ],
        "ddl": "create table race_circuit( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, date date, time text, circuitRef text, location text, country text, lat real, lng real, alt integer)"
      }
    },
    "old_new_table_mapping": {
      "races": "race_circuit",
      "circuits": "race_circuit"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['circuitId_races', 'name_races', 'url_races']": {
        "old_table": "['races', 'circuits', 'races']",
        "old_column": "['circuitId', 'name', 'url']"
      }
    },
    "new_gold_sql": "SELECT date FROM race_circuit WHERE name_circuits = 'Brands Hatch' AND name_races = 'British Grand Prix' ORDER BY year DESC LIMIT 1"
  },
  {
    "train_idx": 890,
    "db_id": "formula_1",
    "question": "How many seasons has Silverstone Circuit hosted the United Kindom grand prix?",
    "query": "SELECT COUNT(T2.circuitid) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit' AND T2.name = 'British Grand Prix'",
    "relevant_table": {
      "circuits": {
        "ddl": "create table circuits( circuitId integer primary key, circuitRef text, name text, location text, country text, lat real, lng real, alt integer, url text)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "circuits_races": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId_races",
          "name_races",
          "date",
          "time",
          "url_races",
          "circuitId",
          "circuitRef",
          "name_circuits",
          "location",
          "country",
          "lat",
          "lng",
          "alt",
          "url_circuits"
        ],
        "ddl": "create table circuits_races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, date date, time text, circuitId integer, circuitRef text, location text, country text, lat real, lng real, alt integer)"
      }
    },
    "old_new_table_mapping": {
      "races": "circuits_races",
      "circuits": "circuits_races"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "circuitId_races, name_circuits, url_races": {
        "old_table": "races, circuits, races",
        "old_column": "circuitId, name, url"
      }
    },
    "new_gold_sql": "SELECT COUNT(circuitId_races) FROM circuits_races WHERE name_circuits = 'Silverstone Circuit' AND name_races = 'British Grand Prix'"
  },
  {
    "train_idx": 892,
    "db_id": "formula_1",
    "question": "State the driver with the most points scored. Find his full name with that points.",
    "query": "SELECT T3.forename, T3.surname, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId ORDER BY T2.points DESC LIMIT 1",
    "relevant_table": {
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      },
      "driverstandings": {
        "ddl": "create table driverstandings( driverStandingsId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, points real, position integer, positionText text, wins integer)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "driverStandingsDrivers": {
        "columns": [
          "driverStandingsId",
          "raceId",
          "driverId",
          "points",
          "position",
          "positionText",
          "wins",
          "driverRef",
          "number",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url"
        ],
        "ddl": "create table driverStandingsDrivers( driverStandingsId integer primary key, foreign key(raceId) references races(raceId) integer, driverId integer, points real, position integer, positionText text, wins integer, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "old_new_table_mapping": {
      "driverstandings": "driverStandingsDrivers",
      "drivers": "driverStandingsDrivers"
    },
    "new_table_primary_key": "driverStandingsId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT forename, surname, points FROM driverStandingsDrivers ORDER BY points DESC LIMIT 1"
  },
  {
    "train_idx": 894,
    "db_id": "formula_1",
    "question": "What is the best lap time recorded? List the driver and race with such recorded lap time.",
    "query": "SELECT T2.milliseconds, T1.forename, T1.surname, T3.name FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.milliseconds ASC LIMIT 1",
    "relevant_table": {
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      },
      "laptimes": {
        "ddl": "create table laptimes( foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, lap integer, position integer, time text, milliseconds integer)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "drivers_laptimes": {
        "columns": [
          "driverId",
          "driverRef",
          "number",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url",
          "raceId_laptimes",
          "lap",
          "position",
          "time",
          "milliseconds"
        ],
        "ddl": "create table drivers_laptimes( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text, lap integer, position integer, time text, milliseconds integer)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "old_new_table_mapping": {
      "laptimes": "drivers_laptimes",
      "drivers": "drivers_laptimes"
    },
    "new_table_primary_key": "driverId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT milliseconds, forename, surname, name FROM drivers_laptimes ORDER BY milliseconds ASC LIMIT 1"
  },
  {
    "train_idx": 895,
    "db_id": "formula_1",
    "question": "What is the average lap time for Lewis Hamilton in the 2009 Malaysian Grand Prix?",
    "query": "SELECT AVG(T2.milliseconds) FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.year = 2009 AND T1.name = 'Malaysian Grand Prix'",
    "relevant_table": {
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      },
      "laptimes": {
        "ddl": "create table laptimes( foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, lap integer, position integer, time text, milliseconds integer)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "raceLapTimes": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId",
          "name",
          "date",
          "time_race",
          "url",
          "driverId",
          "lap",
          "position",
          "time_lap",
          "milliseconds"
        ],
        "ddl": "create table raceLapTimes( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time_race text, url text, foreign key(driverId) references drivers(driverId) integer, lap integer, position integer, time_lap text, milliseconds integer)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "old_new_table_mapping": {
      "races": "raceLapTimes",
      "laptimes": "raceLapTimes"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "time_race": {
        "old_table": "races",
        "old_column": "time"
      },
      "time_lap": {
        "old_table": "laptimes",
        "old_column": "time"
      }
    },
    "new_gold_sql": "SELECT AVG(raceLapTimes.milliseconds) FROM raceLapTimes WHERE raceLapTimes.driverId IN (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND raceLapTimes.year = 2009 AND raceLapTimes.name = 'Malaysian Grand Prix'"
  },
  {
    "train_idx": 896,
    "db_id": "formula_1",
    "question": "Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010.",
    "query": "SELECT CAST(COUNT(CASE WHEN T2.position <> 1 THEN T2.position END) AS REAL) * 100 / COUNT(T2.driverStandingsId) FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.surname = 'Hamilton' AND T1.year >= 2010",
    "relevant_table": {
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      },
      "driverstandings": {
        "ddl": "create table driverstandings( driverStandingsId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, points real, position integer, positionText text, wins integer)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "raceDrivers": {
        "columns": [
          "driverId",
          "driverRef",
          "number",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "driver_url",
          "raceId",
          "year",
          "round",
          "circuitId",
          "name",
          "date",
          "time",
          "race_url"
        ],
        "ddl": "create table raceDrivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, driver_url text, raceId integer, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, race_url text)"
      },
      "driverstandings": {
        "ddl": "create table driverstandings( driverStandingsId integer primary key, foreign key(raceId) references raceDrivers(raceId) integer, foreign key(driverId) references raceDrivers(driverId) integer, points real, position integer, positionText text, wins integer)"
      }
    },
    "old_new_table_mapping": {
      "drivers": "raceDrivers",
      "races": "raceDrivers"
    },
    "new_table_primary_key": "driverId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "driver_url": {
        "old_table": "drivers",
        "old_column": "url"
      },
      "race_url": {
        "old_table": "races",
        "old_column": "url"
      }
    },
    "new_gold_sql": "SELECT CAST(COUNT(CASE WHEN position <> 1 THEN position END) AS REAL) * 100 / COUNT(driverStandingsId) FROM raceDrivers WHERE surname = 'Hamilton' AND year >= 2010"
  },
  {
    "train_idx": 899,
    "db_id": "formula_1",
    "question": "List circuits which host 4 f1 races from year 1990 to 2000.",
    "query": "SELECT DISTINCT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE STRFTIME('%Y', T2.date) BETWEEN '1990' AND '2000' GROUP BY T1.name HAVING COUNT(T2.raceId) = 4",
    "relevant_table": {
      "circuits": {
        "ddl": "create table circuits( circuitId integer primary key, circuitRef text, name text, location text, country text, lat real, lng real, alt integer, url text)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "race_circuit": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId_races",
          "name_races",
          "date",
          "time",
          "url_races",
          "circuitId_circuits",
          "circuitRef",
          "name_circuits",
          "location",
          "country",
          "lat",
          "lng",
          "alt",
          "url_circuits"
        ],
        "ddl": "create table race_circuit( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, date date, time text, circuitRef text, location text, country text, lat real, lng real, alt integer)"
      }
    },
    "old_new_table_mapping": {
      "races": "race_circuit",
      "circuits": "race_circuit"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['name_races', 'url_races', 'circuitId_races']": {
        "old_table": "['races', 'races', 'races']",
        "old_column": "['name', 'url', 'circuitId']"
      }
    },
    "new_gold_sql": "SELECT DISTINCT name_circuits FROM race_circuit WHERE STRFTIME('%Y', date) BETWEEN '1990' AND '2000' GROUP BY name_circuits HAVING COUNT(raceId) = 4"
  },
  {
    "train_idx": 900,
    "db_id": "formula_1",
    "question": "List circuits in USA which hosted f1 races in 2006. State the name and location of circuit and the name of the race it hosted.",
    "query": "SELECT T1.name, T1.location, T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'USA' AND T2.year = 2006",
    "relevant_table": {
      "circuits": {
        "ddl": "create table circuits( circuitId integer primary key, circuitRef text, name text, location text, country text, lat real, lng real, alt integer, url text)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "circuits_races": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId",
          "race_name",
          "date",
          "time",
          "race_url",
          "circuitRef",
          "circuit_name",
          "location",
          "country",
          "lat",
          "lng",
          "alt",
          "circuit_url"
        ],
        "ddl": "create table circuits_races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, circuitId integer, race_name text, date date, time text, race_url text, circuitRef text, circuit_name text, location text, country text, lat real, lng real, alt integer, circuit_url text)"
      }
    },
    "old_new_table_mapping": {
      "races": "circuits_races",
      "circuits": "circuits_races"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "race_name": {
        "old_table": "races",
        "old_column": "name"
      },
      "circuit_name": {
        "old_table": "circuits",
        "old_column": "name"
      },
      "race_url": {
        "old_table": "races",
        "old_column": "url"
      },
      "circuit_url": {
        "old_table": "circuits",
        "old_column": "url"
      }
    },
    "new_gold_sql": "SELECT circuit_name, location, race_name FROM circuits_races WHERE country = 'USA' AND year = 2006"
  },
  {
    "train_idx": 901,
    "db_id": "formula_1",
    "question": "Name the races along with its circuit name and location for f1 races hosted in September 2005.",
    "query": "SELECT DISTINCT T2.name, T1.name, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2005 AND STRFTIME('%m', T2.date) = '09'",
    "relevant_table": {
      "circuits": {
        "ddl": "create table circuits( circuitId integer primary key, circuitRef text, name text, location text, country text, lat real, lng real, alt integer, url text)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "race_circuit": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId",
          "race_name",
          "date",
          "time",
          "race_url",
          "circuitRef",
          "circuit_name",
          "location",
          "country",
          "lat",
          "lng",
          "alt",
          "circuit_url"
        ],
        "ddl": "create table race_circuit( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, circuitId integer, race_name text, date date, time text, race_url text, circuitRef text, circuit_name text, location text, country text, lat real, lng real, alt integer, circuit_url text)"
      }
    },
    "old_new_table_mapping": {
      "races": "race_circuit",
      "circuits": "race_circuit"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "race_name": {
        "old_table": "races",
        "old_column": "name"
      },
      "circuit_name": {
        "old_table": "circuits",
        "old_column": "name"
      },
      "race_url": {
        "old_table": "races",
        "old_column": "url"
      },
      "circuit_url": {
        "old_table": "circuits",
        "old_column": "url"
      }
    },
    "new_gold_sql": "SELECT DISTINCT circuit_name, race_name, location FROM race_circuit WHERE year = 2005 AND STRFTIME('%m', date) = '09'"
  },
  {
    "train_idx": 902,
    "db_id": "formula_1",
    "question": "Which race was Alex Yoong in when he was in track number less than 20?",
    "query": "SELECT T1.name FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 20",
    "relevant_table": {
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      },
      "driverstandings": {
        "ddl": "create table driverstandings( driverStandingsId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, points real, position integer, positionText text, wins integer)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "raceDriverStandings": {
        "columns": [
          "driverStandingsId",
          "raceId",
          "driverId",
          "points",
          "position",
          "positionText",
          "wins",
          "year",
          "round",
          "circuitId",
          "name",
          "date",
          "time",
          "url"
        ],
        "ddl": "create table raceDriverStandings( driverStandingsId integer primary key, raceId integer, foreign key(driverId) references drivers(driverId) integer, points real, position integer, positionText text, wins integer, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "old_new_table_mapping": {
      "driverstandings": "raceDriverStandings",
      "races": "raceDriverStandings"
    },
    "new_table_primary_key": "driverStandingsId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT name FROM raceDriverStandings WHERE forename = 'Alex' AND surname = 'Yoong' AND position < 20"
  },
  {
    "train_idx": 903,
    "db_id": "formula_1",
    "question": "How many times did Michael Schumacher won from races hosted in Sepang International Circuit?",
    "query": "SELECT SUM(T2.wins) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId INNER JOIN circuits AS T4 ON T4.circuitId = T3.circuitId WHERE T1.forename = 'Michael' AND T1.surname = 'Schumacher' AND T4.name = 'Sepang International Circuit'",
    "relevant_table": {
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      },
      "driverstandings": {
        "ddl": "create table driverstandings( driverStandingsId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, points real, position integer, positionText text, wins integer)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      },
      "circuits": {
        "ddl": "create table circuits( circuitId integer primary key, circuitRef text, name text, location text, country text, lat real, lng real, alt integer, url text)"
      }
    },
    "new_relevant_table": {
      "raceDriverStandings": {
        "columns": [
          "driverStandingsId",
          "raceId",
          "driverId",
          "points",
          "position",
          "positionText",
          "wins",
          "year",
          "round",
          "circuitId",
          "name",
          "date",
          "time",
          "url"
        ],
        "ddl": "create table raceDriverStandings( driverStandingsId integer primary key, raceId integer, foreign key(driverId) references drivers(driverId) integer, points real, position integer, positionText text, wins integer, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      },
      "circuits": {
        "ddl": "create table circuits( circuitId integer primary key, circuitRef text, name text, location text, country text, lat real, lng real, alt integer, url text)"
      }
    },
    "old_new_table_mapping": {
      "driverstandings": "raceDriverStandings",
      "races": "raceDriverStandings"
    },
    "new_table_primary_key": "driverStandingsId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT SUM(wins) FROM raceDriverStandings WHERE driverId IN (SELECT driverId FROM drivers WHERE forename = 'Michael' AND surname = 'Schumacher') AND circuitId IN (SELECT circuitId FROM circuits WHERE name = 'Sepang International Circuit')"
  },
  {
    "train_idx": 904,
    "db_id": "formula_1",
    "question": "State the race and year of race in which Michael Schumacher had his fastest lap.",
    "query": "SELECT T1.name, T1.year FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Michael' AND T3.surname = 'Schumacher' ORDER BY T2.milliseconds ASC LIMIT 1",
    "relevant_table": {
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      },
      "laptimes": {
        "ddl": "create table laptimes( foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, lap integer, position integer, time text, milliseconds integer)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "raceDrivers": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId",
          "raceName",
          "date",
          "time",
          "raceUrl",
          "driverId",
          "driverRef",
          "number",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "driverUrl"
        ],
        "ddl": "create table raceDrivers( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, date date, time text, driverId integer, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text)"
      },
      "laptimes": {
        "ddl": "create table laptimes( foreign key(raceId) references raceDrivers(raceId) integer, foreign key(driverId) references raceDrivers(driverId) integer, lap integer, position integer, time text, milliseconds integer)"
      }
    },
    "old_new_table_mapping": {
      "races": "raceDrivers",
      "drivers": "raceDrivers"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT raceName, year FROM raceDrivers WHERE forename = 'Michael' AND surname = 'Schumacher' ORDER BY time ASC LIMIT 1"
  },
  {
    "train_idx": 905,
    "db_id": "formula_1",
    "question": "What is Eddie Irvine's average points scored in year 2000?",
    "query": "SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Eddie' AND T1.surname = 'Irvine' AND T3.year = 2000",
    "relevant_table": {
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      },
      "driverstandings": {
        "ddl": "create table driverstandings( driverStandingsId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, points real, position integer, positionText text, wins integer)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "drivers_races": {
        "columns": [
          "driverId",
          "driverRef",
          "number",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "drivers_url",
          "raceId",
          "year",
          "round",
          "circuitId",
          "name",
          "date",
          "time",
          "races_url"
        ],
        "ddl": "create table drivers_races( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, drivers_url text, raceId integer, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, races_url text)"
      },
      "driverstandings": {
        "ddl": "create table driverstandings( driverStandingsId integer primary key, foreign key(raceId) references drivers_races(raceId) integer, foreign key(driverId) references drivers_races(driverId) integer, points real, position integer, positionText text, wins integer)"
      }
    },
    "old_new_table_mapping": {
      "races": "drivers_races",
      "drivers": "drivers_races"
    },
    "new_table_primary_key": "driverId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "drivers_url": {
        "old_table": "drivers",
        "old_column": "url"
      },
      "races_url": {
        "old_table": "races",
        "old_column": "url"
      }
    },
    "new_gold_sql": "SELECT AVG(points) FROM drivers_races WHERE forename = 'Eddie' AND surname = 'Irvine' AND year = 2000"
  },
  {
    "train_idx": 906,
    "db_id": "formula_1",
    "question": "Which was Lewis Hamilton first race? What was his points recorded for his first race event?",
    "query": "SELECT T1.name, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T1.year ASC LIMIT 1",
    "relevant_table": {
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      },
      "driverstandings": {
        "ddl": "create table driverstandings( driverStandingsId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, points real, position integer, positionText text, wins integer)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "raceDriverStandings": {
        "columns": [
          "driverStandingsId",
          "raceId",
          "driverId",
          "points",
          "position",
          "positionText",
          "wins",
          "year",
          "round",
          "circuitId",
          "name",
          "date",
          "time",
          "url"
        ],
        "ddl": "create table raceDriverStandings( driverStandingsId integer primary key, raceId integer, foreign key(driverId) references drivers(driverId) integer, points real, position integer, positionText text, wins integer, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "old_new_table_mapping": {
      "driverstandings": "raceDriverStandings",
      "races": "raceDriverStandings"
    },
    "new_table_primary_key": "driverStandingsId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT name, points FROM raceDriverStandings WHERE forename = 'Lewis' AND surname = 'Hamilton' ORDER BY year ASC LIMIT 1"
  },
  {
    "train_idx": 907,
    "db_id": "formula_1",
    "question": "List all races in 2017 and the hosting country order by date of the event.",
    "query": "SELECT DISTINCT T2.name, T1.country FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2017 ORDER BY T2.date ASC",
    "relevant_table": {
      "circuits": {
        "ddl": "create table circuits( circuitId integer primary key, circuitRef text, name text, location text, country text, lat real, lng real, alt integer, url text)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "race_circuit": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId",
          "race_name",
          "date",
          "time",
          "race_url",
          "circuitRef",
          "circuit_name",
          "location",
          "country",
          "lat",
          "lng",
          "alt",
          "circuit_url"
        ],
        "ddl": "create table race_circuit( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, circuitId integer, race_name text, date date, time text, race_url text, circuitRef text, circuit_name text, location text, country text, lat real, lng real, alt integer, circuit_url text)"
      }
    },
    "old_new_table_mapping": {
      "races": "race_circuit",
      "circuits": "race_circuit"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "race_name": {
        "old_table": "races",
        "old_column": "name"
      },
      "circuit_name": {
        "old_table": "circuits",
        "old_column": "name"
      },
      "race_url": {
        "old_table": "races",
        "old_column": "url"
      },
      "circuit_url": {
        "old_table": "circuits",
        "old_column": "url"
      }
    },
    "new_gold_sql": "SELECT DISTINCT race_name, country FROM race_circuit WHERE year = 2017 ORDER BY date ASC"
  },
  {
    "train_idx": 908,
    "db_id": "formula_1",
    "question": "What is the most laps f1 races had? Name the race, year and circuit location where the races with most laps was hosted.",
    "query": "SELECT T3.lap, T2.name, T2.year, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId INNER JOIN lapTimes AS T3 ON T3.raceId = T2.raceId ORDER BY T3.lap DESC LIMIT 1",
    "relevant_table": {
      "circuits": {
        "ddl": "create table circuits( circuitId integer primary key, circuitRef text, name text, location text, country text, lat real, lng real, alt integer, url text)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      },
      "laptimes": {
        "ddl": "create table laptimes( foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, lap integer, position integer, time text, milliseconds integer)"
      }
    },
    "new_relevant_table": {
      "mergedTable": {
        "columns": [
          "circuitId",
          "circuitRef",
          "name",
          "location",
          "country",
          "lat",
          "lng",
          "alt",
          "url",
          "foreign key(raceId) references races(raceId)",
          "foreign key(driverId) references drivers(driverId)",
          "lap",
          "position",
          "time",
          "milliseconds"
        ],
        "ddl": "create table mergedTable( circuitId integer primary key, circuitRef text, name text, location text, country text, lat real, lng real, alt integer, url text, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, lap integer, position integer, time text, milliseconds integer)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references mergedTable(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "old_new_table_mapping": {
      "laptimes": "mergedTable",
      "circuits": "mergedTable"
    },
    "new_table_primary_key": "circuitId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT lap, name, year, location FROM mergedTable ORDER BY lap DESC LIMIT 1"
  },
  {
    "train_idx": 919,
    "db_id": "formula_1",
    "question": "Which circuit did the 2009 Spanish Grand Prix use?",
    "query": "SELECT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'",
    "relevant_table": {
      "circuits": {
        "ddl": "create table circuits( circuitId integer primary key, circuitRef text, name text, location text, country text, lat real, lng real, alt integer, url text)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "race_circuit": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId_races",
          "name_races",
          "date",
          "time",
          "url_races",
          "circuitId",
          "circuitRef",
          "name_circuits",
          "location",
          "country",
          "lat",
          "lng",
          "alt",
          "url_circuits"
        ],
        "ddl": "create table race_circuit( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, date date, time text, circuitId integer, circuitRef text, location text, country text, lat real, lng real, alt integer)"
      }
    },
    "old_new_table_mapping": {
      "races": "race_circuit",
      "circuits": "race_circuit"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "circuitId_races, name_circuits, url_races": {
        "old_table": "races, circuits, races",
        "old_column": "circuitId, name, url"
      }
    },
    "new_gold_sql": "SELECT name_circuits FROM race_circuit WHERE year = 2009 AND name_races = 'Spanish Grand Prix'"
  },
  {
    "train_idx": 920,
    "db_id": "formula_1",
    "question": "Please list all the years that Silverstone Circuit was used in a Formula_1 race.",
    "query": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "relevant_table": {
      "circuits": {
        "ddl": "create table circuits( circuitId integer primary key, circuitRef text, name text, location text, country text, lat real, lng real, alt integer, url text)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "circuits_races": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId_races",
          "name_races",
          "date",
          "time",
          "url_races",
          "circuitId",
          "circuitRef",
          "name_circuits",
          "location",
          "country",
          "lat",
          "lng",
          "alt",
          "url_circuits"
        ],
        "ddl": "create table circuits_races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, date date, time text, circuitId integer, circuitRef text, location text, country text, lat real, lng real, alt integer)"
      }
    },
    "old_new_table_mapping": {
      "races": "circuits_races",
      "circuits": "circuits_races"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "circuitId_races, name_circuits, url_races": {
        "old_table": "races, circuits, races",
        "old_column": "circuitId, name, url"
      }
    },
    "new_gold_sql": "SELECT DISTINCT year FROM circuits_races WHERE name_circuits = 'Silverstone Circuit'"
  },
  {
    "train_idx": 921,
    "db_id": "formula_1",
    "question": "Please give more information about the Formula_1 races that used the Silverstone Circuit.",
    "query": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "relevant_table": {
      "circuits": {
        "ddl": "create table circuits( circuitId integer primary key, circuitRef text, name text, location text, country text, lat real, lng real, alt integer, url text)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "circuits_races": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId_races",
          "name_races",
          "date",
          "time",
          "url_races",
          "circuitId_circuits",
          "circuitRef",
          "name_circuits",
          "location",
          "country",
          "lat",
          "lng",
          "alt",
          "url_circuits"
        ],
        "ddl": "create table circuits_races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, date date, time text, circuitRef text, location text, country text, lat real, lng real, alt integer)"
      }
    },
    "old_new_table_mapping": {
      "races": "circuits_races",
      "circuits": "circuits_races"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "circuitId_races, name_races, url_races, circuitId_circuits, name_circuits, url_circuits": {
        "old_table": "races, circuits, circuits",
        "old_column": "circuitId, name, url"
      }
    },
    "new_gold_sql": "SELECT DISTINCT url_circuits FROM circuits_races WHERE name_circuits = 'Silverstone Circuit'"
  },
  {
    "train_idx": 922,
    "db_id": "formula_1",
    "question": "What time did the the 2010's Formula_1 race took place on the Abu Dhabi Circuit?",
    "query": "SELECT T2.date, T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2010 AND T2.name = 'Abu Dhabi Grand Prix'",
    "relevant_table": {
      "circuits": {
        "ddl": "create table circuits( circuitId integer primary key, circuitRef text, name text, location text, country text, lat real, lng real, alt integer, url text)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "merged_races_circuits": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId_races",
          "name_races",
          "date",
          "time",
          "url_races",
          "circuitId_circuits",
          "circuitRef",
          "name_circuits",
          "location",
          "country",
          "lat",
          "lng",
          "alt",
          "url_circuits"
        ],
        "ddl": "create table merged_races_circuits( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, circuitId_races integer, name_races text, date date, time text, url_races text, circuitId_circuits integer, circuitRef text, name_circuits text, location text, country text, lat real, lng real, alt integer, url_circuits text)"
      }
    },
    "old_new_table_mapping": {
      "races": "merged_races_circuits",
      "circuits": "merged_races_circuits"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "circuitId_races": {
        "old_table": "races",
        "old_column": "circuitId"
      },
      "name_races": {
        "old_table": "races",
        "old_column": "name"
      },
      "url_races": {
        "old_table": "races",
        "old_column": "url"
      },
      "circuitId_circuits": {
        "old_table": "circuits",
        "old_column": "circuitId"
      },
      "name_circuits": {
        "old_table": "circuits",
        "old_column": "name"
      },
      "url_circuits": {
        "old_table": "circuits",
        "old_column": "url"
      }
    },
    "new_gold_sql": "SELECT date, time FROM merged_races_circuits WHERE year = 2010 AND name_races = 'Abu Dhabi Grand Prix'"
  },
  {
    "train_idx": 923,
    "db_id": "formula_1",
    "question": "How many Formula_1 races took place on the circuits in Italy?",
    "query": "SELECT COUNT(T2.circuitId) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Italy'",
    "relevant_table": {
      "circuits": {
        "ddl": "create table circuits( circuitId integer primary key, circuitRef text, name text, location text, country text, lat real, lng real, alt integer, url text)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "race_circuits": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId_races",
          "name_races",
          "date",
          "time",
          "url_races",
          "circuitId_circuits",
          "circuitRef",
          "name_circuits",
          "location",
          "country",
          "lat",
          "lng",
          "alt",
          "url_circuits"
        ],
        "ddl": "create table race_circuits( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, date date, time text, circuitRef text, location text, country text, lat real, lng real, alt integer)"
      }
    },
    "old_new_table_mapping": {
      "circuits": "race_circuits",
      "races": "race_circuits"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "circuitId_races, name_races, url_races, circuitId_circuits, name_circuits, url_circuits": {
        "old_table": "races, circuits, circuits",
        "old_column": "circuitId, name, url"
      }
    },
    "new_gold_sql": "SELECT COUNT(circuitId_races) FROM race_circuits WHERE country = 'Italy'"
  },
  {
    "train_idx": 924,
    "db_id": "formula_1",
    "question": "Please list the exact dates on which a Formula_1 race took place on the Barcelona-Catalunya circuit.",
    "query": "SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
    "relevant_table": {
      "circuits": {
        "ddl": "create table circuits( circuitId integer primary key, circuitRef text, name text, location text, country text, lat real, lng real, alt integer, url text)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "circuits_races": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId_races",
          "name_races",
          "date",
          "time",
          "url_races",
          "circuitId",
          "circuitRef",
          "name_circuits",
          "location",
          "country",
          "lat",
          "lng",
          "alt",
          "url_circuits"
        ],
        "ddl": "create table circuits_races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, date date, time text, circuitId integer, circuitRef text, location text, country text, lat real, lng real, alt integer)"
      }
    },
    "old_new_table_mapping": {
      "races": "circuits_races",
      "circuits": "circuits_races"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "circuitId_races, name_circuits, url_races": {
        "old_table": "races, circuits, races",
        "old_column": "circuitId, name, url"
      }
    },
    "new_gold_sql": "SELECT date FROM circuits_races WHERE name_circuits = 'Circuit de Barcelona-Catalunya'"
  },
  {
    "train_idx": 925,
    "db_id": "formula_1",
    "question": "Please give the link of the website that shows more information about the circuits the Spanish Grand Prix used in 2009.",
    "query": "SELECT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'",
    "relevant_table": {
      "circuits": {
        "ddl": "create table circuits( circuitId integer primary key, circuitRef text, name text, location text, country text, lat real, lng real, alt integer, url text)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "race_circuit": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId_races",
          "name_races",
          "date",
          "time",
          "url_races",
          "circuitId_circuits",
          "circuitRef",
          "name_circuits",
          "location",
          "country",
          "lat",
          "lng",
          "alt",
          "url_circuits"
        ],
        "ddl": "create table race_circuit( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, date date, time text, circuitRef text, location text, country text, lat real, lng real, alt integer)"
      }
    },
    "old_new_table_mapping": {
      "circuits": "race_circuit",
      "races": "race_circuit"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "circuitId_races, name_races, url_races, circuitId_circuits, name_circuits, url_circuits": {
        "old_table": "races, circuits, circuits",
        "old_column": "circuitId, name, url"
      }
    },
    "new_gold_sql": "SELECT url_circuits FROM race_circuit WHERE year = 2009 AND name_races = 'Spanish Grand Prix'"
  },
  {
    "train_idx": 926,
    "db_id": "formula_1",
    "question": "What's the fastest lap time ever in a race for Lewis Hamilton?",
    "query": "SELECT T2.fastestLapTime FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime ASC LIMIT 1",
    "relevant_table": {
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      },
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      }
    },
    "new_relevant_table": {
      "drivers_results": {
        "columns": [
          "resultId",
          "raceId",
          "driverId",
          "constructorId",
          "results_number",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "time",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId",
          "driverRef",
          "drivers_number",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url"
        ],
        "ddl": "create table drivers_results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, driverId integer, foreign key(constructorId) references constructors(constructorId) integer, results_number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer, driverRef text, drivers_number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "old_new_table_mapping": {
      "results": "drivers_results",
      "drivers": "drivers_results"
    },
    "new_table_primary_key": "resultId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "drivers_number": {
        "old_table": "drivers",
        "old_column": "number"
      },
      "results_number": {
        "old_table": "results",
        "old_column": "number"
      }
    },
    "new_gold_sql": "SELECT fastestLapTime FROM drivers_results WHERE forename = 'Lewis' AND surname = 'Hamilton' AND fastestLapTime IS NOT NULL ORDER BY fastestLapTime ASC LIMIT 1"
  },
  {
    "train_idx": 927,
    "db_id": "formula_1",
    "question": "Which driver created the fastest lap speed in a Formula_1 race? Please give both his forename and surname.",
    "query": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
    "relevant_table": {
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      },
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      }
    },
    "new_relevant_table": {
      "drivers_results": {
        "columns": [
          "resultId",
          "raceId",
          "driverId",
          "constructorId",
          "results_number",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "time",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId",
          "driverRef",
          "drivers_number",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url"
        ],
        "ddl": "create table drivers_results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, driverId integer, foreign key(constructorId) references constructors(constructorId) integer, results_number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer, driverRef text, drivers_number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "old_new_table_mapping": {
      "results": "drivers_results",
      "drivers": "drivers_results"
    },
    "new_table_primary_key": "resultId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "drivers_number": {
        "old_table": "drivers",
        "old_column": "number"
      },
      "results_number": {
        "old_table": "results",
        "old_column": "number"
      }
    },
    "new_gold_sql": "SELECT forename, surname FROM drivers_results WHERE fastestLapTime IS NOT NULL ORDER BY fastestLapSpeed DESC LIMIT 1"
  },
  {
    "train_idx": 928,
    "db_id": "formula_1",
    "question": "Which driver ranked the first in the Canadian Grand Prix in 2007? Please give his reference name.",
    "query": "SELECT T3.forename, T3.surname, T3.driverRef FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Canadian Grand Prix' AND T2.rank = 1 AND T1.year = 2007",
    "relevant_table": {
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      },
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "race_results": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId",
          "name",
          "date",
          "time_races",
          "url",
          "resultId",
          "driverId",
          "constructorId",
          "number",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "time_results",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId"
        ],
        "ddl": "create table race_results( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time_races text, url text, resultId integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time_results text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "old_new_table_mapping": {
      "races": "race_results",
      "results": "race_results"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "time_races": {
        "old_table": "races",
        "old_column": "time"
      },
      "time_results": {
        "old_table": "results",
        "old_column": "time"
      }
    },
    "new_gold_sql": "SELECT forename, surname, driverRef FROM race_results WHERE name = 'Canadian Grand Prix' AND rank = 1 AND year = 2007"
  },
  {
    "train_idx": 930,
    "db_id": "formula_1",
    "question": "In which Formula_1 race did Lewis Hamilton rank the highest?",
    "query": "SELECT name FROM races WHERE raceId IN ( SELECT raceId FROM results WHERE rank = 1 AND driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' ) )",
    "relevant_table": {
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      },
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "race_drivers": {
        "columns": [
          "driverId",
          "driverRef",
          "number",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "driver_url",
          "raceId",
          "year",
          "round",
          "circuitId",
          "name",
          "date",
          "time",
          "race_url"
        ],
        "ddl": "create table race_drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, driver_url text, raceId integer, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, race_url text)"
      },
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references race_drivers(raceId) integer, foreign key(driverId) references race_drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      }
    },
    "old_new_table_mapping": {
      "drivers": "race_drivers",
      "races": "race_drivers"
    },
    "new_table_primary_key": "driverId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "driver_url": {
        "old_table": "drivers",
        "old_column": "url"
      },
      "race_url": {
        "old_table": "races",
        "old_column": "url"
      }
    },
    "new_gold_sql": "SELECT name FROM race_drivers WHERE raceId IN ( SELECT raceId FROM results WHERE rank = 1 AND driverId = ( SELECT driverId FROM race_drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' ) )"
  },
  {
    "train_idx": 931,
    "db_id": "formula_1",
    "question": "What was the fastest lap speed among all drivers in the 2009 Spanish Grand Prix?",
    "query": "SELECT T2.fastestLapSpeed FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.name = 'Spanish Grand Prix' AND T1.year = 2009 AND T2.fastestLapSpeed IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
    "relevant_table": {
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      },
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      }
    },
    "new_relevant_table": {
      "race_results": {
        "columns": [
          "resultId",
          "raceId",
          "driverId",
          "constructorId",
          "number",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "time",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId",
          "year",
          "round",
          "circuitId",
          "name",
          "date",
          "url"
        ],
        "ddl": "create table race_results( resultId integer primary key, raceId integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, url text)"
      }
    },
    "old_new_table_mapping": {
      "results": "race_results",
      "races": "race_results"
    },
    "new_table_primary_key": "resultId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT fastestLapSpeed FROM race_results WHERE name = 'Spanish Grand Prix' AND year = 2009 AND fastestLapSpeed IS NOT NULL ORDER BY fastestLapSpeed DESC LIMIT 1"
  },
  {
    "train_idx": 932,
    "db_id": "formula_1",
    "question": "In which years did Lewis Hamilton participate in a Formula_1 race?",
    "query": "SELECT DISTINCT T1.year FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
    "relevant_table": {
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      },
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "driverId",
          "driverRef",
          "number",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "driver_url",
          "raceId",
          "year",
          "round",
          "circuitId",
          "race_name",
          "race_date",
          "race_time",
          "race_url"
        ],
        "ddl": "create table merged_table( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, driver_url text, raceId integer, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, race_name text, race_date date, race_url text)"
      },
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references merged_table(raceId) integer, foreign key(driverId) references merged_table(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      }
    },
    "old_new_table_mapping": {
      "drivers": "merged_table",
      "races": "merged_table"
    },
    "new_table_primary_key": "driverId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "driver_url": {
        "old_table": "drivers",
        "old_column": "url"
      },
      "race_url": {
        "old_table": "races",
        "old_column": "url"
      },
      "race_name": {
        "old_table": "races",
        "old_column": "name"
      },
      "race_date": {
        "old_table": "races",
        "old_column": "date"
      }
    },
    "new_gold_sql": "SELECT DISTINCT year FROM merged_table WHERE forename = 'Lewis' AND surname = 'Hamilton'"
  },
  {
    "train_idx": 934,
    "db_id": "formula_1",
    "question": "Which driver was in the no. 4 grid formation when starting the race in 1989's Australian Grand Prix? Please give his forename and surname.",
    "query": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T2.grid = 4 AND T1.name = 'Australian Grand Prix' AND T1.year = 1989",
    "relevant_table": {
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      },
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "race_drivers": {
        "columns": [
          "driverId",
          "driverRef",
          "number",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "driver_url",
          "raceId",
          "year",
          "round",
          "circuitId",
          "race_name",
          "date",
          "time",
          "race_url"
        ],
        "ddl": "create table race_drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, driver_url text, raceId integer, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, date date, time text, race_url text)"
      },
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references race_drivers(raceId) integer, foreign key(driverId) references race_drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      }
    },
    "old_new_table_mapping": {
      "drivers": "race_drivers",
      "races": "race_drivers"
    },
    "new_table_primary_key": "driverId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "driver_url": {
        "old_table": "drivers",
        "old_column": "url"
      },
      "race_url": {
        "old_table": "races",
        "old_column": "url"
      }
    },
    "new_gold_sql": "SELECT T3forename, T3surname FROM race_drivers WHERE grid = 4 AND race_name = 'Australian Grand Prix' AND year = 1989"
  },
  {
    "train_idx": 935,
    "db_id": "formula_1",
    "question": "How many drivers managed to finish the race in the 2008 Australian Grand Prix?",
    "query": "SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.name = 'Australian Grand Prix' AND T1.year = 2008 AND T2.time IS NOT NULL",
    "relevant_table": {
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      },
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      }
    },
    "new_relevant_table": {
      "race_results": {
        "columns": [
          "resultId",
          "raceId",
          "driverId",
          "constructorId",
          "number",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "time",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId",
          "year",
          "round",
          "circuitId",
          "name",
          "date",
          "time_races",
          "url"
        ],
        "ddl": "create table race_results( resultId integer primary key, raceId integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time_races text, url text)"
      }
    },
    "old_new_table_mapping": {
      "results": "race_results",
      "races": "race_results"
    },
    "new_table_primary_key": "resultId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "time_races": {
        "old_table": "races",
        "old_column": "time"
      }
    },
    "new_gold_sql": "SELECT COUNT(driverId) FROM race_results WHERE name = 'Australian Grand Prix' AND year = 2008 AND time IS NOT NULL"
  },
  {
    "train_idx": 937,
    "db_id": "formula_1",
    "question": "What's the finish time for the driver who ranked second in 2008's AustChineseralian Grand Prix?",
    "query": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.rank = 2 AND T2.name = 'Chinese Grand Prix' AND T2.year = 2008",
    "relevant_table": {
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "race_results": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId",
          "name",
          "date",
          "race_time",
          "url",
          "resultId",
          "driverId",
          "constructorId",
          "number",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "result_time",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId"
        ],
        "ddl": "create table race_results( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, race_time text, url text, resultId integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, result_time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      }
    },
    "old_new_table_mapping": {
      "races": "race_results",
      "results": "race_results"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "race_time": {
        "old_table": "races",
        "old_column": "time"
      },
      "result_time": {
        "old_table": "results",
        "old_column": "time"
      }
    },
    "new_gold_sql": "SELECT result_time FROM race_results WHERE rank = 2 AND name = 'Chinese Grand Prix' AND year = 2008"
  },
  {
    "train_idx": 938,
    "db_id": "formula_1",
    "question": "Who was the champion of 2008's Australian Grand Prix and where can I know more about him?",
    "query": "SELECT T1.forename, T1.surname, T1.url FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T3.name = 'Australian Grand Prix' AND T2.time LIKE '_:%:__.___' AND T3.year = 2008",
    "relevant_table": {
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      },
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "drivers_results": {
        "columns": [
          "resultId",
          "raceId",
          "driverId",
          "constructorId",
          "number_results",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "time",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId",
          "driverRef",
          "number_drivers",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url"
        ],
        "ddl": "create table drivers_results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, driverId integer, foreign key(constructorId) references constructors(constructorId) integer, number_results integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer, driverRef text, number_drivers integer, code text, forename text, surname text, dob date, nationality text, url text)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "old_new_table_mapping": {
      "results": "drivers_results",
      "drivers": "drivers_results"
    },
    "new_table_primary_key": "resultId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "number_drivers": {
        "old_table": "drivers",
        "old_column": "number"
      },
      "number_results": {
        "old_table": "results",
        "old_column": "number"
      }
    },
    "new_gold_sql": "SELECT forename, surname, url FROM drivers_results WHERE name = 'Australian Grand Prix' AND time LIKE '_:%:_____' AND year = 2008"
  },
  {
    "train_idx": 939,
    "db_id": "formula_1",
    "question": "How many drivers from the UN participated in the 2008 Australian Grand Prix?",
    "query": "SELECT COUNT(*) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T3.name = 'Australian Grand Prix' AND T1.nationality = 'British' AND T3.year = 2008",
    "relevant_table": {
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      },
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "drivers_results": {
        "columns": [
          "driverId",
          "driverRef",
          "number_drivers",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url",
          "resultId",
          "raceId",
          "constructorId",
          "number_results",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "time",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId"
        ],
        "ddl": "create table drivers_results( driverId integer primary key, driverRef text, number_drivers integer, code text, forename text, surname text, dob date, nationality text, url text, resultId integer, foreign key(raceId) references races(raceId) integer, foreign key(constructorId) references constructors(constructorId) integer, number_results integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "old_new_table_mapping": {
      "drivers": "drivers_results",
      "results": "drivers_results"
    },
    "new_table_primary_key": "driverId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "number_drivers": {
        "old_table": "drivers",
        "old_column": "number"
      },
      "number_results": {
        "old_table": "results",
        "old_column": "number"
      }
    },
    "new_gold_sql": "SELECT COUNT(*) FROM drivers_results WHERE raceId IN (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008) AND nationality = 'British'"
  },
  {
    "train_idx": 940,
    "db_id": "formula_1",
    "question": "Among the drivers that finished the race in the 2008 Chinese Grand Prix, how many of them have participated in Formula_1 races?",
    "query": "SELECT COUNT(*) FROM ( SELECT T1.driverId FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'Chinese Grand Prix' AND T2.year = 2008 AND T1.time IS NOT NULL GROUP BY T1.driverId HAVING COUNT(T2.raceId) > 0 )",
    "relevant_table": {
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "race_results": {
        "columns": [
          "resultId",
          "raceId",
          "driverId",
          "constructorId",
          "number",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "time",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId",
          "year",
          "round",
          "circuitId",
          "name",
          "date",
          "url"
        ],
        "ddl": "create table race_results( resultId integer primary key, raceId integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, url text)"
      }
    },
    "old_new_table_mapping": {
      "results": "race_results",
      "races": "race_results"
    },
    "new_table_primary_key": "resultId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(*) FROM ( SELECT driverId FROM race_results WHERE name = 'Chinese Grand Prix' AND year = 2008 AND time IS NOT NULL GROUP BY driverId HAVING COUNT(raceId) > 0 )"
  },
  {
    "train_idx": 941,
    "db_id": "formula_1",
    "question": "How many points did Lewis Hamilton get in total in all the Formula_1 races he participated?",
    "query": "SELECT SUM(T2.points) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton'",
    "relevant_table": {
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      },
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      }
    },
    "new_relevant_table": {
      "drivers_results": {
        "columns": [
          "resultId",
          "raceId",
          "driverId",
          "constructorId",
          "results_number",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "time",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId",
          "driverRef",
          "drivers_number",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url"
        ],
        "ddl": "create table drivers_results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, driverId integer, foreign key(constructorId) references constructors(constructorId) integer, results_number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer, driverRef text, drivers_number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "old_new_table_mapping": {
      "results": "drivers_results",
      "drivers": "drivers_results"
    },
    "new_table_primary_key": "resultId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "drivers_number": {
        "old_table": "drivers",
        "old_column": "number"
      },
      "results_number": {
        "old_table": "results",
        "old_column": "number"
      }
    },
    "new_gold_sql": "SELECT SUM(points) FROM drivers_results WHERE forename = 'Lewis' AND surname = 'Hamilton'"
  },
  {
    "train_idx": 942,
    "db_id": "formula_1",
    "question": "What is the average fastest lap time in seconds for Lewis Hamilton in all the Formula_1 races?",
    "query": "SELECT AVG(CAST(SUBSTR(T2.fastestLapTime, 1, INSTR(T2.fastestLapTime, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(T2.fastestLapTime, INSTR(T2.fastestLapTime, ':') + 1) AS REAL)) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.surname = 'Hamilton' AND T1.forename = 'Lewis'",
    "relevant_table": {
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      },
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      }
    },
    "new_relevant_table": {
      "drivers_results": {
        "columns": [
          "resultId",
          "raceId",
          "driverId",
          "constructorId",
          "results_number",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "time",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId",
          "driverRef",
          "drivers_number",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url"
        ],
        "ddl": "create table drivers_results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, driverId integer, foreign key(constructorId) references constructors(constructorId) integer, results_number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer, driverRef text, drivers_number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "old_new_table_mapping": {
      "results": "drivers_results",
      "drivers": "drivers_results"
    },
    "new_table_primary_key": "resultId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "drivers_number": {
        "old_table": "drivers",
        "old_column": "number"
      },
      "results_number": {
        "old_table": "results",
        "old_column": "number"
      }
    },
    "new_gold_sql": "SELECT AVG(CAST(SUBSTR(fastestLapTime, 1, INSTR(fastestLapTime, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(fastestLapTime, INSTR(fastestLapTime, ':') + 1) AS REAL)) FROM drivers_results WHERE surname = 'Hamilton' AND forename = 'Lewis'"
  },
  {
    "train_idx": 943,
    "db_id": "formula_1",
    "question": "What is the rate of drivers completing all the laps in the 2008 Australian Grand Prix?",
    "query": "SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.resultId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008",
    "relevant_table": {
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "merged_results_races": {
        "columns": [
          "resultId",
          "raceId",
          "driverId",
          "constructorId",
          "number",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "time",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId",
          "year",
          "round",
          "circuitId",
          "name",
          "date",
          "time",
          "url"
        ],
        "ddl": "create table merged_results_races( resultId integer primary key, raceId integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "old_new_table_mapping": {
      "results": "merged_results_races",
      "races": "merged_results_races"
    },
    "new_table_primary_key": "resultId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(IIF(merged_results_racestime IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(merged_results_racesresultId) FROM merged_results_races WHERE merged_results_racesname = 'Australian Grand Prix' AND merged_results_racesyear = 2008"
  },
  {
    "train_idx": 944,
    "db_id": "formula_1",
    "question": "How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix?",
    "query": "WITH time_in_seconds AS ( SELECT T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6) AS REAL) ELSE CAST(SUBSTR(T1.time, 2) AS REAL) END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T1.time IS NOT NULL AND T2.year = 2008 ), champion_time AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = 1), last_driver_incremental AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = (SELECT MAX(positionOrder) FROM time_in_seconds) ) SELECT (CAST((SELECT time_seconds FROM last_driver_incremental) AS REAL) * 100) / (SELECT time_seconds + (SELECT time_seconds FROM last_driver_incremental) FROM champion_time)",
    "relevant_table": {
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "race_results": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId",
          "race_name",
          "date",
          "race_time",
          "url",
          "resultId",
          "driverId",
          "constructorId",
          "number",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "result_time",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId"
        ],
        "ddl": "create table race_results( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, date date, url text, resultId integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      }
    },
    "old_new_table_mapping": {
      "races": "race_results",
      "results": "race_results"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "['race_name', 'race_time', 'result_time']": {
        "old_table": "['races', 'results']",
        "old_column": "['name', 'time']"
      }
    },
    "new_gold_sql": "WITH time_in_seconds AS ( SELECT T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.result_time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.result_time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.result_time, 6) AS REAL) ELSE CAST(SUBSTR(T1.result_time, 2) AS REAL) END AS time_seconds FROM race_results AS T1 WHERE T1.race_name = 'Australian Grand Prix' AND T1.result_time IS NOT NULL AND T1.year = 2008 ), champion_time AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = 1), last_driver_incremental AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = (SELECT MAX(positionOrder) FROM time_in_seconds) ) SELECT (CAST((SELECT time_seconds FROM last_driver_incremental) AS REAL) * 100) / (SELECT time_seconds + (SELECT time_seconds FROM last_driver_incremental) FROM champion_time)"
  },
  {
    "train_idx": 948,
    "db_id": "formula_1",
    "question": "What are the maximum points of British constructors?",
    "query": "SELECT MAX(T1.points) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T2.nationality = 'British'",
    "relevant_table": {
      "constructorstandings": {
        "ddl": "create table constructorstandings( constructorStandingsId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(constructorId) references constructors(constructorId) integer, points real, position integer, positionText text, wins integer)"
      },
      "constructors": {
        "ddl": "create table constructors( constructorId integer primary key, constructorRef text, name text, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "mergedConstructorStandings": {
        "columns": [
          "constructorId",
          "constructorRef",
          "name",
          "nationality",
          "url",
          "constructorStandingsId",
          "foreign key(raceId) references races(raceId)",
          "points",
          "position",
          "positionText",
          "wins"
        ],
        "ddl": "create table mergedConstructorStandings( constructorId integer primary key, constructorRef text, name text, nationality text, url text, constructorStandingsId integer, foreign key(raceId) references races(raceId) integer, points real, position integer, positionText text, wins integer)"
      }
    },
    "old_new_table_mapping": {
      "constructors": "mergedConstructorStandings",
      "constructorstandings": "mergedConstructorStandings"
    },
    "new_table_primary_key": "constructorId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT MAX(points) FROM mergedConstructorStandings WHERE nationality = 'British'"
  },
  {
    "train_idx": 949,
    "db_id": "formula_1",
    "question": "Which constructor has the highest point?",
    "query": "SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId ORDER BY T1.points DESC LIMIT 1",
    "relevant_table": {
      "constructorstandings": {
        "ddl": "create table constructorstandings( constructorStandingsId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(constructorId) references constructors(constructorId) integer, points real, position integer, positionText text, wins integer)"
      },
      "constructors": {
        "ddl": "create table constructors( constructorId integer primary key, constructorRef text, name text, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "constructorMerged": {
        "columns": [
          "constructorId",
          "constructorRef",
          "name",
          "nationality",
          "url",
          "constructorStandingsId",
          "raceId",
          "points",
          "position",
          "positionText",
          "wins"
        ],
        "ddl": "create table constructorMerged( constructorId integer primary key, constructorRef text, name text, nationality text, url text, constructorStandingsId integer, foreign key(raceId) references races(raceId) integer, points real, position integer, positionText text, wins integer)"
      }
    },
    "old_new_table_mapping": {
      "constructors": "constructorMerged",
      "constructorstandings": "constructorMerged"
    },
    "new_table_primary_key": "constructorId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT name FROM constructorMerged ORDER BY points DESC LIMIT 1"
  },
  {
    "train_idx": 950,
    "db_id": "formula_1",
    "question": "Please list the constructor names with 0 points at race 291.",
    "query": "SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T1.raceId = 291",
    "relevant_table": {
      "constructorstandings": {
        "ddl": "create table constructorstandings( constructorStandingsId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(constructorId) references constructors(constructorId) integer, points real, position integer, positionText text, wins integer)"
      },
      "constructors": {
        "ddl": "create table constructors( constructorId integer primary key, constructorRef text, name text, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "constructorMerged": {
        "columns": [
          "constructorId",
          "constructorRef",
          "name",
          "nationality",
          "url",
          "constructorStandingsId",
          "raceId",
          "points",
          "position",
          "positionText",
          "wins"
        ],
        "ddl": "create table constructorMerged( constructorId integer primary key, constructorRef text, name text, nationality text, url text, constructorStandingsId integer, foreign key(raceId) references races(raceId) integer, points real, position integer, positionText text, wins integer)"
      }
    },
    "old_new_table_mapping": {
      "constructors": "constructorMerged",
      "constructorstandings": "constructorMerged"
    },
    "new_table_primary_key": "constructorId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT name FROM constructorMerged WHERE points = 0 AND raceId = 291"
  },
  {
    "train_idx": 951,
    "db_id": "formula_1",
    "question": "How many Japanese constructors have 0 points in 2 races?",
    "query": "SELECT COUNT(T1.raceId) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T2.nationality = 'Japanese' GROUP BY T1.constructorId HAVING COUNT(raceId) = 2",
    "relevant_table": {
      "constructorstandings": {
        "ddl": "create table constructorstandings( constructorStandingsId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(constructorId) references constructors(constructorId) integer, points real, position integer, positionText text, wins integer)"
      },
      "constructors": {
        "ddl": "create table constructors( constructorId integer primary key, constructorRef text, name text, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "constructorMerged": {
        "columns": [
          "constructorId",
          "constructorRef",
          "name",
          "nationality",
          "url",
          "constructorStandingsId",
          "raceId",
          "points",
          "position",
          "positionText",
          "wins"
        ],
        "ddl": "create table constructorMerged( constructorId integer primary key, constructorRef text, name text, nationality text, url text, constructorStandingsId integer, foreign key(raceId) references races(raceId) integer, points real, position integer, positionText text, wins integer)"
      }
    },
    "old_new_table_mapping": {
      "constructors": "constructorMerged",
      "constructorstandings": "constructorMerged"
    },
    "new_table_primary_key": "constructorId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(raceId) FROM constructorMerged WHERE points = 0 AND nationality = 'Japanese' GROUP BY constructorId HAVING COUNT(raceId) = 2"
  },
  {
    "train_idx": 952,
    "db_id": "formula_1",
    "question": "Which constructors have been ranked 1?",
    "query": "SELECT DISTINCT T2.name FROM results AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.rank = 1",
    "relevant_table": {
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      },
      "constructors": {
        "ddl": "create table constructors( constructorId integer primary key, constructorRef text, name text, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "Results_Constructors": {
        "columns": [
          "resultId",
          "raceId",
          "driverId",
          "constructorId_results",
          "number",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "time",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId",
          "constructorId_constructors",
          "constructorRef",
          "name_constructors",
          "nationality",
          "url"
        ],
        "ddl": "create table Results_Constructors( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer, constructorRef text, nationality text, url text)"
      }
    },
    "old_new_table_mapping": {
      "results": "Results_Constructors",
      "constructors": "Results_Constructors"
    },
    "new_table_primary_key": "resultId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "constructorId_results, name_constructors": {
        "old_table": "results, constructors",
        "old_column": "constructorId, name"
      }
    },
    "new_gold_sql": "SELECT DISTINCT name_constructors FROM Results_Constructors WHERE rank = 1"
  },
  {
    "train_idx": 953,
    "db_id": "formula_1",
    "question": "How many French constructors have a lap number of over 50?",
    "query": "SELECT COUNT(DISTINCT T2.constructorId) FROM results AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.laps > 50 AND T2.nationality = 'French'",
    "relevant_table": {
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      },
      "constructors": {
        "ddl": "create table constructors( constructorId integer primary key, constructorRef text, name text, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "race_results_constructors": {
        "columns": [
          "constructorId",
          "constructorRef",
          "name",
          "nationality",
          "url",
          "resultId",
          "raceId",
          "driverId",
          "number",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "time",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId"
        ],
        "ddl": "create table race_results_constructors( constructorId integer primary key, constructorRef text, name text, nationality text, url text, resultId integer, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      }
    },
    "old_new_table_mapping": {
      "constructors": "race_results_constructors",
      "results": "race_results_constructors"
    },
    "new_table_primary_key": "constructorId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(DISTINCT constructorId) FROM race_results_constructors WHERE laps > 50 AND nationality = 'French'"
  },
  {
    "train_idx": 954,
    "db_id": "formula_1",
    "question": "Please calculate the race completion percentage of Japanese drivers from 2007 to 2009.",
    "query": "SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.raceId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T3.nationality = 'Japanese' AND T2.year BETWEEN 2007 AND 2009",
    "relevant_table": {
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "race_results": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId",
          "name",
          "date",
          "time_races",
          "url",
          "resultId",
          "driverId",
          "constructorId",
          "number",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "time_results",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId"
        ],
        "ddl": "create table race_results( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time_races text, url text, resultId integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time_results text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "old_new_table_mapping": {
      "races": "race_results",
      "results": "race_results"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "time_races": {
        "old_table": "races",
        "old_column": "time"
      },
      "time_results": {
        "old_table": "results",
        "old_column": "time"
      }
    },
    "new_gold_sql": "SELECT CAST(SUM(IIF(T1.time_results IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.raceId) FROM race_results AS T1 INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T3.nationality = 'Japanese' AND T1.year BETWEEN 2007 AND 2009"
  },
  {
    "train_idx": 955,
    "db_id": "formula_1",
    "question": "What is the average time in seconds of champion for each year, before year 1975?",
    "query": "WITH time_in_seconds AS ( SELECT T2.year, T2.raceId, T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6,2) AS REAL )   + CAST(SUBSTR(T1.time, 9) AS REAL)/1000 ELSE 0 END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL ), champion_time AS ( SELECT year, raceId, time_seconds FROM time_in_seconds WHERE positionOrder = 1 ) SELECT year, AVG(time_seconds) FROM champion_time WHERE year < 1975 GROUP BY year HAVING AVG(time_seconds) IS NOT NULL",
    "relevant_table": {
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "merged_results_races": {
        "columns": [
          "resultId",
          "raceId",
          "driverId",
          "constructorId",
          "number",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "time",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId",
          "year",
          "round",
          "circuitId",
          "name",
          "date",
          "url"
        ],
        "ddl": "create table merged_results_races( resultId integer primary key, raceId integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, url text)"
      }
    },
    "old_new_table_mapping": {
      "results": "merged_results_races",
      "races": "merged_results_races"
    },
    "new_table_primary_key": "resultId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "WITH time_in_seconds AS ( SELECT T2year, T2raceId, positionOrder, CASE WHEN positionOrder = 1 THEN (CAST(SUBSTR(time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(time, 6,2) AS REAL ) + CAST(SUBSTR(time, 9) AS REAL)/1000 ELSE 0 END AS time_seconds FROM merged_results_races WHERE time IS NOT NULL ), champion_time AS ( SELECT year, raceId, time_seconds FROM time_in_seconds WHERE positionOrder = 1 ) SELECT year, AVG(time_seconds) FROM champion_time WHERE year < 1975 GROUP BY year HAVING AVG(time_seconds) IS NOT NULL"
  },
  {
    "train_idx": 956,
    "db_id": "formula_1",
    "question": "Which drivers born after 1975 have been ranked 2? Please give their forenames and surnames.",
    "query": "SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE STRFTIME('%Y', T2.dob) > '1975' AND T1.rank = 2",
    "relevant_table": {
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "results_drivers": {
        "columns": [
          "resultId",
          "raceId",
          "driverId_results",
          "constructorId",
          "number_results",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "time",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId",
          "driverId_drivers",
          "driverRef",
          "number_drivers",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url"
        ],
        "ddl": "create table results_drivers( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(constructorId) references constructors(constructorId) integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer, driverRef text, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "old_new_table_mapping": {
      "results": "results_drivers",
      "drivers": "results_drivers"
    },
    "new_table_primary_key": "resultId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "driverId_results, number_results, driverId_drivers, number_drivers": {
        "old_table": "results, drivers",
        "old_column": "driverId, number"
      }
    },
    "new_gold_sql": "SELECT forename, surname FROM results_drivers WHERE STRFTIME('%Y', dob) > '1975' AND rank = 2"
  },
  {
    "train_idx": 957,
    "db_id": "formula_1",
    "question": "How many Italian drivers haven't finished the race?",
    "query": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'Italian' AND T1.time IS NULL",
    "relevant_table": {
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "results_drivers": {
        "columns": [
          "resultId",
          "raceId",
          "driverId_results",
          "constructorId",
          "number_results",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "time",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId",
          "driverId_drivers",
          "driverRef",
          "number_drivers",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url"
        ],
        "ddl": "create table results_drivers( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(constructorId) references constructors(constructorId) integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer, driverRef text, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "old_new_table_mapping": {
      "results": "results_drivers",
      "drivers": "results_drivers"
    },
    "new_table_primary_key": "resultId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "driverId_results, number_results, driverId_drivers, number_drivers": {
        "old_table": "results, drivers",
        "old_column": "driverId, number"
      }
    },
    "new_gold_sql": "SELECT COUNT(driverId_results) FROM results_drivers WHERE nationality = 'Italian' AND time IS NULL"
  },
  {
    "train_idx": 958,
    "db_id": "formula_1",
    "question": "Which driver has the fastest lap time? Please give their forenames and surnames.",
    "query": "SELECT T2.forename, T2.surname, T1.fastestLapTime FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T1.fastestLapTime IS NOT NULL ORDER BY T1.fastestLapTime ASC LIMIT 1",
    "relevant_table": {
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "results_drivers": {
        "columns": [
          "resultId",
          "raceId",
          "driverId_results",
          "constructorId",
          "number_results",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "time",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId",
          "driverId_drivers",
          "driverRef",
          "number_drivers",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url"
        ],
        "ddl": "create table results_drivers( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(constructorId) references constructors(constructorId) integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer, driverRef text, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "old_new_table_mapping": {
      "results": "results_drivers",
      "drivers": "results_drivers"
    },
    "new_table_primary_key": "resultId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "driverId_results, number_results, driverId_drivers, number_drivers": {
        "old_table": "results, drivers",
        "old_column": "driverId, number"
      }
    },
    "new_gold_sql": "SELECT forename, surname, fastestLapTime FROM results_drivers WHERE fastestLapTime IS NOT NULL ORDER BY fastestLapTime ASC LIMIT 1"
  },
  {
    "train_idx": 959,
    "db_id": "formula_1",
    "question": "What is the fastest lap number of the champion in 2009?",
    "query": "SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2009 AND T1.time LIKE '_:%:__.___'",
    "relevant_table": {
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "race_results": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId",
          "name",
          "date",
          "race_time",
          "url",
          "resultId",
          "driverId",
          "constructorId",
          "number",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "result_time",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId"
        ],
        "ddl": "create table race_results( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, race_time text, url text, resultId integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, result_time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      }
    },
    "old_new_table_mapping": {
      "races": "race_results",
      "results": "race_results"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "race_time": {
        "old_table": "races",
        "old_column": "time"
      },
      "result_time": {
        "old_table": "results",
        "old_column": "time"
      }
    },
    "new_gold_sql": "SELECT fastestLap FROM race_results WHERE year = 2009 AND result_time LIKE '_:%:__.___'"
  },
  {
    "train_idx": 960,
    "db_id": "formula_1",
    "question": "What is the average of fastest lap speed in the 2009 Spanish Grand Prix race?",
    "query": "SELECT AVG(T1.fastestLapSpeed) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'",
    "relevant_table": {
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "race_results": {
        "columns": [
          "resultId",
          "raceId",
          "driverId",
          "constructorId",
          "number",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "time",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId",
          "year",
          "round",
          "circuitId",
          "name",
          "date",
          "time",
          "url"
        ],
        "ddl": "create table race_results( resultId integer primary key, raceId integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "old_new_table_mapping": {
      "results": "race_results",
      "races": "race_results"
    },
    "new_table_primary_key": "resultId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT AVG(fastestLapSpeed) FROM race_results WHERE year = 2009 AND name = 'Spanish Grand Prix'"
  },
  {
    "train_idx": 961,
    "db_id": "formula_1",
    "question": "Which race has the shortest actual finishing time? Please give the name and year.",
    "query": "SELECT T1.name, T1.year FROM races AS T1 INNER JOIN results AS T2 on T1.raceId = T2.raceId WHERE T2.milliseconds IS NOT NULL ORDER BY T2.milliseconds LIMIT 1",
    "relevant_table": {
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      },
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      }
    },
    "new_relevant_table": {
      "race_results": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId",
          "name",
          "date",
          "time_races",
          "url",
          "resultId",
          "driverId",
          "constructorId",
          "number",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "time_results",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId"
        ],
        "ddl": "create table race_results( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time_races text, url text, resultId integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time_results text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      }
    },
    "old_new_table_mapping": {
      "races": "race_results",
      "results": "race_results"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "time_races": {
        "old_table": "races",
        "old_column": "time"
      },
      "time_results": {
        "old_table": "results",
        "old_column": "time"
      }
    },
    "new_gold_sql": "SELECT name, year FROM race_results WHERE milliseconds IS NOT NULL ORDER BY milliseconds LIMIT 1"
  },
  {
    "train_idx": 962,
    "db_id": "formula_1",
    "question": "From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50?",
    "query": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T3.dob) < '1985' AND T1.laps > 50, 1, 0)) AS REAL) * 100 / COUNT(*) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.year BETWEEN 2000 AND 2005",
    "relevant_table": {
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "race_results": {
        "columns": [
          "resultId",
          "raceId",
          "driverId",
          "constructorId",
          "number",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "results_time",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId",
          "year",
          "round",
          "circuitId",
          "name",
          "date",
          "races_time",
          "url"
        ],
        "ddl": "create table race_results( resultId integer primary key, raceId integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, results_time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, races_time text, url text)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "old_new_table_mapping": {
      "results": "race_results",
      "races": "race_results"
    },
    "new_table_primary_key": "resultId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "results_time": {
        "old_table": "results",
        "old_column": "time"
      },
      "races_time": {
        "old_table": "races",
        "old_column": "time"
      }
    },
    "new_gold_sql": "SELECT CAST(SUM(IIF(STRFTIME('%Y', dob) < '1985' AND laps > 50, 1, 0)) AS REAL) * 100 / COUNT(*) FROM race_results WHERE year BETWEEN 2000 AND 2005"
  },
  {
    "train_idx": 963,
    "db_id": "formula_1",
    "question": "How many French drivers who obtain the laptime less than 02:00.00?",
    "query": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN lapTimes AS T2 on T1.driverId = T2.driverId WHERE T1.nationality = 'French' AND (CAST(SUBSTR(T2.time, 1, 2) AS INTEGER) * 60 + CAST(SUBSTR(T2.time, 4, 2) AS INTEGER) + CAST(SUBSTR(T2.time, 7, 2) AS REAL) / 1000) < 120",
    "relevant_table": {
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      },
      "laptimes": {
        "ddl": "create table laptimes( foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, lap integer, position integer, time text, milliseconds integer)"
      }
    },
    "new_relevant_table": {
      "drivers_laptimes": {
        "columns": [
          "driverId",
          "driverRef",
          "number",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url",
          "raceId",
          "lap",
          "position",
          "time",
          "milliseconds"
        ],
        "ddl": "create table drivers_laptimes( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text, foreign key(raceId) references races(raceId) integer, lap integer, position integer, time text, milliseconds integer)"
      }
    },
    "old_new_table_mapping": {
      "laptimes": "drivers_laptimes",
      "drivers": "drivers_laptimes"
    },
    "new_table_primary_key": "driverId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(driverId) FROM drivers_laptimes WHERE nationality = 'French' AND (CAST(SUBSTR(time, 1, 2) AS INTEGER) * 60 + CAST(SUBSTR(time, 4, 2) AS INTEGER) + CAST(SUBSTR(time, 7, 2) AS REAL) / 1000) < 120"
  },
  {
    "train_idx": 970,
    "db_id": "formula_1",
    "question": "List out top 3 German drivers who were born from 1980-1990 and have the earliest lap time.",
    "query": "SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1990' ORDER BY T1.time LIMIT 3",
    "relevant_table": {
      "pitstops": {
        "ddl": "create table pitstops( foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, stop integer, lap integer, time text, duration text, milliseconds integer)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "pitstops_drivers": {
        "columns": [
          "raceId",
          "driverId",
          "stop",
          "lap",
          "time",
          "duration",
          "milliseconds",
          "driverRef",
          "number",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url"
        ],
        "ddl": "create table pitstops_drivers( foreign key(raceId) references races(raceId) integer, driverId integer primary key, stop integer, lap integer, time text, duration text, milliseconds integer, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "old_new_table_mapping": {
      "pitstops": "pitstops_drivers",
      "drivers": "pitstops_drivers"
    },
    "new_table_primary_key": "driverId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT driverId FROM pitstops_drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1980' AND '1990' ORDER BY time LIMIT 3"
  },
  {
    "train_idx": 972,
    "db_id": "formula_1",
    "question": "Which drivers who were born in 1971 and has the fastest lap time on the race? Give id and code of these drivers.",
    "query": "SELECT T2.driverId, T2.code FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE STRFTIME('%Y', T2.dob) = '1971' AND T1.fastestLapTime IS NOT NULL",
    "relevant_table": {
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "drivers_results": {
        "columns": [
          "driverId",
          "driverRef",
          "number_drivers",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url",
          "resultId",
          "raceId",
          "constructorId",
          "number_results",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "time",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId"
        ],
        "ddl": "create table drivers_results( driverId integer primary key, driverRef text, number_drivers integer, code text, forename text, surname text, dob date, nationality text, url text, resultId integer, foreign key(raceId) references races(raceId) integer, foreign key(constructorId) references constructors(constructorId) integer, number_results integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      }
    },
    "old_new_table_mapping": {
      "drivers": "drivers_results",
      "results": "drivers_results"
    },
    "new_table_primary_key": "driverId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "number_drivers": {
        "old_table": "drivers",
        "old_column": "number"
      },
      "number_results": {
        "old_table": "results",
        "old_column": "number"
      }
    },
    "new_gold_sql": "SELECT driverId, code FROM drivers_results WHERE STRFTIME('%Y', dob) = '1971' AND fastestLapTime IS NOT NULL"
  },
  {
    "train_idx": 973,
    "db_id": "formula_1",
    "question": "List out top 10 Spanish drivers who were born before 1982 and have the latest lap time.",
    "query": "SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'Spanish' AND STRFTIME('%Y', T2.dob) < '1982' ORDER BY T1.time DESC LIMIT 10",
    "relevant_table": {
      "pitstops": {
        "ddl": "create table pitstops( foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, stop integer, lap integer, time text, duration text, milliseconds integer)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "drivers_pitstops": {
        "columns": [
          "driverId",
          "driverRef",
          "number",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url",
          "raceId",
          "stop",
          "lap",
          "time",
          "duration",
          "milliseconds"
        ],
        "ddl": "create table drivers_pitstops( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text, foreign key(raceId) references races(raceId) integer, stop integer, lap integer, time text, duration text, milliseconds integer)"
      }
    },
    "old_new_table_mapping": {
      "drivers": "drivers_pitstops",
      "pitstops": "drivers_pitstops"
    },
    "new_table_primary_key": "driverId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT driverId FROM drivers_pitstops WHERE nationality = 'Spanish' AND STRFTIME('%Y', dob) < '1982' ORDER BY time DESC LIMIT 10"
  },
  {
    "train_idx": 974,
    "db_id": "formula_1",
    "question": "State the racing year which has the fastest lap time?",
    "query": "SELECT T2.year FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.fastestLapTime IS NOT NULL",
    "relevant_table": {
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "race_results": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId",
          "name",
          "date",
          "race_time",
          "url",
          "resultId",
          "driverId",
          "constructorId",
          "number",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "result_time",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId"
        ],
        "ddl": "create table race_results( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, race_time text, url text, resultId integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, result_time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      }
    },
    "old_new_table_mapping": {
      "races": "race_results",
      "results": "race_results"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "race_time": {
        "old_table": "races",
        "old_column": "time"
      },
      "result_time": {
        "old_table": "results",
        "old_column": "time"
      }
    },
    "new_gold_sql": "SELECT year FROM race_results WHERE fastestLapTime IS NOT NULL"
  },
  {
    "train_idx": 975,
    "db_id": "formula_1",
    "question": "Which year has the lowest speed of lap time?",
    "query": "SELECT T2.year FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId ORDER BY T1.time DESC LIMIT 1",
    "relevant_table": {
      "laptimes": {
        "ddl": "create table laptimes( foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, lap integer, position integer, time text, milliseconds integer)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "raceLapTimes": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId",
          "name",
          "date",
          "time_race",
          "url",
          "driverId",
          "lap",
          "position",
          "time_lap",
          "milliseconds"
        ],
        "ddl": "create table raceLapTimes( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time_race text, url text, foreign key(driverId) references drivers(driverId) integer, lap integer, position integer, time_lap text, milliseconds integer)"
      }
    },
    "old_new_table_mapping": {
      "races": "raceLapTimes",
      "laptimes": "raceLapTimes"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "time_race": {
        "old_table": "races",
        "old_column": "time"
      },
      "time_lap": {
        "old_table": "laptimes",
        "old_column": "time"
      }
    },
    "new_gold_sql": "SELECT year FROM raceLapTimes ORDER BY time_lap DESC LIMIT 1"
  },
  {
    "train_idx": 980,
    "db_id": "formula_1",
    "question": "List the reference name of the drivers who passed the second qualifying lap during race no. 23. Indicate their nationality and birthday.",
    "query": "SELECT T2.driverRef, T2.nationality, T2.dob FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T1.raceId = 23 AND T1.q2 IS NOT NULL",
    "relevant_table": {
      "qualifying": {
        "ddl": "create table qualifying( qualifyId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, position integer, q1 text, q2 text, q3 text)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "drivers_qualifying": {
        "columns": [
          "driverId",
          "driverRef",
          "number_drivers",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url",
          "qualifyId",
          "raceId",
          "constructorId",
          "number_qualifying",
          "position",
          "q1",
          "q2",
          "q3"
        ],
        "ddl": "create table drivers_qualifying( driverId integer primary key, driverRef text, number_drivers integer, code text, forename text, surname text, dob date, nationality text, url text, qualifyId integer, foreign key(raceId) references races(raceId) integer, foreign key(constructorId) references constructors(constructorId) integer, number_qualifying integer, position integer, q1 text, q2 text, q3 text)"
      }
    },
    "old_new_table_mapping": {
      "drivers": "drivers_qualifying",
      "qualifying": "drivers_qualifying"
    },
    "new_table_primary_key": "driverId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "number_drivers": {
        "old_table": "drivers",
        "old_column": "number"
      },
      "number_qualifying": {
        "old_table": "qualifying",
        "old_column": "number"
      }
    },
    "new_gold_sql": "SELECT driverRef, nationality, dob FROM drivers_qualifying WHERE raceId = 23 AND q2 IS NOT NULL"
  },
  {
    "train_idx": 981,
    "db_id": "formula_1",
    "question": "On what year did the youngest driver had his first qualifying race? Also state the name, date and time of the race.",
    "query": "SELECT T3.year, T3.name, T3.date, T3.time FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T1.driverId = ( SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 1 ) ORDER BY T3.date ASC LIMIT 1",
    "relevant_table": {
      "qualifying": {
        "ddl": "create table qualifying( qualifyId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, position integer, q1 text, q2 text, q3 text)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "qualifying_drivers": {
        "columns": [
          "qualifyId",
          "raceId",
          "driverId",
          "constructorId",
          "qualifying_number",
          "position",
          "q1",
          "q2",
          "q3",
          "driverRef",
          "drivers_number",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url"
        ],
        "ddl": "create table qualifying_drivers( qualifyId integer primary key, foreign key(raceId) references races(raceId) integer, driverId integer, foreign key(constructorId) references constructors(constructorId) integer, qualifying_number integer, position integer, q1 text, q2 text, q3 text, driverRef text, drivers_number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "old_new_table_mapping": {
      "qualifying": "qualifying_drivers",
      "drivers": "qualifying_drivers"
    },
    "new_table_primary_key": "qualifyId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "qualifying_number": {
        "old_table": "qualifying",
        "old_column": "number"
      },
      "drivers_number": {
        "old_table": "drivers",
        "old_column": "number"
      }
    },
    "new_gold_sql": "SELECT T3.year, T3.name, T3.date, T3.time FROM qualifying_drivers AS T1 INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T1.driverId = ( SELECT driverId FROM qualifying_drivers ORDER BY dob DESC LIMIT 1 ) ORDER BY T3.date ASC LIMIT 1"
  },
  {
    "train_idx": 982,
    "db_id": "formula_1",
    "question": "How many American drivers have puncture status.",
    "query": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 on T1.driverId = T2.driverId INNER JOIN status AS T3 on T2.statusId = T3.statusId WHERE T3.status = 'Puncture' AND T1.nationality = 'American'",
    "relevant_table": {
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      },
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      },
      "status": {
        "ddl": "create table status( statusId integer primary key, status text)"
      }
    },
    "new_relevant_table": {
      "drivers_results": {
        "columns": [
          "resultId",
          "raceId",
          "driverId",
          "constructorId",
          "number_results",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "time",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId",
          "driverRef",
          "number_drivers",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url"
        ],
        "ddl": "create table drivers_results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, driverId integer, foreign key(constructorId) references constructors(constructorId) integer, number_results integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer, driverRef text, number_drivers integer, code text, forename text, surname text, dob date, nationality text, url text)"
      },
      "status": {
        "ddl": "create table status( statusId integer primary key, status text)"
      }
    },
    "old_new_table_mapping": {
      "results": "drivers_results",
      "drivers": "drivers_results"
    },
    "new_table_primary_key": "resultId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "number_drivers": {
        "old_table": "drivers",
        "old_column": "number"
      },
      "number_results": {
        "old_table": "results",
        "old_column": "number"
      }
    },
    "new_gold_sql": "SELECT COUNT(driverId) FROM drivers_results AS T1 INNER JOIN status AS T2 on T1.statusId = T2.statusId WHERE T1.status = 'Puncture' AND T1.nationality = 'American'"
  },
  {
    "train_idx": 983,
    "db_id": "formula_1",
    "question": "Which of the Italian constructor got the highest point to date? Give its introduction website?",
    "query": "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 on T1.constructorId = T2.constructorId WHERE T1.nationality = 'Italian' ORDER BY T2.points DESC LIMIT 1",
    "relevant_table": {
      "constructors": {
        "ddl": "create table constructors( constructorId integer primary key, constructorRef text, name text, nationality text, url text)"
      },
      "constructorstandings": {
        "ddl": "create table constructorstandings( constructorStandingsId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(constructorId) references constructors(constructorId) integer, points real, position integer, positionText text, wins integer)"
      }
    },
    "new_relevant_table": {
      "constructorMerged": {
        "columns": [
          "constructorId",
          "constructorRef",
          "name",
          "nationality",
          "url",
          "constructorStandingsId",
          "raceId",
          "points",
          "position",
          "positionText",
          "wins"
        ],
        "ddl": "create table constructorMerged( constructorId integer primary key, constructorRef text, name text, nationality text, url text, constructorStandingsId integer, foreign key(raceId) references races(raceId) integer, points real, position integer, positionText text, wins integer)"
      }
    },
    "old_new_table_mapping": {
      "constructors": "constructorMerged",
      "constructorstandings": "constructorMerged"
    },
    "new_table_primary_key": "constructorId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT url FROM constructorMerged WHERE nationality = 'Italian' ORDER BY points DESC LIMIT 1"
  },
  {
    "train_idx": 984,
    "db_id": "formula_1",
    "question": "What is the website of the constructor who tallied the most total wins.",
    "query": "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 on T1.constructorId = T2.constructorId ORDER BY T2.wins DESC LIMIT 1",
    "relevant_table": {
      "constructors": {
        "ddl": "create table constructors( constructorId integer primary key, constructorRef text, name text, nationality text, url text)"
      },
      "constructorstandings": {
        "ddl": "create table constructorstandings( constructorStandingsId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(constructorId) references constructors(constructorId) integer, points real, position integer, positionText text, wins integer)"
      }
    },
    "new_relevant_table": {
      "constructorMerged": {
        "columns": [
          "constructorStandingsId",
          "raceId",
          "constructorId",
          "points",
          "position",
          "positionText",
          "wins",
          "constructorRef",
          "name",
          "nationality",
          "url"
        ],
        "ddl": "create table constructorMerged( constructorStandingsId integer primary key, foreign key(raceId) references races(raceId) integer, constructorId integer, points real, position integer, positionText text, wins integer, constructorRef text, name text, nationality text, url text)"
      }
    },
    "old_new_table_mapping": {
      "constructorstandings": "constructorMerged",
      "constructors": "constructorMerged"
    },
    "new_table_primary_key": "constructorStandingsId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT url FROM constructorMerged ORDER BY wins DESC LIMIT 1"
  },
  {
    "train_idx": 985,
    "db_id": "formula_1",
    "question": "Among the drivers who participated in the French Grand Prix, who has the slowest time in the 3rd lap.",
    "query": "SELECT T1.driverId FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'French Grand Prix' AND T1.lap = 3 ORDER BY T1.time DESC LIMIT 1",
    "relevant_table": {
      "laptimes": {
        "ddl": "create table laptimes( foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, lap integer, position integer, time text, milliseconds integer)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "raceLapTimes": {
        "columns": [
          "raceId",
          "driverId",
          "lap",
          "position",
          "lapTime",
          "milliseconds",
          "year",
          "round",
          "circuitId",
          "raceName",
          "date",
          "raceTime",
          "url"
        ],
        "ddl": "create table raceLapTimes( raceId integer primary key, foreign key(driverId) references drivers(driverId) integer, lap integer, position integer, milliseconds integer, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, date date, url text)"
      }
    },
    "old_new_table_mapping": {
      "laptimes": "raceLapTimes",
      "races": "raceLapTimes"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT driverId FROM raceLapTimes WHERE raceName = 'French Grand Prix' AND lap = 3 ORDER BY lapTime DESC LIMIT 1"
  },
  {
    "train_idx": 986,
    "db_id": "formula_1",
    "question": "In which race did the fastest 1st lap time was recorded? Please indicate the time in milliseconds.",
    "query": "SELECT T1.milliseconds FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.lap = 1 ORDER BY T1.time LIMIT 1",
    "relevant_table": {
      "laptimes": {
        "ddl": "create table laptimes( foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, lap integer, position integer, time text, milliseconds integer)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "raceLapTimes": {
        "columns": [
          "raceId",
          "driverId",
          "lap",
          "position",
          "lapTime",
          "milliseconds",
          "year",
          "round",
          "circuitId",
          "raceName",
          "date",
          "raceTime",
          "url"
        ],
        "ddl": "create table raceLapTimes( raceId integer primary key, foreign key(driverId) references drivers(driverId) integer, lap integer, position integer, milliseconds integer, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, date date, url text)"
      }
    },
    "old_new_table_mapping": {
      "laptimes": "raceLapTimes",
      "races": "raceLapTimes"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT milliseconds FROM raceLapTimes WHERE lap = 1 ORDER BY lapTime LIMIT 1"
  },
  {
    "train_idx": 987,
    "db_id": "formula_1",
    "question": "What is the average fastest lap time of the top 10 drivers in the 2006 United States Grand Prix?",
    "query": "SELECT AVG(T1.fastestLapTime) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.rank < 11 AND T2.year = 2006 AND T2.name = 'United States Grand Prix'",
    "relevant_table": {
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "race_results": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId",
          "name",
          "date",
          "time_races",
          "url",
          "resultId",
          "driverId",
          "constructorId",
          "number",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "time_results",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId"
        ],
        "ddl": "create table race_results( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time_races text, url text, resultId integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time_results text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      }
    },
    "old_new_table_mapping": {
      "races": "race_results",
      "results": "race_results"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "time_races": {
        "old_table": "races",
        "old_column": "time"
      },
      "time_results": {
        "old_table": "results",
        "old_column": "time"
      }
    },
    "new_gold_sql": "SELECT AVG(fastestLapTime) FROM race_results WHERE rank < 11 AND year = 2006 AND name = 'United States Grand Prix'"
  },
  {
    "train_idx": 988,
    "db_id": "formula_1",
    "question": "List down top 3 German drivers who has the shortest average pit stop duration and were born between 1980-1985.",
    "query": "SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1985' GROUP BY T2.forename, T2.surname ORDER BY AVG(T1.duration) LIMIT 3",
    "relevant_table": {
      "pitstops": {
        "ddl": "create table pitstops( foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, stop integer, lap integer, time text, duration text, milliseconds integer)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "pitstops_drivers": {
        "columns": [
          "raceId",
          "driverId",
          "stop",
          "lap",
          "time",
          "duration",
          "milliseconds",
          "driverRef",
          "number",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url"
        ],
        "ddl": "create table pitstops_drivers( foreign key(raceId) references races(raceId) integer, driverId integer primary key, stop integer, lap integer, time text, duration text, milliseconds integer, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "old_new_table_mapping": {
      "pitstops": "pitstops_drivers",
      "drivers": "pitstops_drivers"
    },
    "new_table_primary_key": "driverId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT forename, surname FROM pitstops_drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1980' AND '1985' GROUP BY forename, surname ORDER BY AVG(duration) LIMIT 3"
  },
  {
    "train_idx": 989,
    "db_id": "formula_1",
    "question": "Who is the champion of the Canadian Grand Prix in 2008? Indicate his finish time.",
    "query": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Canadian Grand Prix' AND T2.year = 2008 AND T1.time LIKE '_:%:__.___'",
    "relevant_table": {
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "race_results": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId",
          "name",
          "date",
          "time_races",
          "url",
          "resultId",
          "driverId",
          "constructorId",
          "number",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "time_results",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId"
        ],
        "ddl": "create table race_results( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time_races text, url text, resultId integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time_results text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      }
    },
    "old_new_table_mapping": {
      "races": "race_results",
      "results": "race_results"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "time_races": {
        "old_table": "races",
        "old_column": "time"
      },
      "time_results": {
        "old_table": "results",
        "old_column": "time"
      }
    },
    "new_gold_sql": "SELECT time_results FROM race_results WHERE name = 'Canadian Grand Prix' AND year = 2008 AND time_results LIKE '_:%:__.___'"
  },
  {
    "train_idx": 994,
    "db_id": "formula_1",
    "question": "Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team.",
    "query": "SELECT SUM(T1.points), T2.name, T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T3.raceid = T1.raceid WHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 GROUP BY T2.name ORDER BY SUM(T1.points) DESC LIMIT 1",
    "relevant_table": {
      "constructorresults": {
        "ddl": "create table constructorresults( constructorResultsId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(constructorId) references constructors(constructorId) integer, points real, status text)"
      },
      "constructors": {
        "ddl": "create table constructors( constructorId integer primary key, constructorRef text, name text, nationality text, url text)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "constructorResultsConstructors": {
        "columns": [
          "constructorId",
          "constructorRef",
          "name",
          "nationality",
          "url",
          "constructorResultsId",
          "raceId",
          "points",
          "status"
        ],
        "ddl": "create table constructorResultsConstructors( constructorId integer, constructorRef text, name text, nationality text, url text, constructorResultsId integer, foreign key(raceId) references races(raceId) integer, points real, status text)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "old_new_table_mapping": {
      "constructors": "constructorResultsConstructors",
      "constructorresults": "constructorResultsConstructors"
    },
    "new_table_primary_key": "'constructorId'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT SUM(points), name, nationality FROM constructorResultsConstructors WHERE name = 'Monaco Grand Prix' AND year BETWEEN 1980 AND 2010 GROUP BY name ORDER BY SUM(points) DESC LIMIT 1"
  },
  {
    "train_idx": 995,
    "db_id": "formula_1",
    "question": "What is the average score of Lewis Hamilton among all the Turkish Grand Prix?",
    "query": "SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T3.name = 'Turkish Grand Prix'",
    "relevant_table": {
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      },
      "driverstandings": {
        "ddl": "create table driverstandings( driverStandingsId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, points real, position integer, positionText text, wins integer)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "driverRaceStandings": {
        "columns": [
          "driverStandingsId",
          "raceId",
          "driverId",
          "points",
          "position",
          "positionText",
          "wins",
          "year",
          "round",
          "circuitId",
          "name",
          "date",
          "time",
          "url"
        ],
        "ddl": "create table driverRaceStandings( driverStandingsId integer primary key, raceId integer, foreign key(driverId) references drivers(driverId) integer, points real, position integer, positionText text, wins integer, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "old_new_table_mapping": {
      "driverstandings": "driverRaceStandings",
      "races": "driverRaceStandings"
    },
    "new_table_primary_key": "driverStandingsId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT AVG(points) FROM driverRaceStandings WHERE driverId IN (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND name = 'Turkish Grand Prix'"
  },
  {
    "train_idx": 999,
    "db_id": "formula_1",
    "question": "In terms of the fastest lap time, what is the name of the race which recorded the fastest lap speed by a racer?",
    "query": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime ASC LIMIT 1",
    "relevant_table": {
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      },
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      }
    },
    "new_relevant_table": {
      "race_results": {
        "columns": [
          "resultId",
          "raceId",
          "driverId",
          "constructorId",
          "number",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "time_results",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed",
          "statusId",
          "year",
          "round",
          "circuitId",
          "name",
          "date",
          "time_races",
          "url"
        ],
        "ddl": "create table race_results( resultId integer primary key, raceId integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, url text)"
      }
    },
    "old_new_table_mapping": {
      "results": "race_results",
      "races": "race_results"
    },
    "new_table_primary_key": "resultId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "time_results, time_races": {
        "old_table": "results, races",
        "old_column": "time, time"
      }
    },
    "new_gold_sql": "SELECT name FROM race_results WHERE fastestLapTime IS NOT NULL ORDER BY fastestLapTime ASC LIMIT 1"
  },
  {
    "train_idx": 1000,
    "db_id": "formula_1",
    "question": "Which racetrack hosted the most recent race? Indicate the full location.",
    "query": "SELECT T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T2.date DESC LIMIT 1",
    "relevant_table": {
      "circuits": {
        "ddl": "create table circuits( circuitId integer primary key, circuitRef text, name text, location text, country text, lat real, lng real, alt integer, url text)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "race_circuit": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId_races",
          "name_races",
          "date",
          "time",
          "url_races",
          "circuitId_circuits",
          "circuitRef",
          "name_circuits",
          "location",
          "country",
          "lat",
          "lng",
          "alt",
          "url_circuits"
        ],
        "ddl": "create table race_circuit( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, date date, time text, circuitRef text, location text, country text, lat real, lng real, alt integer)"
      }
    },
    "old_new_table_mapping": {
      "races": "race_circuit",
      "circuits": "race_circuit"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "circuitId_races, name_races, url_races, circuitId_circuits, name_circuits, url_circuits": {
        "old_table": "races, circuits, circuits",
        "old_column": "circuitId, name, url"
      }
    },
    "new_gold_sql": "SELECT location FROM race_circuit ORDER BY date DESC LIMIT 1"
  },
  {
    "train_idx": 1001,
    "db_id": "formula_1",
    "question": "What is full name of the racer who ranked 1st in the 3rd qualifying race held in the Marina Bay Street Circuit in 2008?",
    "query": "SELECT T2.forename, T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceid = T3.raceid WHERE q3 IS NOT NULL AND T3.year = 2008 AND T3.circuitId IN ( SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit' ) ORDER BY CAST(SUBSTR(q3, 1, INSTR(q3, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(q3, INSTR(q3, ':') + 1, INSTR(q3, '.') - INSTR(q3, ':') - 1) AS REAL) + CAST(SUBSTR(q3, INSTR(q3, '.') + 1) AS REAL) / 1000 ASC LIMIT 1",
    "relevant_table": {
      "qualifying": {
        "ddl": "create table qualifying( qualifyId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, position integer, q1 text, q2 text, q3 text)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      },
      "circuits": {
        "ddl": "create table circuits( circuitId integer primary key, circuitRef text, name text, location text, country text, lat real, lng real, alt integer, url text)"
      }
    },
    "new_relevant_table": {
      "drivers_circuits": {
        "columns": [
          "driverId",
          "driverRef",
          "number",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url_drivers",
          "circuitId",
          "circuitRef",
          "name",
          "location",
          "country",
          "lat",
          "lng",
          "alt",
          "url_circuits"
        ],
        "ddl": "create table drivers_circuits( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url_drivers text, circuitId integer, circuitRef text, name text, location text, country text, lat real, lng real, alt integer, url_circuits text)"
      },
      "qualifying": {
        "ddl": "create table qualifying( qualifyId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers_circuits(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, position integer, q1 text, q2 text, q3 text)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references drivers_circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "old_new_table_mapping": {
      "drivers": "drivers_circuits",
      "circuits": "drivers_circuits"
    },
    "new_table_primary_key": "driverId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "url_drivers": {
        "old_table": "drivers",
        "old_column": "url"
      },
      "url_circuits": {
        "old_table": "circuits",
        "old_column": "url"
      }
    },
    "new_gold_sql": "SELECT T2.forename, T2.surname FROM qualifying AS T1 INNER JOIN drivers_circuits AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceid = T3.raceid WHERE q3 IS NOT NULL AND T3.year = 2008 AND T3.circuitId IN ( SELECT circuitId FROM drivers_circuits WHERE name = 'Marina Bay Street Circuit' ) ORDER BY CAST(SUBSTR(q3, 1, INSTR(q3, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(q3, INSTR(q3, ':') + 1, INSTR(q3, '.') - INSTR(q3, ':') - 1) AS REAL) + CAST(SUBSTR(q3, INSTR(q3, '.') + 1) AS REAL) / 1000 ASC LIMIT 1"
  },
  {
    "train_idx": 1002,
    "db_id": "formula_1",
    "question": "As of the present, what is the full name of the youngest racer? Indicate her nationality and the name of the race to which he/she first joined.",
    "query": "SELECT T1.forename, T1.surname, T1.nationality, T3.name FROM drivers AS T1 INNER JOIN driverStandings AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T2.raceId = T3.raceId ORDER BY JULIANDAY(T1.dob) DESC LIMIT 1",
    "relevant_table": {
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      },
      "driverstandings": {
        "ddl": "create table driverstandings( driverStandingsId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, points real, position integer, positionText text, wins integer)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "drivers_races": {
        "columns": [
          "driverId",
          "driverRef",
          "number",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url_drivers",
          "raceId",
          "year",
          "round",
          "circuitId",
          "name_races",
          "date",
          "time",
          "url_races"
        ],
        "ddl": "create table drivers_races( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, raceId integer, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, date date, time text)"
      },
      "driverstandings": {
        "ddl": "create table driverstandings( driverStandingsId integer primary key, foreign key(raceId) references drivers_races(raceId) integer, foreign key(driverId) references drivers_races(driverId) integer, points real, position integer, positionText text, wins integer)"
      }
    },
    "old_new_table_mapping": {
      "drivers": "drivers_races",
      "races": "drivers_races"
    },
    "new_table_primary_key": "driverId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "url_drivers, name_races": {
        "old_table": "drivers, races",
        "old_column": "url, name"
      }
    },
    "new_gold_sql": "SELECT T1.orename, T1.surname, T1.nationality, T1.name_races FROM drivers_races AS T1 INNER JOIN driverStandings AS T2 on T1.driverId = T2.driverId ORDER BY JULIANDAY(dob) DESC LIMIT 1"
  },
  {
    "train_idx": 1003,
    "db_id": "formula_1",
    "question": "How many accidents did the driver who had the highest number accidents in the Canadian Grand Prix have?",
    "query": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN status AS T3 on T1.statusId = T3.statusId WHERE T3.statusId = 3 AND T2.name = 'Canadian Grand Prix' GROUP BY T1.driverId ORDER BY COUNT(T1.driverId) DESC LIMIT 1",
    "relevant_table": {
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      },
      "status": {
        "ddl": "create table status( statusId integer primary key, status text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "statusId",
          "status",
          "resultId",
          "raceId",
          "driverId",
          "constructorId",
          "number",
          "grid",
          "position",
          "positionText",
          "positionOrder",
          "points",
          "laps",
          "time",
          "milliseconds",
          "fastestLap",
          "rank",
          "fastestLapTime",
          "fastestLapSpeed"
        ],
        "ddl": "create table merged_table( statusId integer primary key, status text, resultId integer, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "old_new_table_mapping": {
      "status": "merged_table",
      "results": "merged_table"
    },
    "new_table_primary_key": "statusId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(T1.driverId) FROM merged_table AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.statusId = 3 AND T2.name = 'Canadian Grand Prix' GROUP BY T1.driverId ORDER BY COUNT(T1.driverId) DESC LIMIT 1"
  },
  {
    "train_idx": 1004,
    "db_id": "formula_1",
    "question": "How many wins was achieved by the oldest racer? Indicate his/her full name.",
    "query": "SELECT SUM(T1.wins),T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId ORDER BY T2.dob ASC LIMIT 1",
    "relevant_table": {
      "driverstandings": {
        "ddl": "create table driverstandings( driverStandingsId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, points real, position integer, positionText text, wins integer)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "driverStandingsDrivers": {
        "columns": [
          "driverStandingsId",
          "raceId",
          "driverId",
          "points",
          "position",
          "positionText",
          "wins",
          "driverRef",
          "number",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url"
        ],
        "ddl": "create table driverStandingsDrivers( driverStandingsId integer primary key, foreign key(raceId) references races(raceId) integer, driverId integer, points real, position integer, positionText text, wins integer, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "old_new_table_mapping": {
      "driverstandings": "driverStandingsDrivers",
      "drivers": "driverStandingsDrivers"
    },
    "new_table_primary_key": "driverStandingsId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT SUM(wins),forename, surname FROM driverStandingsDrivers ORDER BY dob ASC LIMIT 1"
  },
  {
    "train_idx": 1007,
    "db_id": "formula_1",
    "question": "What was the longest time that Lewis Hamilton had spent at a pit stop?",
    "query": "SELECT T1.duration FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.duration DESC LIMIT 1",
    "relevant_table": {
      "pitstops": {
        "ddl": "create table pitstops( foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, stop integer, lap integer, time text, duration text, milliseconds integer)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "merged_drivers_pitstops": {
        "columns": [
          "driverId",
          "driverRef",
          "number",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url",
          "raceId",
          "stop",
          "lap",
          "time",
          "duration",
          "milliseconds"
        ],
        "ddl": "create table merged_drivers_pitstops( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text, foreign key(raceId) references races(raceId) integer, stop integer, lap integer, time text, duration text, milliseconds integer)"
      }
    },
    "old_new_table_mapping": {
      "drivers": "merged_drivers_pitstops",
      "pitstops": "merged_drivers_pitstops"
    },
    "new_table_primary_key": "driverId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT duration FROM merged_drivers_pitstops WHERE forename = 'Lewis' AND surname = 'Hamilton' ORDER BY duration DESC LIMIT 1"
  },
  {
    "train_idx": 1008,
    "db_id": "formula_1",
    "question": "During which lap did Lewis Hamilton take a pit stop during the 2011 Australian Grand Prix?",
    "query": "SELECT T1.lap FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.year = 2011 AND T3.name = 'Australian Grand Prix'",
    "relevant_table": {
      "pitstops": {
        "ddl": "create table pitstops( foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, stop integer, lap integer, time text, duration text, milliseconds integer)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "race_pitstop": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId",
          "name",
          "date",
          "time_race",
          "url",
          "driverId",
          "stop",
          "lap",
          "time_pitstop",
          "duration",
          "milliseconds"
        ],
        "ddl": "create table race_pitstop( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time_race text, url text, foreign key(driverId) references drivers(driverId) integer, stop integer, lap integer, time_pitstop text, duration text, milliseconds integer)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "old_new_table_mapping": {
      "races": "race_pitstop",
      "pitstops": "race_pitstop"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "time_race": {
        "old_table": "races",
        "old_column": "time"
      },
      "time_pitstop": {
        "old_table": "pitstops",
        "old_column": "time"
      }
    },
    "new_gold_sql": "SELECT T1.lap FROM race_pitstop AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T1.year = 2011 AND T1.name = 'Australian Grand Prix'"
  },
  {
    "train_idx": 1009,
    "db_id": "formula_1",
    "question": "Please list the time each driver spent at the pit stop during the 2011 Australian Grand Prix.",
    "query": "SELECT T1.duration FROM pitStops AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2011 AND T2.name = 'Australian Grand Prix'",
    "relevant_table": {
      "pitstops": {
        "ddl": "create table pitstops( foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, stop integer, lap integer, time text, duration text, milliseconds integer)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "new_relevant_table": {
      "race_pitstop": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId",
          "name",
          "date",
          "time_races",
          "url",
          "driverId",
          "stop",
          "lap",
          "time_pitstops",
          "duration",
          "milliseconds"
        ],
        "ddl": "create table race_pitstop( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time_races text, url text, foreign key(driverId) references drivers(driverId) integer, stop integer, lap integer, time_pitstops text, duration text, milliseconds integer)"
      }
    },
    "old_new_table_mapping": {
      "races": "race_pitstop",
      "pitstops": "race_pitstop"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "time_races": {
        "old_table": "races",
        "old_column": "time"
      },
      "time_pitstops": {
        "old_table": "pitstops",
        "old_column": "time"
      }
    },
    "new_gold_sql": "SELECT duration FROM race_pitstop WHERE year = 2011 AND name = 'Australian Grand Prix'"
  },
  {
    "train_idx": 1010,
    "db_id": "formula_1",
    "question": "What is the lap record set by Lewis Hamilton in a Formula_1 race?",
    "query": "SELECT T1.time FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
    "relevant_table": {
      "laptimes": {
        "ddl": "create table laptimes( foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, lap integer, position integer, time text, milliseconds integer)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "mergedTable": {
        "columns": [
          "driverId",
          "driverRef",
          "number",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url",
          "raceId",
          "lap",
          "position",
          "time",
          "milliseconds"
        ],
        "ddl": "create table mergedTable( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text, foreign key(raceId) references races(raceId) integer, lap integer, position integer, time text, milliseconds integer)"
      }
    },
    "old_new_table_mapping": {
      "drivers": "mergedTable",
      "laptimes": "mergedTable"
    },
    "new_table_primary_key": "driverId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT time FROM mergedTable WHERE forename = 'Lewis' AND surname = 'Hamilton'"
  },
  {
    "train_idx": 1011,
    "db_id": "formula_1",
    "question": "Which top 20 driver created the shortest lap time ever record in a Formula_1 race? Please give them full names.",
    "query": "WITH lap_times_in_seconds AS (SELECT driverId, (CASE WHEN SUBSTR(time, 1, INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 60 ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS REAL) ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, '.') + 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, '.') + 1) AS REAL) / 1000 ELSE 0 END) AS time_in_seconds FROM lapTimes) SELECT T2.forename, T2.surname, T1.driverId FROM (SELECT driverId, MIN(time_in_seconds) AS min_time_in_seconds FROM lap_times_in_seconds GROUP BY driverId) AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.min_time_in_seconds ASC LIMIT 20",
    "relevant_table": {
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      },
      "laptimes": {
        "ddl": "create table laptimes( foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, lap integer, position integer, time text, milliseconds integer)"
      }
    },
    "new_relevant_table": {
      "drivers_laptimes": {
        "columns": [
          "driverId",
          "driverRef",
          "number",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url",
          "raceId",
          "lap",
          "position",
          "time",
          "milliseconds"
        ],
        "ddl": "create table drivers_laptimes( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text, foreign key(raceId) references races(raceId) integer, lap integer, position integer, time text, milliseconds integer)"
      }
    },
    "old_new_table_mapping": {
      "drivers": "drivers_laptimes",
      "laptimes": "drivers_laptimes"
    },
    "new_table_primary_key": "driverId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "WITH lap_times_in_seconds AS (SELECT driverId, (CASE WHEN SUBSTR(time, 1, INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 60 ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '') - INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '') - INSTR(time, ':') - 1) AS REAL) ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, '') + 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, '') + 1) AS REAL) / 1000 ELSE 0 END) AS time_in_seconds FROM drivers_laptimes) SELECT T2forename, T2surname, T1driverId FROM (SELECT driverId, MIN(time_in_seconds) AS min_time_in_seconds FROM lap_times_in_seconds GROUP BY driverId) AS T1 ORDER BY T1min_time_in_seconds ASC LIMIT 20"
  },
  {
    "train_idx": 1012,
    "db_id": "formula_1",
    "question": "What was the position of the circuits during Lewis Hamilton's fastest lap in a Formula_1 race?",
    "query": "SELECT T1.position FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.time ASC LIMIT 1",
    "relevant_table": {
      "laptimes": {
        "ddl": "create table laptimes( foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, lap integer, position integer, time text, milliseconds integer)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "mergedTable": {
        "columns": [
          "driverId",
          "driverRef",
          "number",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url",
          "raceId",
          "lap",
          "position",
          "time",
          "milliseconds"
        ],
        "ddl": "create table mergedTable( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text, foreign key(raceId) references races(raceId) integer, lap integer, position integer, time text, milliseconds integer)"
      }
    },
    "old_new_table_mapping": {
      "drivers": "mergedTable",
      "laptimes": "mergedTable"
    },
    "new_table_primary_key": "driverId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT position FROM mergedTable WHERE forename = 'Lewis' AND surname = 'Hamilton' ORDER BY time ASC LIMIT 1"
  },
  {
    "train_idx": 1014,
    "db_id": "formula_1",
    "question": "Please list the lap records for the circuits in Italy.",
    "query": "WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T1.FastestLapTime as lap_record FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN (SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy' ) AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds LIMIT 1",
    "relevant_table": {
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      },
      "circuits": {
        "ddl": "create table circuits( circuitId integer primary key, circuitRef text, name text, location text, country text, lat real, lng real, alt integer, url text)"
      }
    },
    "new_relevant_table": {
      "race_circuit": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId_races",
          "name_races",
          "date",
          "time",
          "url_races",
          "circuitId_circuits",
          "circuitRef",
          "name_circuits",
          "location",
          "country",
          "lat",
          "lng",
          "alt",
          "url_circuits"
        ],
        "ddl": "create table race_circuit( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, date date, time text, circuitRef text, location text, country text, lat real, lng real, alt integer)"
      },
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references race_circuit(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      }
    },
    "old_new_table_mapping": {
      "races": "race_circuit",
      "circuits": "race_circuit"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "circuitId_races, name_races, url_races, circuitId_circuits, name_circuits, url_circuits": {
        "old_table": "races, circuits, circuits",
        "old_column": "circuitId, name, url"
      }
    },
    "new_gold_sql": "WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T1.FastestLapTime as lap_record FROM results AS T1 INNER JOIN race_circuit AS T2 on T1.raceId = T2.raceId WHERE T2.country = 'Italy' AND (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = (SELECT MIN(fastest_lap_times.time_in_seconds) FROM fastest_lap_times INNER JOIN race_circuit AS T2 on fastest_lap_times.raceId = T2.raceId WHERE T2.country = 'Italy') LIMIT 1"
  },
  {
    "train_idx": 1015,
    "db_id": "formula_1",
    "question": "In which Formula_1 race was the lap record for the Austrian Grand Prix Circuit set?",
    "query": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T2.name FROM races AS T2 INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN results AS T1 on T2.raceId = T1.raceId INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix') AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds WHERE T2.name = 'Austrian Grand Prix'",
    "relevant_table": {
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      },
      "circuits": {
        "ddl": "create table circuits( circuitId integer primary key, circuitRef text, name text, location text, country text, lat real, lng real, alt integer, url text)"
      },
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      }
    },
    "new_relevant_table": {
      "race_circuit": {
        "columns": [
          "raceId",
          "year",
          "round",
          "circuitId_races",
          "name_races",
          "date",
          "time",
          "url_races",
          "circuitId_circuits",
          "circuitRef",
          "name_circuits",
          "location",
          "country",
          "lat",
          "lng",
          "alt",
          "url_circuits"
        ],
        "ddl": "create table race_circuit( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, date date, time text, circuitRef text, location text, country text, lat real, lng real, alt integer)"
      },
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references race_circuit(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      }
    },
    "old_new_table_mapping": {
      "races": "race_circuit",
      "circuits": "race_circuit"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "circuitId_races, name_races, url_races": {
        "old_table": "races, circuits, races",
        "old_column": "circuitId, name, url"
      }
    },
    "new_gold_sql": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T2.name_races FROM race_circuit AS T2 INNER JOIN results AS T1 on T2.raceId = T1.raceId INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN race_circuit AS T2 on fastest_lap_times.raceId = T2.raceId WHERE T2.name_races = 'Austrian Grand Prix') AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds WHERE T2.name_races = 'Austrian Grand Prix'"
  },
  {
    "train_idx": 1016,
    "db_id": "formula_1",
    "question": "In the race a driver set the lap record for the Austrian Grand Prix Circuit, how long did he spent at the pit stop at that same race?",
    "query": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.driverId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL), lap_record_race AS ( SELECT T1.raceId, T1.driverId FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix') AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds WHERE T2.name = 'Austrian Grand Prix') SELECT T4.duration FROM lap_record_race INNER JOIN pitStops AS T4 on lap_record_race.raceId = T4.raceId AND lap_record_race.driverId = T4.driverId",
    "relevant_table": {
      "pitstops": {
        "ddl": "create table pitstops( foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, stop integer, lap integer, time text, duration text, milliseconds integer)"
      },
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      },
      "circuits": {
        "ddl": "create table circuits( circuitId integer primary key, circuitRef text, name text, location text, country text, lat real, lng real, alt integer, url text)"
      }
    },
    "new_relevant_table": {
      "circuit_pitstops": {
        "columns": [
          "circuitId",
          "circuitRef",
          "name",
          "location",
          "country",
          "lat",
          "lng",
          "alt",
          "url",
          "raceId",
          "driverId",
          "stop",
          "lap",
          "time",
          "duration",
          "milliseconds"
        ],
        "ddl": "create table circuit_pitstops( circuitId integer primary key, circuitRef text, name text, location text, country text, lat real, lng real, alt integer, url text, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, stop integer, lap integer, time text, duration text, milliseconds integer)"
      },
      "results": {
        "ddl": "create table results( resultId integer primary key, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, foreign key(constructorId) references constructors(constructorId) integer, number integer, grid integer, position integer, positionText text, positionOrder integer, points real, laps integer, time text, milliseconds integer, fastestLap integer, rank integer, fastestLapTime text, fastestLapSpeed text, foreign key(statusId) references status(statusId) integer)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuit_pitstops(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "old_new_table_mapping": {
      "circuits": "circuit_pitstops",
      "pitstops": "circuit_pitstops"
    },
    "new_table_primary_key": "circuitId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.driverId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL), lap_record_race AS ( SELECT T1.raceId, T1.driverId FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuit_pitstops AS T3 on T2.circuitId = T3.circuitId INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuit_pitstops AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix') AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds WHERE T2.name = 'Austrian Grand Prix') SELECT T4.duration FROM lap_record_race INNER JOIN circuit_pitstops AS T4 on lap_record_race.raceId = T4.raceId AND lap_record_race.driverId = T4.driverId"
  },
  {
    "train_idx": 1017,
    "db_id": "formula_1",
    "question": "Please list the location coordinates of the circuits whose lap record is 1:29.488.",
    "query": "SELECT T3.lat, T3.lng FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T1.time = '1:29.488'",
    "relevant_table": {
      "laptimes": {
        "ddl": "create table laptimes( foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, lap integer, position integer, time text, milliseconds integer)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      },
      "circuits": {
        "ddl": "create table circuits( circuitId integer primary key, circuitRef text, name text, location text, country text, lat real, lng real, alt integer, url text)"
      }
    },
    "new_relevant_table": {
      "raceLapTimes": {
        "columns": [
          "raceId",
          "driverId",
          "lap",
          "position",
          "lapTime",
          "milliseconds",
          "year",
          "round",
          "circuitId",
          "raceName",
          "date",
          "raceTime",
          "url"
        ],
        "ddl": "create table raceLapTimes( raceId integer primary key, foreign key(driverId) references drivers(driverId) integer, lap integer, position integer, milliseconds integer, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, date date, url text)"
      },
      "circuits": {
        "ddl": "create table circuits( circuitId integer primary key, circuitRef text, name text, location text, country text, lat real, lng real, alt integer, url text)"
      }
    },
    "old_new_table_mapping": {
      "laptimes": "raceLapTimes",
      "races": "raceLapTimes"
    },
    "new_table_primary_key": "raceId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T2.lat, T2.lng FROM raceLapTimes AS T1 INNER JOIN circuits AS T2 on T1.circuitId = T2.circuitId WHERE T2.lapTime = '1:29.488'"
  },
  {
    "train_idx": 1018,
    "db_id": "formula_1",
    "question": "What was the average time in milliseconds Lewis Hamilton spent at a pit stop during Formula_1 races?",
    "query": "SELECT AVG(milliseconds) FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
    "relevant_table": {
      "pitstops": {
        "ddl": "create table pitstops( foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, stop integer, lap integer, time text, duration text, milliseconds integer)"
      },
      "drivers": {
        "ddl": "create table drivers( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text)"
      }
    },
    "new_relevant_table": {
      "merged_drivers_pitstops": {
        "columns": [
          "driverId",
          "driverRef",
          "number",
          "code",
          "forename",
          "surname",
          "dob",
          "nationality",
          "url",
          "raceId",
          "stop",
          "lap",
          "time",
          "duration",
          "milliseconds"
        ],
        "ddl": "create table merged_drivers_pitstops( driverId integer primary key, driverRef text, number integer, code text, forename text, surname text, dob date, nationality text, url text, foreign key(raceId) references races(raceId) integer, stop integer, lap integer, time text, duration text, milliseconds integer)"
      }
    },
    "old_new_table_mapping": {
      "drivers": "merged_drivers_pitstops",
      "pitstops": "merged_drivers_pitstops"
    },
    "new_table_primary_key": "driverId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT AVG(milliseconds) FROM merged_drivers_pitstops WHERE forename = 'Lewis' AND surname = 'Hamilton'"
  },
  {
    "train_idx": 1019,
    "db_id": "formula_1",
    "question": "What is the average lap time in milliseconds of all the lap records set on the various circuits in Italy?",
    "query": "SELECT CAST(SUM(T1.milliseconds) AS REAL) / COUNT(T1.lap) FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy'",
    "relevant_table": {
      "laptimes": {
        "ddl": "create table laptimes( foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, lap integer, position integer, time text, milliseconds integer)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references circuits(circuitId) integer, name text, date date, time text, url text)"
      },
      "circuits": {
        "ddl": "create table circuits( circuitId integer primary key, circuitRef text, name text, location text, country text, lat real, lng real, alt integer, url text)"
      }
    },
    "new_relevant_table": {
      "mergedTable": {
        "columns": [
          "circuitId",
          "circuitRef",
          "name",
          "location",
          "country",
          "lat",
          "lng",
          "alt",
          "url",
          "raceId",
          "driverId",
          "lap",
          "position",
          "time",
          "milliseconds"
        ],
        "ddl": "create table mergedTable( circuitId integer primary key, circuitRef text, name text, location text, country text, lat real, lng real, alt integer, url text, foreign key(raceId) references races(raceId) integer, foreign key(driverId) references drivers(driverId) integer, lap integer, position integer, time text, milliseconds integer)"
      },
      "races": {
        "ddl": "create table races( raceId integer primary key, foreign key(year) references seasons(year) integer, round integer, foreign key(circuitId) references mergedTable(circuitId) integer, name text, date date, time text, url text)"
      }
    },
    "old_new_table_mapping": {
      "circuits": "mergedTable",
      "laptimes": "mergedTable"
    },
    "new_table_primary_key": "circuitId",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(milliseconds) AS REAL) / COUNT(lap) FROM mergedTable WHERE country = 'Italy'"
  },
  {
    "train_idx": 1025,
    "db_id": "european_football_2",
    "question": "Give the name of the league had the most goals in the 2016 season?",
    "query": "SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' GROUP BY t2.name ORDER BY SUM(t1.home_team_goal + t1.away_team_goal) DESC LIMIT 1",
    "relevant_table": {
      "match": {
        "ddl": "create table match( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      },
      "league": {
        "ddl": "create table league( id integer primary key, foreign key(country_id) references Country(id) integer, name text)"
      }
    },
    "new_relevant_table": {
      "MatchLeague": {
        "columns": [
          "id",
          "country_id",
          "league_id",
          "season",
          "stage",
          "date",
          "match_api_id",
          "home_team_api_id",
          "away_team_api_id",
          "home_team_goal",
          "away_team_goal",
          "home_player_X1",
          "home_player_X2",
          "home_player_X3",
          "home_player_X4",
          "home_player_X5",
          "home_player_X6",
          "home_player_X7",
          "home_player_X8",
          "home_player_X9",
          "home_player_X10",
          "home_player_X11",
          "away_player_X1",
          "away_player_X2",
          "away_player_X3",
          "away_player_X4",
          "away_player_X5",
          "away_player_X6",
          "away_player_X7",
          "away_player_X8",
          "away_player_X9",
          "away_player_X10",
          "away_player_X11",
          "home_player_Y1",
          "home_player_Y2",
          "home_player_Y3",
          "home_player_Y4",
          "home_player_Y5",
          "home_player_Y6",
          "home_player_Y7",
          "home_player_Y8",
          "home_player_Y9",
          "home_player_Y10",
          "home_player_Y11",
          "away_player_Y1",
          "away_player_Y2",
          "away_player_Y3",
          "away_player_Y4",
          "away_player_Y5",
          "away_player_Y6",
          "away_player_Y7",
          "away_player_Y8",
          "away_player_Y9",
          "away_player_Y10",
          "away_player_Y11",
          "home_player_1",
          "home_player_2",
          "home_player_3",
          "home_player_4",
          "home_player_5",
          "home_player_6",
          "home_player_7",
          "home_player_8",
          "home_player_9",
          "home_player_10",
          "home_player_11",
          "away_player_1",
          "away_player_2",
          "away_player_3",
          "away_player_4",
          "away_player_5",
          "away_player_6",
          "away_player_7",
          "away_player_8",
          "away_player_9",
          "away_player_10",
          "away_player_11",
          "goal",
          "shoton",
          "shotoff",
          "foulcommit",
          "card",
          "cross",
          "corner",
          "possession",
          "B365H",
          "B365D",
          "B365A",
          "BWH",
          "BWD",
          "BWA",
          "IWH",
          "IWD",
          "IWA",
          "LBH",
          "LBD",
          "LBA",
          "PSH",
          "PSD",
          "PSA",
          "WHH",
          "WHD",
          "WHA",
          "SJH",
          "SJD",
          "SJA",
          "VCH",
          "VCD",
          "VCA",
          "GBH",
          "GBD",
          "GBA",
          "BSH",
          "BSD",
          "BSA",
          "league_name"
        ],
        "ddl": "create table MatchLeague( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      }
    },
    "old_new_table_mapping": {
      "match": "MatchLeague",
      "league": "MatchLeague"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT league_name FROM MatchLeague WHERE season = '2015/2016' GROUP BY league_name ORDER BY SUM(home_team_goal + away_team_goal) DESC LIMIT 1"
  },
  {
    "train_idx": 1026,
    "db_id": "european_football_2",
    "question": "Which home team had lost the fewest matches in the 2016 season?",
    "query": "SELECT teamDetails.team_long_name FROM Match AS matchData INNER JOIN Team AS teamDetails ON matchData.home_team_api_id = teamDetails.team_api_id WHERE matchData.season = '2015/2016' AND matchData.home_team_goal - matchData.away_team_goal < 0 GROUP BY matchData.home_team_api_id ORDER BY COUNT(*) ASC LIMIT 1",
    "relevant_table": {
      "match": {
        "ddl": "create table match( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      },
      "team": {
        "ddl": "create table team( id integer primary key, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text)"
      }
    },
    "new_relevant_table": {
      "MatchTeam": {
        "columns": [
          "id",
          "country_id",
          "league_id",
          "season",
          "stage",
          "date",
          "match_api_id",
          "home_team_api_id",
          "away_team_api_id",
          "home_team_goal",
          "away_team_goal",
          "home_player_X1",
          "home_player_X2",
          "home_player_X3",
          "home_player_X4",
          "home_player_X5",
          "home_player_X6",
          "home_player_X7",
          "home_player_X8",
          "home_player_X9",
          "home_player_X10",
          "home_player_X11",
          "away_player_X1",
          "away_player_X2",
          "away_player_X3",
          "away_player_X4",
          "away_player_X5",
          "away_player_X6",
          "away_player_X7",
          "away_player_X8",
          "away_player_X9",
          "away_player_X10",
          "away_player_X11",
          "home_player_Y1",
          "home_player_Y2",
          "home_player_Y3",
          "home_player_Y4",
          "home_player_Y5",
          "home_player_Y6",
          "home_player_Y7",
          "home_player_Y8",
          "home_player_Y9",
          "home_player_Y10",
          "home_player_Y11",
          "away_player_Y1",
          "away_player_Y2",
          "away_player_Y3",
          "away_player_Y4",
          "away_player_Y5",
          "away_player_Y6",
          "away_player_Y7",
          "away_player_Y8",
          "away_player_Y9",
          "away_player_Y10",
          "away_player_Y11",
          "goal",
          "shoton",
          "shotoff",
          "foulcommit",
          "card",
          "cross",
          "corner",
          "possession",
          "B365H",
          "B365D",
          "B365A",
          "BWH",
          "BWD",
          "BWA",
          "IWH",
          "IWD",
          "IWA",
          "LBH",
          "LBD",
          "LBA",
          "PSH",
          "PSD",
          "PSA",
          "WHH",
          "WHD",
          "WHA",
          "SJH",
          "SJD",
          "SJA",
          "VCH",
          "VCD",
          "VCA",
          "GBH",
          "GBD",
          "GBA",
          "BSH",
          "BSD",
          "BSA",
          "team_api_id",
          "team_fifa_api_id",
          "team_long_name",
          "team_short_name"
        ],
        "ddl": "create table MatchTeam( id integer, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text)"
      }
    },
    "old_new_table_mapping": {
      "match": "MatchTeam",
      "team": "MatchTeam"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT team_long_name FROM MatchTeam WHERE season = '2015/2016' AND home_team_goal - away_team_goal < 0 GROUP BY home_team_api_id ORDER BY COUNT(*) ASC LIMIT 1"
  },
  {
    "train_idx": 1027,
    "db_id": "european_football_2",
    "question": "Indicate the full names of the top 10 players with the highest number of penalties.",
    "query": "SELECT t2.player_name FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.id = t2.id ORDER BY t1.penalties DESC LIMIT 10",
    "relevant_table": {
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      },
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      }
    },
    "new_relevant_table": {
      "player_info": {
        "columns": [
          "id",
          "player_fifa_api_id",
          "player_api_id",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes",
          "player_name",
          "birthday",
          "height",
          "weight"
        ],
        "ddl": "create table player_info( id integer, player_fifa_api_id integer, player_api_id integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer, player_name text, birthday text, height integer, weight integer)"
      }
    },
    "old_new_table_mapping": {
      "player_attributes": "player_info",
      "player": "player_info"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT player_name FROM player_info ORDER BY penalties DESC LIMIT 10"
  },
  {
    "train_idx": 1028,
    "db_id": "european_football_2",
    "question": "In Scotland Premier League, which away team won the most during the 2010 season?",
    "query": "SELECT teamInfo.team_long_name FROM League AS leagueData INNER JOIN Match AS matchData ON leagueData.id = matchData.league_id INNER JOIN Team AS teamInfo ON matchData.away_team_api_id = teamInfo.team_api_id WHERE leagueData.name = 'Scotland Premier League' AND matchData.season = '2009/2010' AND matchData.away_team_goal - matchData.home_team_goal > 0 GROUP BY matchData.away_team_api_id ORDER BY COUNT(*) DESC LIMIT 1",
    "relevant_table": {
      "league": {
        "ddl": "create table league( id integer primary key, foreign key(country_id) references Country(id) integer, name text)"
      },
      "match": {
        "ddl": "create table match( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      },
      "team": {
        "ddl": "create table team( id integer primary key, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text)"
      }
    },
    "new_relevant_table": {
      "match_team": {
        "columns": [
          "id",
          "country_id",
          "league_id",
          "season",
          "stage",
          "date",
          "match_api_id",
          "home_team_api_id",
          "away_team_api_id",
          "home_team_goal",
          "away_team_goal",
          "home_player_X1",
          "home_player_X2",
          "home_player_X3",
          "home_player_X4",
          "home_player_X5",
          "home_player_X6",
          "home_player_X7",
          "home_player_X8",
          "home_player_X9",
          "home_player_X10",
          "home_player_X11",
          "away_player_X1",
          "away_player_X2",
          "away_player_X3",
          "away_player_X4",
          "away_player_X5",
          "away_player_X6",
          "away_player_X7",
          "away_player_X8",
          "away_player_X9",
          "away_player_X10",
          "away_player_X11",
          "home_player_Y1",
          "home_player_Y2",
          "home_player_Y3",
          "home_player_Y4",
          "home_player_Y5",
          "home_player_Y6",
          "home_player_Y7",
          "home_player_Y8",
          "home_player_Y9",
          "home_player_Y10",
          "home_player_Y11",
          "away_player_Y1",
          "away_player_Y2",
          "away_player_Y3",
          "away_player_Y4",
          "away_player_Y5",
          "away_player_Y6",
          "away_player_Y7",
          "away_player_Y8",
          "away_player_Y9",
          "away_player_Y10",
          "away_player_Y11",
          "goal",
          "shoton",
          "shotoff",
          "foulcommit",
          "card",
          "cross",
          "corner",
          "possession",
          "B365H",
          "B365D",
          "B365A",
          "BWH",
          "BWD",
          "BWA",
          "IWH",
          "IWD",
          "IWA",
          "LBH",
          "LBD",
          "LBA",
          "PSH",
          "PSD",
          "PSA",
          "WHH",
          "WHD",
          "WHA",
          "SJH",
          "SJD",
          "SJA",
          "VCH",
          "VCD",
          "VCA",
          "GBH",
          "GBD",
          "GBA",
          "BSH",
          "BSD",
          "BSA",
          "team_api_id",
          "team_fifa_api_id",
          "team_long_name",
          "team_short_name"
        ],
        "ddl": "create table match_team( id integer, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text)"
      },
      "league": {
        "ddl": "create table league( id integer primary key, foreign key(country_id) references Country(id) integer, name text)"
      }
    },
    "old_new_table_mapping": {
      "match": "match_team",
      "team": "match_team"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT match_team.team_long_name FROM League INNER JOIN match_team ON League.id = match_team.league_id WHERE league.name = 'Scotland Premier League' AND match_team.season = '2009/2010' AND match_team.away_team_goal - match_team.home_team_goal > 0 GROUP BY match_team.away_team_api_id ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "train_idx": 1029,
    "db_id": "european_football_2",
    "question": "What are the speed in which attacks are put together of the top 4 teams with the highest build Up Play Speed?",
    "query": "SELECT t1.buildUpPlaySpeed FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id ORDER BY t1.buildUpPlaySpeed ASC LIMIT 4",
    "relevant_table": {
      "team_attributes": {
        "ddl": "create table team_attributes( id integer primary key, foreign key(team_fifa_api_id) references Team(team_fifa_api_id) integer, foreign key(team_api_id) references Team(team_api_id) integer, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text)"
      },
      "team": {
        "ddl": "create table team( id integer primary key, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text)"
      }
    },
    "new_relevant_table": {
      "team_merged": {
        "columns": [
          "id",
          "team_api_id",
          "team_fifa_api_id",
          "team_long_name",
          "team_short_name",
          "date",
          "buildUpPlaySpeed",
          "buildUpPlaySpeedClass",
          "buildUpPlayDribbling",
          "buildUpPlayDribblingClass",
          "buildUpPlayPassing",
          "buildUpPlayPassingClass",
          "buildUpPlayPositioningClass",
          "chanceCreationPassing",
          "chanceCreationPassingClass",
          "chanceCreationCrossing",
          "chanceCreationCrossingClass",
          "chanceCreationShooting",
          "chanceCreationShootingClass",
          "chanceCreationPositioningClass",
          "defencePressure",
          "defencePressureClass",
          "defenceAggression",
          "defenceAggressionClass",
          "defenceTeamWidth",
          "defenceTeamWidthClass",
          "defenceDefenderLineClass"
        ],
        "ddl": "create table team_merged( id integer primary key, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text)"
      }
    },
    "old_new_table_mapping": {
      "team": "team_merged",
      "team_attributes": "team_merged"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT buildUpPlaySpeed FROM team_merged ORDER BY buildUpPlaySpeed ASC LIMIT 4"
  },
  {
    "train_idx": 1030,
    "db_id": "european_football_2",
    "question": "Give the name of the league had the most matches end as draw in the 2016 season?",
    "query": "SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' AND t1.home_team_goal = t1.away_team_goal GROUP BY t2.name ORDER BY COUNT(t1.id) DESC LIMIT 1",
    "relevant_table": {
      "match": {
        "ddl": "create table match( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      },
      "league": {
        "ddl": "create table league( id integer primary key, foreign key(country_id) references Country(id) integer, name text)"
      }
    },
    "new_relevant_table": {
      "MatchLeague": {
        "columns": [
          "id",
          "country_id",
          "league_id",
          "season",
          "stage",
          "date",
          "match_api_id",
          "home_team_api_id",
          "away_team_api_id",
          "home_team_goal",
          "away_team_goal",
          "home_player_X1",
          "home_player_X2",
          "home_player_X3",
          "home_player_X4",
          "home_player_X5",
          "home_player_X6",
          "home_player_X7",
          "home_player_X8",
          "home_player_X9",
          "home_player_X10",
          "home_player_X11",
          "away_player_X1",
          "away_player_X2",
          "away_player_X3",
          "away_player_X4",
          "away_player_X5",
          "away_player_X6",
          "away_player_X7",
          "away_player_X8",
          "away_player_X9",
          "away_player_X10",
          "away_player_X11",
          "home_player_Y1",
          "home_player_Y2",
          "home_player_Y3",
          "home_player_Y4",
          "home_player_Y5",
          "home_player_Y6",
          "home_player_Y7",
          "home_player_Y8",
          "home_player_Y9",
          "home_player_Y10",
          "home_player_Y11",
          "away_player_Y1",
          "away_player_Y2",
          "away_player_Y3",
          "away_player_Y4",
          "away_player_Y5",
          "away_player_Y6",
          "away_player_Y7",
          "away_player_Y8",
          "away_player_Y9",
          "away_player_Y10",
          "away_player_Y11",
          "home_player_1",
          "home_player_2",
          "home_player_3",
          "home_player_4",
          "home_player_5",
          "home_player_6",
          "home_player_7",
          "home_player_8",
          "home_player_9",
          "home_player_10",
          "home_player_11",
          "away_player_1",
          "away_player_2",
          "away_player_3",
          "away_player_4",
          "away_player_5",
          "away_player_6",
          "away_player_7",
          "away_player_8",
          "away_player_9",
          "away_player_10",
          "away_player_11",
          "goal",
          "shoton",
          "shotoff",
          "foulcommit",
          "card",
          "cross",
          "corner",
          "possession",
          "B365H",
          "B365D",
          "B365A",
          "BWH",
          "BWD",
          "BWA",
          "IWH",
          "IWD",
          "IWA",
          "LBH",
          "LBD",
          "LBA",
          "PSH",
          "PSD",
          "PSA",
          "WHH",
          "WHD",
          "WHA",
          "SJH",
          "SJD",
          "SJA",
          "VCH",
          "VCD",
          "VCA",
          "GBH",
          "GBD",
          "GBA",
          "BSH",
          "BSD",
          "BSA",
          "league_name"
        ],
        "ddl": "create table MatchLeague( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      }
    },
    "old_new_table_mapping": {
      "league": "MatchLeague",
      "match": "MatchLeague"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT league_name FROM MatchLeague WHERE season = '2015/2016' AND home_team_goal = away_team_goal GROUP BY league_name ORDER BY COUNT(id) DESC LIMIT 1"
  },
  {
    "train_idx": 1031,
    "db_id": "european_football_2",
    "question": "At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015.",
    "query": "SELECT DISTINCT DATETIME() - T2.birthday age FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id WHERE STRFTIME('%Y',t1.`date`) >= '2013' AND STRFTIME('%Y',t1.`date`) <= '2015' AND t1.sprint_speed >= 97",
    "relevant_table": {
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      },
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player": "player_merged",
      "player_attributes": "player_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT DATETIME() - birthday age FROM player_merged WHERE STRFTIME('%Y',`date`) >= '2013' AND STRFTIME('%Y',`date`) <= '2015' AND sprint_speed >= 97"
  },
  {
    "train_idx": 1032,
    "db_id": "european_football_2",
    "question": "Give the name of the league with the highest matches of all time and how many matches were played in the said league.",
    "query": "SELECT t2.name, t1.max_count FROM League AS t2 JOIN (SELECT league_id, MAX(cnt) AS max_count FROM (SELECT league_id, COUNT(id) AS cnt FROM Match GROUP BY league_id) AS subquery) AS t1 ON t1.league_id = t2.id",
    "relevant_table": {
      "league": {
        "ddl": "create table league( id integer primary key, foreign key(country_id) references Country(id) integer, name text)"
      },
      "match": {
        "ddl": "create table match( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      }
    },
    "new_relevant_table": {
      "league_match": {
        "columns": [
          "id",
          "country_id",
          "league_id",
          "season",
          "stage",
          "date",
          "match_api_id",
          "foreign key(home_team_api_id) references Team(team_api_id)",
          "foreign key(away_team_api_id) references Team(team_api_id)",
          "home_team_goal",
          "away_team_goal",
          "home_player_X1",
          "home_player_X2",
          "home_player_X3",
          "home_player_X4",
          "home_player_X5",
          "home_player_X6",
          "home_player_X7",
          "home_player_X8",
          "home_player_X9",
          "home_player_X10",
          "home_player_X11",
          "away_player_X1",
          "away_player_X2",
          "away_player_X3",
          "away_player_X4",
          "away_player_X5",
          "away_player_X6",
          "away_player_X7",
          "away_player_X8",
          "away_player_X9",
          "away_player_X10",
          "away_player_X11",
          "home_player_Y1",
          "home_player_Y2",
          "home_player_Y3",
          "home_player_Y4",
          "home_player_Y5",
          "home_player_Y6",
          "home_player_Y7",
          "home_player_Y8",
          "home_player_Y9",
          "home_player_Y10",
          "home_player_Y11",
          "away_player_Y1",
          "away_player_Y2",
          "away_player_Y3",
          "away_player_Y4",
          "away_player_Y5",
          "away_player_Y6",
          "away_player_Y7",
          "away_player_Y8",
          "away_player_Y9",
          "away_player_Y10",
          "away_player_Y11",
          "foreign key(home_player_1) references Player(player_api_id)",
          "foreign key(home_player_2) references Player(player_api_id)",
          "foreign key(home_player_3) references Player(player_api_id)",
          "foreign key(home_player_4) references Player(player_api_id)",
          "foreign key(home_player_5) references Player(player_api_id)",
          "foreign key(home_player_6) references Player(player_api_id)",
          "foreign key(home_player_7) references Player(player_api_id)",
          "foreign key(home_player_8) references Player(player_api_id)",
          "foreign key(home_player_9) references Player(player_api_id)",
          "foreign key(home_player_10) references Player(player_api_id)",
          "foreign key(home_player_11) references Player(player_api_id)",
          "foreign key(away_player_1) references Player(player_api_id)",
          "foreign key(away_player_2) references Player(player_api_id)",
          "foreign key(away_player_3) references Player(player_api_id)",
          "foreign key(away_player_4) references Player(player_api_id)",
          "foreign key(away_player_5) references Player(player_api_id)",
          "foreign key(away_player_6) references Player(player_api_id)",
          "foreign key(away_player_7) references Player(player_api_id)",
          "foreign key(away_player_8) references Player(player_api_id)",
          "foreign key(away_player_9) references Player(player_api_id)",
          "foreign key(away_player_10) references Player(player_api_id)",
          "foreign key(away_player_11) references Player(player_api_id)",
          "goal",
          "shoton",
          "shotoff",
          "foulcommit",
          "card",
          "cross",
          "corner",
          "possession",
          "B365H",
          "B365D",
          "B365A",
          "BWH",
          "BWD",
          "BWA",
          "IWH",
          "IWD",
          "IWA",
          "LBH",
          "LBD",
          "LBA",
          "PSH",
          "PSD",
          "PSA",
          "WHH",
          "WHD",
          "WHA",
          "SJH",
          "SJD",
          "SJA",
          "VCH",
          "VCD",
          "VCA",
          "GBH",
          "GBD",
          "GBA",
          "BSH",
          "BSD",
          "BSA",
          "name"
        ],
        "ddl": "create table league_match( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real, name text)"
      }
    },
    "old_new_table_mapping": {
      "match": "league_match",
      "league": "league_match"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT name, t1max_count FROM league_match JOIN (SELECT league_id, MAX(cnt) AS max_count FROM (SELECT league_id, COUNT(id) AS cnt FROM league_match GROUP BY league_id) AS subquery) AS t1 ON t1league_id = id"
  },
  {
    "train_idx": 1036,
    "db_id": "european_football_2",
    "question": "List the long name of teams with above-average build-up play passing in 2012.",
    "query": "SELECT DISTINCT t4.team_long_name FROM Team_Attributes AS t3 INNER JOIN Team AS t4 ON t3.team_api_id = t4.team_api_id WHERE SUBSTR(t3.`date`, 1, 4) = '2012' AND t3.buildUpPlayPassing > ( SELECT CAST(SUM(t2.buildUpPlayPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE STRFTIME('%Y',t2.`date`) = '2012')",
    "relevant_table": {
      "team_attributes": {
        "ddl": "create table team_attributes( id integer primary key, foreign key(team_fifa_api_id) references Team(team_fifa_api_id) integer, foreign key(team_api_id) references Team(team_api_id) integer, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text)"
      },
      "team": {
        "ddl": "create table team( id integer primary key, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text)"
      }
    },
    "new_relevant_table": {
      "team_merged": {
        "columns": [
          "id",
          "team_api_id",
          "team_fifa_api_id",
          "team_long_name",
          "team_short_name",
          "date",
          "buildUpPlaySpeed",
          "buildUpPlaySpeedClass",
          "buildUpPlayDribbling",
          "buildUpPlayDribblingClass",
          "buildUpPlayPassing",
          "buildUpPlayPassingClass",
          "buildUpPlayPositioningClass",
          "chanceCreationPassing",
          "chanceCreationPassingClass",
          "chanceCreationCrossing",
          "chanceCreationCrossingClass",
          "chanceCreationShooting",
          "chanceCreationShootingClass",
          "chanceCreationPositioningClass",
          "defencePressure",
          "defencePressureClass",
          "defenceAggression",
          "defenceAggressionClass",
          "defenceTeamWidth",
          "defenceTeamWidthClass",
          "defenceDefenderLineClass"
        ],
        "ddl": "create table team_merged( id integer, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text)"
      }
    },
    "old_new_table_mapping": {
      "team": "team_merged",
      "team_attributes": "team_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT team_long_name FROM team_merged WHERE SUBSTR(date, 1, 4) = '2012' AND buildUpPlayPassing > ( SELECT CAST(SUM(buildUpPlayPassing) AS REAL) / COUNT(id) FROM team_merged WHERE STRFTIME('%Y',date) = '2012')"
  },
  {
    "train_idx": 1037,
    "db_id": "european_football_2",
    "question": "Calculate the percentage of players who prefer left foot, who were born between 1987 and 1992.",
    "query": "SELECT CAST(COUNT(CASE WHEN t2.preferred_foot = 'left' THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) BETWEEN '1987' AND '1992'",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player_attributes": "player_merged",
      "player": "player_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(COUNT(CASE WHEN preferred_foot = 'left' THEN id ELSE NULL END) AS REAL) * 100 / COUNT(id) percent FROM player_merged WHERE SUBSTR(birthday, 1, 4) BETWEEN '1987' AND '1992'"
  },
  {
    "train_idx": 1038,
    "db_id": "european_football_2",
    "question": "List the top 5 leagues in ascending order of the number of goals made in all seasons combined.",
    "query": "SELECT t1.name, SUM(t2.home_team_goal) + SUM(t2.away_team_goal) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id GROUP BY t1.name ORDER BY SUM(t2.home_team_goal) + SUM(t2.away_team_goal) ASC LIMIT 5",
    "relevant_table": {
      "league": {
        "ddl": "create table league( id integer primary key, foreign key(country_id) references Country(id) integer, name text)"
      },
      "match": {
        "ddl": "create table match( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      }
    },
    "new_relevant_table": {
      "league_match": {
        "columns": [
          "id",
          "country_id",
          "league_id",
          "season",
          "stage",
          "date",
          "match_api_id",
          "home_team_api_id",
          "away_team_api_id",
          "home_team_goal",
          "away_team_goal",
          "home_player_X1",
          "home_player_X2",
          "home_player_X3",
          "home_player_X4",
          "home_player_X5",
          "home_player_X6",
          "home_player_X7",
          "home_player_X8",
          "home_player_X9",
          "home_player_X10",
          "home_player_X11",
          "away_player_X1",
          "away_player_X2",
          "away_player_X3",
          "away_player_X4",
          "away_player_X5",
          "away_player_X6",
          "away_player_X7",
          "away_player_X8",
          "away_player_X9",
          "away_player_X10",
          "away_player_X11",
          "home_player_Y1",
          "home_player_Y2",
          "home_player_Y3",
          "home_player_Y4",
          "home_player_Y5",
          "home_player_Y6",
          "home_player_Y7",
          "home_player_Y8",
          "home_player_Y9",
          "home_player_Y10",
          "home_player_Y11",
          "away_player_Y1",
          "away_player_Y2",
          "away_player_Y3",
          "away_player_Y4",
          "away_player_Y5",
          "away_player_Y6",
          "away_player_Y7",
          "away_player_Y8",
          "away_player_Y9",
          "away_player_Y10",
          "away_player_Y11",
          "home_player_1",
          "home_player_2",
          "home_player_3",
          "home_player_4",
          "home_player_5",
          "home_player_6",
          "home_player_7",
          "home_player_8",
          "home_player_9",
          "home_player_10",
          "home_player_11",
          "away_player_1",
          "away_player_2",
          "away_player_3",
          "away_player_4",
          "away_player_5",
          "away_player_6",
          "away_player_7",
          "away_player_8",
          "away_player_9",
          "away_player_10",
          "away_player_11",
          "goal",
          "shoton",
          "shotoff",
          "foulcommit",
          "card",
          "cross",
          "corner",
          "possession",
          "B365H",
          "B365D",
          "B365A",
          "BWH",
          "BWD",
          "BWA",
          "IWH",
          "IWD",
          "IWA",
          "LBH",
          "LBD",
          "LBA",
          "PSH",
          "PSD",
          "PSA",
          "WHH",
          "WHD",
          "WHA",
          "SJH",
          "SJD",
          "SJA",
          "VCH",
          "VCD",
          "VCA",
          "GBH",
          "GBD",
          "GBA",
          "BSH",
          "BSD",
          "BSA",
          "league_name"
        ],
        "ddl": "create table league_match( id integer, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      }
    },
    "old_new_table_mapping": {
      "league": "league_match",
      "match": "league_match"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "'league_name'": {
        "old_table": "'league'",
        "old_column": "'name'"
      }
    },
    "new_gold_sql": "SELECT league_name, SUM(home_team_goal) + SUM(away_team_goal) FROM league_match GROUP BY league_name ORDER BY SUM(home_team_goal) + SUM(away_team_goal) ASC LIMIT 5"
  },
  {
    "train_idx": 1039,
    "db_id": "european_football_2",
    "question": "Find the average number of long-shot done by Ahmed Samir Farag.",
    "query": "SELECT CAST(SUM(t2.long_shots) AS REAL) / COUNT(t2.`date`) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ahmed Samir Farag'",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "foreign key(player_fifa_api_id) references Player(player_fifa_api_id)",
          "foreign key(player_api_id) references Player(player_api_id)",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player_attributes": "player_merged",
      "player": "player_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(long_shots) AS REAL) / COUNT(`date`) FROM player_merged WHERE player_name = 'Ahmed Samir Farag'"
  },
  {
    "train_idx": 1040,
    "db_id": "european_football_2",
    "question": "List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy.",
    "query": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 GROUP BY t1.id ORDER BY CAST(SUM(t2.heading_accuracy) AS REAL) / COUNT(t2.`player_fifa_api_id`) DESC LIMIT 10",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_attributes_merged": {
        "columns": [
          "id",
          "player_fifa_api_id",
          "player_api_id",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes",
          "player_name",
          "birthday",
          "height",
          "weight"
        ],
        "ddl": "create table player_attributes_merged( id integer, player_fifa_api_id integer, player_api_id integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer, player_name text, birthday text, height integer, weight integer)"
      }
    },
    "old_new_table_mapping": {
      "player_attributes": "player_attributes_merged",
      "player": "player_attributes_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT player_name FROM player_attributes_merged WHERE height > 180 GROUP BY id ORDER BY CAST(SUM(heading_accuracy) AS REAL) / COUNT(`player_fifa_api_id`) DESC LIMIT 10"
  },
  {
    "train_idx": 1041,
    "db_id": "european_football_2",
    "question": "For the teams with normal build-up play dribbling class in 2014, List the names of the teams with less than average chance creation passing, in descending order of chance creation passing.",
    "query": "SELECT t3.team_long_name FROM Team AS t3 INNER JOIN Team_Attributes AS t4 ON t3.team_api_id = t4.team_api_id WHERE t4.buildUpPlayDribblingClass = 'Normal' AND t4.chanceCreationPassing < ( SELECT CAST(SUM(t2.chanceCreationPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlayDribblingClass = 'Normal' AND SUBSTR(t2.`date`, 1, 4) = '2014') ORDER BY t4.chanceCreationPassing DESC",
    "relevant_table": {
      "team": {
        "ddl": "create table team( id integer primary key, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text)"
      },
      "team_attributes": {
        "ddl": "create table team_attributes( id integer primary key, foreign key(team_fifa_api_id) references Team(team_fifa_api_id) integer, foreign key(team_api_id) references Team(team_api_id) integer, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text)"
      }
    },
    "new_relevant_table": {
      "team_attributes_merged": {
        "columns": [
          "id",
          "team_fifa_api_id",
          "team_api_id",
          "date",
          "buildUpPlaySpeed",
          "buildUpPlaySpeedClass",
          "buildUpPlayDribbling",
          "buildUpPlayDribblingClass",
          "buildUpPlayPassing",
          "buildUpPlayPassingClass",
          "buildUpPlayPositioningClass",
          "chanceCreationPassing",
          "chanceCreationPassingClass",
          "chanceCreationCrossing",
          "chanceCreationCrossingClass",
          "chanceCreationShooting",
          "chanceCreationShootingClass",
          "chanceCreationPositioningClass",
          "defencePressure",
          "defencePressureClass",
          "defenceAggression",
          "defenceAggressionClass",
          "defenceTeamWidth",
          "defenceTeamWidthClass",
          "defenceDefenderLineClass",
          "team_long_name",
          "team_short_name"
        ],
        "ddl": "create table team_attributes_merged( id integer primary key, team_fifa_api_id integer, team_api_id integer, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text, team_long_name text, team_short_name text)"
      }
    },
    "old_new_table_mapping": {
      "team_attributes": "team_attributes_merged",
      "team": "team_attributes_merged"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT team_long_name FROM team_attributes_merged WHERE buildUpPlayDribblingClass = 'Normal' AND chanceCreationPassing < ( SELECT CAST(SUM(chanceCreationPassing) AS REAL) / COUNT(id) FROM team_attributes_merged WHERE buildUpPlayDribblingClass = 'Normal' AND SUBSTR(`date`, 1, 4) = '2014') ORDER BY chanceCreationPassing DESC"
  },
  {
    "train_idx": 1042,
    "db_id": "european_football_2",
    "question": "List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season.",
    "query": "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2009/2010' GROUP BY t1.name HAVING (CAST(SUM(t2.home_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) - (CAST(SUM(t2.away_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) > 0",
    "relevant_table": {
      "league": {
        "ddl": "create table league( id integer primary key, foreign key(country_id) references Country(id) integer, name text)"
      },
      "match": {
        "ddl": "create table match( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      }
    },
    "new_relevant_table": {
      "league_match": {
        "columns": [
          "id",
          "country_id",
          "league_id",
          "season",
          "stage",
          "date",
          "match_api_id",
          "home_team_api_id",
          "away_team_api_id",
          "home_team_goal",
          "away_team_goal",
          "home_player_X1",
          "home_player_X2",
          "home_player_X3",
          "home_player_X4",
          "home_player_X5",
          "home_player_X6",
          "home_player_X7",
          "home_player_X8",
          "home_player_X9",
          "home_player_X10",
          "home_player_X11",
          "away_player_X1",
          "away_player_X2",
          "away_player_X3",
          "away_player_X4",
          "away_player_X5",
          "away_player_X6",
          "away_player_X7",
          "away_player_X8",
          "away_player_X9",
          "away_player_X10",
          "away_player_X11",
          "home_player_Y1",
          "home_player_Y2",
          "home_player_Y3",
          "home_player_Y4",
          "home_player_Y5",
          "home_player_Y6",
          "home_player_Y7",
          "home_player_Y8",
          "home_player_Y9",
          "home_player_Y10",
          "home_player_Y11",
          "away_player_Y1",
          "away_player_Y2",
          "away_player_Y3",
          "away_player_Y4",
          "away_player_Y5",
          "away_player_Y6",
          "away_player_Y7",
          "away_player_Y8",
          "away_player_Y9",
          "away_player_Y10",
          "away_player_Y11",
          "home_player_1",
          "home_player_2",
          "home_player_3",
          "home_player_4",
          "home_player_5",
          "home_player_6",
          "home_player_7",
          "home_player_8",
          "home_player_9",
          "home_player_10",
          "home_player_11",
          "away_player_1",
          "away_player_2",
          "away_player_3",
          "away_player_4",
          "away_player_5",
          "away_player_6",
          "away_player_7",
          "away_player_8",
          "away_player_9",
          "away_player_10",
          "away_player_11",
          "goal",
          "shoton",
          "shotoff",
          "foulcommit",
          "card",
          "cross",
          "corner",
          "possession",
          "B365H",
          "B365D",
          "B365A",
          "BWH",
          "BWD",
          "BWA",
          "IWH",
          "IWD",
          "IWA",
          "LBH",
          "LBD",
          "LBA",
          "PSH",
          "PSD",
          "PSA",
          "WHH",
          "WHD",
          "WHA",
          "SJH",
          "SJD",
          "SJA",
          "VCH",
          "VCD",
          "VCA",
          "GBH",
          "GBD",
          "GBA",
          "BSH",
          "BSD",
          "BSA",
          "league_name"
        ],
        "ddl": "create table league_match( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      }
    },
    "old_new_table_mapping": {
      "league": "league_match",
      "match": "league_match"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT league_name FROM league_match WHERE season = '2009/2010' GROUP BY league_name HAVING (CAST(SUM(home_team_goal) AS REAL) / COUNT(DISTINCT id)) - (CAST(SUM(away_team_goal) AS REAL) / COUNT(DISTINCT id)) > 0"
  },
  {
    "train_idx": 1045,
    "db_id": "european_football_2",
    "question": "What is the attacking work rate of the football playerr Franco Zennaro?",
    "query": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Franco Zennaro'",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "foreign key(player_fifa_api_id) references Player(player_fifa_api_id)",
          "foreign key(player_api_id) references Player(player_api_id)",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player_attributes": "player_merged",
      "player": "player_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT attacking_work_rate FROM player_merged WHERE player_name = 'Franco Zennaro'"
  },
  {
    "train_idx": 1046,
    "db_id": "european_football_2",
    "question": "What is the ADO Den Haag team freedom of movement in the 1st two thirds of the pitch?",
    "query": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'ADO Den Haag'",
    "relevant_table": {
      "team": {
        "ddl": "create table team( id integer primary key, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text)"
      },
      "team_attributes": {
        "ddl": "create table team_attributes( id integer primary key, foreign key(team_fifa_api_id) references Team(team_fifa_api_id) integer, foreign key(team_api_id) references Team(team_api_id) integer, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text)"
      }
    },
    "new_relevant_table": {
      "team_merged": {
        "columns": [
          "id",
          "team_api_id",
          "team_fifa_api_id",
          "team_long_name",
          "team_short_name",
          "date",
          "buildUpPlaySpeed",
          "buildUpPlaySpeedClass",
          "buildUpPlayDribbling",
          "buildUpPlayDribblingClass",
          "buildUpPlayPassing",
          "buildUpPlayPassingClass",
          "buildUpPlayPositioningClass",
          "chanceCreationPassing",
          "chanceCreationPassingClass",
          "chanceCreationCrossing",
          "chanceCreationCrossingClass",
          "chanceCreationShooting",
          "chanceCreationShootingClass",
          "chanceCreationPositioningClass",
          "defencePressure",
          "defencePressureClass",
          "defenceAggression",
          "defenceAggressionClass",
          "defenceTeamWidth",
          "defenceTeamWidthClass",
          "defenceDefenderLineClass"
        ],
        "ddl": "create table team_merged( id integer primary key, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text)"
      }
    },
    "old_new_table_mapping": {
      "team": "team_merged",
      "team_attributes": "team_merged"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT buildUpPlayPositioningClass FROM team_merged WHERE team_long_name = 'ADO Den Haag'"
  },
  {
    "train_idx": 1047,
    "db_id": "european_football_2",
    "question": "What is the football player Francois Affolter header's finishing rate on 18/09/2014?",
    "query": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Francois Affolter' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player": "player_merged",
      "player_attributes": "player_merged"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT heading_accuracy FROM player_merged WHERE player_name = 'Francois Affolter' AND SUBSTR(`date`, 1, 10) = '2014-09-18'"
  },
  {
    "train_idx": 1048,
    "db_id": "european_football_2",
    "question": "What is the overall rating of the football player Gabriel Tamas in year 2011?",
    "query": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Gabriel Tamas' AND strftime('%Y', t2.date) = '2011'",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player": "player_merged",
      "player_attributes": "player_merged"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT overall_rating FROM player_merged WHERE player_name = 'Gabriel Tamas' AND strftime('%Y', date) = '2011'"
  },
  {
    "train_idx": 1049,
    "db_id": "european_football_2",
    "question": "How many matches in the 2015/2016 season were held in Scotland Premier League\n?",
    "query": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2015/2016' AND t1.name = 'Scotland Premier League'",
    "relevant_table": {
      "league": {
        "ddl": "create table league( id integer primary key, foreign key(country_id) references Country(id) integer, name text)"
      },
      "match": {
        "ddl": "create table match( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      }
    },
    "new_relevant_table": {
      "league_match": {
        "columns": [
          "id",
          "country_id",
          "league_id",
          "season",
          "stage",
          "date",
          "match_api_id",
          "home_team_api_id",
          "away_team_api_id",
          "home_team_goal",
          "away_team_goal",
          "home_player_X1",
          "home_player_X2",
          "home_player_X3",
          "home_player_X4",
          "home_player_X5",
          "home_player_X6",
          "home_player_X7",
          "home_player_X8",
          "home_player_X9",
          "home_player_X10",
          "home_player_X11",
          "away_player_X1",
          "away_player_X2",
          "away_player_X3",
          "away_player_X4",
          "away_player_X5",
          "away_player_X6",
          "away_player_X7",
          "away_player_X8",
          "away_player_X9",
          "away_player_X10",
          "away_player_X11",
          "home_player_Y1",
          "home_player_Y2",
          "home_player_Y3",
          "home_player_Y4",
          "home_player_Y5",
          "home_player_Y6",
          "home_player_Y7",
          "home_player_Y8",
          "home_player_Y9",
          "home_player_Y10",
          "home_player_Y11",
          "away_player_Y1",
          "away_player_Y2",
          "away_player_Y3",
          "away_player_Y4",
          "away_player_Y5",
          "away_player_Y6",
          "away_player_Y7",
          "away_player_Y8",
          "away_player_Y9",
          "away_player_Y10",
          "away_player_Y11",
          "goal",
          "shoton",
          "shotoff",
          "foulcommit",
          "card",
          "cross",
          "corner",
          "possession",
          "B365H",
          "B365D",
          "B365A",
          "BWH",
          "BWD",
          "BWA",
          "IWH",
          "IWD",
          "IWA",
          "LBH",
          "LBD",
          "LBA",
          "PSH",
          "PSD",
          "PSA",
          "WHH",
          "WHD",
          "WHA",
          "SJH",
          "SJD",
          "SJA",
          "VCH",
          "VCD",
          "VCA",
          "GBH",
          "GBD",
          "GBA",
          "BSH",
          "BSD",
          "BSA",
          "name"
        ],
        "ddl": "create table league_match( id integer, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real, name text)"
      }
    },
    "old_new_table_mapping": {
      "league": "league_match",
      "match": "league_match"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(id) FROM league_match WHERE season = '2015/2016' AND name = 'Scotland Premier League'"
  },
  {
    "train_idx": 1050,
    "db_id": "european_football_2",
    "question": "What is the preferred foot when attacking of the youngest football player?",
    "query": "SELECT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t1.birthday DESC LIMIT 1",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_fifa_api_id",
          "player_api_id",
          "player_name",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer, player_fifa_api_id integer, player_api_id integer, player_name text, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player_attributes": "player_merged",
      "player": "player_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT preferred_foot FROM player_merged ORDER BY birthday DESC LIMIT 1"
  },
  {
    "train_idx": 1051,
    "db_id": "european_football_2",
    "question": "List all the football player with the highest potential score.",
    "query": "SELECT DISTINCT(t1.player_name) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.potential = (SELECT MAX(potential) FROM Player_Attributes) ",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player": "player_merged",
      "player_attributes": "player_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT(t1.player_name) FROM player_merged AS t1 WHERE t1.potential = (SELECT MAX(potential) FROM player_merged)"
  },
  {
    "train_idx": 1052,
    "db_id": "european_football_2",
    "question": "Among all the players whose weight is under 130, how many of them preferred foot in attacking is left?",
    "query": "SELECT COUNT(DISTINCT t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.weight < 130 AND t2.preferred_foot = 'left'",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_combined": {
        "columns": [
          "id",
          "player_fifa_api_id",
          "player_api_id",
          "player_name",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_combined( id integer, player_fifa_api_id integer, player_api_id integer, player_name text, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player_attributes": "player_combined",
      "player": "player_combined"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(DISTINCT id) FROM player_combined WHERE weight < 130 AND preferred_foot = 'left'"
  },
  {
    "train_idx": 1053,
    "db_id": "european_football_2",
    "question": "List the football teams that has a chance creation passing class of Risky. Inidcate its short name only.",
    "query": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.chanceCreationPassingClass = 'Risky'",
    "relevant_table": {
      "team": {
        "ddl": "create table team( id integer primary key, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text)"
      },
      "team_attributes": {
        "ddl": "create table team_attributes( id integer primary key, foreign key(team_fifa_api_id) references Team(team_fifa_api_id) integer, foreign key(team_api_id) references Team(team_api_id) integer, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text)"
      }
    },
    "new_relevant_table": {
      "team_merged": {
        "columns": [
          "id",
          "team_api_id",
          "team_fifa_api_id",
          "team_long_name",
          "team_short_name",
          "foreign key(team_fifa_api_id) references Team(team_fifa_api_id)",
          "foreign key(team_api_id) references Team(team_api_id)",
          "date",
          "buildUpPlaySpeed",
          "buildUpPlaySpeedClass",
          "buildUpPlayDribbling",
          "buildUpPlayDribblingClass",
          "buildUpPlayPassing",
          "buildUpPlayPassingClass",
          "buildUpPlayPositioningClass",
          "chanceCreationPassing",
          "chanceCreationPassingClass",
          "chanceCreationCrossing",
          "chanceCreationCrossingClass",
          "chanceCreationShooting",
          "chanceCreationShootingClass",
          "chanceCreationPositioningClass",
          "defencePressure",
          "defencePressureClass",
          "defenceAggression",
          "defenceAggressionClass",
          "defenceTeamWidth",
          "defenceTeamWidthClass",
          "defenceDefenderLineClass"
        ],
        "ddl": "create table team_merged( id integer primary key, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text, foreign key(team_fifa_api_id) references Team(team_fifa_api_id) integer, foreign key(team_api_id) references Team(team_api_id) integer, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text)"
      }
    },
    "old_new_table_mapping": {
      "team_attributes": "team_merged",
      "team": "team_merged"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT team_short_name FROM team_merged WHERE chanceCreationPassingClass = 'Risky'"
  },
  {
    "train_idx": 1054,
    "db_id": "european_football_2",
    "question": "What is the defensive work rate of the football player David Wilson\n?",
    "query": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'David Wilson'",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player": "player_merged",
      "player_attributes": "player_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT defensive_work_rate FROM player_merged WHERE player_name = 'David Wilson'"
  },
  {
    "train_idx": 1055,
    "db_id": "european_football_2",
    "question": "When is the birthday of the football player who has the highest overall rating?",
    "query": "SELECT t1.birthday FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.overall_rating DESC LIMIT 1",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player_attributes": "player_merged",
      "player": "player_merged"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT birthday FROM player_merged ORDER BY overall_rating DESC LIMIT 1"
  },
  {
    "train_idx": 1056,
    "db_id": "european_football_2",
    "question": "What is the name of the football league in the country of Netherlands?",
    "query": "SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Netherlands'",
    "relevant_table": {
      "country": {
        "ddl": "create table country( id integer primary key, name text)"
      },
      "league": {
        "ddl": "create table league( id integer primary key, foreign key(country_id) references Country(id) integer, name text)"
      }
    },
    "new_relevant_table": {
      "CountryLeague": {
        "columns": [
          "id",
          "country_name",
          "league_id",
          "country_id",
          "league_name"
        ],
        "ddl": "create table CountryLeague( id integer)"
      }
    },
    "old_new_table_mapping": {
      "country": "CountryLeague",
      "league": "CountryLeague"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT league_name FROM CountryLeague WHERE country_name = 'Netherlands'"
  },
  {
    "train_idx": 1057,
    "db_id": "european_football_2",
    "question": "Calculate the average home team goal in the 2010/2011 season in the country of Poland.",
    "query": "SELECT CAST(SUM(t2.home_team_goal) AS REAL) / COUNT(t2.id) FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Poland' AND t2.season = '2010/2011'",
    "relevant_table": {
      "country": {
        "ddl": "create table country( id integer primary key, name text)"
      },
      "match": {
        "ddl": "create table match( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      }
    },
    "new_relevant_table": {
      "country_match": {
        "columns": [
          "id",
          "name",
          "country_id",
          "league_id",
          "season",
          "stage",
          "date",
          "match_api_id",
          "foreign key(home_team_api_id) references Team(team_api_id)",
          "foreign key(away_team_api_id) references Team(team_api_id)",
          "home_team_goal",
          "away_team_goal",
          "home_player_X1",
          "home_player_X2",
          "home_player_X3",
          "home_player_X4",
          "home_player_X5",
          "home_player_X6",
          "home_player_X7",
          "home_player_X8",
          "home_player_X9",
          "home_player_X10",
          "home_player_X11",
          "away_player_X1",
          "away_player_X2",
          "away_player_X3",
          "away_player_X4",
          "away_player_X5",
          "away_player_X6",
          "away_player_X7",
          "away_player_X8",
          "away_player_X9",
          "away_player_X10",
          "away_player_X11",
          "home_player_Y1",
          "home_player_Y2",
          "home_player_Y3",
          "home_player_Y4",
          "home_player_Y5",
          "home_player_Y6",
          "home_player_Y7",
          "home_player_Y8",
          "home_player_Y9",
          "home_player_Y10",
          "home_player_Y11",
          "away_player_Y1",
          "away_player_Y2",
          "away_player_Y3",
          "away_player_Y4",
          "away_player_Y5",
          "away_player_Y6",
          "away_player_Y7",
          "away_player_Y8",
          "away_player_Y9",
          "away_player_Y10",
          "away_player_Y11",
          "foreign key(home_player_1) references Player(player_api_id)",
          "foreign key(home_player_2) references Player(player_api_id)",
          "foreign key(home_player_3) references Player(player_api_id)",
          "foreign key(home_player_4) references Player(player_api_id)",
          "foreign key(home_player_5) references Player(player_api_id)",
          "foreign key(home_player_6) references Player(player_api_id)",
          "foreign key(home_player_7) references Player(player_api_id)",
          "foreign key(home_player_8) references Player(player_api_id)",
          "foreign key(home_player_9) references Player(player_api_id)",
          "foreign key(home_player_10) references Player(player_api_id)",
          "foreign key(home_player_11) references Player(player_api_id)",
          "foreign key(away_player_1) references Player(player_api_id)",
          "foreign key(away_player_2) references Player(player_api_id)",
          "foreign key(away_player_3) references Player(player_api_id)",
          "foreign key(away_player_4) references Player(player_api_id)",
          "foreign key(away_player_5) references Player(player_api_id)",
          "foreign key(away_player_6) references Player(player_api_id)",
          "foreign key(away_player_7) references Player(player_api_id)",
          "foreign key(away_player_8) references Player(player_api_id)",
          "foreign key(away_player_9) references Player(player_api_id)",
          "foreign key(away_player_10) references Player(player_api_id)",
          "foreign key(away_player_11) references Player(player_api_id)",
          "goal",
          "shoton",
          "shotoff",
          "foulcommit",
          "card",
          "cross",
          "corner",
          "possession",
          "B365H",
          "B365D",
          "B365A",
          "BWH",
          "BWD",
          "BWA",
          "IWH",
          "IWD",
          "IWA",
          "LBH",
          "LBD",
          "LBA",
          "PSH",
          "PSD",
          "PSA",
          "WHH",
          "WHD",
          "WHA",
          "SJH",
          "SJD",
          "SJA",
          "VCH",
          "VCD",
          "VCA",
          "GBH",
          "GBD",
          "GBA",
          "BSH",
          "BSD",
          "BSA"
        ],
        "ddl": "create table country_match( id integer primary key, name text, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      }
    },
    "old_new_table_mapping": {
      "country": "country_match",
      "match": "country_match"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(home_team_goal) AS REAL) / COUNT(id) FROM country_match WHERE name = 'Poland' AND season = '2010/2011'"
  },
  {
    "train_idx": 1058,
    "db_id": "european_football_2",
    "question": "Who has the highest average finishing rate between the highest and shortest football player?",
    "query": "SELECT A FROM ( SELECT AVG(finishing) result, 'Max' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MAX(height) FROM Player ) UNION SELECT AVG(finishing) result, 'Min' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MIN(height) FROM Player ) ) ORDER BY result DESC LIMIT 1",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player_attributes": "player_merged",
      "player": "player_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT A FROM ( SELECT AVG(finishing) result, 'Max' A FROM player_merged WHERE height = ( SELECT MAX(height) FROM player_merged ) UNION SELECT AVG(finishing) result, 'Min' A FROM player_merged WHERE height = ( SELECT MIN(height) FROM player_merged ) ) ORDER BY result DESC LIMIT 1"
  },
  {
    "train_idx": 1062,
    "db_id": "european_football_2",
    "question": "Which players had an overall rating of over 80 from 2008 to 2010? Please list player names.",
    "query": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating > 80 AND SUBSTR(t2.`date`, 1, 4) BETWEEN '2008' AND '2010'",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player_attributes": "player_merged",
      "player": "player_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT player_name FROM player_merged WHERE overall_rating > 80 AND SUBSTR(`date`, 1, 4) BETWEEN '2008' AND '2010'"
  },
  {
    "train_idx": 1063,
    "db_id": "european_football_2",
    "question": "What is Aaron Doran's potential score?",
    "query": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player": "player_merged",
      "player_attributes": "player_merged"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT potential FROM player_merged WHERE player_name = 'Aaron Doran'"
  },
  {
    "train_idx": 1064,
    "db_id": "european_football_2",
    "question": "List out of players whose preferred foot is left.",
    "query": "SELECT DISTINCT t1.id, t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.preferred_foot = 'left'",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player_attributes": "player_merged",
      "player": "player_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT id, player_name FROM player_merged WHERE preferred_foot = 'left'"
  },
  {
    "train_idx": 1065,
    "db_id": "european_football_2",
    "question": "Please list all team names which the speed class is fast.",
    "query": "SELECT DISTINCT t1.team_long_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeedClass = 'Fast'",
    "relevant_table": {
      "team": {
        "ddl": "create table team( id integer primary key, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text)"
      },
      "team_attributes": {
        "ddl": "create table team_attributes( id integer primary key, foreign key(team_fifa_api_id) references Team(team_fifa_api_id) integer, foreign key(team_api_id) references Team(team_api_id) integer, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text)"
      }
    },
    "new_relevant_table": {
      "team_merged": {
        "columns": [
          "id",
          "team_api_id",
          "team_fifa_api_id",
          "team_long_name",
          "team_short_name",
          "date",
          "buildUpPlaySpeed",
          "buildUpPlaySpeedClass",
          "buildUpPlayDribbling",
          "buildUpPlayDribblingClass",
          "buildUpPlayPassing",
          "buildUpPlayPassingClass",
          "buildUpPlayPositioningClass",
          "chanceCreationPassing",
          "chanceCreationPassingClass",
          "chanceCreationCrossing",
          "chanceCreationCrossingClass",
          "chanceCreationShooting",
          "chanceCreationShootingClass",
          "chanceCreationPositioningClass",
          "defencePressure",
          "defencePressureClass",
          "defenceAggression",
          "defenceAggressionClass",
          "defenceTeamWidth",
          "defenceTeamWidthClass",
          "defenceDefenderLineClass"
        ],
        "ddl": "create table team_merged( id integer primary key, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text)"
      }
    },
    "old_new_table_mapping": {
      "team": "team_merged",
      "team_attributes": "team_merged"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT team_long_name FROM team_merged WHERE buildUpPlaySpeedClass = 'Fast'"
  },
  {
    "train_idx": 1066,
    "db_id": "european_football_2",
    "question": "What is the passing class of CLB team?",
    "query": "SELECT DISTINCT t2.buildUpPlayPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_short_name = 'CLB'",
    "relevant_table": {
      "team": {
        "ddl": "create table team( id integer primary key, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text)"
      },
      "team_attributes": {
        "ddl": "create table team_attributes( id integer primary key, foreign key(team_fifa_api_id) references Team(team_fifa_api_id) integer, foreign key(team_api_id) references Team(team_api_id) integer, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text)"
      }
    },
    "new_relevant_table": {
      "team_merged": {
        "columns": [
          "id",
          "team_api_id",
          "team_fifa_api_id",
          "team_long_name",
          "team_short_name",
          "foreign key(team_fifa_api_id) references Team(team_fifa_api_id)",
          "foreign key(team_api_id) references Team(team_api_id)",
          "date",
          "buildUpPlaySpeed",
          "buildUpPlaySpeedClass",
          "buildUpPlayDribbling",
          "buildUpPlayDribblingClass",
          "buildUpPlayPassing",
          "buildUpPlayPassingClass",
          "buildUpPlayPositioningClass",
          "chanceCreationPassing",
          "chanceCreationPassingClass",
          "chanceCreationCrossing",
          "chanceCreationCrossingClass",
          "chanceCreationShooting",
          "chanceCreationShootingClass",
          "chanceCreationPositioningClass",
          "defencePressure",
          "defencePressureClass",
          "defenceAggression",
          "defenceAggressionClass",
          "defenceTeamWidth",
          "defenceTeamWidthClass",
          "defenceDefenderLineClass"
        ],
        "ddl": "create table team_merged( id integer primary key, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text, foreign key(team_fifa_api_id) references Team(team_fifa_api_id) integer, foreign key(team_api_id) references Team(team_api_id) integer, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text)"
      }
    },
    "old_new_table_mapping": {
      "team": "team_merged",
      "team_attributes": "team_merged"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT buildUpPlayPassingClass FROM team_merged WHERE team_short_name = 'CLB'"
  },
  {
    "train_idx": 1067,
    "db_id": "european_football_2",
    "question": "Which teams have build up play passing more than 70? Please list their short names.",
    "query": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlayPassing > 70",
    "relevant_table": {
      "team": {
        "ddl": "create table team( id integer primary key, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text)"
      },
      "team_attributes": {
        "ddl": "create table team_attributes( id integer primary key, foreign key(team_fifa_api_id) references Team(team_fifa_api_id) integer, foreign key(team_api_id) references Team(team_api_id) integer, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text)"
      }
    },
    "new_relevant_table": {
      "team_merged": {
        "columns": [
          "id",
          "team_api_id",
          "team_fifa_api_id",
          "team_long_name",
          "team_short_name",
          "date",
          "buildUpPlaySpeed",
          "buildUpPlaySpeedClass",
          "buildUpPlayDribbling",
          "buildUpPlayDribblingClass",
          "buildUpPlayPassing",
          "buildUpPlayPassingClass",
          "buildUpPlayPositioningClass",
          "chanceCreationPassing",
          "chanceCreationPassingClass",
          "chanceCreationCrossing",
          "chanceCreationCrossingClass",
          "chanceCreationShooting",
          "chanceCreationShootingClass",
          "chanceCreationPositioningClass",
          "defencePressure",
          "defencePressureClass",
          "defenceAggression",
          "defenceAggressionClass",
          "defenceTeamWidth",
          "defenceTeamWidthClass",
          "defenceDefenderLineClass"
        ],
        "ddl": "create table team_merged( id integer primary key, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text)"
      }
    },
    "old_new_table_mapping": {
      "team": "team_merged",
      "team_attributes": "team_merged"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT team_short_name FROM team_merged WHERE buildUpPlayPassing > 70"
  },
  {
    "train_idx": 1068,
    "db_id": "european_football_2",
    "question": "From 2010 to 2015, what was the average overall rating of players who are higher than 170?",
    "query": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 170 AND STRFTIME('%Y',t2.`date`) >= '2010' AND STRFTIME('%Y',t2.`date`) <= '2015'",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player": "player_merged",
      "player_attributes": "player_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(overall_rating) AS REAL) / COUNT(id) FROM player_merged WHERE height > 170 AND STRFTIME('%Y',`date`) >= '2010' AND STRFTIME('%Y',`date`) <= '2015'"
  },
  {
    "train_idx": 1070,
    "db_id": "european_football_2",
    "question": "Which country is the league Italy Serie A from?",
    "query": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Italy Serie A'",
    "relevant_table": {
      "country": {
        "ddl": "create table country( id integer primary key, name text)"
      },
      "league": {
        "ddl": "create table league( id integer primary key, foreign key(country_id) references Country(id) integer, name text)"
      }
    },
    "new_relevant_table": {
      "CountryLeague": {
        "columns": [
          "id",
          "country_id",
          "name",
          "country_name"
        ],
        "ddl": "create table CountryLeague( id integer, name text)"
      }
    },
    "old_new_table_mapping": {
      "league": "CountryLeague",
      "country": "CountryLeague"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT country_name FROM CountryLeague WHERE name = 'Italy Serie A'"
  },
  {
    "train_idx": 1071,
    "db_id": "european_football_2",
    "question": "List the football team that has a build up play speed of 31, build up plan dribbling of 53, and build up play passing of 32. Only indicate the short name of the team.",
    "query": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeed = 31 AND t2.buildUpPlayDribbling = 53 AND t2.buildUpPlayPassing = 32",
    "relevant_table": {
      "team": {
        "ddl": "create table team( id integer primary key, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text)"
      },
      "team_attributes": {
        "ddl": "create table team_attributes( id integer primary key, foreign key(team_fifa_api_id) references Team(team_fifa_api_id) integer, foreign key(team_api_id) references Team(team_api_id) integer, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text)"
      }
    },
    "new_relevant_table": {
      "team_merged": {
        "columns": [
          "id",
          "team_api_id",
          "team_fifa_api_id",
          "team_long_name",
          "team_short_name",
          "date",
          "buildUpPlaySpeed",
          "buildUpPlaySpeedClass",
          "buildUpPlayDribbling",
          "buildUpPlayDribblingClass",
          "buildUpPlayPassing",
          "buildUpPlayPassingClass",
          "buildUpPlayPositioningClass",
          "chanceCreationPassing",
          "chanceCreationPassingClass",
          "chanceCreationCrossing",
          "chanceCreationCrossingClass",
          "chanceCreationShooting",
          "chanceCreationShootingClass",
          "chanceCreationPositioningClass",
          "defencePressure",
          "defencePressureClass",
          "defenceAggression",
          "defenceAggressionClass",
          "defenceTeamWidth",
          "defenceTeamWidthClass",
          "defenceDefenderLineClass"
        ],
        "ddl": "create table team_merged( id integer primary key, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text)"
      }
    },
    "old_new_table_mapping": {
      "team_attributes": "team_merged",
      "team": "team_merged"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT team_short_name FROM team_merged WHERE buildUpPlaySpeed = 31 AND buildUpPlayDribbling = 53 AND buildUpPlayPassing = 32"
  },
  {
    "train_idx": 1072,
    "db_id": "european_football_2",
    "question": "What is the average overall rating of the football player Aaron Doran?",
    "query": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player": "player_merged",
      "player_attributes": "player_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(overall_rating) AS REAL) / COUNT(id) FROM player_merged WHERE player_name = 'Aaron Doran'"
  },
  {
    "train_idx": 1073,
    "db_id": "european_football_2",
    "question": "How many matches were held in the league Germany 1. Bundesliga\nfrom August to October 2008?",
    "query": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Germany 1. Bundesliga' AND SUBSTR(t2.`date`, 1, 7) BETWEEN '2008-08' AND '2008-10'",
    "relevant_table": {
      "league": {
        "ddl": "create table league( id integer primary key, foreign key(country_id) references Country(id) integer, name text)"
      },
      "match": {
        "ddl": "create table match( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      }
    },
    "new_relevant_table": {
      "league_match": {
        "columns": [
          "id",
          "country_id",
          "league_id",
          "season",
          "stage",
          "date",
          "match_api_id",
          "home_team_api_id",
          "away_team_api_id",
          "home_team_goal",
          "away_team_goal",
          "home_player_X1",
          "home_player_X2",
          "home_player_X3",
          "home_player_X4",
          "home_player_X5",
          "home_player_X6",
          "home_player_X7",
          "home_player_X8",
          "home_player_X9",
          "home_player_X10",
          "home_player_X11",
          "away_player_X1",
          "away_player_X2",
          "away_player_X3",
          "away_player_X4",
          "away_player_X5",
          "away_player_X6",
          "away_player_X7",
          "away_player_X8",
          "away_player_X9",
          "away_player_X10",
          "away_player_X11",
          "home_player_Y1",
          "home_player_Y2",
          "home_player_Y3",
          "home_player_Y4",
          "home_player_Y5",
          "home_player_Y6",
          "home_player_Y7",
          "home_player_Y8",
          "home_player_Y9",
          "home_player_Y10",
          "home_player_Y11",
          "away_player_Y1",
          "away_player_Y2",
          "away_player_Y3",
          "away_player_Y4",
          "away_player_Y5",
          "away_player_Y6",
          "away_player_Y7",
          "away_player_Y8",
          "away_player_Y9",
          "away_player_Y10",
          "away_player_Y11",
          "home_player_1",
          "home_player_2",
          "home_player_3",
          "home_player_4",
          "home_player_5",
          "home_player_6",
          "home_player_7",
          "home_player_8",
          "home_player_9",
          "home_player_10",
          "home_player_11",
          "away_player_1",
          "away_player_2",
          "away_player_3",
          "away_player_4",
          "away_player_5",
          "away_player_6",
          "away_player_7",
          "away_player_8",
          "away_player_9",
          "away_player_10",
          "away_player_11",
          "goal",
          "shoton",
          "shotoff",
          "foulcommit",
          "card",
          "cross",
          "corner",
          "possession",
          "B365H",
          "B365D",
          "B365A",
          "BWH",
          "BWD",
          "BWA",
          "IWH",
          "IWD",
          "IWA",
          "LBH",
          "LBD",
          "LBA",
          "PSH",
          "PSD",
          "PSA",
          "WHH",
          "WHD",
          "WHA",
          "SJH",
          "SJD",
          "SJA",
          "VCH",
          "VCD",
          "VCA",
          "GBH",
          "GBD",
          "GBA",
          "BSH",
          "BSD",
          "BSA",
          "league_name"
        ],
        "ddl": "create table league_match( id integer, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      }
    },
    "old_new_table_mapping": {
      "league": "league_match",
      "match": "league_match"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(id) FROM league_match WHERE league_name = 'Germany 1. Bundesliga' AND SUBSTR(`date`, 1, 7) BETWEEN '2008-08' AND '2008-10'"
  },
  {
    "train_idx": 1074,
    "db_id": "european_football_2",
    "question": "List all the short name of the football team that had a home team goal of 10?",
    "query": "SELECT t1.team_short_name FROM Team AS t1 INNER JOIN Match AS t2 ON t1.team_api_id = t2.home_team_api_id WHERE t2.home_team_goal = 10",
    "relevant_table": {
      "team": {
        "ddl": "create table team( id integer primary key, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text)"
      },
      "match": {
        "ddl": "create table match( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      }
    },
    "new_relevant_table": {
      "TeamMatch": {
        "columns": [
          "id",
          "team_api_id",
          "team_fifa_api_id",
          "team_long_name",
          "team_short_name",
          "country_id",
          "league_id",
          "season",
          "stage",
          "date",
          "match_api_id",
          "home_team_api_id",
          "away_team_api_id",
          "home_team_goal",
          "away_team_goal",
          "home_player_X1",
          "home_player_X2",
          "home_player_X3",
          "home_player_X4",
          "home_player_X5",
          "home_player_X6",
          "home_player_X7",
          "home_player_X8",
          "home_player_X9",
          "home_player_X10",
          "home_player_X11",
          "away_player_X1",
          "away_player_X2",
          "away_player_X3",
          "away_player_X4",
          "away_player_X5",
          "away_player_X6",
          "away_player_X7",
          "away_player_X8",
          "away_player_X9",
          "away_player_X10",
          "away_player_X11",
          "home_player_Y1",
          "home_player_Y2",
          "home_player_Y3",
          "home_player_Y4",
          "home_player_Y5",
          "home_player_Y6",
          "home_player_Y7",
          "home_player_Y8",
          "home_player_Y9",
          "home_player_Y10",
          "home_player_Y11",
          "away_player_Y1",
          "away_player_Y2",
          "away_player_Y3",
          "away_player_Y4",
          "away_player_Y5",
          "away_player_Y6",
          "away_player_Y7",
          "away_player_Y8",
          "away_player_Y9",
          "away_player_Y10",
          "away_player_Y11",
          "goal",
          "shoton",
          "shotoff",
          "foulcommit",
          "card",
          "cross",
          "corner",
          "possession",
          "B365H",
          "B365D",
          "B365A",
          "BWH",
          "BWD",
          "BWA",
          "IWH",
          "IWD",
          "IWA",
          "LBH",
          "LBD",
          "LBA",
          "PSH",
          "PSD",
          "PSA",
          "WHH",
          "WHD",
          "WHA",
          "SJH",
          "SJD",
          "SJA",
          "VCH",
          "VCD",
          "VCA",
          "GBH",
          "GBD",
          "GBA",
          "BSH",
          "BSD",
          "BSA"
        ],
        "ddl": "create table TeamMatch( id integer primary key, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      }
    },
    "old_new_table_mapping": {
      "match": "TeamMatch",
      "team": "TeamMatch"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT team_short_name FROM TeamMatch WHERE home_team_goal = 10"
  },
  {
    "train_idx": 1075,
    "db_id": "european_football_2",
    "question": "List all the football player with the highest balance score and potential score of 61.",
    "query": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.potential = '61' ORDER BY t2.balance DESC LIMIT 1",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_fifa_api_id",
          "player_api_id",
          "player_name",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer, player_fifa_api_id integer, player_api_id integer, player_name text, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player_attributes": "player_merged",
      "player": "player_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT player_name FROM player_merged WHERE potential = '61' ORDER BY balance DESC LIMIT 1"
  },
  {
    "train_idx": 1076,
    "db_id": "european_football_2",
    "question": "What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye\n?",
    "query": "SELECT CAST(SUM(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.id ELSE NULL END) - CAST(SUM(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.id ELSE NULL END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player_attributes": "player_merged",
      "player": "player_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(CASE WHEN player_name = 'Abdou Diallo' THEN ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN player_name = 'Abdou Diallo' THEN id ELSE NULL END) - CAST(SUM(CASE WHEN player_name = 'Aaron Appindangoye' THEN ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN player_name = 'Aaron Appindangoye' THEN id ELSE NULL END) FROM player_merged"
  },
  {
    "train_idx": 1081,
    "db_id": "european_football_2",
    "question": "Which country is the Belgium Jupiler League from?",
    "query": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Belgium Jupiler League'",
    "relevant_table": {
      "country": {
        "ddl": "create table country( id integer primary key, name text)"
      },
      "league": {
        "ddl": "create table league( id integer primary key, foreign key(country_id) references Country(id) integer, name text)"
      }
    },
    "new_relevant_table": {
      "CountryLeague": {
        "columns": [
          "id",
          "country_name",
          "league_id",
          "country_id",
          "league_name"
        ],
        "ddl": "create table CountryLeague( id integer)"
      }
    },
    "old_new_table_mapping": {
      "country": "CountryLeague",
      "league": "CountryLeague"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "'country_name'": {
        "old_table": "'Country'",
        "old_column": "'name'"
      },
      "'league_name'": {
        "old_table": "'League'",
        "old_column": "'name'"
      }
    },
    "new_gold_sql": "SELECT country_name FROM CountryLeague WHERE league_name = 'Belgium Jupiler League'"
  },
  {
    "train_idx": 1082,
    "db_id": "european_football_2",
    "question": "Please list the leagues from Germany.",
    "query": "SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Germany'",
    "relevant_table": {
      "country": {
        "ddl": "create table country( id integer primary key, name text)"
      },
      "league": {
        "ddl": "create table league( id integer primary key, foreign key(country_id) references Country(id) integer, name text)"
      }
    },
    "new_relevant_table": {
      "CountryLeague": {
        "columns": [
          "id",
          "country_id",
          "name",
          "country_name"
        ],
        "ddl": "create table CountryLeague( id integer, name text)"
      }
    },
    "old_new_table_mapping": {
      "league": "CountryLeague",
      "country": "CountryLeague"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT name FROM CountryLeague WHERE country_name = 'Germany'"
  },
  {
    "train_idx": 1083,
    "db_id": "european_football_2",
    "question": "Which player has the strongest overall strength?",
    "query": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.overall_rating DESC LIMIT 1",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_combined": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_combined( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player": "player_combined",
      "player_attributes": "player_combined"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT player_name FROM player_combined ORDER BY overall_rating DESC LIMIT 1"
  },
  {
    "train_idx": 1084,
    "db_id": "european_football_2",
    "question": "Among the players born before the year 1986, how many of them would remain in his position and defense while the team attacked?",
    "query": "SELECT COUNT(DISTINCT t1.player_name) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE STRFTIME('%Y',t1.birthday) < '1986' AND t2.defensive_work_rate = 'high'",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player": "player_merged",
      "player_attributes": "player_merged"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(DISTINCT player_name) FROM player_merged WHERE STRFTIME('%Y',birthday) < '1986' AND defensive_work_rate = 'high'"
  },
  {
    "train_idx": 1085,
    "db_id": "european_football_2",
    "question": "Which of these players performs the best in crossing actions, Alexis, Ariel Borysiuk or Arouna Kone?",
    "query": "SELECT t1.player_name, t2.crossing FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY t2.crossing DESC LIMIT 1",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player": "player_merged",
      "player_attributes": "player_merged"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT player_name, crossing FROM player_merged WHERE player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY crossing DESC LIMIT 1"
  },
  {
    "train_idx": 1086,
    "db_id": "european_football_2",
    "question": "What's the heading accuracy of Ariel Borysiuk?",
    "query": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ariel Borysiuk'",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player": "player_merged",
      "player_attributes": "player_merged"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT heading_accuracy FROM player_merged WHERE player_name = 'Ariel Borysiuk'"
  },
  {
    "train_idx": 1087,
    "db_id": "european_football_2",
    "question": "Among the players whose height is over 180, how many of them have a volley score of over 70?",
    "query": "SELECT COUNT(DISTINCT t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 AND t2.volleys > 70",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_fifa_api_id",
          "player_api_id",
          "player_name",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer, player_fifa_api_id integer, player_api_id integer, player_name text, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player_attributes": "player_merged",
      "player": "player_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(DISTINCT id) FROM player_merged WHERE height > 180 AND volleys > 70"
  },
  {
    "train_idx": 1088,
    "db_id": "european_football_2",
    "question": "Please list the names of the players whose volley score and dribbling score are over 70.",
    "query": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.volleys > 70 AND t2.dribbling > 70",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player_attributes": "player_merged",
      "player": "player_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT player_name FROM player_merged WHERE volleys > 70 AND dribbling > 70"
  },
  {
    "train_idx": 1089,
    "db_id": "european_football_2",
    "question": "How many matches in the 2008/2009 season were held in Belgium?",
    "query": "SELECT COUNT(t2.id) FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Belgium' AND t2.season = '2008/2009'",
    "relevant_table": {
      "country": {
        "ddl": "create table country( id integer primary key, name text)"
      },
      "match": {
        "ddl": "create table match( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      }
    },
    "new_relevant_table": {
      "CountryMatch": {
        "columns": [
          "id",
          "country_id",
          "league_id",
          "season",
          "stage",
          "date",
          "match_api_id",
          "home_team_api_id",
          "away_team_api_id",
          "home_team_goal",
          "away_team_goal",
          "home_player_X1",
          "home_player_X2",
          "home_player_X3",
          "home_player_X4",
          "home_player_X5",
          "home_player_X6",
          "home_player_X7",
          "home_player_X8",
          "home_player_X9",
          "home_player_X10",
          "home_player_X11",
          "away_player_X1",
          "away_player_X2",
          "away_player_X3",
          "away_player_X4",
          "away_player_X5",
          "away_player_X6",
          "away_player_X7",
          "away_player_X8",
          "away_player_X9",
          "away_player_X10",
          "away_player_X11",
          "home_player_Y1",
          "home_player_Y2",
          "home_player_Y3",
          "home_player_Y4",
          "home_player_Y5",
          "home_player_Y6",
          "home_player_Y7",
          "home_player_Y8",
          "home_player_Y9",
          "home_player_Y10",
          "home_player_Y11",
          "away_player_Y1",
          "away_player_Y2",
          "away_player_Y3",
          "away_player_Y4",
          "away_player_Y5",
          "away_player_Y6",
          "away_player_Y7",
          "away_player_Y8",
          "away_player_Y9",
          "away_player_Y10",
          "away_player_Y11",
          "home_player_1",
          "home_player_2",
          "home_player_3",
          "home_player_4",
          "home_player_5",
          "home_player_6",
          "home_player_7",
          "home_player_8",
          "home_player_9",
          "home_player_10",
          "home_player_11",
          "away_player_1",
          "away_player_2",
          "away_player_3",
          "away_player_4",
          "away_player_5",
          "away_player_6",
          "away_player_7",
          "away_player_8",
          "away_player_9",
          "away_player_10",
          "away_player_11",
          "goal",
          "shoton",
          "shotoff",
          "foulcommit",
          "card",
          "cross",
          "corner",
          "possession",
          "B365H",
          "B365D",
          "B365A",
          "BWH",
          "BWD",
          "BWA",
          "IWH",
          "IWD",
          "IWA",
          "LBH",
          "LBD",
          "LBA",
          "PSH",
          "PSD",
          "PSA",
          "WHH",
          "WHD",
          "WHA",
          "SJH",
          "SJD",
          "SJA",
          "VCH",
          "VCD",
          "VCA",
          "GBH",
          "GBD",
          "GBA",
          "BSH",
          "BSD",
          "BSA",
          "name"
        ],
        "ddl": "create table CountryMatch( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real, name text)"
      }
    },
    "old_new_table_mapping": {
      "match": "CountryMatch",
      "country": "CountryMatch"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(id) FROM CountryMatch WHERE name = 'Belgium' AND season = '2008/2009'"
  },
  {
    "train_idx": 1090,
    "db_id": "european_football_2",
    "question": "What is the long passing score of the oldest player?",
    "query": "SELECT t2.long_passing FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t1.birthday ASC LIMIT 1",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player": "player_merged",
      "player_attributes": "player_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT long_passing FROM player_merged ORDER BY birthday ASC LIMIT 1"
  },
  {
    "train_idx": 1091,
    "db_id": "european_football_2",
    "question": "How many matches were held in the Belgium Jupiler League in April, 2009?",
    "query": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Belgium Jupiler League' AND SUBSTR(t2.`date`, 1, 7) = '2009-04'",
    "relevant_table": {
      "league": {
        "ddl": "create table league( id integer primary key, foreign key(country_id) references Country(id) integer, name text)"
      },
      "match": {
        "ddl": "create table match( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      }
    },
    "new_relevant_table": {
      "league_match": {
        "columns": [
          "id",
          "country_id",
          "league_id",
          "season",
          "stage",
          "date",
          "match_api_id",
          "home_team_api_id",
          "away_team_api_id",
          "home_team_goal",
          "away_team_goal",
          "home_player_X1",
          "home_player_X2",
          "home_player_X3",
          "home_player_X4",
          "home_player_X5",
          "home_player_X6",
          "home_player_X7",
          "home_player_X8",
          "home_player_X9",
          "home_player_X10",
          "home_player_X11",
          "away_player_X1",
          "away_player_X2",
          "away_player_X3",
          "away_player_X4",
          "away_player_X5",
          "away_player_X6",
          "away_player_X7",
          "away_player_X8",
          "away_player_X9",
          "away_player_X10",
          "away_player_X11",
          "home_player_Y1",
          "home_player_Y2",
          "home_player_Y3",
          "home_player_Y4",
          "home_player_Y5",
          "home_player_Y6",
          "home_player_Y7",
          "home_player_Y8",
          "home_player_Y9",
          "home_player_Y10",
          "home_player_Y11",
          "away_player_Y1",
          "away_player_Y2",
          "away_player_Y3",
          "away_player_Y4",
          "away_player_Y5",
          "away_player_Y6",
          "away_player_Y7",
          "away_player_Y8",
          "away_player_Y9",
          "away_player_Y10",
          "away_player_Y11",
          "home_player_1",
          "home_player_2",
          "home_player_3",
          "home_player_4",
          "home_player_5",
          "home_player_6",
          "home_player_7",
          "home_player_8",
          "home_player_9",
          "home_player_10",
          "home_player_11",
          "away_player_1",
          "away_player_2",
          "away_player_3",
          "away_player_4",
          "away_player_5",
          "away_player_6",
          "away_player_7",
          "away_player_8",
          "away_player_9",
          "away_player_10",
          "away_player_11",
          "goal",
          "shoton",
          "shotoff",
          "foulcommit",
          "card",
          "cross",
          "corner",
          "possession",
          "B365H",
          "B365D",
          "B365A",
          "BWH",
          "BWD",
          "BWA",
          "IWH",
          "IWD",
          "IWA",
          "LBH",
          "LBD",
          "LBA",
          "PSH",
          "PSD",
          "PSA",
          "WHH",
          "WHD",
          "WHA",
          "SJH",
          "SJD",
          "SJA",
          "VCH",
          "VCD",
          "VCA",
          "GBH",
          "GBD",
          "GBA",
          "BSH",
          "BSD",
          "BSA",
          "league_name"
        ],
        "ddl": "create table league_match( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      }
    },
    "old_new_table_mapping": {
      "match": "league_match",
      "league": "league_match"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(id) FROM league_match WHERE league_name = 'Belgium Jupiler League' AND SUBSTR(`date`, 1, 7) = '2009-04'"
  },
  {
    "train_idx": 1092,
    "db_id": "european_football_2",
    "question": "Give the name of the league had the most matches in the 2008/2009 season?",
    "query": "SELECT t1.name FROM League AS t1 JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2008/2009' GROUP BY t1.name HAVING COUNT(t2.id) = (SELECT MAX(match_count) FROM (SELECT COUNT(t2.id) AS match_count FROM Match AS t2 WHERE t2.season = '2008/2009' GROUP BY t2.league_id))",
    "relevant_table": {
      "league": {
        "ddl": "create table league( id integer primary key, foreign key(country_id) references Country(id) integer, name text)"
      },
      "match": {
        "ddl": "create table match( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      }
    },
    "new_relevant_table": {
      "league_match": {
        "columns": [
          "id",
          "country_id",
          "league_id",
          "season",
          "stage",
          "date",
          "match_api_id",
          "home_team_api_id",
          "away_team_api_id",
          "home_team_goal",
          "away_team_goal",
          "home_player_X1",
          "home_player_X2",
          "home_player_X3",
          "home_player_X4",
          "home_player_X5",
          "home_player_X6",
          "home_player_X7",
          "home_player_X8",
          "home_player_X9",
          "home_player_X10",
          "home_player_X11",
          "away_player_X1",
          "away_player_X2",
          "away_player_X3",
          "away_player_X4",
          "away_player_X5",
          "away_player_X6",
          "away_player_X7",
          "away_player_X8",
          "away_player_X9",
          "away_player_X10",
          "away_player_X11",
          "home_player_Y1",
          "home_player_Y2",
          "home_player_Y3",
          "home_player_Y4",
          "home_player_Y5",
          "home_player_Y6",
          "home_player_Y7",
          "home_player_Y8",
          "home_player_Y9",
          "home_player_Y10",
          "home_player_Y11",
          "away_player_Y1",
          "away_player_Y2",
          "away_player_Y3",
          "away_player_Y4",
          "away_player_Y5",
          "away_player_Y6",
          "away_player_Y7",
          "away_player_Y8",
          "away_player_Y9",
          "away_player_Y10",
          "away_player_Y11",
          "home_player_1",
          "home_player_2",
          "home_player_3",
          "home_player_4",
          "home_player_5",
          "home_player_6",
          "home_player_7",
          "home_player_8",
          "home_player_9",
          "home_player_10",
          "home_player_11",
          "away_player_1",
          "away_player_2",
          "away_player_3",
          "away_player_4",
          "away_player_5",
          "away_player_6",
          "away_player_7",
          "away_player_8",
          "away_player_9",
          "away_player_10",
          "away_player_11",
          "goal",
          "shoton",
          "shotoff",
          "foulcommit",
          "card",
          "cross",
          "corner",
          "possession",
          "B365H",
          "B365D",
          "B365A",
          "BWH",
          "BWD",
          "BWA",
          "IWH",
          "IWD",
          "IWA",
          "LBH",
          "LBD",
          "LBA",
          "PSH",
          "PSD",
          "PSA",
          "WHH",
          "WHD",
          "WHA",
          "SJH",
          "SJD",
          "SJA",
          "VCH",
          "VCD",
          "VCA",
          "GBH",
          "GBD",
          "GBA",
          "BSH",
          "BSD",
          "BSA",
          "league_name"
        ],
        "ddl": "create table league_match( id integer, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      }
    },
    "old_new_table_mapping": {
      "league": "league_match",
      "match": "league_match"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "'league_name'": {
        "old_table": "'league'",
        "old_column": "'name'"
      }
    },
    "new_gold_sql": "SELECT t1.league_name FROM league_match AS t1 WHERE t1.season = '2008/2009' GROUP BY t1.league_name HAVING COUNT(t1.id) = (SELECT MAX(match_count) FROM (SELECT COUNT(t1.id) AS match_count FROM league_match AS t1 WHERE t1.season = '2008/2009' GROUP BY t1.league_id))"
  },
  {
    "train_idx": 1093,
    "db_id": "european_football_2",
    "question": "What is the average overall rating of the players born before the year 1986?",
    "query": "SELECT SUM(t2.overall_rating) / COUNT(t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) < '1986'",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_fifa_api_id",
          "player_api_id",
          "player_name",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer, player_fifa_api_id integer, player_api_id integer, player_name text, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player_attributes": "player_merged",
      "player": "player_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT SUM(overall_rating) / COUNT(id) FROM player_merged WHERE SUBSTR(birthday, 1, 4) < '1986'"
  },
  {
    "train_idx": 1094,
    "db_id": "european_football_2",
    "question": "How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel?",
    "query": "SELECT (SUM(CASE WHEN t1.player_name = 'Ariel Borysiuk' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_attributes_merged": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_attributes_merged( id integer, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player": "player_attributes_merged",
      "player_attributes": "player_attributes_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT (SUM(CASE WHEN player_name = 'Ariel Borysiuk' THEN overall_rating ELSE 0 END) * 10 - SUM(CASE WHEN player_name = 'Paulin Puel' THEN overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN player_name = 'Paulin Puel' THEN overall_rating ELSE 0 END) FROM player_attributes_merged WHERE player_api_id = player_api_id"
  },
  {
    "train_idx": 1095,
    "db_id": "european_football_2",
    "question": "How much is the average build up play speed of the Heart of Midlothian team?",
    "query": "SELECT CAST(SUM(t2.buildUpPlaySpeed) AS REAL) / COUNT(t2.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Heart of Midlothian'",
    "relevant_table": {
      "team": {
        "ddl": "create table team( id integer primary key, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text)"
      },
      "team_attributes": {
        "ddl": "create table team_attributes( id integer primary key, foreign key(team_fifa_api_id) references Team(team_fifa_api_id) integer, foreign key(team_api_id) references Team(team_api_id) integer, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text)"
      }
    },
    "new_relevant_table": {
      "team_merged": {
        "columns": [
          "id",
          "team_api_id",
          "team_fifa_api_id",
          "team_long_name",
          "team_short_name",
          "foreign key(team_fifa_api_id) references Team(team_fifa_api_id)",
          "foreign key(team_api_id) references Team(team_api_id)",
          "date",
          "buildUpPlaySpeed",
          "buildUpPlaySpeedClass",
          "buildUpPlayDribbling",
          "buildUpPlayDribblingClass",
          "buildUpPlayPassing",
          "buildUpPlayPassingClass",
          "buildUpPlayPositioningClass",
          "chanceCreationPassing",
          "chanceCreationPassingClass",
          "chanceCreationCrossing",
          "chanceCreationCrossingClass",
          "chanceCreationShooting",
          "chanceCreationShootingClass",
          "chanceCreationPositioningClass",
          "defencePressure",
          "defencePressureClass",
          "defenceAggression",
          "defenceAggressionClass",
          "defenceTeamWidth",
          "defenceTeamWidthClass",
          "defenceDefenderLineClass"
        ],
        "ddl": "create table team_merged( id integer primary key, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text, foreign key(team_fifa_api_id) references Team(team_fifa_api_id) integer, foreign key(team_api_id) references Team(team_api_id) integer, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text)"
      }
    },
    "old_new_table_mapping": {
      "team_attributes": "team_merged",
      "team": "team_merged"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(buildUpPlaySpeed) AS REAL) / COUNT(id) FROM team_merged WHERE team_long_name = 'Heart of Midlothian'"
  },
  {
    "train_idx": 1096,
    "db_id": "european_football_2",
    "question": "Calculate the average overall rating of Pietro Marino.",
    "query": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Pietro Marino'",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_fifa_api_id",
          "player_api_id",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes",
          "player_name",
          "birthday",
          "height",
          "weight"
        ],
        "ddl": "create table player_merged( id integer, player_fifa_api_id integer, player_api_id integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer, player_name text, birthday text, height integer, weight integer)"
      }
    },
    "old_new_table_mapping": {
      "player_attributes": "player_merged",
      "player": "player_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(overall_rating) AS REAL) / COUNT(id) FROM player_merged WHERE player_name = 'Pietro Marino'"
  },
  {
    "train_idx": 1097,
    "db_id": "european_football_2",
    "question": "What is Aaron Lennox's total crossing score?",
    "query": "SELECT SUM(t2.crossing) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Lennox'",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player": "player_merged",
      "player_attributes": "player_merged"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT SUM(crossing) FROM player_merged WHERE player_name = 'Aaron Lennox'"
  },
  {
    "train_idx": 1098,
    "db_id": "european_football_2",
    "question": "What is Ajax's highest chance creation passing score and what is it classified as?",
    "query": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Ajax' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
    "relevant_table": {
      "team": {
        "ddl": "create table team( id integer primary key, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text)"
      },
      "team_attributes": {
        "ddl": "create table team_attributes( id integer primary key, foreign key(team_fifa_api_id) references Team(team_fifa_api_id) integer, foreign key(team_api_id) references Team(team_api_id) integer, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text)"
      }
    },
    "new_relevant_table": {
      "team_merged": {
        "columns": [
          "id",
          "team_api_id",
          "team_fifa_api_id",
          "team_long_name",
          "team_short_name",
          "foreign key(team_fifa_api_id) references Team(team_fifa_api_id)",
          "foreign key(team_api_id) references Team(team_api_id)",
          "date",
          "buildUpPlaySpeed",
          "buildUpPlaySpeedClass",
          "buildUpPlayDribbling",
          "buildUpPlayDribblingClass",
          "buildUpPlayPassing",
          "buildUpPlayPassingClass",
          "buildUpPlayPositioningClass",
          "chanceCreationPassing",
          "chanceCreationPassingClass",
          "chanceCreationCrossing",
          "chanceCreationCrossingClass",
          "chanceCreationShooting",
          "chanceCreationShootingClass",
          "chanceCreationPositioningClass",
          "defencePressure",
          "defencePressureClass",
          "defenceAggression",
          "defenceAggressionClass",
          "defenceTeamWidth",
          "defenceTeamWidthClass",
          "defenceDefenderLineClass"
        ],
        "ddl": "create table team_merged( id integer primary key, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text, foreign key(team_fifa_api_id) references Team(team_fifa_api_id) integer, foreign key(team_api_id) references Team(team_api_id) integer, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text)"
      }
    },
    "old_new_table_mapping": {
      "team_attributes": "team_merged",
      "team": "team_merged"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT team_merged.chanceCreationPassing, team_merged.chanceCreationPassingClass FROM team_merged WHERE team_merged.team_long_name = 'Ajax' ORDER BY team_merged.chanceCreationPassing DESC LIMIT 1"
  },
  {
    "train_idx": 1099,
    "db_id": "european_football_2",
    "question": "Which foot is preferred by Abdou Diallo?",
    "query": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdou Diallo'",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "foreign key(player_fifa_api_id) references Player(player_fifa_api_id)",
          "foreign key(player_api_id) references Player(player_api_id)",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player_attributes": "player_merged",
      "player": "player_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT preferred_foot FROM player_merged WHERE player_name = 'Abdou Diallo'"
  },
  {
    "train_idx": 1100,
    "db_id": "european_football_2",
    "question": "What is the highest overall rating received by Dorlan Pabon?",
    "query": "SELECT MAX(t2.overall_rating) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Dorlan Pabon'",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player": "player_merged",
      "player_attributes": "player_merged"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT MAX(overall_rating) FROM player_merged WHERE player_name = 'Dorlan Pabon'"
  },
  {
    "train_idx": 1101,
    "db_id": "european_football_2",
    "question": "What is the average number of goals made by Parma as the away team while playing in Italy?",
    "query": "SELECT CAST(SUM(T1.away_team_goal) AS REAL) / COUNT(T1.id) FROM \"Match\" AS T1 INNER JOIN TEAM AS T2 ON T1.away_team_api_id = T2.team_api_id INNER JOIN Country AS T3 ON T1.country_id = T3.id WHERE T2.team_long_name = 'Parma' AND T3.name = 'Italy'",
    "relevant_table": {
      "match": {
        "ddl": "create table match( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      },
      "team": {
        "ddl": "create table team( id integer primary key, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text)"
      },
      "country": {
        "ddl": "create table country( id integer primary key, name text)"
      }
    },
    "new_relevant_table": {
      "MatchCountry": {
        "columns": [
          "id",
          "country_id",
          "league_id",
          "season",
          "stage",
          "date",
          "match_api_id",
          "home_team_api_id",
          "away_team_api_id",
          "home_team_goal",
          "away_team_goal",
          "home_player_X1",
          "home_player_X2",
          "home_player_X3",
          "home_player_X4",
          "home_player_X5",
          "home_player_X6",
          "home_player_X7",
          "home_player_X8",
          "home_player_X9",
          "home_player_X10",
          "home_player_X11",
          "away_player_X1",
          "away_player_X2",
          "away_player_X3",
          "away_player_X4",
          "away_player_X5",
          "away_player_X6",
          "away_player_X7",
          "away_player_X8",
          "away_player_X9",
          "away_player_X10",
          "away_player_X11",
          "home_player_Y1",
          "home_player_Y2",
          "home_player_Y3",
          "home_player_Y4",
          "home_player_Y5",
          "home_player_Y6",
          "home_player_Y7",
          "home_player_Y8",
          "home_player_Y9",
          "home_player_Y10",
          "home_player_Y11",
          "away_player_Y1",
          "away_player_Y2",
          "away_player_Y3",
          "away_player_Y4",
          "away_player_Y5",
          "away_player_Y6",
          "away_player_Y7",
          "away_player_Y8",
          "away_player_Y9",
          "away_player_Y10",
          "away_player_Y11",
          "home_player_1",
          "home_player_2",
          "home_player_3",
          "home_player_4",
          "home_player_5",
          "home_player_6",
          "home_player_7",
          "home_player_8",
          "home_player_9",
          "home_player_10",
          "home_player_11",
          "away_player_1",
          "away_player_2",
          "away_player_3",
          "away_player_4",
          "away_player_5",
          "away_player_6",
          "away_player_7",
          "away_player_8",
          "away_player_9",
          "away_player_10",
          "away_player_11",
          "goal",
          "shoton",
          "shotoff",
          "foulcommit",
          "card",
          "cross",
          "corner",
          "possession",
          "B365H",
          "B365D",
          "B365A",
          "BWH",
          "BWD",
          "BWA",
          "IWH",
          "IWD",
          "IWA",
          "LBH",
          "LBD",
          "LBA",
          "PSH",
          "PSD",
          "PSA",
          "WHH",
          "WHD",
          "WHA",
          "SJH",
          "SJD",
          "SJA",
          "VCH",
          "VCD",
          "VCA",
          "GBH",
          "GBD",
          "GBA",
          "BSH",
          "BSD",
          "BSA",
          "name"
        ],
        "ddl": "create table MatchCountry( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real, name text)"
      },
      "team": {
        "ddl": "create table team( id integer primary key, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text)"
      }
    },
    "old_new_table_mapping": {
      "match": "MatchCountry",
      "country": "MatchCountry"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(T1.away_team_goal) AS REAL) / COUNT(T1.id) FROM \"MatchCountry\" AS T1 WHERE team_long_name = 'Parma' AND T1.name = 'Italy'"
  },
  {
    "train_idx": 1102,
    "db_id": "european_football_2",
    "question": "For the players who had a 77 points overall rating on 2016/6/23, who was the oldest? Give the name of the player.",
    "query": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2016-06-23' AND t2.overall_rating = 77 ORDER BY t1.birthday ASC LIMIT 1",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_fifa_api_id",
          "player_api_id",
          "player_name",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer, player_fifa_api_id integer, player_api_id integer, player_name text, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player_attributes": "player_merged",
      "player": "player_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT player_name FROM player_merged WHERE SUBSTR(`date`, 1, 10) = '2016-06-23' AND overall_rating = 77 ORDER BY birthday ASC LIMIT 1"
  },
  {
    "train_idx": 1103,
    "db_id": "european_football_2",
    "question": "What was the overall rating for Aaron Mooy on 2016/2/4?",
    "query": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2016-02-04' AND t1.player_name = 'Aaron Mooy'",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "foreign key(player_fifa_api_id) references Player(player_fifa_api_id)",
          "foreign key(player_api_id) references Player(player_api_id)",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player_attributes": "player_merged",
      "player": "player_merged"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT overall_rating FROM player_merged WHERE SUBSTR(`date`, 1, 10) = '2016-02-04' AND player_name = 'Aaron Mooy'"
  },
  {
    "train_idx": 1104,
    "db_id": "european_football_2",
    "question": "What was the potiential for Francesco Parravicini on 2010/8/30?",
    "query": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2010-08-30' AND t1.player_name = 'Francesco Parravicini'",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player": "player_merged",
      "player_attributes": "player_merged"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT potential FROM player_merged WHERE SUBSTR(`date`, 1, 10) = '2010-08-30' AND player_name = 'Francesco Parravicini'"
  },
  {
    "train_idx": 1105,
    "db_id": "european_football_2",
    "question": "How was Francesco Migliore's attacking work rate on 2015/5/1?",
    "query": "SELECT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.`date` LIKE '2015-05-01%' AND t1.player_name = 'Francesco Migliore'",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player": "player_merged",
      "player_attributes": "player_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT attacking_work_rate FROM player_merged WHERE `date` LIKE '2015-05-01%' AND player_name = 'Francesco Migliore'"
  },
  {
    "train_idx": 1106,
    "db_id": "european_football_2",
    "question": "Tell the defensive work rate for Kevin Berigaud on 2013/2/22.",
    "query": "SELECT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-02-22' AND t1.player_name = 'Kevin Berigaud'",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "foreign key(player_fifa_api_id) references Player(player_fifa_api_id)",
          "foreign key(player_api_id) references Player(player_api_id)",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player_attributes": "player_merged",
      "player": "player_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT defensive_work_rate FROM player_merged WHERE SUBSTR(`date`, 1, 10) = '2013-02-22' AND player_name = 'Kevin Berigaud'"
  },
  {
    "train_idx": 1107,
    "db_id": "european_football_2",
    "question": "When was the first time did Kevin Constant have his highest crossing score? Give the date.",
    "query": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Kevin Constant' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_info": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_info( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player": "player_info",
      "player_attributes": "player_info"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT `date` FROM ( SELECT crossing, `date` FROM player_info WHERE player_name = 'Kevin Constant' ORDER BY crossing DESC) ORDER BY date DESC LIMIT 1"
  },
  {
    "train_idx": 1108,
    "db_id": "european_football_2",
    "question": "What was the build up play speed class for \"Willem II\" on 2011/2/22?",
    "query": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Willem II' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'",
    "relevant_table": {
      "team": {
        "ddl": "create table team( id integer primary key, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text)"
      },
      "team_attributes": {
        "ddl": "create table team_attributes( id integer primary key, foreign key(team_fifa_api_id) references Team(team_fifa_api_id) integer, foreign key(team_api_id) references Team(team_api_id) integer, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text)"
      }
    },
    "new_relevant_table": {
      "team_merged": {
        "columns": [
          "id",
          "team_api_id",
          "team_fifa_api_id",
          "team_long_name",
          "team_short_name",
          "date",
          "buildUpPlaySpeed",
          "buildUpPlaySpeedClass",
          "buildUpPlayDribbling",
          "buildUpPlayDribblingClass",
          "buildUpPlayPassing",
          "buildUpPlayPassingClass",
          "buildUpPlayPositioningClass",
          "chanceCreationPassing",
          "chanceCreationPassingClass",
          "chanceCreationCrossing",
          "chanceCreationCrossingClass",
          "chanceCreationShooting",
          "chanceCreationShootingClass",
          "chanceCreationPositioningClass",
          "defencePressure",
          "defencePressureClass",
          "defenceAggression",
          "defenceAggressionClass",
          "defenceTeamWidth",
          "defenceTeamWidthClass",
          "defenceDefenderLineClass"
        ],
        "ddl": "create table team_merged( id integer, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text)"
      }
    },
    "old_new_table_mapping": {
      "team": "team_merged",
      "team_attributes": "team_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT buildUpPlaySpeedClass FROM team_merged WHERE team_long_name = 'Willem II' AND SUBSTR(`date`, 1, 10) = '2011-02-22'"
  },
  {
    "train_idx": 1109,
    "db_id": "european_football_2",
    "question": "How was the build up play dribbling class for \"LEI\" on 2015/9/10?",
    "query": "SELECT t2.buildUpPlayDribblingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_short_name = 'LEI' AND SUBSTR(t2.`date`, 1, 10) = '2015-09-10'",
    "relevant_table": {
      "team": {
        "ddl": "create table team( id integer primary key, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text)"
      },
      "team_attributes": {
        "ddl": "create table team_attributes( id integer primary key, foreign key(team_fifa_api_id) references Team(team_fifa_api_id) integer, foreign key(team_api_id) references Team(team_api_id) integer, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text)"
      }
    },
    "new_relevant_table": {
      "team_merged": {
        "columns": [
          "id",
          "team_api_id",
          "team_fifa_api_id",
          "team_long_name",
          "team_short_name",
          "date",
          "buildUpPlaySpeed",
          "buildUpPlaySpeedClass",
          "buildUpPlayDribbling",
          "buildUpPlayDribblingClass",
          "buildUpPlayPassing",
          "buildUpPlayPassingClass",
          "buildUpPlayPositioningClass",
          "chanceCreationPassing",
          "chanceCreationPassingClass",
          "chanceCreationCrossing",
          "chanceCreationCrossingClass",
          "chanceCreationShooting",
          "chanceCreationShootingClass",
          "chanceCreationPositioningClass",
          "defencePressure",
          "defencePressureClass",
          "defenceAggression",
          "defenceAggressionClass",
          "defenceTeamWidth",
          "defenceTeamWidthClass",
          "defenceDefenderLineClass"
        ],
        "ddl": "create table team_merged( id integer, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text)"
      }
    },
    "old_new_table_mapping": {
      "team": "team_merged",
      "team_attributes": "team_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT buildUpPlayDribblingClass FROM team_merged WHERE team_short_name = 'LEI' AND SUBSTR(`date`, 1, 10) = '2015-09-10'"
  },
  {
    "train_idx": 1110,
    "db_id": "european_football_2",
    "question": "Tell the build Up play passing class for \"FC Lorient\" on 2010/2/22.",
    "query": "SELECT t2.buildUpPlayPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'FC Lorient' AND t2.`date` LIKE '2010-02-22%'",
    "relevant_table": {
      "team": {
        "ddl": "create table team( id integer primary key, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text)"
      },
      "team_attributes": {
        "ddl": "create table team_attributes( id integer primary key, foreign key(team_fifa_api_id) references Team(team_fifa_api_id) integer, foreign key(team_api_id) references Team(team_api_id) integer, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text)"
      }
    },
    "new_relevant_table": {
      "team_attributes_merged": {
        "columns": [
          "id",
          "team_fifa_api_id",
          "team_api_id",
          "date",
          "buildUpPlaySpeed",
          "buildUpPlaySpeedClass",
          "buildUpPlayDribbling",
          "buildUpPlayDribblingClass",
          "buildUpPlayPassing",
          "buildUpPlayPassingClass",
          "buildUpPlayPositioningClass",
          "chanceCreationPassing",
          "chanceCreationPassingClass",
          "chanceCreationCrossing",
          "chanceCreationCrossingClass",
          "chanceCreationShooting",
          "chanceCreationShootingClass",
          "chanceCreationPositioningClass",
          "defencePressure",
          "defencePressureClass",
          "defenceAggression",
          "defenceAggressionClass",
          "defenceTeamWidth",
          "defenceTeamWidthClass",
          "defenceDefenderLineClass",
          "team_long_name",
          "team_short_name"
        ],
        "ddl": "create table team_attributes_merged( id integer, team_fifa_api_id integer, team_api_id integer, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text, team_long_name text, team_short_name text)"
      }
    },
    "old_new_table_mapping": {
      "team_attributes": "team_attributes_merged",
      "team": "team_attributes_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT buildUpPlayPassingClass FROM team_attributes_merged WHERE team_long_name = 'FC Lorient' AND `date` LIKE '2010-02-22%'"
  },
  {
    "train_idx": 1111,
    "db_id": "european_football_2",
    "question": "State the chance creation passing class for \"PEC Zwolle\" on 2013/9/20.",
    "query": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'PEC Zwolle' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'",
    "relevant_table": {
      "team": {
        "ddl": "create table team( id integer primary key, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text)"
      },
      "team_attributes": {
        "ddl": "create table team_attributes( id integer primary key, foreign key(team_fifa_api_id) references Team(team_fifa_api_id) integer, foreign key(team_api_id) references Team(team_api_id) integer, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text)"
      }
    },
    "new_relevant_table": {
      "team_merged": {
        "columns": [
          "id",
          "team_api_id",
          "team_fifa_api_id",
          "team_long_name",
          "team_short_name",
          "date",
          "buildUpPlaySpeed",
          "buildUpPlaySpeedClass",
          "buildUpPlayDribbling",
          "buildUpPlayDribblingClass",
          "buildUpPlayPassing",
          "buildUpPlayPassingClass",
          "buildUpPlayPositioningClass",
          "chanceCreationPassing",
          "chanceCreationPassingClass",
          "chanceCreationCrossing",
          "chanceCreationCrossingClass",
          "chanceCreationShooting",
          "chanceCreationShootingClass",
          "chanceCreationPositioningClass",
          "defencePressure",
          "defencePressureClass",
          "defenceAggression",
          "defenceAggressionClass",
          "defenceTeamWidth",
          "defenceTeamWidthClass",
          "defenceDefenderLineClass"
        ],
        "ddl": "create table team_merged( id integer, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text)"
      }
    },
    "old_new_table_mapping": {
      "team": "team_merged",
      "team_attributes": "team_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT chanceCreationPassingClass FROM team_merged WHERE team_long_name = 'PEC Zwolle' AND SUBSTR(`date`, 1, 10) = '2013-09-20'"
  },
  {
    "train_idx": 1112,
    "db_id": "european_football_2",
    "question": "What was the chance creation crossing class for \"Hull City\" on 2010/2/22?",
    "query": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hull City' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
    "relevant_table": {
      "team": {
        "ddl": "create table team( id integer primary key, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text)"
      },
      "team_attributes": {
        "ddl": "create table team_attributes( id integer primary key, foreign key(team_fifa_api_id) references Team(team_fifa_api_id) integer, foreign key(team_api_id) references Team(team_api_id) integer, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text)"
      }
    },
    "new_relevant_table": {
      "team_merged": {
        "columns": [
          "id",
          "team_api_id",
          "team_fifa_api_id",
          "team_long_name",
          "team_short_name",
          "foreign key(team_fifa_api_id) references Team(team_fifa_api_id)",
          "foreign key(team_api_id) references Team(team_api_id)",
          "date",
          "buildUpPlaySpeed",
          "buildUpPlaySpeedClass",
          "buildUpPlayDribbling",
          "buildUpPlayDribblingClass",
          "buildUpPlayPassing",
          "buildUpPlayPassingClass",
          "buildUpPlayPositioningClass",
          "chanceCreationPassing",
          "chanceCreationPassingClass",
          "chanceCreationCrossing",
          "chanceCreationCrossingClass",
          "chanceCreationShooting",
          "chanceCreationShootingClass",
          "chanceCreationPositioningClass",
          "defencePressure",
          "defencePressureClass",
          "defenceAggression",
          "defenceAggressionClass",
          "defenceTeamWidth",
          "defenceTeamWidthClass",
          "defenceDefenderLineClass"
        ],
        "ddl": "create table team_merged( id integer primary key, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text, foreign key(team_fifa_api_id) references Team(team_fifa_api_id) integer, foreign key(team_api_id) references Team(team_api_id) integer, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text)"
      }
    },
    "old_new_table_mapping": {
      "team_attributes": "team_merged",
      "team": "team_merged"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT chanceCreationCrossingClass FROM team_merged WHERE team_long_name = 'Hull City' AND SUBSTR(`date`, 1, 10) = '2010-02-22'"
  },
  {
    "train_idx": 1113,
    "db_id": "european_football_2",
    "question": "For the team \"Hannover 96\", what was its defence aggression class on 2015/9/10?",
    "query": "SELECT t2.chanceCreationShootingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hannover 96' AND t2.`date` LIKE '2015-09-10%'",
    "relevant_table": {
      "team": {
        "ddl": "create table team( id integer primary key, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text)"
      },
      "team_attributes": {
        "ddl": "create table team_attributes( id integer primary key, foreign key(team_fifa_api_id) references Team(team_fifa_api_id) integer, foreign key(team_api_id) references Team(team_api_id) integer, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text)"
      }
    },
    "new_relevant_table": {
      "team_merged": {
        "columns": [
          "id",
          "team_api_id",
          "team_fifa_api_id",
          "team_long_name",
          "team_short_name",
          "date",
          "buildUpPlaySpeed",
          "buildUpPlaySpeedClass",
          "buildUpPlayDribbling",
          "buildUpPlayDribblingClass",
          "buildUpPlayPassing",
          "buildUpPlayPassingClass",
          "buildUpPlayPositioningClass",
          "chanceCreationPassing",
          "chanceCreationPassingClass",
          "chanceCreationCrossing",
          "chanceCreationCrossingClass",
          "chanceCreationShooting",
          "chanceCreationShootingClass",
          "chanceCreationPositioningClass",
          "defencePressure",
          "defencePressureClass",
          "defenceAggression",
          "defenceAggressionClass",
          "defenceTeamWidth",
          "defenceTeamWidthClass",
          "defenceDefenderLineClass"
        ],
        "ddl": "create table team_merged( id integer, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text)"
      }
    },
    "old_new_table_mapping": {
      "team": "team_merged",
      "team_attributes": "team_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT chanceCreationShootingClass FROM team_merged WHERE team_long_name = 'Hannover 96' AND `date` LIKE '2015-09-10%'"
  },
  {
    "train_idx": 1114,
    "db_id": "european_football_2",
    "question": "What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21?",
    "query": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Marko Arnautovic' AND SUBSTR(t2.`date`, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21'",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "foreign key(player_fifa_api_id) references Player(player_fifa_api_id)",
          "foreign key(player_api_id) references Player(player_api_id)",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player_attributes": "player_merged",
      "player": "player_merged"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(overall_rating) AS REAL) / COUNT(id) FROM player_merged WHERE player_name = 'Marko Arnautovic' AND SUBSTR(`date`, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21'"
  },
  {
    "train_idx": 1115,
    "db_id": "european_football_2",
    "question": "What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12?",
    "query": "SELECT (SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Jordan Bowery' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) LvsJ_percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-07-12'",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player_attributes": "player_merged",
      "player": "player_merged"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT (SUM(CASE WHEN player_name = 'Landon Donovan' THEN overall_rating ELSE 0 END) * 10 - SUM(CASE WHEN player_name = 'Jordan Bowery' THEN overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN player_name = 'Landon Donovan' THEN overall_rating ELSE 0 END) LvsJ_percent FROM player_merged WHERE SUBSTR(`date`, 1, 10) = '2013-07-12'"
  },
  {
    "train_idx": 1119,
    "db_id": "european_football_2",
    "question": "How many home team goal have been scored by Aaron Lennon?",
    "query": "SELECT SUM(t2.home_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_9 WHERE t1.player_name = 'Aaron Lennon'",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "match": {
        "ddl": "create table match( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      }
    },
    "new_relevant_table": {
      "player_match": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "country_id",
          "league_id",
          "season",
          "stage",
          "date",
          "match_api_id",
          "home_team_api_id",
          "away_team_api_id",
          "home_team_goal",
          "away_team_goal",
          "home_player_X1",
          "home_player_X2",
          "home_player_X3",
          "home_player_X4",
          "home_player_X5",
          "home_player_X6",
          "home_player_X7",
          "home_player_X8",
          "home_player_X9",
          "home_player_X10",
          "home_player_X11",
          "away_player_X1",
          "away_player_X2",
          "away_player_X3",
          "away_player_X4",
          "away_player_X5",
          "away_player_X6",
          "away_player_X7",
          "away_player_X8",
          "away_player_X9",
          "away_player_X10",
          "away_player_X11",
          "home_player_Y1",
          "home_player_Y2",
          "home_player_Y3",
          "home_player_Y4",
          "home_player_Y5",
          "home_player_Y6",
          "home_player_Y7",
          "home_player_Y8",
          "home_player_Y9",
          "home_player_Y10",
          "home_player_Y11",
          "away_player_Y1",
          "away_player_Y2",
          "away_player_Y3",
          "away_player_Y4",
          "away_player_Y5",
          "away_player_Y6",
          "away_player_Y7",
          "away_player_Y8",
          "away_player_Y9",
          "away_player_Y10",
          "away_player_Y11",
          "goal",
          "shoton",
          "shotoff",
          "foulcommit",
          "card",
          "cross",
          "corner",
          "possession",
          "B365H",
          "B365D",
          "B365A",
          "BWH",
          "BWD",
          "BWA",
          "IWH",
          "IWD",
          "IWA",
          "LBH",
          "LBD",
          "LBA",
          "PSH",
          "PSD",
          "PSA",
          "WHH",
          "WHD",
          "WHA",
          "SJH",
          "SJD",
          "SJA",
          "VCH",
          "VCD",
          "VCA",
          "GBH",
          "GBD",
          "GBA",
          "BSH",
          "BSD",
          "BSA"
        ],
        "ddl": "create table player_match( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      }
    },
    "old_new_table_mapping": {
      "player": "player_match",
      "match": "player_match"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT SUM(home_team_goal) FROM player_match WHERE player_name = 'Aaron Lennon' AND player_api_id = away_player_9"
  },
  {
    "train_idx": 1120,
    "db_id": "european_football_2",
    "question": "Sum up the away team goal scored by both Daan Smith and Filipe Ferreira.",
    "query": "SELECT SUM(t2.away_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_5 WHERE t1.player_name IN ('Daan Smith', 'Filipe Ferreira')",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "match": {
        "ddl": "create table match( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      }
    },
    "new_relevant_table": {
      "player_match": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "country_id",
          "league_id",
          "season",
          "stage",
          "date",
          "match_api_id",
          "foreign key(home_team_api_id) references Team(team_api_id)",
          "foreign key(away_team_api_id) references Team(team_api_id)",
          "home_team_goal",
          "away_team_goal",
          "home_player_X1",
          "home_player_X2",
          "home_player_X3",
          "home_player_X4",
          "home_player_X5",
          "home_player_X6",
          "home_player_X7",
          "home_player_X8",
          "home_player_X9",
          "home_player_X10",
          "home_player_X11",
          "away_player_X1",
          "away_player_X2",
          "away_player_X3",
          "away_player_X4",
          "away_player_X5",
          "away_player_X6",
          "away_player_X7",
          "away_player_X8",
          "away_player_X9",
          "away_player_X10",
          "away_player_X11",
          "home_player_Y1",
          "home_player_Y2",
          "home_player_Y3",
          "home_player_Y4",
          "home_player_Y5",
          "home_player_Y6",
          "home_player_Y7",
          "home_player_Y8",
          "home_player_Y9",
          "home_player_Y10",
          "home_player_Y11",
          "away_player_Y1",
          "away_player_Y2",
          "away_player_Y3",
          "away_player_Y4",
          "away_player_Y5",
          "away_player_Y6",
          "away_player_Y7",
          "away_player_Y8",
          "away_player_Y9",
          "away_player_Y10",
          "away_player_Y11",
          "goal",
          "shoton",
          "shotoff",
          "foulcommit",
          "card",
          "cross",
          "corner",
          "possession",
          "B365H",
          "B365D",
          "B365A",
          "BWH",
          "BWD",
          "BWA",
          "IWH",
          "IWD",
          "IWA",
          "LBH",
          "LBD",
          "LBA",
          "PSH",
          "PSD",
          "PSA",
          "WHH",
          "WHD",
          "WHA",
          "SJH",
          "SJD",
          "SJA",
          "VCH",
          "VCD",
          "VCA",
          "GBH",
          "GBD",
          "GBA",
          "BSH",
          "BSD",
          "BSA"
        ],
        "ddl": "create table player_match( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      }
    },
    "old_new_table_mapping": {
      "player": "player_match",
      "match": "player_match"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT SUM(away_team_goal) FROM player_match WHERE player_name IN ('Daan Smith', 'Filipe Ferreira') AND player_api_id = away_player_5"
  },
  {
    "train_idx": 1121,
    "db_id": "european_football_2",
    "question": "Calculate the total home team goal scored by players whose age are 30 years old and below.",
    "query": "SELECT SUM(t2.home_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_1 WHERE datetime(CURRENT_TIMESTAMP, 'localtime') - datetime(T1.birthday) < 31",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "match": {
        "ddl": "create table match( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      }
    },
    "new_relevant_table": {
      "player_match": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "country_id",
          "league_id",
          "season",
          "stage",
          "date",
          "match_api_id",
          "home_team_api_id",
          "away_team_api_id",
          "home_team_goal",
          "away_team_goal",
          "home_player_X1",
          "home_player_X2",
          "home_player_X3",
          "home_player_X4",
          "home_player_X5",
          "home_player_X6",
          "home_player_X7",
          "home_player_X8",
          "home_player_X9",
          "home_player_X10",
          "home_player_X11",
          "away_player_X1",
          "away_player_X2",
          "away_player_X3",
          "away_player_X4",
          "away_player_X5",
          "away_player_X6",
          "away_player_X7",
          "away_player_X8",
          "away_player_X9",
          "away_player_X10",
          "away_player_X11",
          "home_player_Y1",
          "home_player_Y2",
          "home_player_Y3",
          "home_player_Y4",
          "home_player_Y5",
          "home_player_Y6",
          "home_player_Y7",
          "home_player_Y8",
          "home_player_Y9",
          "home_player_Y10",
          "home_player_Y11",
          "away_player_Y1",
          "away_player_Y2",
          "away_player_Y3",
          "away_player_Y4",
          "away_player_Y5",
          "away_player_Y6",
          "away_player_Y7",
          "away_player_Y8",
          "away_player_Y9",
          "away_player_Y10",
          "away_player_Y11",
          "goal",
          "shoton",
          "shotoff",
          "foulcommit",
          "card",
          "cross",
          "corner",
          "possession",
          "B365H",
          "B365D",
          "B365A",
          "BWH",
          "BWD",
          "BWA",
          "IWH",
          "IWD",
          "IWA",
          "LBH",
          "LBD",
          "LBA",
          "PSH",
          "PSD",
          "PSA",
          "WHH",
          "WHD",
          "WHA",
          "SJH",
          "SJD",
          "SJA",
          "VCH",
          "VCD",
          "VCA",
          "GBH",
          "GBD",
          "GBA",
          "BSH",
          "BSD",
          "BSA"
        ],
        "ddl": "create table player_match( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      }
    },
    "old_new_table_mapping": {
      "match": "player_match",
      "player": "player_match"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT SUM(home_team_goal) FROM player_match WHERE datetime(CURRENT_TIMESTAMP, 'localtime') - datetime(T1birthday) < 31"
  },
  {
    "train_idx": 1122,
    "db_id": "european_football_2",
    "question": "State the name of the most strongest player.",
    "query": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player": "player_merged",
      "player_attributes": "player_merged"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT t1.player_name FROM player_merged AS t1 WHERE t1.overall_rating = (SELECT MAX(overall_rating) FROM player_merged)"
  },
  {
    "train_idx": 1123,
    "db_id": "european_football_2",
    "question": "What is the name of players with the highest potential?",
    "query": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.potential DESC LIMIT 1",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player": "player_merged",
      "player_attributes": "player_merged"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT player_name FROM player_merged ORDER BY potential DESC LIMIT 1"
  },
  {
    "train_idx": 1124,
    "db_id": "european_football_2",
    "question": "Who are the players that tend to be attacking when their mates were doing attack moves? List down their name.",
    "query": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.attacking_work_rate = 'high'",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player": "player_merged",
      "player_attributes": "player_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT player_name FROM player_merged WHERE attacking_work_rate = 'high'"
  },
  {
    "train_idx": 1125,
    "db_id": "european_football_2",
    "question": "Among the players with finishing rate of 1, pick the eldest player and state the player's name.",
    "query": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.finishing = 1 ORDER BY t1.birthday ASC LIMIT 1",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_fifa_api_id",
          "player_api_id",
          "player_name",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer, player_fifa_api_id integer, player_api_id integer, player_name text, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player_attributes": "player_merged",
      "player": "player_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT player_name FROM player_merged WHERE finishing = 1 ORDER BY birthday ASC LIMIT 1"
  },
  {
    "train_idx": 1126,
    "db_id": "european_football_2",
    "question": "State the name of players who came from Belgium.",
    "query": "SELECT t3.player_name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id WHERE t1.name = 'Belgium'",
    "relevant_table": {
      "country": {
        "ddl": "create table country( id integer primary key, name text)"
      },
      "match": {
        "ddl": "create table match( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      },
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      }
    },
    "new_relevant_table": {
      "country_match": {
        "columns": [
          "id",
          "name",
          "country_id",
          "league_id",
          "season",
          "stage",
          "date",
          "match_api_id",
          "foreign key(home_team_api_id) references Team(team_api_id)",
          "foreign key(away_team_api_id) references Team(team_api_id)",
          "home_team_goal",
          "away_team_goal",
          "home_player_X1",
          "home_player_X2",
          "home_player_X3",
          "home_player_X4",
          "home_player_X5",
          "home_player_X6",
          "home_player_X7",
          "home_player_X8",
          "home_player_X9",
          "home_player_X10",
          "home_player_X11",
          "away_player_X1",
          "away_player_X2",
          "away_player_X3",
          "away_player_X4",
          "away_player_X5",
          "away_player_X6",
          "away_player_X7",
          "away_player_X8",
          "away_player_X9",
          "away_player_X10",
          "away_player_X11",
          "home_player_Y1",
          "home_player_Y2",
          "home_player_Y3",
          "home_player_Y4",
          "home_player_Y5",
          "home_player_Y6",
          "home_player_Y7",
          "home_player_Y8",
          "home_player_Y9",
          "home_player_Y10",
          "home_player_Y11",
          "away_player_Y1",
          "away_player_Y2",
          "away_player_Y3",
          "away_player_Y4",
          "away_player_Y5",
          "away_player_Y6",
          "away_player_Y7",
          "away_player_Y8",
          "away_player_Y9",
          "away_player_Y10",
          "away_player_Y11",
          "foreign key(home_player_1) references Player(player_api_id)",
          "foreign key(home_player_2) references Player(player_api_id)",
          "foreign key(home_player_3) references Player(player_api_id)",
          "foreign key(home_player_4) references Player(player_api_id)",
          "foreign key(home_player_5) references Player(player_api_id)",
          "foreign key(home_player_6) references Player(player_api_id)",
          "foreign key(home_player_7) references Player(player_api_id)",
          "foreign key(home_player_8) references Player(player_api_id)",
          "foreign key(home_player_9) references Player(player_api_id)",
          "foreign key(home_player_10) references Player(player_api_id)",
          "foreign key(home_player_11) references Player(player_api_id)",
          "foreign key(away_player_1) references Player(player_api_id)",
          "foreign key(away_player_2) references Player(player_api_id)",
          "foreign key(away_player_3) references Player(player_api_id)",
          "foreign key(away_player_4) references Player(player_api_id)",
          "foreign key(away_player_5) references Player(player_api_id)",
          "foreign key(away_player_6) references Player(player_api_id)",
          "foreign key(away_player_7) references Player(player_api_id)",
          "foreign key(away_player_8) references Player(player_api_id)",
          "foreign key(away_player_9) references Player(player_api_id)",
          "foreign key(away_player_10) references Player(player_api_id)",
          "foreign key(away_player_11) references Player(player_api_id)",
          "goal",
          "shoton",
          "shotoff",
          "foulcommit",
          "card",
          "cross",
          "corner",
          "possession",
          "B365H",
          "B365D",
          "B365A",
          "BWH",
          "BWD",
          "BWA",
          "IWH",
          "IWD",
          "IWA",
          "LBH",
          "LBD",
          "LBA",
          "PSH",
          "PSD",
          "PSA",
          "WHH",
          "WHD",
          "WHA",
          "SJH",
          "SJD",
          "SJA",
          "VCH",
          "VCD",
          "VCA",
          "GBH",
          "GBD",
          "GBA",
          "BSH",
          "BSD",
          "BSA"
        ],
        "ddl": "create table country_match( id integer primary key, name text, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      },
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      }
    },
    "old_new_table_mapping": {
      "country": "country_match",
      "match": "country_match"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT player_name FROM country_match WHERE name = 'Belgium'"
  },
  {
    "train_idx": 1127,
    "db_id": "european_football_2",
    "question": "Locate players with vision scores of 90 and above, state the country of these players.",
    "query": "SELECT DISTINCT t4.name FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id INNER JOIN Match AS t3 ON t2.player_api_id = t3.home_player_8 INNER JOIN Country AS t4 ON t3.country_id = t4.id WHERE t1.vision > 89",
    "relevant_table": {
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      },
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "match": {
        "ddl": "create table match( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      },
      "country": {
        "ddl": "create table country( id integer primary key, name text)"
      }
    },
    "new_relevant_table": {
      "Player_Country": {
        "columns": [
          "id",
          "name",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight"
        ],
        "ddl": "create table Player_Country( id integer, name text, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player_Country(player_fifa_api_id) integer, foreign key(player_api_id) references Player_Country(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      },
      "match": {
        "ddl": "create table match( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player_Country(player_api_id) integer, foreign key(home_player_2) references Player_Country(player_api_id) integer, foreign key(home_player_3) references Player_Country(player_api_id) integer, foreign key(home_player_4) references Player_Country(player_api_id) integer, foreign key(home_player_5) references Player_Country(player_api_id) integer, foreign key(home_player_6) references Player_Country(player_api_id) integer, foreign key(home_player_7) references Player_Country(player_api_id) integer, foreign key(home_player_8) references Player_Country(player_api_id) integer, foreign key(home_player_9) references Player_Country(player_api_id) integer, foreign key(home_player_10) references Player_Country(player_api_id) integer, foreign key(home_player_11) references Player_Country(player_api_id) integer, foreign key(away_player_1) references Player_Country(player_api_id) integer, foreign key(away_player_2) references Player_Country(player_api_id) integer, foreign key(away_player_3) references Player_Country(player_api_id) integer, foreign key(away_player_4) references Player_Country(player_api_id) integer, foreign key(away_player_5) references Player_Country(player_api_id) integer, foreign key(away_player_6) references Player_Country(player_api_id) integer, foreign key(away_player_7) references Player_Country(player_api_id) integer, foreign key(away_player_8) references Player_Country(player_api_id) integer, foreign key(away_player_9) references Player_Country(player_api_id) integer, foreign key(away_player_10) references Player_Country(player_api_id) integer, foreign key(away_player_11) references Player_Country(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      }
    },
    "old_new_table_mapping": {
      "country": "Player_Country",
      "player": "Player_Country"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT Player_Country.name FROM Player_Attributes INNER JOIN Player_Country ON Player_Attributes.player_api_id = Player_Country.player_api_id WHERE Player_Attributes.vision > 89"
  },
  {
    "train_idx": 1128,
    "db_id": "european_football_2",
    "question": "Which country's players have the heaviest average weights?",
    "query": "SELECT t1.name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id GROUP BY t1.name ORDER BY AVG(t3.weight) DESC LIMIT 1",
    "relevant_table": {
      "country": {
        "ddl": "create table country( id integer primary key, name text)"
      },
      "match": {
        "ddl": "create table match( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      },
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      }
    },
    "new_relevant_table": {
      "MatchPlayer": {
        "columns": [
          "id",
          "country_id",
          "league_id",
          "season",
          "stage",
          "date",
          "match_api_id",
          "home_team_api_id",
          "away_team_api_id",
          "home_team_goal",
          "away_team_goal",
          "home_player_X1",
          "home_player_X2",
          "home_player_X3",
          "home_player_X4",
          "home_player_X5",
          "home_player_X6",
          "home_player_X7",
          "home_player_X8",
          "home_player_X9",
          "home_player_X10",
          "home_player_X11",
          "away_player_X1",
          "away_player_X2",
          "away_player_X3",
          "away_player_X4",
          "away_player_X5",
          "away_player_X6",
          "away_player_X7",
          "away_player_X8",
          "away_player_X9",
          "away_player_X10",
          "away_player_X11",
          "home_player_Y1",
          "home_player_Y2",
          "home_player_Y3",
          "home_player_Y4",
          "home_player_Y5",
          "home_player_Y6",
          "home_player_Y7",
          "home_player_Y8",
          "home_player_Y9",
          "home_player_Y10",
          "home_player_Y11",
          "away_player_Y1",
          "away_player_Y2",
          "away_player_Y3",
          "away_player_Y4",
          "away_player_Y5",
          "away_player_Y6",
          "away_player_Y7",
          "away_player_Y8",
          "away_player_Y9",
          "away_player_Y10",
          "away_player_Y11",
          "home_player_1",
          "home_player_2",
          "home_player_3",
          "home_player_4",
          "home_player_5",
          "home_player_6",
          "home_player_7",
          "home_player_8",
          "home_player_9",
          "home_player_10",
          "home_player_11",
          "away_player_1",
          "away_player_2",
          "away_player_3",
          "away_player_4",
          "away_player_5",
          "away_player_6",
          "away_player_7",
          "away_player_8",
          "away_player_9",
          "away_player_10",
          "away_player_11",
          "goal",
          "shoton",
          "shotoff",
          "foulcommit",
          "card",
          "cross",
          "corner",
          "possession",
          "B365H",
          "B365D",
          "B365A",
          "BWH",
          "BWD",
          "BWA",
          "IWH",
          "IWD",
          "IWA",
          "LBH",
          "LBD",
          "LBA",
          "PSH",
          "PSD",
          "PSA",
          "WHH",
          "WHD",
          "WHA",
          "SJH",
          "SJD",
          "SJA",
          "VCH",
          "VCD",
          "VCA",
          "GBH",
          "GBD",
          "GBA",
          "BSH",
          "BSD",
          "BSA",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight"
        ],
        "ddl": "create table MatchPlayer( id integer, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "country": {
        "ddl": "create table country( id integer primary key, name text)"
      }
    },
    "old_new_table_mapping": {
      "match": "MatchPlayer",
      "player": "MatchPlayer"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT name FROM Country GROUP BY name ORDER BY AVG(weight) DESC LIMIT 1"
  },
  {
    "train_idx": 1129,
    "db_id": "european_football_2",
    "question": "List down the long name for slow speed class team.",
    "query": "SELECT DISTINCT t1.team_long_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeedClass = 'Slow'",
    "relevant_table": {
      "team": {
        "ddl": "create table team( id integer primary key, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text)"
      },
      "team_attributes": {
        "ddl": "create table team_attributes( id integer primary key, foreign key(team_fifa_api_id) references Team(team_fifa_api_id) integer, foreign key(team_api_id) references Team(team_api_id) integer, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text)"
      }
    },
    "new_relevant_table": {
      "team_merged": {
        "columns": [
          "id",
          "team_api_id",
          "team_fifa_api_id",
          "team_long_name",
          "team_short_name",
          "date",
          "buildUpPlaySpeed",
          "buildUpPlaySpeedClass",
          "buildUpPlayDribbling",
          "buildUpPlayDribblingClass",
          "buildUpPlayPassing",
          "buildUpPlayPassingClass",
          "buildUpPlayPositioningClass",
          "chanceCreationPassing",
          "chanceCreationPassingClass",
          "chanceCreationCrossing",
          "chanceCreationCrossingClass",
          "chanceCreationShooting",
          "chanceCreationShootingClass",
          "chanceCreationPositioningClass",
          "defencePressure",
          "defencePressureClass",
          "defenceAggression",
          "defenceAggressionClass",
          "defenceTeamWidth",
          "defenceTeamWidthClass",
          "defenceDefenderLineClass"
        ],
        "ddl": "create table team_merged( id integer primary key, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text)"
      }
    },
    "old_new_table_mapping": {
      "team": "team_merged",
      "team_attributes": "team_merged"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT team_long_name FROM team_merged WHERE buildUpPlaySpeedClass = 'Slow'"
  },
  {
    "train_idx": 1130,
    "db_id": "european_football_2",
    "question": "What are the short name of team who played safe while creating chance of passing?",
    "query": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.chanceCreationPassingClass = 'Safe'",
    "relevant_table": {
      "team": {
        "ddl": "create table team( id integer primary key, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text)"
      },
      "team_attributes": {
        "ddl": "create table team_attributes( id integer primary key, foreign key(team_fifa_api_id) references Team(team_fifa_api_id) integer, foreign key(team_api_id) references Team(team_api_id) integer, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text)"
      }
    },
    "new_relevant_table": {
      "team_merged": {
        "columns": [
          "id",
          "team_api_id",
          "team_fifa_api_id",
          "team_long_name",
          "team_short_name",
          "date",
          "buildUpPlaySpeed",
          "buildUpPlaySpeedClass",
          "buildUpPlayDribbling",
          "buildUpPlayDribblingClass",
          "buildUpPlayPassing",
          "buildUpPlayPassingClass",
          "buildUpPlayPositioningClass",
          "chanceCreationPassing",
          "chanceCreationPassingClass",
          "chanceCreationCrossing",
          "chanceCreationCrossingClass",
          "chanceCreationShooting",
          "chanceCreationShootingClass",
          "chanceCreationPositioningClass",
          "defencePressure",
          "defencePressureClass",
          "defenceAggression",
          "defenceAggressionClass",
          "defenceTeamWidth",
          "defenceTeamWidthClass",
          "defenceDefenderLineClass"
        ],
        "ddl": "create table team_merged( id integer, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text)"
      }
    },
    "old_new_table_mapping": {
      "team_attributes": "team_merged",
      "team": "team_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT team_short_name FROM team_merged WHERE chanceCreationPassingClass = 'Safe'"
  },
  {
    "train_idx": 1131,
    "db_id": "european_football_2",
    "question": "What is the average heights of Italy players?",
    "query": "SELECT CAST(SUM(T1.height) AS REAL) / COUNT(T1.id) FROM Player AS T1 INNER JOIN Match AS T2 ON T1.id = T2.id INNER JOIN Country AS T3 ON T2.country_id = T3.ID WHERE T3.NAME = 'Italy'",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "match": {
        "ddl": "create table match( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      },
      "country": {
        "ddl": "create table country( id integer primary key, name text)"
      }
    },
    "new_relevant_table": {
      "player_country": {
        "columns": [
          "id",
          "name",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight"
        ],
        "ddl": "create table player_country( id integer, name text, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "match": {
        "ddl": "create table match( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references player_country(player_api_id) integer, foreign key(home_player_2) references player_country(player_api_id) integer, foreign key(home_player_3) references player_country(player_api_id) integer, foreign key(home_player_4) references player_country(player_api_id) integer, foreign key(home_player_5) references player_country(player_api_id) integer, foreign key(home_player_6) references player_country(player_api_id) integer, foreign key(home_player_7) references player_country(player_api_id) integer, foreign key(home_player_8) references player_country(player_api_id) integer, foreign key(home_player_9) references player_country(player_api_id) integer, foreign key(home_player_10) references player_country(player_api_id) integer, foreign key(home_player_11) references player_country(player_api_id) integer, foreign key(away_player_1) references player_country(player_api_id) integer, foreign key(away_player_2) references player_country(player_api_id) integer, foreign key(away_player_3) references player_country(player_api_id) integer, foreign key(away_player_4) references player_country(player_api_id) integer, foreign key(away_player_5) references player_country(player_api_id) integer, foreign key(away_player_6) references player_country(player_api_id) integer, foreign key(away_player_7) references player_country(player_api_id) integer, foreign key(away_player_8) references player_country(player_api_id) integer, foreign key(away_player_9) references player_country(player_api_id) integer, foreign key(away_player_10) references player_country(player_api_id) integer, foreign key(away_player_11) references player_country(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      }
    },
    "old_new_table_mapping": {
      "country": "player_country",
      "player": "player_country"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(player_countryheight) AS REAL) / COUNT(player_countryid) FROM player_country WHERE player_countryname = 'Italy'"
  },
  {
    "train_idx": 1138,
    "db_id": "european_football_2",
    "question": "In what country did the Poland Ekstraklasa take place?",
    "query": "SELECT name FROM Country WHERE id IN ( SELECT country_id FROM League WHERE name = 'Poland Ekstraklasa' )",
    "relevant_table": {
      "country": {
        "ddl": "create table country( id integer primary key, name text)"
      },
      "league": {
        "ddl": "create table league( id integer primary key, foreign key(country_id) references Country(id) integer, name text)"
      }
    },
    "new_relevant_table": {
      "CountryLeague": {
        "columns": [
          "id",
          "country_id",
          "league_name",
          "country_name"
        ],
        "ddl": "create table CountryLeague( id integer)"
      }
    },
    "old_new_table_mapping": {
      "league": "CountryLeague",
      "country": "CountryLeague"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT country_name FROM CountryLeague WHERE id IN ( SELECT country_id FROM CountryLeague WHERE league_name = 'Poland Ekstraklasa' )"
  },
  {
    "train_idx": 1139,
    "db_id": "european_football_2",
    "question": "What was the final score for the match on September 24, 2008, in the Belgian Jupiler League between the home team and the away team?",
    "query": "SELECT t2.home_team_goal, t2.away_team_goal FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Belgium Jupiler League' AND t2.`date` LIKE '2008-09-24%'",
    "relevant_table": {
      "league": {
        "ddl": "create table league( id integer primary key, foreign key(country_id) references Country(id) integer, name text)"
      },
      "match": {
        "ddl": "create table match( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      }
    },
    "new_relevant_table": {
      "MatchLeague": {
        "columns": [
          "id",
          "country_id",
          "league_id",
          "season",
          "stage",
          "date",
          "match_api_id",
          "home_team_api_id",
          "away_team_api_id",
          "home_team_goal",
          "away_team_goal",
          "home_player_X1",
          "home_player_X2",
          "home_player_X3",
          "home_player_X4",
          "home_player_X5",
          "home_player_X6",
          "home_player_X7",
          "home_player_X8",
          "home_player_X9",
          "home_player_X10",
          "home_player_X11",
          "away_player_X1",
          "away_player_X2",
          "away_player_X3",
          "away_player_X4",
          "away_player_X5",
          "away_player_X6",
          "away_player_X7",
          "away_player_X8",
          "away_player_X9",
          "away_player_X10",
          "away_player_X11",
          "home_player_Y1",
          "home_player_Y2",
          "home_player_Y3",
          "home_player_Y4",
          "home_player_Y5",
          "home_player_Y6",
          "home_player_Y7",
          "home_player_Y8",
          "home_player_Y9",
          "home_player_Y10",
          "home_player_Y11",
          "away_player_Y1",
          "away_player_Y2",
          "away_player_Y3",
          "away_player_Y4",
          "away_player_Y5",
          "away_player_Y6",
          "away_player_Y7",
          "away_player_Y8",
          "away_player_Y9",
          "away_player_Y10",
          "away_player_Y11",
          "home_player_1",
          "home_player_2",
          "home_player_3",
          "home_player_4",
          "home_player_5",
          "home_player_6",
          "home_player_7",
          "home_player_8",
          "home_player_9",
          "home_player_10",
          "home_player_11",
          "away_player_1",
          "away_player_2",
          "away_player_3",
          "away_player_4",
          "away_player_5",
          "away_player_6",
          "away_player_7",
          "away_player_8",
          "away_player_9",
          "away_player_10",
          "away_player_11",
          "goal",
          "shoton",
          "shotoff",
          "foulcommit",
          "card",
          "cross",
          "corner",
          "possession",
          "B365H",
          "B365D",
          "B365A",
          "BWH",
          "BWD",
          "BWA",
          "IWH",
          "IWD",
          "IWA",
          "LBH",
          "LBD",
          "LBA",
          "PSH",
          "PSD",
          "PSA",
          "WHH",
          "WHD",
          "WHA",
          "SJH",
          "SJD",
          "SJA",
          "VCH",
          "VCD",
          "VCA",
          "GBH",
          "GBD",
          "GBA",
          "BSH",
          "BSD",
          "BSA",
          "league_name"
        ],
        "ddl": "create table MatchLeague( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      }
    },
    "old_new_table_mapping": {
      "match": "MatchLeague",
      "league": "MatchLeague"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT home_team_goal, away_team_goal FROM MatchLeague WHERE league_name = 'Belgium Jupiler League' AND `date` LIKE '2008-09-24%'"
  },
  {
    "train_idx": 1140,
    "db_id": "european_football_2",
    "question": "What are Alexis Blin's sprint speed, agility, and acceleration scores?",
    "query": "SELECT sprint_speed, agility, acceleration FROM Player_Attributes WHERE player_api_id IN ( SELECT player_api_id FROM Player WHERE player_name = 'Alexis Blin' )",
    "relevant_table": {
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      },
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      }
    },
    "new_relevant_table": {
      "player_info": {
        "columns": [
          "id",
          "player_fifa_api_id",
          "player_api_id",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes",
          "player_name",
          "birthday",
          "height",
          "weight"
        ],
        "ddl": "create table player_info( id integer, player_fifa_api_id integer, player_api_id integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer, player_name text, birthday text, height integer, weight integer)"
      }
    },
    "old_new_table_mapping": {
      "player_attributes": "player_info",
      "player": "player_info"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT sprint_speed, agility, acceleration FROM player_info WHERE player_name = 'Alexis Blin'"
  },
  {
    "train_idx": 1141,
    "db_id": "european_football_2",
    "question": "Does the KSV Cercle Brugge team have a slow, balanced or fast speed class?",
    "query": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'KSV Cercle Brugge'",
    "relevant_table": {
      "team_attributes": {
        "ddl": "create table team_attributes( id integer primary key, foreign key(team_fifa_api_id) references Team(team_fifa_api_id) integer, foreign key(team_api_id) references Team(team_api_id) integer, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text)"
      },
      "team": {
        "ddl": "create table team( id integer primary key, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text)"
      }
    },
    "new_relevant_table": {
      "team_merged": {
        "columns": [
          "id",
          "team_fifa_api_id",
          "team_api_id",
          "date",
          "buildUpPlaySpeed",
          "buildUpPlaySpeedClass",
          "buildUpPlayDribbling",
          "buildUpPlayDribblingClass",
          "buildUpPlayPassing",
          "buildUpPlayPassingClass",
          "buildUpPlayPositioningClass",
          "chanceCreationPassing",
          "chanceCreationPassingClass",
          "chanceCreationCrossing",
          "chanceCreationCrossingClass",
          "chanceCreationShooting",
          "chanceCreationShootingClass",
          "chanceCreationPositioningClass",
          "defencePressure",
          "defencePressureClass",
          "defenceAggression",
          "defenceAggressionClass",
          "defenceTeamWidth",
          "defenceTeamWidthClass",
          "defenceDefenderLineClass",
          "team_long_name",
          "team_short_name"
        ],
        "ddl": "create table team_merged( id integer primary key, team_fifa_api_id integer, team_api_id integer, date text, buildUpPlaySpeed integer, buildUpPlaySpeedClass text, buildUpPlayDribbling integer, buildUpPlayDribblingClass text, buildUpPlayPassing integer, buildUpPlayPassingClass text, buildUpPlayPositioningClass text, chanceCreationPassing integer, chanceCreationPassingClass text, chanceCreationCrossing integer, chanceCreationCrossingClass text, chanceCreationShooting integer, chanceCreationShootingClass text, chanceCreationPositioningClass text, defencePressure integer, defencePressureClass text, defenceAggression integer, defenceAggressionClass text, defenceTeamWidth integer, defenceTeamWidthClass text, defenceDefenderLineClass text, team_long_name text, team_short_name text)"
      }
    },
    "old_new_table_mapping": {
      "team_attributes": "team_merged",
      "team": "team_merged"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT buildUpPlaySpeedClass FROM team_merged WHERE team_long_name = 'KSV Cercle Brugge'"
  },
  {
    "train_idx": 1142,
    "db_id": "european_football_2",
    "question": "In the 2015\u20132016 season, how many games were played in the Italian Serie A league?",
    "query": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Italy Serie A' AND t2.season = '2015/2016'",
    "relevant_table": {
      "league": {
        "ddl": "create table league( id integer primary key, foreign key(country_id) references Country(id) integer, name text)"
      },
      "match": {
        "ddl": "create table match( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      }
    },
    "new_relevant_table": {
      "league_match": {
        "columns": [
          "id",
          "country_id",
          "league_id",
          "season",
          "stage",
          "date",
          "match_api_id",
          "home_team_api_id",
          "away_team_api_id",
          "home_team_goal",
          "away_team_goal",
          "home_player_X1",
          "home_player_X2",
          "home_player_X3",
          "home_player_X4",
          "home_player_X5",
          "home_player_X6",
          "home_player_X7",
          "home_player_X8",
          "home_player_X9",
          "home_player_X10",
          "home_player_X11",
          "away_player_X1",
          "away_player_X2",
          "away_player_X3",
          "away_player_X4",
          "away_player_X5",
          "away_player_X6",
          "away_player_X7",
          "away_player_X8",
          "away_player_X9",
          "away_player_X10",
          "away_player_X11",
          "home_player_Y1",
          "home_player_Y2",
          "home_player_Y3",
          "home_player_Y4",
          "home_player_Y5",
          "home_player_Y6",
          "home_player_Y7",
          "home_player_Y8",
          "home_player_Y9",
          "home_player_Y10",
          "home_player_Y11",
          "away_player_Y1",
          "away_player_Y2",
          "away_player_Y3",
          "away_player_Y4",
          "away_player_Y5",
          "away_player_Y6",
          "away_player_Y7",
          "away_player_Y8",
          "away_player_Y9",
          "away_player_Y10",
          "away_player_Y11",
          "home_player_1",
          "home_player_2",
          "home_player_3",
          "home_player_4",
          "home_player_5",
          "home_player_6",
          "home_player_7",
          "home_player_8",
          "home_player_9",
          "home_player_10",
          "home_player_11",
          "away_player_1",
          "away_player_2",
          "away_player_3",
          "away_player_4",
          "away_player_5",
          "away_player_6",
          "away_player_7",
          "away_player_8",
          "away_player_9",
          "away_player_10",
          "away_player_11",
          "goal",
          "shoton",
          "shotoff",
          "foulcommit",
          "card",
          "cross",
          "corner",
          "possession",
          "B365H",
          "B365D",
          "B365A",
          "BWH",
          "BWD",
          "BWA",
          "IWH",
          "IWD",
          "IWA",
          "LBH",
          "LBD",
          "LBA",
          "PSH",
          "PSD",
          "PSA",
          "WHH",
          "WHD",
          "WHA",
          "SJH",
          "SJD",
          "SJA",
          "VCH",
          "VCD",
          "VCA",
          "GBH",
          "GBD",
          "GBA",
          "BSH",
          "BSD",
          "BSA",
          "league_name"
        ],
        "ddl": "create table league_match( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      }
    },
    "old_new_table_mapping": {
      "league": "league_match",
      "match": "league_match"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(id) FROM league_match WHERE league_name = 'Italy Serie A' AND season = '2015/2016'"
  },
  {
    "train_idx": 1143,
    "db_id": "european_football_2",
    "question": "What was the highest score of the home team in the Netherlands Eredivisie league?",
    "query": "SELECT MAX(t2.home_team_goal) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Netherlands Eredivisie'",
    "relevant_table": {
      "league": {
        "ddl": "create table league( id integer primary key, foreign key(country_id) references Country(id) integer, name text)"
      },
      "match": {
        "ddl": "create table match( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      }
    },
    "new_relevant_table": {
      "league_match": {
        "columns": [
          "id",
          "country_id",
          "league_id",
          "season",
          "stage",
          "date",
          "match_api_id",
          "home_team_api_id",
          "away_team_api_id",
          "home_team_goal",
          "away_team_goal",
          "home_player_X1",
          "home_player_X2",
          "home_player_X3",
          "home_player_X4",
          "home_player_X5",
          "home_player_X6",
          "home_player_X7",
          "home_player_X8",
          "home_player_X9",
          "home_player_X10",
          "home_player_X11",
          "away_player_X1",
          "away_player_X2",
          "away_player_X3",
          "away_player_X4",
          "away_player_X5",
          "away_player_X6",
          "away_player_X7",
          "away_player_X8",
          "away_player_X9",
          "away_player_X10",
          "away_player_X11",
          "home_player_Y1",
          "home_player_Y2",
          "home_player_Y3",
          "home_player_Y4",
          "home_player_Y5",
          "home_player_Y6",
          "home_player_Y7",
          "home_player_Y8",
          "home_player_Y9",
          "home_player_Y10",
          "home_player_Y11",
          "away_player_Y1",
          "away_player_Y2",
          "away_player_Y3",
          "away_player_Y4",
          "away_player_Y5",
          "away_player_Y6",
          "away_player_Y7",
          "away_player_Y8",
          "away_player_Y9",
          "away_player_Y10",
          "away_player_Y11",
          "home_player_1",
          "home_player_2",
          "home_player_3",
          "home_player_4",
          "home_player_5",
          "home_player_6",
          "home_player_7",
          "home_player_8",
          "home_player_9",
          "home_player_10",
          "home_player_11",
          "away_player_1",
          "away_player_2",
          "away_player_3",
          "away_player_4",
          "away_player_5",
          "away_player_6",
          "away_player_7",
          "away_player_8",
          "away_player_9",
          "away_player_10",
          "away_player_11",
          "goal",
          "shoton",
          "shotoff",
          "foulcommit",
          "card",
          "cross",
          "corner",
          "possession",
          "B365H",
          "B365D",
          "B365A",
          "BWH",
          "BWD",
          "BWA",
          "IWH",
          "IWD",
          "IWA",
          "LBH",
          "LBD",
          "LBA",
          "PSH",
          "PSD",
          "PSA",
          "WHH",
          "WHD",
          "WHA",
          "SJH",
          "SJD",
          "SJA",
          "VCH",
          "VCD",
          "VCA",
          "GBH",
          "GBD",
          "GBA",
          "BSH",
          "BSD",
          "BSA",
          "name"
        ],
        "ddl": "create table league_match( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real, name text)"
      }
    },
    "old_new_table_mapping": {
      "league": "league_match",
      "match": "league_match"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT MAX(home_team_goal) FROM league_match WHERE name = 'Netherlands Eredivisie'"
  },
  {
    "train_idx": 1144,
    "db_id": "european_football_2",
    "question": "Please state the finishing rate and curve score of the player who has the heaviest weight.",
    "query": "SELECT id, finishing, curve FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 1 ) LIMIT 1",
    "relevant_table": {
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      },
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_fifa_api_id",
          "player_api_id",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes",
          "player_name",
          "birthday",
          "height",
          "weight"
        ],
        "ddl": "create table player_merged( id integer, player_fifa_api_id integer, player_api_id integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer, player_name text, birthday text, height integer, weight integer)"
      }
    },
    "old_new_table_mapping": {
      "player_attributes": "player_merged",
      "player": "player_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT id, finishing, curve FROM player_merged WHERE player_api_id = ( SELECT player_api_id FROM player_merged ORDER BY weight DESC LIMIT 1 ) LIMIT 1"
  },
  {
    "train_idx": 1145,
    "db_id": "european_football_2",
    "question": "Which top 4 leagues had the most games in the 2015-2016 season?",
    "query": "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2015/2016' GROUP BY t1.name ORDER BY COUNT(t2.id) DESC LIMIT 4",
    "relevant_table": {
      "league": {
        "ddl": "create table league( id integer primary key, foreign key(country_id) references Country(id) integer, name text)"
      },
      "match": {
        "ddl": "create table match( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      }
    },
    "new_relevant_table": {
      "league_match": {
        "columns": [
          "id",
          "country_id",
          "league_id",
          "season",
          "stage",
          "date",
          "match_api_id",
          "home_team_api_id",
          "away_team_api_id",
          "home_team_goal",
          "away_team_goal",
          "home_player_X1",
          "home_player_X2",
          "home_player_X3",
          "home_player_X4",
          "home_player_X5",
          "home_player_X6",
          "home_player_X7",
          "home_player_X8",
          "home_player_X9",
          "home_player_X10",
          "home_player_X11",
          "away_player_X1",
          "away_player_X2",
          "away_player_X3",
          "away_player_X4",
          "away_player_X5",
          "away_player_X6",
          "away_player_X7",
          "away_player_X8",
          "away_player_X9",
          "away_player_X10",
          "away_player_X11",
          "home_player_Y1",
          "home_player_Y2",
          "home_player_Y3",
          "home_player_Y4",
          "home_player_Y5",
          "home_player_Y6",
          "home_player_Y7",
          "home_player_Y8",
          "home_player_Y9",
          "home_player_Y10",
          "home_player_Y11",
          "away_player_Y1",
          "away_player_Y2",
          "away_player_Y3",
          "away_player_Y4",
          "away_player_Y5",
          "away_player_Y6",
          "away_player_Y7",
          "away_player_Y8",
          "away_player_Y9",
          "away_player_Y10",
          "away_player_Y11",
          "home_player_1",
          "home_player_2",
          "home_player_3",
          "home_player_4",
          "home_player_5",
          "home_player_6",
          "home_player_7",
          "home_player_8",
          "home_player_9",
          "home_player_10",
          "home_player_11",
          "away_player_1",
          "away_player_2",
          "away_player_3",
          "away_player_4",
          "away_player_5",
          "away_player_6",
          "away_player_7",
          "away_player_8",
          "away_player_9",
          "away_player_10",
          "away_player_11",
          "goal",
          "shoton",
          "shotoff",
          "foulcommit",
          "card",
          "cross",
          "corner",
          "possession",
          "B365H",
          "B365D",
          "B365A",
          "BWH",
          "BWD",
          "BWA",
          "IWH",
          "IWD",
          "IWA",
          "LBH",
          "LBD",
          "LBA",
          "PSH",
          "PSD",
          "PSA",
          "WHH",
          "WHD",
          "WHA",
          "SJH",
          "SJD",
          "SJA",
          "VCH",
          "VCD",
          "VCA",
          "GBH",
          "GBD",
          "GBA",
          "BSH",
          "BSD",
          "BSA",
          "league_name"
        ],
        "ddl": "create table league_match( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      }
    },
    "old_new_table_mapping": {
      "match": "league_match",
      "league": "league_match"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT league_name FROM league_match WHERE season = '2015/2016' GROUP BY league_name ORDER BY COUNT(id) DESC LIMIT 4"
  },
  {
    "train_idx": 1146,
    "db_id": "european_football_2",
    "question": "Please provide the full name of the away team that scored the most goals.",
    "query": "SELECT t2.team_long_name FROM Match AS t1 INNER JOIN Team AS t2 ON t1.away_team_api_id = t2.team_api_id ORDER BY t1.away_team_goal DESC LIMIT 1",
    "relevant_table": {
      "match": {
        "ddl": "create table match( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, foreign key(home_team_api_id) references Team(team_api_id) integer, foreign key(away_team_api_id) references Team(team_api_id) integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, foreign key(home_player_1) references Player(player_api_id) integer, foreign key(home_player_2) references Player(player_api_id) integer, foreign key(home_player_3) references Player(player_api_id) integer, foreign key(home_player_4) references Player(player_api_id) integer, foreign key(home_player_5) references Player(player_api_id) integer, foreign key(home_player_6) references Player(player_api_id) integer, foreign key(home_player_7) references Player(player_api_id) integer, foreign key(home_player_8) references Player(player_api_id) integer, foreign key(home_player_9) references Player(player_api_id) integer, foreign key(home_player_10) references Player(player_api_id) integer, foreign key(home_player_11) references Player(player_api_id) integer, foreign key(away_player_1) references Player(player_api_id) integer, foreign key(away_player_2) references Player(player_api_id) integer, foreign key(away_player_3) references Player(player_api_id) integer, foreign key(away_player_4) references Player(player_api_id) integer, foreign key(away_player_5) references Player(player_api_id) integer, foreign key(away_player_6) references Player(player_api_id) integer, foreign key(away_player_7) references Player(player_api_id) integer, foreign key(away_player_8) references Player(player_api_id) integer, foreign key(away_player_9) references Player(player_api_id) integer, foreign key(away_player_10) references Player(player_api_id) integer, foreign key(away_player_11) references Player(player_api_id) integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real)"
      },
      "team": {
        "ddl": "create table team( id integer primary key, team_api_id integer, team_fifa_api_id integer, team_long_name text, team_short_name text)"
      }
    },
    "new_relevant_table": {
      "MatchTeam": {
        "columns": [
          "id",
          "country_id",
          "league_id",
          "season",
          "stage",
          "date",
          "match_api_id",
          "home_team_api_id",
          "away_team_api_id",
          "home_team_goal",
          "away_team_goal",
          "home_player_X1",
          "home_player_X2",
          "home_player_X3",
          "home_player_X4",
          "home_player_X5",
          "home_player_X6",
          "home_player_X7",
          "home_player_X8",
          "home_player_X9",
          "home_player_X10",
          "home_player_X11",
          "away_player_X1",
          "away_player_X2",
          "away_player_X3",
          "away_player_X4",
          "away_player_X5",
          "away_player_X6",
          "away_player_X7",
          "away_player_X8",
          "away_player_X9",
          "away_player_X10",
          "away_player_X11",
          "home_player_Y1",
          "home_player_Y2",
          "home_player_Y3",
          "home_player_Y4",
          "home_player_Y5",
          "home_player_Y6",
          "home_player_Y7",
          "home_player_Y8",
          "home_player_Y9",
          "home_player_Y10",
          "home_player_Y11",
          "away_player_Y1",
          "away_player_Y2",
          "away_player_Y3",
          "away_player_Y4",
          "away_player_Y5",
          "away_player_Y6",
          "away_player_Y7",
          "away_player_Y8",
          "away_player_Y9",
          "away_player_Y10",
          "away_player_Y11",
          "goal",
          "shoton",
          "shotoff",
          "foulcommit",
          "card",
          "cross",
          "corner",
          "possession",
          "B365H",
          "B365D",
          "B365A",
          "BWH",
          "BWD",
          "BWA",
          "IWH",
          "IWD",
          "IWA",
          "LBH",
          "LBD",
          "LBA",
          "PSH",
          "PSD",
          "PSA",
          "WHH",
          "WHD",
          "WHA",
          "SJH",
          "SJD",
          "SJA",
          "VCH",
          "VCD",
          "VCA",
          "GBH",
          "GBD",
          "GBA",
          "BSH",
          "BSD",
          "BSA",
          "team_api_id_team",
          "team_fifa_api_id",
          "team_long_name",
          "team_short_name"
        ],
        "ddl": "create table MatchTeam( id integer primary key, country_id integer, league_id integer, season text, stage integer, date text, match_api_id integer, home_team_goal integer, away_team_goal integer, home_player_X1 integer, home_player_X2 integer, home_player_X3 integer, home_player_X4 integer, home_player_X5 integer, home_player_X6 integer, home_player_X7 integer, home_player_X8 integer, home_player_X9 integer, home_player_X10 integer, home_player_X11 integer, away_player_X1 integer, away_player_X2 integer, away_player_X3 integer, away_player_X4 integer, away_player_X5 integer, away_player_X6 integer, away_player_X7 integer, away_player_X8 integer, away_player_X9 integer, away_player_X10 integer, away_player_X11 integer, home_player_Y1 integer, home_player_Y2 integer, home_player_Y3 integer, home_player_Y4 integer, home_player_Y5 integer, home_player_Y6 integer, home_player_Y7 integer, home_player_Y8 integer, home_player_Y9 integer, home_player_Y10 integer, home_player_Y11 integer, away_player_Y1 integer, away_player_Y2 integer, away_player_Y3 integer, away_player_Y4 integer, away_player_Y5 integer, away_player_Y6 integer, away_player_Y7 integer, away_player_Y8 integer, away_player_Y9 integer, away_player_Y10 integer, away_player_Y11 integer, goal text, shoton text, shotoff text, foulcommit text, card text, cross text, corner text, possession text, B365H real, B365D real, B365A real, BWH real, BWD real, BWA real, IWH real, IWD real, IWA real, LBH real, LBD real, LBA real, PSH real, PSD real, PSA real, WHH real, WHD real, WHA real, SJH real, SJD real, SJA real, VCH real, VCD real, VCA real, GBH real, GBD real, GBA real, BSH real, BSD real, BSA real, team_fifa_api_id integer, team_long_name text, team_short_name text)"
      }
    },
    "old_new_table_mapping": {
      "match": "MatchTeam",
      "team": "MatchTeam"
    },
    "new_table_primary_key": "id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT team_long_name FROM MatchTeam ORDER BY away_team_goal DESC LIMIT 1"
  },
  {
    "train_idx": 1147,
    "db_id": "european_football_2",
    "question": "Please name one player whose overall strength is the greatest.",
    "query": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes)",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_combined": {
        "columns": [
          "id",
          "player_fifa_api_id",
          "player_api_id",
          "player_name",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_combined( id integer, player_fifa_api_id integer, player_api_id integer, player_name text, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player_attributes": "player_combined",
      "player": "player_combined"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT t1.player_name FROM player_combined AS t1 WHERE t1.overall_rating = ( SELECT MAX(overall_rating) FROM player_combined)"
  },
  {
    "train_idx": 1148,
    "db_id": "european_football_2",
    "question": "What is the percentage of players that are under 180 cm who have an overall strength of more than 70?",
    "query": "SELECT CAST(COUNT(CASE WHEN t2.overall_rating > 70 THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height < 180",
    "relevant_table": {
      "player": {
        "ddl": "create table player( id integer primary key, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer)"
      },
      "player_attributes": {
        "ddl": "create table player_attributes( id integer primary key, foreign key(player_fifa_api_id) references Player(player_fifa_api_id) integer, foreign key(player_api_id) references Player(player_api_id) integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "new_relevant_table": {
      "player_merged": {
        "columns": [
          "id",
          "player_api_id",
          "player_name",
          "player_fifa_api_id",
          "birthday",
          "height",
          "weight",
          "date",
          "overall_rating",
          "potential",
          "preferred_foot",
          "attacking_work_rate",
          "defensive_work_rate",
          "crossing",
          "finishing",
          "heading_accuracy",
          "short_passing",
          "volleys",
          "dribbling",
          "curve",
          "free_kick_accuracy",
          "long_passing",
          "ball_control",
          "acceleration",
          "sprint_speed",
          "agility",
          "reactions",
          "balance",
          "shot_power",
          "jumping",
          "stamina",
          "strength",
          "long_shots",
          "aggression",
          "interceptions",
          "positioning",
          "vision",
          "penalties",
          "marking",
          "standing_tackle",
          "sliding_tackle",
          "gk_diving",
          "gk_handling",
          "gk_kicking",
          "gk_positioning",
          "gk_reflexes"
        ],
        "ddl": "create table player_merged( id integer, player_api_id integer, player_name text, player_fifa_api_id integer, birthday text, height integer, weight integer, date text, overall_rating integer, potential integer, preferred_foot text, attacking_work_rate text, defensive_work_rate text, crossing integer, finishing integer, heading_accuracy integer, short_passing integer, volleys integer, dribbling integer, curve integer, free_kick_accuracy integer, long_passing integer, ball_control integer, acceleration integer, sprint_speed integer, agility integer, reactions integer, balance integer, shot_power integer, jumping integer, stamina integer, strength integer, long_shots integer, aggression integer, interceptions integer, positioning integer, vision integer, penalties integer, marking integer, standing_tackle integer, sliding_tackle integer, gk_diving integer, gk_handling integer, gk_kicking integer, gk_positioning integer, gk_reflexes integer)"
      }
    },
    "old_new_table_mapping": {
      "player": "player_merged",
      "player_attributes": "player_merged"
    },
    "new_table_primary_key": "'id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(COUNT(CASE WHEN overall_rating > 70 THEN id ELSE NULL END) AS REAL) * 100 / COUNT(id) percent FROM player_merged WHERE height < 180"
  },
  {
    "train_idx": 1153,
    "db_id": "thrombosis_prediction",
    "question": "What is the disease patient '30609' diagnosed with. List all the date of laboratory tests done for this patient.",
    "query": "SELECT T1.Diagnosis, T2.Date FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 30609",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Diagnosis, Date FROM Patient_Laboratory WHERE ID = 30609"
  },
  {
    "train_idx": 1154,
    "db_id": "thrombosis_prediction",
    "question": "State the sex and birthday of patient ID '163109'. When was the examination taken and what symptom does the patient had.",
    "query": "SELECT T1.SEX, T1.Birthday, T2.`Examination Date`, T2.Symptoms FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID = 163109",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "examination": {
        "ddl": "create table examination( foreign key(ID) references Patient(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Examination": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis_Patient",
          "foreign key(ID) references Patient(ID)",
          "Examination Date",
          "aCL IgG",
          "aCL IgM",
          "ANA",
          "ANA Pattern",
          "aCL IgA",
          "Diagnosis_Examination",
          "KCT",
          "RVVT",
          "LAC",
          "Symptoms",
          "Thrombosis"
        ],
        "ddl": "create table Patient_Examination( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis_Patient text, foreign key(ID) references Patient(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis_Examination text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "old_new_table_mapping": {
      "examination": "Patient_Examination",
      "patient": "Patient_Examination"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "Diagnosis_Patient": {
        "old_table": "Patient",
        "old_column": "Diagnosis"
      },
      "Diagnosis_Examination": {
        "old_table": "Examination",
        "old_column": "Diagnosis"
      }
    },
    "new_gold_sql": "SELECT SEX, Birthday, `Examination Date`, Symptoms FROM Patient_Examination WHERE ID = 163109"
  },
  {
    "train_idx": 1155,
    "db_id": "thrombosis_prediction",
    "question": "List the patient ID, sex and birthday of patient with LDH beyond normal range.",
    "query": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 500",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT ID, SEX, Birthday FROM Patient_Laboratory WHERE LDH > 500"
  },
  {
    "train_idx": 1156,
    "db_id": "thrombosis_prediction",
    "question": "State the ID and age of patient with positive degree of coagulation.",
    "query": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.RVVT = '+'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "examination": {
        "ddl": "create table examination( foreign key(ID) references Patient(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "new_relevant_table": {
      "patient_examination": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis_patient",
          "Examination Date",
          "aCL IgG",
          "aCL IgM",
          "ANA",
          "ANA Pattern",
          "aCL IgA",
          "Diagnosis_examination",
          "KCT",
          "RVVT",
          "LAC",
          "Symptoms",
          "Thrombosis"
        ],
        "ddl": "create table patient_examination( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis_patient text, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis_examination text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "patient_examination",
      "examination": "patient_examination"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "Diagnosis_patient": {
        "old_table": "patient",
        "old_column": "Diagnosis"
      },
      "Diagnosis_examination": {
        "old_table": "examination",
        "old_column": "Diagnosis"
      }
    },
    "new_gold_sql": "SELECT DISTINCT ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', Birthday) FROM patient_examination WHERE RVVT = '+'"
  },
  {
    "train_idx": 1157,
    "db_id": "thrombosis_prediction",
    "question": "For patients with severe degree of thrombosis, list their ID, sex and disease the patient is diagnosed with.",
    "query": "SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 2",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "examination": {
        "ddl": "create table examination( foreign key(ID) references Patient(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Examination": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis_Patient",
          "Examination Date",
          "aCL IgG",
          "aCL IgM",
          "ANA",
          "ANA Pattern",
          "aCL IgA",
          "Diagnosis_Examination",
          "KCT",
          "RVVT",
          "LAC",
          "Symptoms",
          "Thrombosis"
        ],
        "ddl": "create table Patient_Examination( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis_Patient text, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis_Examination text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "old_new_table_mapping": {
      "examination": "Patient_Examination",
      "patient": "Patient_Examination"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "Diagnosis_Patient": {
        "old_table": "Patient",
        "old_column": "Diagnosis"
      },
      "Diagnosis_Examination": {
        "old_table": "Examination",
        "old_column": "Diagnosis"
      }
    },
    "new_gold_sql": "SELECT DISTINCT ID, SEX, Diagnosis_Patient FROM Patient_Examination WHERE Thrombosis = 2"
  },
  {
    "train_idx": 1158,
    "db_id": "thrombosis_prediction",
    "question": "List all patients who were born in 1937 whose total cholesterol was beyond the normal range.",
    "query": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) = '1937' AND T2.`T-CHO` >= 250",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT ID FROM Patient_Laboratory WHERE STRFTIME('%Y', Birthday) = '1937' AND `T-CHO` >= 250"
  },
  {
    "train_idx": 1159,
    "db_id": "thrombosis_prediction",
    "question": "For patient with albumin level lower than 3.5, list their ID, sex and diagnosis.",
    "query": "SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALB < 3.5",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT ID, SEX, Diagnosis FROM Patient_Laboratory WHERE ALB < 3.5"
  },
  {
    "train_idx": 1160,
    "db_id": "thrombosis_prediction",
    "question": "What is the percentage of female patient had total protein not within the normal range?",
    "query": "SELECT CAST(SUM(CASE WHEN T1.SEX = 'F' AND (T2.TP < 6.0 OR T2.TP > 8.5) THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(CASE WHEN SEX = 'F' AND (TP < 60 OR TP > 85) THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient_Laboratory WHERE SEX = 'F'"
  },
  {
    "train_idx": 1161,
    "db_id": "thrombosis_prediction",
    "question": "For in-patient age 50 and above, what is their average anti-cardiolipin antibody (IgG) concentration?",
    "query": "SELECT AVG(T2.`aCL IgG`) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) >= 50 AND T1.Admission = '+'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "examination": {
        "ddl": "create table examination( foreign key(ID) references Patient(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Examination": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis_Patient",
          "foreign key(ID) references Patient(ID)",
          "Examination Date",
          "aCL IgG",
          "aCL IgM",
          "ANA",
          "ANA Pattern",
          "aCL IgA",
          "Diagnosis_Examination",
          "KCT",
          "RVVT",
          "LAC",
          "Symptoms",
          "Thrombosis"
        ],
        "ddl": "create table Patient_Examination( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis_Patient text, foreign key(ID) references Patient(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis_Examination text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "old_new_table_mapping": {
      "examination": "Patient_Examination",
      "patient": "Patient_Examination"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "Diagnosis_Patient": {
        "old_table": "Patient",
        "old_column": "Diagnosis"
      },
      "Diagnosis_Examination": {
        "old_table": "Examination",
        "old_column": "Diagnosis"
      }
    },
    "new_gold_sql": "SELECT AVG(`aCL IgG`) FROM Patient_Examination WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', Birthday) >= 50 AND Admission = '+'"
  },
  {
    "train_idx": 1164,
    "db_id": "thrombosis_prediction",
    "question": "How many of the patients with the most serious thrombosis cases examined in 1997 are women?",
    "query": "SELECT  COUNT(*) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND STRFTIME('%Y', T2.`Examination Date`) = '1997' AND T2.Thrombosis = 1",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "examination": {
        "ddl": "create table examination( foreign key(ID) references Patient(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Examination": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis_Patient",
          "foreign key(ID) references Patient(ID)",
          "Examination Date",
          "aCL IgG",
          "aCL IgM",
          "ANA",
          "ANA Pattern",
          "aCL IgA",
          "Diagnosis_Examination",
          "KCT",
          "RVVT",
          "LAC",
          "Symptoms",
          "Thrombosis"
        ],
        "ddl": "create table Patient_Examination( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis_Patient text, foreign key(ID) references Patient(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis_Examination text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "old_new_table_mapping": {
      "examination": "Patient_Examination",
      "patient": "Patient_Examination"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "Diagnosis_Patient": {
        "old_table": "Patient",
        "old_column": "Diagnosis"
      },
      "Diagnosis_Examination": {
        "old_table": "Examination",
        "old_column": "Diagnosis"
      }
    },
    "new_gold_sql": "SELECT COUNT(*) FROM Patient_Examination WHERE SEX = 'F' AND STRFTIME('%Y', `Examination Date`) = '1997' AND Thrombosis = 1"
  },
  {
    "train_idx": 1165,
    "db_id": "thrombosis_prediction",
    "question": "What is the age gap between the youngest and oldest patient with a normal triglyceride recorded?",
    "query": "SELECT STRFTIME('%Y', MAX(T1.Birthday)) - STRFTIME('%Y', MIN(T1.Birthday)) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT STRFTIME('%Y', MAX(Birthday)) - STRFTIME('%Y', MIN(Birthday)) FROM Patient_Laboratory WHERE TG >= 200"
  },
  {
    "train_idx": 1166,
    "db_id": "thrombosis_prediction",
    "question": "What are the symptoms observed by the youngest patient to ever did a medical examination? Identify their diagnosis.",
    "query": "SELECT T2.Symptoms, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Symptoms IS NOT NULL ORDER BY T1.Birthday DESC LIMIT 1",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "examination": {
        "ddl": "create table examination( foreign key(ID) references Patient(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Examination": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis_Patient",
          "Examination Date",
          "aCL IgG",
          "aCL IgM",
          "ANA",
          "ANA Pattern",
          "aCL IgA",
          "Diagnosis_Examination",
          "KCT",
          "RVVT",
          "LAC",
          "Symptoms",
          "Thrombosis"
        ],
        "ddl": "create table Patient_Examination( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis_Patient text, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis_Examination text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Examination",
      "examination": "Patient_Examination"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "Diagnosis_Patient": {
        "old_table": "Patient",
        "old_column": "Diagnosis"
      },
      "Diagnosis_Examination": {
        "old_table": "Examination",
        "old_column": "Diagnosis"
      }
    },
    "new_gold_sql": "SELECT Symptoms, Diagnosis_Patient FROM Patient_Examination WHERE Symptoms IS NOT NULL ORDER BY Birthday DESC LIMIT 1"
  },
  {
    "train_idx": 1167,
    "db_id": "thrombosis_prediction",
    "question": "For the year that concluded on December 31, 1998, how many male patients on average were tested in the lab each month?",
    "query": "SELECT CAST(COUNT(T1.ID) AS REAL) / 12 FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.Date) = '1998' AND T1.SEX = 'M'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(COUNT(ID) AS REAL) / 12 FROM Patient_Laboratory WHERE STRFTIME('%Y', Date) = '1998' AND SEX = 'M'"
  },
  {
    "train_idx": 1168,
    "db_id": "thrombosis_prediction",
    "question": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?",
    "query": "SELECT T1.Date, STRFTIME('%Y', T2.`First Date`) - STRFTIME('%Y', T2.Birthday),T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SJS' AND T2.Birthday IS NOT NULL ORDER BY T2.Birthday ASC LIMIT 1",
    "relevant_table": {
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      },
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      }
    },
    "new_relevant_table": {
      "PatientLabData": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table PatientLabData( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "PatientLabData",
      "patient": "PatientLabData"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Date, STRFTIME('%Y', `First Date`) - STRFTIME('%Y', Birthday), Birthday FROM PatientLabData WHERE Diagnosis = 'SJS' AND Birthday IS NOT NULL ORDER BY Birthday ASC LIMIT 1"
  },
  {
    "train_idx": 1169,
    "db_id": "thrombosis_prediction",
    "question": "What is the ratio of male to female patients among all those with abnormal uric acid counts?",
    "query": "SELECT CAST(SUM(CASE WHEN T2.UA <= 8.0 AND T1.SEX = 'M' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.UA <= 6.5 AND T1.SEX = 'F' THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(CASE WHEN Patient_LaboratoryUA <= 80 AND Patient_LaboratorySEX = 'M' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN Patient_LaboratoryUA <= 65 AND Patient_LaboratorySEX = 'F' THEN 1 ELSE 0 END) FROM Patient_Laboratory"
  },
  {
    "train_idx": 1170,
    "db_id": "thrombosis_prediction",
    "question": "How many patients hadn't undergone a medical examination until at least a year following their initial hospital visit?",
    "query": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND STRFTIME('%Y', T2.`Examination Date`) - STRFTIME('%Y', T1.`First Date`) >= 1",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "examination": {
        "ddl": "create table examination( foreign key(ID) references Patient(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Examination": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis_Patient",
          "foreign key(ID) references Patient(ID)",
          "Examination Date",
          "aCL IgG",
          "aCL IgM",
          "ANA",
          "ANA Pattern",
          "aCL IgA",
          "Diagnosis_Examination",
          "KCT",
          "RVVT",
          "LAC",
          "Symptoms",
          "Thrombosis"
        ],
        "ddl": "create table Patient_Examination( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis_Patient text, foreign key(ID) references Patient(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis_Examination text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "old_new_table_mapping": {
      "examination": "Patient_Examination",
      "patient": "Patient_Examination"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "Diagnosis_Patient": {
        "old_table": "Patient",
        "old_column": "Diagnosis"
      },
      "Diagnosis_Examination": {
        "old_table": "Examination",
        "old_column": "Diagnosis"
      }
    },
    "new_gold_sql": "SELECT COUNT(DISTINCT ID) FROM Patient_Examination WHERE Admission = '+' AND STRFTIME('%Y', `Examination Date`) - STRFTIME('%Y', `First Date`) >= 1"
  },
  {
    "train_idx": 1171,
    "db_id": "thrombosis_prediction",
    "question": "How many underage patients were examined during the course of the three-year period from 1990 to 1993?",
    "query": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.`Examination Date`) BETWEEN '1990' AND '1993' AND STRFTIME('%Y', T2.`Examination Date`) - STRFTIME('%Y', T1.Birthday) < 18",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "examination": {
        "ddl": "create table examination( foreign key(ID) references Patient(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "new_relevant_table": {
      "patient_examination": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis_patient",
          "Examination Date",
          "aCL IgG",
          "aCL IgM",
          "ANA",
          "ANA Pattern",
          "aCL IgA",
          "Diagnosis_examination",
          "KCT",
          "RVVT",
          "LAC",
          "Symptoms",
          "Thrombosis"
        ],
        "ddl": "create table patient_examination( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis_patient text, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis_examination text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "patient_examination",
      "examination": "patient_examination"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "Diagnosis_patient": {
        "old_table": "patient",
        "old_column": "Diagnosis"
      },
      "Diagnosis_examination": {
        "old_table": "examination",
        "old_column": "Diagnosis"
      }
    },
    "new_gold_sql": "SELECT COUNT(ID) FROM patient_examination WHERE STRFTIME('%Y', `Examination Date`) BETWEEN '1990' AND '1993' AND STRFTIME('%Y', `Examination Date`) - STRFTIME('%Y', Birthday) < 18"
  },
  {
    "train_idx": 1172,
    "db_id": "thrombosis_prediction",
    "question": "How many male patients have elevated total bilirubin count?",
    "query": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` >= 2.0 AND T1.SEX = 'M'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(DISTINCT ID) FROM Patient_Laboratory WHERE `T-BIL` >= 20 AND SEX = 'M'"
  },
  {
    "train_idx": 1173,
    "db_id": "thrombosis_prediction",
    "question": "What is the most common illness that doctors identified among the patients whose lab work was done between 1/1/1985, and 12/31/1995?",
    "query": "SELECT T2.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY T2.Diagnosis ORDER BY COUNT(T2.Diagnosis) DESC LIMIT 1",
    "relevant_table": {
      "examination": {
        "ddl": "create table examination( foreign key(ID) references Patient(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      },
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      }
    },
    "new_relevant_table": {
      "patient_examination": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis_patient",
          "Examination Date",
          "aCL IgG",
          "aCL IgM",
          "ANA",
          "ANA Pattern",
          "aCL IgA",
          "Diagnosis_examination",
          "KCT",
          "RVVT",
          "LAC",
          "Symptoms",
          "Thrombosis"
        ],
        "ddl": "create table patient_examination( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis_patient text, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis_examination text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "patient_examination",
      "examination": "patient_examination"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "Diagnosis_patient": {
        "old_table": "Patient",
        "old_column": "Diagnosis"
      },
      "Diagnosis_examination": {
        "old_table": "Examination",
        "old_column": "Diagnosis"
      }
    },
    "new_gold_sql": "SELECT Diagnosis_patient FROM patient_examination WHERE `Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY Diagnosis_patient ORDER BY COUNT(Diagnosis_patient) DESC LIMIT 1"
  },
  {
    "train_idx": 1174,
    "db_id": "thrombosis_prediction",
    "question": "What is the average age of patients as of year 1999 examined in the laboratory for the October of the year 1991?",
    "query": "SELECT AVG('1999'  - STRFTIME('%Y', T2.Birthday)) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Date BETWEEN '1991-10-01' AND '1991-10-30'",
    "relevant_table": {
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      },
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT AVG('1999' - STRFTIME('%Y', Patient_LaboratoryBirthday)) FROM Patient_Laboratory WHERE Patient_LaboratoryDate BETWEEN '1991-10-01' AND '1991-10-30'"
  },
  {
    "train_idx": 1175,
    "db_id": "thrombosis_prediction",
    "question": "How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis?",
    "query": "SELECT STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday), T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.HGB DESC LIMIT 1",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT STRFTIME('%Y', Patient_Laboratory.Date) - STRFTIME('%Y', Patient_Laboratory.Birthday), Patient_Laboratory.Diagnosis FROM Patient_Laboratory ORDER BY Patient_Laboratory.HGB DESC LIMIT 1"
  },
  {
    "train_idx": 1179,
    "db_id": "thrombosis_prediction",
    "question": "For the patient who was diagnosed with SLE on 1994/2/19, what was his/her anti-Cardiolipin antibody concentration status on 1993/11/12?",
    "query": "SELECT `aCL IgA`, `aCL IgG`, `aCL IgM` FROM Examination WHERE ID IN ( SELECT ID FROM Patient WHERE Diagnosis = 'SLE' AND Description = '1994-02-19' ) AND `Examination Date` = '1993-11-12'",
    "relevant_table": {
      "examination": {
        "ddl": "create table examination( foreign key(ID) references Patient(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      },
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      }
    },
    "new_relevant_table": {
      "patient_examination": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis_patient",
          "Examination Date",
          "aCL IgG",
          "aCL IgM",
          "ANA",
          "ANA Pattern",
          "aCL IgA",
          "Diagnosis_examination",
          "KCT",
          "RVVT",
          "LAC",
          "Symptoms",
          "Thrombosis"
        ],
        "ddl": "create table patient_examination( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis_patient text, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis_examination text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "patient_examination",
      "examination": "patient_examination"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "Diagnosis_patient": {
        "old_table": "patient",
        "old_column": "Diagnosis"
      },
      "Diagnosis_examination": {
        "old_table": "examination",
        "old_column": "Diagnosis"
      }
    },
    "new_gold_sql": "SELECT `aCL IgA`, `aCL IgG`, `aCL IgM` FROM patient_examination WHERE ID IN ( SELECT ID FROM patient_examination WHERE Diagnosis_patient = 'SLE' AND Description = '1994-02-19' ) AND `Examination Date` = '1993-11-12'"
  },
  {
    "train_idx": 1180,
    "db_id": "thrombosis_prediction",
    "question": "Was the patient a man or a women whose ALT glutamic pylvic transaminase status got 9 on 1992-6-12?",
    "query": "SELECT T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT = 9.0 AND T2.Date = '1992-06-12'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT SEX FROM Patient_Laboratory WHERE GPT = 9.0 AND Date = '1992-06-12'"
  },
  {
    "train_idx": 1181,
    "db_id": "thrombosis_prediction",
    "question": "For the patient who got the laboratory test of uric acid level as 8.4 on 1991-10-21, how old was he/she at that time?",
    "query": "SELECT STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UA = 8.4 AND T2.Date = '1991-10-21'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT STRFTIME('%Y', Patient_LaboratoryDate) - STRFTIME('%Y', Patient_LaboratoryBirthday) FROM Patient_Laboratory WHERE Patient_LaboratoryUA = 84 AND Patient_LaboratoryDate = '1991-10-21'"
  },
  {
    "train_idx": 1182,
    "db_id": "thrombosis_prediction",
    "question": "For the patient who first came to the hospital on 1991/6/13 who was diagnosed with SJS, what is the total number of his/her Laboratory tests in 1995?",
    "query": "SELECT COUNT(*) FROM Laboratory WHERE ID = ( SELECT ID FROM Patient WHERE `First Date` = '1991-06-13' AND Diagnosis = 'SJS' ) AND STRFTIME('%Y', Date) = '1995'",
    "relevant_table": {
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      },
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      }
    },
    "new_relevant_table": {
      "patient_laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table patient_laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "patient_laboratory",
      "laboratory": "patient_laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(*) FROM patient_laboratory WHERE `First Date` = '1991-06-13' AND Diagnosis = 'SJS' AND STRFTIME('%Y', Date) = '1995'"
  },
  {
    "train_idx": 1183,
    "db_id": "thrombosis_prediction",
    "question": "For the patient who was diagnosed SLE on 1997/1/27, what was his/her original diagnose when he/she came to the hospital for the first time?",
    "query": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID = ( SELECT ID FROM Examination WHERE `Examination Date` = '1997-01-27' AND Diagnosis = 'SLE' ) AND T2.`Examination Date` = T1.`First Date`",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "examination": {
        "ddl": "create table examination( foreign key(ID) references Patient(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Examination": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis_Patient",
          "foreign key(ID) references Patient(ID)",
          "Examination Date",
          "aCL IgG",
          "aCL IgM",
          "ANA",
          "ANA Pattern",
          "aCL IgA",
          "Diagnosis_Examination",
          "KCT",
          "RVVT",
          "LAC",
          "Symptoms",
          "Thrombosis"
        ],
        "ddl": "create table Patient_Examination( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis_Patient text, foreign key(ID) references Patient(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis_Examination text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "old_new_table_mapping": {
      "examination": "Patient_Examination",
      "patient": "Patient_Examination"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "Diagnosis_Patient": {
        "old_table": "Patient",
        "old_column": "Diagnosis"
      },
      "Diagnosis_Examination": {
        "old_table": "Examination",
        "old_column": "Diagnosis"
      }
    },
    "new_gold_sql": "SELECT T1.Diagnosis_Patient FROM Patient_Examination AS T1 WHERE T1.ID = ( SELECT ID FROM Patient_Examination WHERE `Examination Date` = '1997-01-27' AND Diagnosis_Examination = 'SLE' ) AND `Examination Date` = T1.`First Date`"
  },
  {
    "train_idx": 1184,
    "db_id": "thrombosis_prediction",
    "question": "For the patient whose birthday was 1959/3/1, what symptoms did he/she have during the examination on 1993/9/27?",
    "query": "SELECT T2.Symptoms FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-03-01' AND T2.`Examination Date` = '1993-09-27'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "examination": {
        "ddl": "create table examination( foreign key(ID) references Patient(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Examination": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis_Patient",
          "Examination Date",
          "aCL IgG",
          "aCL IgM",
          "ANA",
          "ANA Pattern",
          "aCL IgA",
          "Diagnosis_Examination",
          "KCT",
          "RVVT",
          "LAC",
          "Symptoms",
          "Thrombosis"
        ],
        "ddl": "create table Patient_Examination( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis_Patient text, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis_Examination text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Examination",
      "examination": "Patient_Examination"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "Diagnosis_Patient": {
        "old_table": "Patient",
        "old_column": "Diagnosis"
      },
      "Diagnosis_Examination": {
        "old_table": "Examination",
        "old_column": "Diagnosis"
      }
    },
    "new_gold_sql": "SELECT Symptoms FROM Patient_Examination WHERE Birthday = '1959-03-01' AND `Examination Date` = '1993-09-27'"
  },
  {
    "train_idx": 1185,
    "db_id": "thrombosis_prediction",
    "question": "For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981?",
    "query": "SELECT CAST((SUM(CASE WHEN T2.Date LIKE '1981-11-%' THEN T2.`T-CHO` ELSE 0 END) - SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END)) AS REAL) / SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-02-18'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST((SUM(CASE WHEN Patient_LaboratoryDate LIKE '1981-11-%' THEN Patient_Laboratory`T-CHO` ELSE 0 END) - SUM(CASE WHEN Patient_LaboratoryDate LIKE '1981-12-%' THEN Patient_Laboratory`T-CHO` ELSE 0 END)) AS REAL) / SUM(CASE WHEN Patient_LaboratoryDate LIKE '1981-12-%' THEN Patient_Laboratory`T-CHO` ELSE 0 END) FROM Patient_Laboratory WHERE Patient_LaboratoryBirthday = '1959-02-18'"
  },
  {
    "train_idx": 1192,
    "db_id": "thrombosis_prediction",
    "question": "List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range.",
    "query": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.`T-BIL` < 2.0 AND T2.Date LIKE '1991-10-%'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT ID FROM Patient_Laboratory WHERE Admission = '-' AND `T-BIL` < 2.0 AND Date LIKE '1991-10-%'"
  },
  {
    "train_idx": 1193,
    "db_id": "thrombosis_prediction",
    "question": "Excluding all P only ANA Pattern patients, how many of the remainder are women born between 1980 and 1989?",
    "query": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.`ANA Pattern` != 'P' AND STRFTIME('%Y', T1.Birthday) BETWEEN '1980' AND '1989' AND T1.SEX = 'F'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "examination": {
        "ddl": "create table examination( foreign key(ID) references Patient(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Examination": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis_Patient",
          "foreign key(ID) references Patient(ID)",
          "Examination Date",
          "aCL IgG",
          "aCL IgM",
          "ANA",
          "ANA Pattern",
          "aCL IgA",
          "Diagnosis_Examination",
          "KCT",
          "RVVT",
          "LAC",
          "Symptoms",
          "Thrombosis"
        ],
        "ddl": "create table Patient_Examination( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis_Patient text, foreign key(ID) references Patient(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis_Examination text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "old_new_table_mapping": {
      "examination": "Patient_Examination",
      "patient": "Patient_Examination"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "Diagnosis_Patient": {
        "old_table": "Patient",
        "old_column": "Diagnosis"
      },
      "Diagnosis_Examination": {
        "old_table": "Examination",
        "old_column": "Diagnosis"
      }
    },
    "new_gold_sql": "SELECT COUNT(DISTINCT ID) FROM Patient_Examination WHERE `ANA Pattern` != 'P' AND STRFTIME('%Y', Birthday) BETWEEN '1980' AND '1989' AND SEX = 'F'"
  },
  {
    "train_idx": 1194,
    "db_id": "thrombosis_prediction",
    "question": "What sex is the patient who in a medical examination was diagnosed with PSS and in a laboratory examination had a blood level of C-reactive protein de 2+, createnine 1 and LDH 123?",
    "query": "SELECT T1.SEX FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T3.ID = T2.ID WHERE T2.Diagnosis = 'PSS' AND T3.CRP = '2+' AND T3.CRE = 1.0 AND T3.LDH = 123",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "examination": {
        "ddl": "create table examination( foreign key(ID) references Patient(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      },
      "examination": {
        "ddl": "create table examination( foreign key(ID) references Patient_Laboratory(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT SEX FROM Patient_Laboratory WHERE Diagnosis = 'PSS' AND CRP = '2+' AND CRE = 1.0 AND LDH = 123"
  },
  {
    "train_idx": 1195,
    "db_id": "thrombosis_prediction",
    "question": "What is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE?",
    "query": "SELECT AVG(T2.ALB) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT > 400 AND T1.Diagnosis = 'SLE' AND T1.SEX = 'F'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT AVG(ALB) FROM Patient_Laboratory WHERE PLT > 400 AND Diagnosis = 'SLE' AND SEX = 'F'"
  },
  {
    "train_idx": 1202,
    "db_id": "thrombosis_prediction",
    "question": "How many male patients who underwent testing between 1995 and 1997 and were subsequently diagnosed with Behcet disease did not stay in the hospital for treatment?",
    "query": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'Behcet' AND T1.SEX = 'M' AND STRFTIME('%Y', T2.`Examination Date`) BETWEEN '1995' AND '1997' AND T1.Admission = '-'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "examination": {
        "ddl": "create table examination( foreign key(ID) references Patient(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Examination": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis_Patient",
          "foreign key(ID) references Patient(ID)",
          "Examination Date",
          "aCL IgG",
          "aCL IgM",
          "ANA",
          "ANA Pattern",
          "aCL IgA",
          "Diagnosis_Examination",
          "KCT",
          "RVVT",
          "LAC",
          "Symptoms",
          "Thrombosis"
        ],
        "ddl": "create table Patient_Examination( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis_Patient text, foreign key(ID) references Patient(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis_Examination text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "old_new_table_mapping": {
      "examination": "Patient_Examination",
      "patient": "Patient_Examination"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "Diagnosis_Patient": {
        "old_table": "Patient",
        "old_column": "Diagnosis"
      },
      "Diagnosis_Examination": {
        "old_table": "Examination",
        "old_column": "Diagnosis"
      }
    },
    "new_gold_sql": "SELECT COUNT(ID) FROM Patient_Examination WHERE Diagnosis_Examination = 'Behcet' AND SEX = 'M' AND STRFTIME('%Y', `Examination Date`) BETWEEN '1995' AND '1997' AND Admission = '-'"
  },
  {
    "train_idx": 1203,
    "db_id": "thrombosis_prediction",
    "question": "How many patients who were female got white blood cells that were below 3.5?",
    "query": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC < 3.5 AND T1.SEX = 'F'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(ID) FROM Patient_Laboratory WHERE WBC < 3.5 AND SEX = 'F'"
  },
  {
    "train_idx": 1204,
    "db_id": "thrombosis_prediction",
    "question": "How long did it take after patient number 821298 arrived at the hospital for the first time before her evaluation began?",
    "query": "SELECT STRFTIME('%d', T3.`Examination Date`) - STRFTIME('%d', T1.`First Date`) FROM Patient AS T1 INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T1.ID = 821298",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "examination": {
        "ddl": "create table examination( foreign key(ID) references Patient(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Examination": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis_Patient",
          "Examination Date",
          "aCL IgG",
          "aCL IgM",
          "ANA",
          "ANA Pattern",
          "aCL IgA",
          "Diagnosis_Examination",
          "KCT",
          "RVVT",
          "LAC",
          "Symptoms",
          "Thrombosis"
        ],
        "ddl": "create table Patient_Examination( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis_Patient text, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis_Examination text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Examination",
      "examination": "Patient_Examination"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "Diagnosis_Patient": {
        "old_table": "Patient",
        "old_column": "Diagnosis"
      },
      "Diagnosis_Examination": {
        "old_table": "Examination",
        "old_column": "Diagnosis"
      }
    },
    "new_gold_sql": "SELECT STRFTIME('%d', Patient_Examination`Examination Date`) - STRFTIME('%d', Patient_Examination`First Date`) FROM Patient_Examination WHERE Patient_ExaminationID = 821298"
  },
  {
    "train_idx": 1205,
    "db_id": "thrombosis_prediction",
    "question": "Was the patient with the number 57266's uric acid within a normal range?",
    "query": "SELECT CASE WHEN (T1.SEX = 'F' AND T2.UA > 6.5) OR (T1.SEX = 'M' AND T2.UA > 8.0) THEN true ELSE false END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 57266",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CASE WHEN (SEX = 'F' AND UA > 65) OR (SEX = 'M' AND UA > 80) THEN true ELSE false END FROM Patient_Laboratory WHERE ID = 57266"
  },
  {
    "train_idx": 1207,
    "db_id": "thrombosis_prediction",
    "question": "List all patients with their sex and date of birthday, whose AST glutamic oxaloacetic transaminase (GOT) index is within normal range for loboratory examination in 1994.",
    "query": "SELECT DISTINCT T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND STRFTIME('%Y', T2.Date) = '1994'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT SEX, Birthday FROM Patient_Laboratory WHERE GOT < 60 AND STRFTIME('%Y', Date) = '1994'"
  },
  {
    "train_idx": 1208,
    "db_id": "thrombosis_prediction",
    "question": "Provide IDs for male patients with ALT glutamic pylvic transaminase (GPT) that have history of ALT glutamic pylvic transaminase (GPT) exceed the normal range.",
    "query": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GPT >= 60",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT ID FROM Patient_Laboratory WHERE SEX = 'M' AND GPT >= 60"
  },
  {
    "train_idx": 1209,
    "db_id": "thrombosis_prediction",
    "question": "Please provide the diagnosis of patients with ALT glutamic pylvic transaminase beyond the normal range by ascending order of their date of birth.",
    "query": "SELECT DISTINCT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT > 60 ORDER BY T1.Birthday ASC",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT Diagnosis FROM Patient_Laboratory WHERE GPT > 60 ORDER BY Birthday ASC"
  },
  {
    "train_idx": 1211,
    "db_id": "thrombosis_prediction",
    "question": "Provide the ID and age of patient with lactate dehydrogenase (LDH) between 100-300 index above the normal range.",
    "query": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 600 AND T2.LDH < 800",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', Birthday) FROM Patient_Laboratory WHERE LDH > 600 AND LDH < 800"
  },
  {
    "train_idx": 1212,
    "db_id": "thrombosis_prediction",
    "question": "For patients with alkaliphophatase (ALP) within normal range, were they treated as inpatient or outpatient?",
    "query": "SELECT T1.Admission FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP < 300",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Admission FROM Patient_Laboratory WHERE ALP < 300"
  },
  {
    "train_idx": 1213,
    "db_id": "thrombosis_prediction",
    "question": "Name the ID of the patient who is born on the April 1st, 1982. Is his/her alkaliphophatase (ALP) within normal range?",
    "query": "SELECT T1.ID , CASE WHEN T2.ALP < 300 THEN 'normal' ELSE 'abNormal' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1982-04-01'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT ID , CASE WHEN ALP < 300 THEN 'normal' ELSE 'abNormal' END FROM Patient_Laboratory WHERE Birthday = '1982-04-01'"
  },
  {
    "train_idx": 1214,
    "db_id": "thrombosis_prediction",
    "question": "List ID, sex and date of birth of patient whose total protein (TP) below the lower range of the normal index.",
    "query": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TP < 6.0",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "'ID'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT ID, SEX, Birthday FROM Patient_Laboratory WHERE TP < 6.0"
  },
  {
    "train_idx": 1215,
    "db_id": "thrombosis_prediction",
    "question": "For all female patient with total protein (TP) beyond the normal index, what is the deviation of their TP idex from the normal.",
    "query": "SELECT T2.TP - 8.5 FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.TP > 8.5",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT TP - 85 FROM Patient_Laboratory WHERE SEX = 'F' AND TP > 85"
  },
  {
    "train_idx": 1216,
    "db_id": "thrombosis_prediction",
    "question": "Sort in descending order all patients by birthday for male patient with albumin not within range.",
    "query": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND (T2.ALB <= 3.5 OR T2.ALB >= 5.5) ORDER BY T1.Birthday DESC",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT ID FROM Patient_Laboratory WHERE SEX = 'M' AND (ALB <= 3.5 OR ALB >= 5.5) ORDER BY Birthday DESC"
  },
  {
    "train_idx": 1217,
    "db_id": "thrombosis_prediction",
    "question": "For all patient born in 1982, state if their albumin is within normal range.",
    "query": "SELECT CASE WHEN T2.ALB >= 3.5 AND T2.ALB <= 5.5 THEN 'normal' ELSE 'abnormal' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) = '1982'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CASE WHEN ALB >= 35 AND ALB <= 55 THEN 'normal' ELSE 'abnormal' END FROM Patient_Laboratory WHERE STRFTIME('%Y', Birthday) = '1982'"
  },
  {
    "train_idx": 1218,
    "db_id": "thrombosis_prediction",
    "question": "What is the percentage of the female patient whose uric acid (UA) beyond the normal range?",
    "query": "SELECT CAST(SUM(CASE WHEN T2.UA > 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(CASE WHEN Patient_LaboratoryUA > 65 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Patient_LaboratoryID) FROM Patient_Laboratory WHERE Patient_LaboratorySEX = 'F'"
  },
  {
    "train_idx": 1219,
    "db_id": "thrombosis_prediction",
    "question": "For all patients with normal uric acid (UA), what is the average UA index based on their latest laboratory examination result?",
    "query": "SELECT AVG(T2.UA) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.UA < 6.5 AND T1.SEX = 'F') OR (T2.UA < 8.0 AND T1.SEX = 'M') AND T2.Date = ( SELECT MAX(Date) FROM Laboratory )",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT AVG(UA) FROM Patient_Laboratory WHERE ((UA < 6.5 AND SEX = 'F') OR (UA < 8.0 AND SEX = 'M')) AND Date = ( SELECT MAX(Date) FROM Patient_Laboratory )"
  },
  {
    "train_idx": 1220,
    "db_id": "thrombosis_prediction",
    "question": "Provide all ID, sex and birthday of patients whose urea nitrogen (UN) just within the borderline of passing?",
    "query": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN = 29",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT ID, SEX, Birthday FROM Patient_Laboratory WHERE UN = 29"
  },
  {
    "train_idx": 1221,
    "db_id": "thrombosis_prediction",
    "question": "Provide the ID, sex, birthday of all patients diagnosed with 'RA' that are within the UN normal index.",
    "query": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN < 30 AND T1.Diagnosis = 'RA'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT ID, SEX, Birthday FROM Patient_Laboratory WHERE UN < 30 AND Diagnosis = 'RA'"
  },
  {
    "train_idx": 1222,
    "db_id": "thrombosis_prediction",
    "question": "How many male patients are are with creatinine index out of the normal range?",
    "query": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND T1.SEX = 'M'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(ID) FROM Patient_Laboratory WHERE CRE >= 15 AND SEX = 'M'"
  },
  {
    "train_idx": 1223,
    "db_id": "thrombosis_prediction",
    "question": "Are there more male patients with creatinine not within the normal range than female? True or False?",
    "query": "SELECT CASE WHEN SUM(CASE WHEN T1.SEX = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN T1.SEX = 'F' THEN 1 ELSE 0 END) THEN 'True' ELSE 'False' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CASE WHEN SUM(CASE WHEN SEX = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) THEN 'True' ELSE 'False' END FROM Patient_Laboratory WHERE CRE >= 1.5"
  },
  {
    "train_idx": 1224,
    "db_id": "thrombosis_prediction",
    "question": "What is the highest total bilirubin level recorded? List out the patient details with ID, sex and birthday with that index.",
    "query": "SELECT T2.`T-BIL`, T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.`T-BIL` DESC LIMIT 1",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT `T-BIL`, ID, SEX, Birthday FROM Patient_Laboratory ORDER BY `T-BIL` DESC LIMIT 1"
  },
  {
    "train_idx": 1225,
    "db_id": "thrombosis_prediction",
    "question": "List and group all patients by sex for total bilirubin (T-BIL) level not within the normal range.",
    "query": "SELECT T1.ID,T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` >= 2.0 GROUP BY T1.SEX,T1.ID",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT ID,SEX FROM Patient_Laboratory WHERE `T-BIL` >= 2.0 GROUP BY SEX,ID"
  },
  {
    "train_idx": 1226,
    "db_id": "thrombosis_prediction",
    "question": "Who is the oldest patient with the highest total cholesterol (T-CHO). State the patient ID and T-CHO index.",
    "query": "SELECT T1.ID, T2.`T-CHO` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.`T-CHO` DESC, T1.Birthday ASC LIMIT 1",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT ID, `T-CHO` FROM Patient_Laboratory ORDER BY `T-CHO` DESC, Birthday ASC LIMIT 1"
  },
  {
    "train_idx": 1227,
    "db_id": "thrombosis_prediction",
    "question": "What is the average age of the male patient with high cholesterol?",
    "query": "SELECT AVG(STRFTIME('%Y', date('NOW')) - STRFTIME('%Y', T1.Birthday)) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-CHO` >= 250 AND T1.SEX = 'M'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT AVG(STRFTIME('%Y', date('NOW')) - STRFTIME('%Y', Patient_LaboratoryBirthday)) FROM Patient_Laboratory WHERE Patient_Laboratory`T-CHO` >= 250 AND Patient_LaboratorySEX = 'M'"
  },
  {
    "train_idx": 1228,
    "db_id": "thrombosis_prediction",
    "question": "Provide list of patients and their diagnosis with triglyceride (TG) index greater than 100 of the normal range?",
    "query": "SELECT T1.ID, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG > 300",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT ID, Diagnosis FROM Patient_Laboratory WHERE TG > 300"
  },
  {
    "train_idx": 1229,
    "db_id": "thrombosis_prediction",
    "question": "For all patients with triglyceride (TG) level beyond the normal range, how many are age more than 50 years?",
    "query": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200 AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) > 50",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(DISTINCT ID) FROM Patient_Laboratory WHERE TG >= 200 AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', Birthday) > 50"
  },
  {
    "train_idx": 1230,
    "db_id": "thrombosis_prediction",
    "question": "List all outpatient within normal range of creatinine phosphokinase. Give me the distinct ids.",
    "query": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CPK < 250 AND T1.Admission = '-'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT ID FROM Patient_Laboratory WHERE CPK < 250 AND Admission = '-'"
  },
  {
    "train_idx": 1231,
    "db_id": "thrombosis_prediction",
    "question": "For patient born between 1936-1956, how many male patients have creatinine phosphokinase beyond the normal range?",
    "query": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) BETWEEN '1936' AND '1956' AND T1.SEX = 'M' AND T2.CPK >= 250",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(DISTINCT ID) FROM Patient_Laboratory WHERE STRFTIME('%Y', Birthday) BETWEEN '1936' AND '1956' AND SEX = 'M' AND CPK >= 250"
  },
  {
    "train_idx": 1232,
    "db_id": "thrombosis_prediction",
    "question": "Provide ID, sex and age of patient who has blood glucose (GLU) not within normal range but with total cholesterol(T-CHO) within normal range.",
    "query": "SELECT DISTINCT T1.ID, T1.SEX , STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU >= 180 AND T2.`T-CHO` < 250",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT ID, SEX , STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', Birthday) FROM Patient_Laboratory WHERE GLU >= 180 AND `T-CHO` < 250"
  },
  {
    "train_idx": 1233,
    "db_id": "thrombosis_prediction",
    "question": "List each patient's ID and blood glucose (GLU) index that were within normal range for patient's whose data was first recorded in 1991.",
    "query": "SELECT DISTINCT T1.ID, T2.GLU FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.`First Date`) = '1991' AND T2.GLU < 180",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT ID, GLU FROM Patient_Laboratory WHERE STRFTIME('%Y', `First Date`) = '1991' AND GLU < 180"
  },
  {
    "train_idx": 1234,
    "db_id": "thrombosis_prediction",
    "question": "List the patient ID, sex and birthday who has abnormal white blood cell count. Group them by sex and list the patient by age in ascending order.",
    "query": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC <= 3.5 OR T2.WBC >= 9.0 GROUP BY T1.SEX,T1.ID ORDER BY T1.Birthday ASC",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT ID, SEX, Birthday FROM Patient_Laboratory WHERE WBC <= 3.5 OR WBC >= 9.0 GROUP BY SEX,ID ORDER BY Birthday ASC"
  },
  {
    "train_idx": 1235,
    "db_id": "thrombosis_prediction",
    "question": "What are the patient's diagnosis for those who has lower red blood blood cell? State their ID and age.",
    "query": "SELECT DISTINCT T1.Diagnosis, T1.ID , STRFTIME('%Y', CURRENT_TIMESTAMP) -STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RBC < 3.5",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT Diagnosis, ID , STRFTIME('%Y', CURRENT_TIMESTAMP) -STRFTIME('%Y', Birthday) FROM Patient_Laboratory WHERE RBC < 3.5"
  },
  {
    "train_idx": 1236,
    "db_id": "thrombosis_prediction",
    "question": "For all the female patient age 50 and above, who has abnormal red blood cell count. State if they were admitted to hospital.",
    "query": "SELECT DISTINCT T1.ID, T1.Admission FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND (T2.RBC <= 3.5 OR T2.RBC >= 6.0) AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) >= 50",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT ID, Admission FROM Patient_Laboratory WHERE SEX = 'F' AND (RBC <= 3.5 OR RBC >= 6.0) AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', Birthday) >= 50"
  },
  {
    "train_idx": 1237,
    "db_id": "thrombosis_prediction",
    "question": "Among all outpatients, list out those have low hemoglobin level. State the different IDs and their sex.",
    "query": "SELECT DISTINCT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HGB < 10 AND T1.Admission = '-'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT ID, SEX FROM Patient_Laboratory WHERE HGB < 10 AND Admission = '-'"
  },
  {
    "train_idx": 1238,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients who were diagnosed with SLE, who is the oldest with normal hemoglobin level. Provide the ID and sex.",
    "query": "SELECT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.HGB > 10 AND T2.HGB < 17 ORDER BY T1.Birthday ASC LIMIT 1",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT ID, SEX FROM Patient_Laboratory WHERE Diagnosis = 'SLE' AND HGB > 10 AND HGB < 17 ORDER BY Birthday ASC LIMIT 1"
  },
  {
    "train_idx": 1239,
    "db_id": "thrombosis_prediction",
    "question": "Name the ID and age of patient with two or more laboratory examinations which show their hematoclit level exceeded the normal range.",
    "query": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID IN ( SELECT ID FROM Laboratory WHERE HCT >= 52 GROUP BY ID HAVING COUNT(ID) >= 2 )",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient_Laboratory AS T1 WHERE T1.ID IN ( SELECT ID FROM Patient_Laboratory WHERE HCT >= 52 GROUP BY ID HAVING COUNT(ID) >= 2 )"
  },
  {
    "train_idx": 1240,
    "db_id": "thrombosis_prediction",
    "question": "From laboratory examinations in 1991, what is the average hematoclit level that is lower than the normal range.",
    "query": "SELECT AVG(T2.HCT) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HCT < 29 AND STRFTIME('%Y', T2.Date) = '1991'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT AVG(HCT) FROM Patient_Laboratory WHERE HCT < 29 AND STRFTIME('%Y', Date) = '1991'"
  },
  {
    "train_idx": 1241,
    "db_id": "thrombosis_prediction",
    "question": "For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range?",
    "query": "SELECT SUM(CASE WHEN T2.PLT <= 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.PLT >= 400 THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "patient_laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table patient_laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "patient_laboratory",
      "laboratory": "patient_laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT SUM(CASE WHEN patient_laboratoryPLT <= 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN patient_laboratoryPLT >= 400 THEN 1 ELSE 0 END) FROM patient_laboratory"
  },
  {
    "train_idx": 1242,
    "db_id": "thrombosis_prediction",
    "question": "For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level.",
    "query": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT BETWEEN 100 AND 400 AND STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday) < 50 AND STRFTIME('%Y', T2.Date) = '1984'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT ID FROM Patient_Laboratory WHERE PLT BETWEEN 100 AND 400 AND STRFTIME('%Y', Date) - STRFTIME('%Y', Birthday) < 50 AND STRFTIME('%Y', Date) = '1984'"
  },
  {
    "train_idx": 1243,
    "db_id": "thrombosis_prediction",
    "question": "For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)?",
    "query": "SELECT CAST(SUM(CASE WHEN T2.PT >= 14 AND T1.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) > 55",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(CASE WHEN PT >= 14 AND SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient_Laboratory WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', Birthday) > 55"
  },
  {
    "train_idx": 1244,
    "db_id": "thrombosis_prediction",
    "question": "List all patients who first came to the hospital after year 1992 with prothrombin time (PT) level that are normal.",
    "query": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.`First Date`) > '1992' AND T2.PT < 14",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT ID FROM Patient_Laboratory WHERE STRFTIME('%Y', `First Date`) > '1992' AND PT < 14"
  },
  {
    "train_idx": 1245,
    "db_id": "thrombosis_prediction",
    "question": "For the examinations done after 1997/1/1, how many of them have the result of an inactivated partial prothrom bin time?",
    "query": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.Date > '1997-01-01' AND T2.APTT >= 45",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(ID) FROM Patient_Laboratory WHERE Date > '1997-01-01' AND APTT >= 45"
  },
  {
    "train_idx": 1246,
    "db_id": "thrombosis_prediction",
    "question": "For the patients with an abnormal activated partial prothrom bin time, how many of them does not have thrombosis?",
    "query": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T3.Thrombosis = 0 AND T2.APTT > 45",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      },
      "examination": {
        "ddl": "create table examination( foreign key(ID) references Patient(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      },
      "examination": {
        "ddl": "create table examination( foreign key(ID) references Patient_Laboratory(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(DISTINCT ID) FROM Patient_Laboratory WHERE Thrombosis = 0 AND APTT > 45"
  },
  {
    "train_idx": 1247,
    "db_id": "thrombosis_prediction",
    "question": "Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level?",
    "query": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG <= 150 OR T2.FG >= 450 AND T2.WBC > 3.5 AND T2.WBC < 9.0 AND T1.SEX = 'M'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(DISTINCT ID) FROM Patient_Laboratory WHERE FG <= 150 OR FG >= 450 AND WBC > 3.5 AND WBC < 9.0 AND SEX = 'M'"
  },
  {
    "train_idx": 1248,
    "db_id": "thrombosis_prediction",
    "question": "How many patients born after 1980/1/1 have an abnormal fibrinogen level?",
    "query": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG <= 150 OR T2.FG >= 450 AND T1.Birthday > '1980-01-01'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(DISTINCT ID) FROM Patient_Laboratory WHERE FG <= 150 OR FG >= 450 AND Birthday > '1980-01-01'"
  },
  {
    "train_idx": 1249,
    "db_id": "thrombosis_prediction",
    "question": "Please list the disease names of the patients that have a proteinuria level higher than normal.",
    "query": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`U-PRO` >= 30",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Diagnosis FROM Patient_Laboratory WHERE `U-PRO` >= 30"
  },
  {
    "train_idx": 1250,
    "db_id": "thrombosis_prediction",
    "question": "Which patient has a normal proteinuria level and is diagnosed with SLE? Please give his or her patient ID.",
    "query": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`U-PRO` > 0 AND T2.`U-PRO` < 30 AND T1.Diagnosis = 'SLE'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT ID FROM Patient_Laboratory WHERE `U-PRO` > 0 AND `U-PRO` < 30 AND Diagnosis = 'SLE'"
  },
  {
    "train_idx": 1253,
    "db_id": "thrombosis_prediction",
    "question": "For the patient who has the highest Ig A within the normal range, what is his or her diagnosis?",
    "query": "SELECT patientData.Diagnosis FROM Patient AS patientData INNER JOIN Laboratory AS labData ON patientData.ID = labData.ID WHERE labData.IGA BETWEEN 80 AND 500 ORDER BY labData.IGA DESC LIMIT 1",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Patient_LaboratoryDiagnosis FROM Patient_Laboratory WHERE Patient_LaboratoryIGA BETWEEN 80 AND 500 ORDER BY Patient_LaboratoryIGA DESC LIMIT 1"
  },
  {
    "train_idx": 1254,
    "db_id": "thrombosis_prediction",
    "question": "How many patients with a normal Ig A level came to the hospital after 1990/1/1?",
    "query": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA BETWEEN 80 AND 500 AND  strftime('%Y',  T1.`First Date`) > '1990'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(ID) FROM Patient_Laboratory WHERE IGA BETWEEN 80 AND 500 AND strftime('%Y', `First Date`) > '1990'"
  },
  {
    "train_idx": 1255,
    "db_id": "thrombosis_prediction",
    "question": "For the patients with an abnormal Ig M level, what is the most common disease they are diagnosed with?",
    "query": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGM NOT BETWEEN 40 AND 400 GROUP BY T1.Diagnosis ORDER BY COUNT(T1.Diagnosis) DESC LIMIT 1",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Diagnosis FROM Patient_Laboratory WHERE IGM NOT BETWEEN 40 AND 400 GROUP BY Diagnosis ORDER BY COUNT(Diagnosis) DESC LIMIT 1"
  },
  {
    "train_idx": 1256,
    "db_id": "thrombosis_prediction",
    "question": "How many patients with a abnormal C-reactive protein don't have their data recorded?",
    "query": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.CRP = '+' ) AND T1.Description IS NULL",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(ID) FROM Patient_Laboratory WHERE (CRP = '+' ) AND Description IS NULL"
  },
  {
    "train_idx": 1257,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients whose creatinine level is abnormal, how many of them aren't 70 yet?",
    "query": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND STRFTIME('%Y', Date('now')) - STRFTIME('%Y', T1.Birthday) < 70",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(DISTINCT ID) FROM Patient_Laboratory WHERE CRE >= 15 AND STRFTIME('%Y', Date('now')) - STRFTIME('%Y', Birthday) < 70"
  },
  {
    "train_idx": 1259,
    "db_id": "thrombosis_prediction",
    "question": "Please list the diseases of the patients born after 1985-1-1 and have a normal Rhuematoid Factor.",
    "query": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.RA = '-' OR T2.RA = '+-') AND T1.Birthday > '1985-01-01'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Diagnosis FROM Patient_Laboratory WHERE (RA = '-' OR RA = '+-') AND Birthday > '1985-01-01'"
  },
  {
    "train_idx": 1260,
    "db_id": "thrombosis_prediction",
    "question": "Please list the ID of the patient whose RF is normal and who is older than 60.",
    "query": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RF < 20 AND STRFTIME('%Y', DATE('now')) - STRFTIME('%Y', T1.Birthday) > 60",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT ID FROM Patient_Laboratory WHERE RF < 20 AND STRFTIME('%Y', DATE('now')) - STRFTIME('%Y', Birthday) > 60"
  },
  {
    "train_idx": 1264,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients have blood clots in veins, how many of them have a normal level of complement 4?",
    "query": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.C4 > 10 AND T1.Diagnosis = 'APS'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(DISTINCT ID) FROM Patient_Laboratory WHERE C4 > 10 AND Diagnosis = 'APS'"
  },
  {
    "train_idx": 1265,
    "db_id": "thrombosis_prediction",
    "question": "How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital?",
    "query": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP = 'negative' OR T2.RNP = '0' AND T1.Admission = '+'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(DISTINCT ID) FROM Patient_Laboratory WHERE RNP = 'negative' OR RNP = '0' AND Admission = '+'"
  },
  {
    "train_idx": 1266,
    "db_id": "thrombosis_prediction",
    "question": "Which is the youngest patient with an abnormal anti-ribonuclear protein level? Please list his or her date of birth.",
    "query": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP != '-' OR '+-' ORDER BY T1.Birthday DESC LIMIT 1",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Birthday FROM Patient_Laboratory WHERE RNP != '-' OR '+-' ORDER BY Birthday DESC LIMIT 1"
  },
  {
    "train_idx": 1268,
    "db_id": "thrombosis_prediction",
    "question": "For the patients with an abnormal anti-SM, please list the IDs of the three youngest ones.",
    "query": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM NOT IN ('negative','0') ORDER BY T1.Birthday DESC LIMIT 3",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT ID FROM Patient_Laboratory WHERE SM NOT IN ('negative','0') ORDER BY Birthday DESC LIMIT 3"
  },
  {
    "train_idx": 1269,
    "db_id": "thrombosis_prediction",
    "question": "Please list the IDs of the patients who had the examination done after 1997/1/1 and had a normal anti-scl70.",
    "query": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SC170 IN ('negative','0') AND T2.Date > 1997-01-01",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT ID FROM Patient_Laboratory WHERE SC170 IN ('negative','0') AND Date > 1997-01-01"
  },
  {
    "train_idx": 1270,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients who has a normal anti-scl70, how many of them are female and does not have any symptom?",
    "query": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE (T2.SC170 = 'negative' OR T2.SC170 = '0') AND T1.SEX = 'F' AND T3.Symptoms IS NULL",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      },
      "examination": {
        "ddl": "create table examination( foreign key(ID) references Patient(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      },
      "examination": {
        "ddl": "create table examination( foreign key(ID) references Patient_Laboratory(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(DISTINCT ID) FROM Patient_Laboratory WHERE (SC170 = 'negative' OR SC170 = '0') AND SEX = 'F' AND Symptoms IS NULL"
  },
  {
    "train_idx": 1271,
    "db_id": "thrombosis_prediction",
    "question": "How many patients with a normal anti-SSA came to the hospital before 2000?",
    "query": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSA IN ('negative', '0') AND STRFTIME('%Y', T2.Date) < '2000'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(DISTINCT ID) FROM Patient_Laboratory WHERE SSA IN ('negative', '0') AND STRFTIME('%Y', Date) < '2000'"
  },
  {
    "train_idx": 1272,
    "db_id": "thrombosis_prediction",
    "question": "Which patient is the first patient with an abnormal anti-SSA to come to the hospital? Please give his or her ID.",
    "query": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.`First Date` IS NOT NULL AND T2.SSA NOT IN ('negative', '0') ORDER BY T1.`First Date` ASC LIMIT 1",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT ID FROM Patient_Laboratory WHERE `First Date` IS NOT NULL AND SSA NOT IN ('negative', '0') ORDER BY `First Date` ASC LIMIT 1"
  },
  {
    "train_idx": 1273,
    "db_id": "thrombosis_prediction",
    "question": "How many patients have a normal anti-SSB and are diagnosed with SLE in the examination?",
    "query": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSB = 'negative' OR '0' AND T1.Diagnosis = 'SLE'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(DISTINCT ID) FROM Patient_Laboratory WHERE SSB = 'negative' OR '0' AND Diagnosis = 'SLE'"
  },
  {
    "train_idx": 1275,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male?",
    "query": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CENTROMEA IN ('negative', '0') AND T2.SSB IN ('negative', '0') AND T1.SEX = 'M'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(DISTINCT ID) FROM Patient_Laboratory WHERE CENTROMEA IN ('negative', '0') AND SSB IN ('negative', '0') AND SEX = 'M'"
  },
  {
    "train_idx": 1276,
    "db_id": "thrombosis_prediction",
    "question": "For the patients who have an abnormal level of anti-DNA, please list the diseases they are diagnosed with.",
    "query": "SELECT DISTINCT(T1.Diagnosis) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA >= 8",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT(Diagnosis) FROM Patient_Laboratory WHERE DNA >= 8"
  },
  {
    "train_idx": 1277,
    "db_id": "thrombosis_prediction",
    "question": "How many patients have a normal anti-DNA level, yet their data are not recorded.",
    "query": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA < 8 AND T1.Description IS NULL",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(DISTINCT ID) FROM Patient_Laboratory WHERE DNA < 8 AND Description IS NULL"
  },
  {
    "train_idx": 1278,
    "db_id": "thrombosis_prediction",
    "question": "Of the patients with an normal level of IGG, how many of them admitted to the hospital?",
    "query": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGG > 900 AND T2.IGG <2000 AND  T1.Admission = '+'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(ID) FROM Patient_Laboratory WHERE IGG > 900 AND IGG <2000 AND Admission = '+'"
  },
  {
    "train_idx": 1279,
    "db_id": "thrombosis_prediction",
    "question": "What is the percentage of patient who has a abnormal level of glutamic oxaloacetic transaminase level, yet he or she is diagnosed with SLE?",
    "query": "SELECT COUNT(CASE WHEN T1.Diagnosis LIKE '%SLE%' THEN T1.ID ELSE 0 END) / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`GOT` >= 60",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(CASE WHEN Diagnosis LIKE '%SLE%' THEN ID ELSE 0 END) / COUNT(ID) FROM Patient_Laboratory WHERE `GOT` >= 60"
  },
  {
    "train_idx": 1280,
    "db_id": "thrombosis_prediction",
    "question": "How many male patients have their glutamic oxaloacetic transaminase in the normal range?",
    "query": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND T1.SEX = 'M'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(ID) FROM Patient_Laboratory WHERE GOT < 60 AND SEX = 'M'"
  },
  {
    "train_idx": 1281,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients who have an abnormal level of glutamic oxaloacetic transaminase, when was the youngest of them born?",
    "query": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT >= 60 ORDER BY T1.Birthday DESC LIMIT 1",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Birthday FROM Patient_Laboratory WHERE GOT >= 60 ORDER BY Birthday DESC LIMIT 1"
  },
  {
    "train_idx": 1282,
    "db_id": "thrombosis_prediction",
    "question": "Please list the top three patients' birthdays with the highest glutamic pylvic transaminase in the normal range.",
    "query": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT < 60 ORDER BY T2.GPT DESC LIMIT 3",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Birthday FROM Patient_Laboratory WHERE GPT < 60 ORDER BY GPT DESC LIMIT 3"
  },
  {
    "train_idx": 1283,
    "db_id": "thrombosis_prediction",
    "question": "For the patients with the normal glutamic pylvic transaminase level, how many of them are male?",
    "query": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND T1.SEX = 'M'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(ID) FROM Patient_Laboratory WHERE GOT < 60 AND SEX = 'M'"
  },
  {
    "train_idx": 1284,
    "db_id": "thrombosis_prediction",
    "question": "For the patient with the highest lactate dehydrogenase in the normal range, when was his or her data first recorded?",
    "query": "SELECT T1.`First Date` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH < 500 ORDER BY T2.LDH ASC LIMIT 1",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT `First Date` FROM Patient_Laboratory WHERE LDH < 500 ORDER BY LDH ASC LIMIT 1"
  },
  {
    "train_idx": 1285,
    "db_id": "thrombosis_prediction",
    "question": "When is the latest patient's medical data recorded? This patient should have an abnormal level of lactate dehydrogenase.",
    "query": "SELECT T1.`First Date` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH >= 500 ORDER BY T1.`First Date` DESC LIMIT 1",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT `First Date` FROM Patient_Laboratory WHERE LDH >= 500 ORDER BY `First Date` DESC LIMIT 1"
  },
  {
    "train_idx": 1286,
    "db_id": "thrombosis_prediction",
    "question": "For the patient with an abnormal alkaliphophatase level, how many of them are admitted to the hospital?",
    "query": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP >= 300 AND T1.Admission = '+'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(ID) FROM Patient_Laboratory WHERE ALP >= 300 AND Admission = '+'"
  },
  {
    "train_idx": 1287,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients followed at the outpatient clinic, how many of them have a normal level of alkaliphophatase?",
    "query": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP < 300 AND T1.Admission = '-'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(ID) FROM Patient_Laboratory WHERE ALP < 300 AND Admission = '-'"
  },
  {
    "train_idx": 1288,
    "db_id": "thrombosis_prediction",
    "question": "Please list the diagnosis of the patients whose total protein is lower than normal.",
    "query": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TP < 6.0",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Diagnosis FROM Patient_Laboratory WHERE TP < 6.0"
  },
  {
    "train_idx": 1289,
    "db_id": "thrombosis_prediction",
    "question": "For the patients who are diagnosed with SJS, how many of them have a normal level of total protein?",
    "query": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SJS' AND T2.TP > 6.0 AND T2.TP < 8.5",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(ID) FROM Patient_Laboratory WHERE Diagnosis = 'SJS' AND TP > 6.0 AND TP < 8.5"
  },
  {
    "train_idx": 1291,
    "db_id": "thrombosis_prediction",
    "question": "How many male patients have a normal level of both albumin and total protein?",
    "query": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M'  AND T2.ALB > 3.5 AND T2.ALB < 5.5 AND T2.TP BETWEEN 6.0 AND 8.5",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(ID) FROM Patient_Laboratory WHERE SEX = 'M' AND ALB > 35 AND ALB < 55 AND TP BETWEEN 60 AND 85"
  },
  {
    "train_idx": 1293,
    "db_id": "thrombosis_prediction",
    "question": "What is the highest anti-nucleus antibody concentration level of a patient with a normal creatinine level?",
    "query": "SELECT T2.ANA FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.CRE < 1.5 ORDER BY T2.ANA DESC LIMIT 1",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "examination": {
        "ddl": "create table examination( foreign key(ID) references Patient(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "foreign key(ID) references Patient(ID)",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      },
      "examination": {
        "ddl": "create table examination( foreign key(ID) references Patient_Laboratory(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT ANA FROM Patient_Laboratory WHERE CRE < 15 ORDER BY ANA DESC LIMIT 1"
  },
  {
    "train_idx": 1295,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients whose total bilirubin is over the normal range, how many of them have a peripheral pattern observed in the sheet of ANA examination?",
    "query": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.`T-BIL` >= 2 AND T3.`ANA Pattern` LIKE '%P%'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      },
      "examination": {
        "ddl": "create table examination( foreign key(ID) references Patient(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      },
      "examination": {
        "ddl": "create table examination( foreign key(ID) references Patient_Laboratory(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(ID) FROM Patient_Laboratory WHERE `T-BIL` >= 2 AND `ANA Pattern` LIKE '%P%'"
  },
  {
    "train_idx": 1296,
    "db_id": "thrombosis_prediction",
    "question": "What is the anti-nucleus antibody concentration of the patient whose total bilirubin is the highest in the normal range?",
    "query": "SELECT T3.ANA FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.`T-BIL` < 2.0 ORDER BY T2.`T-BIL` DESC LIMIT 1",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      },
      "examination": {
        "ddl": "create table examination( foreign key(ID) references Patient(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      },
      "examination": {
        "ddl": "create table examination( foreign key(ID) references Patient_Laboratory(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT ANA FROM Patient_Laboratory WHERE `T-BIL` < 20 ORDER BY `T-BIL` DESC LIMIT 1"
  },
  {
    "train_idx": 1297,
    "db_id": "thrombosis_prediction",
    "question": "For the patients whose total cholesterol is higher than normal, how many of them have a negative measure of degree of coagulation?",
    "query": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.`T-CHO` >= 250 AND T3.KCT = '-'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      },
      "examination": {
        "ddl": "create table examination( foreign key(ID) references Patient(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Examination": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis_Patient",
          "Examination Date",
          "aCL IgG",
          "aCL IgM",
          "ANA",
          "ANA Pattern",
          "aCL IgA",
          "Diagnosis_Examination",
          "KCT",
          "RVVT",
          "LAC",
          "Symptoms",
          "Thrombosis"
        ],
        "ddl": "create table Patient_Examination( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis_Patient text, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis_Examination text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient_Examination(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Examination",
      "examination": "Patient_Examination"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "Diagnosis_Patient": {
        "old_table": "Patient",
        "old_column": "Diagnosis"
      },
      "Diagnosis_Examination": {
        "old_table": "Examination",
        "old_column": "Diagnosis"
      }
    },
    "new_gold_sql": "SELECT COUNT(ID) FROM Patient_Examination WHERE `T-CHO` >= 250 AND KCT = '-'"
  },
  {
    "train_idx": 1298,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients whose total cholesterol is within the normal range, how many of them have a P pattern observed in the sheet of ANA examination?",
    "query": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T3.`ANA Pattern` = 'P' AND T2.`T-CHO` < 250",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      },
      "examination": {
        "ddl": "create table examination( foreign key(ID) references Patient(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Examination": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis_Patient",
          "foreign key(ID) references Patient(ID)",
          "Examination Date",
          "aCL IgG",
          "aCL IgM",
          "ANA",
          "ANA Pattern",
          "aCL IgA",
          "Diagnosis_Examination",
          "KCT",
          "RVVT",
          "LAC",
          "Symptoms",
          "Thrombosis"
        ],
        "ddl": "create table Patient_Examination( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis_Patient text, foreign key(ID) references Patient(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis_Examination text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient_Examination(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "examination": "Patient_Examination",
      "patient": "Patient_Examination"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "Diagnosis_Patient": {
        "old_table": "Patient",
        "old_column": "Diagnosis"
      },
      "Diagnosis_Examination": {
        "old_table": "Examination",
        "old_column": "Diagnosis"
      }
    },
    "new_gold_sql": "SELECT COUNT(ID) FROM Patient_Examination WHERE `ANA Pattern` = 'P' AND `T-CHO` < 250"
  },
  {
    "train_idx": 1303,
    "db_id": "thrombosis_prediction",
    "question": "When is the birthday of the oldest patient whose blood glucose is abnormal?",
    "query": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU > 180 ORDER BY T1.Birthday ASC LIMIT 1",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Birthday FROM Patient_Laboratory WHERE GLU > 180 ORDER BY Birthday ASC LIMIT 1"
  },
  {
    "train_idx": 1304,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients with a normal blood glucose, how many of them don't have thrombosis?",
    "query": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.GLU < 180 AND T3.Thrombosis = 0",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      },
      "examination": {
        "ddl": "create table examination( foreign key(ID) references Patient(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      },
      "examination": {
        "ddl": "create table examination( foreign key(ID) references Patient_Laboratory(ID) integer, Examination Date date, aCL IgG real, aCL IgM real, ANA integer, ANA Pattern text, aCL IgA integer, Diagnosis text, KCT text, RVVT text, LAC text, Symptoms text, Thrombosis integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(ID) FROM Patient_Laboratory WHERE GLU < 180 AND Thrombosis = 0"
  },
  {
    "train_idx": 1305,
    "db_id": "thrombosis_prediction",
    "question": "How many patients accepted to the hospital have a normal level of white blood cells?",
    "query": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC BETWEEN 3.5 AND 9 AND T1.Admission = '+'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(ID) FROM Patient_Laboratory WHERE WBC BETWEEN 3.5 AND 9 AND Admission = '+'"
  },
  {
    "train_idx": 1306,
    "db_id": "thrombosis_prediction",
    "question": "How many patients diagnosed with SLE have a normal white blood cell level?",
    "query": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.WBC BETWEEN 3.5 AND 9",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(ID) FROM Patient_Laboratory WHERE Diagnosis = 'SLE' AND WBC BETWEEN 35 AND 9"
  },
  {
    "train_idx": 1307,
    "db_id": "thrombosis_prediction",
    "question": "Please list the patient's ID if he or she has an abnormal level of red blood cell and is followed at the outpatient clinic.",
    "query": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.RBC <= 3.5 OR T2.RBC >= 6) AND T1.Admission = '-'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT ID FROM Patient_Laboratory WHERE (RBC <= 35 OR RBC >= 6) AND Admission = '-'"
  },
  {
    "train_idx": 1308,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients who have a normal platelet level, how many of them have other symptoms observed?",
    "query": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT > 100 AND T2.PLT < 400 AND T1.Diagnosis IS NOT NULL",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(ID) FROM Patient_Laboratory WHERE PLT > 100 AND PLT < 400 AND Diagnosis IS NOT NULL"
  },
  {
    "train_idx": 1309,
    "db_id": "thrombosis_prediction",
    "question": "Please list a patient's platelet level if it is within the normal range and if he or she is diagnosed with MCTD.",
    "query": "SELECT T2.PLT FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'MCTD' AND T2.PLT BETWEEN 100 AND 400",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "patient": "Patient_Laboratory",
      "laboratory": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT PLT FROM Patient_Laboratory WHERE Diagnosis = 'MCTD' AND PLT BETWEEN 100 AND 400"
  },
  {
    "train_idx": 1310,
    "db_id": "thrombosis_prediction",
    "question": "For the male patients that have a normal prothrombin time, what is their average prothrombin time?",
    "query": "SELECT AVG(T2.PT) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PT < 14 AND T1.SEX = 'M'",
    "relevant_table": {
      "patient": {
        "ddl": "create table patient( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text)"
      },
      "laboratory": {
        "ddl": "create table laboratory( foreign key(ID) references Patient(ID) integer, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "new_relevant_table": {
      "Patient_Laboratory": {
        "columns": [
          "ID",
          "SEX",
          "Birthday",
          "Description",
          "First Date",
          "Admission",
          "Diagnosis",
          "Date",
          "GOT",
          "GPT",
          "LDH",
          "ALP",
          "TP",
          "ALB",
          "UA",
          "UN",
          "CRE",
          "T-BIL",
          "T-CHO",
          "TG",
          "CPK",
          "GLU",
          "WBC",
          "RBC",
          "HGB",
          "HCT",
          "PLT",
          "PT",
          "APTT",
          "FG",
          "PIC",
          "TAT",
          "TAT2",
          "U-PRO",
          "IGG",
          "IGA",
          "IGM",
          "CRP",
          "RA",
          "RF",
          "C3",
          "C4",
          "RNP",
          "SM",
          "SC170",
          "SSA",
          "SSB",
          "CENTROMEA",
          "DNA",
          "DNA-II"
        ],
        "ddl": "create table Patient_Laboratory( ID integer primary key, SEX text, Birthday date, Description date, First Date date, Admission text, Diagnosis text, Date date, GOT integer, GPT integer, LDH integer, ALP integer, TP real, ALB real, UA real, UN integer, CRE real, T-BIL real, T-CHO integer, TG integer, CPK integer, GLU integer, WBC real, RBC real, HGB real, HCT real, PLT integer, PT real, APTT integer, FG real, PIC integer, TAT integer, TAT2 integer, U-PRO text, IGG integer, IGA integer, IGM integer, CRP text, RA text, RF text, C3 integer, C4 integer, RNP text, SM text, SC170 text, SSA text, SSB text, CENTROMEA text, DNA text, DNA-II integer)"
      }
    },
    "old_new_table_mapping": {
      "laboratory": "Patient_Laboratory",
      "patient": "Patient_Laboratory"
    },
    "new_table_primary_key": "ID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT AVG(PT) FROM Patient_Laboratory WHERE PT < 14 AND SEX = 'M'"
  },
  {
    "train_idx": 1312,
    "db_id": "student_club",
    "question": "What's Angela Sanders's major?",
    "query": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "major": {
        "ddl": "create table major( major_id text primary key, major_name text, department text, college text)"
      }
    },
    "new_relevant_table": {
      "member_major": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "major_id",
          "major_name",
          "department",
          "college"
        ],
        "ddl": "create table member_major( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, major_id text, major_name text, department text, college text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_major",
      "major": "member_major"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT major_name FROM member_major WHERE first_name = 'Angela' AND last_name = 'Sanders'"
  },
  {
    "train_idx": 1313,
    "db_id": "student_club",
    "question": "How many students in the Student_Club are from the College of Engineering?",
    "query": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "major": {
        "ddl": "create table major( major_id text primary key, major_name text, department text, college text)"
      }
    },
    "new_relevant_table": {
      "member_major": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "major_id",
          "major_name",
          "department",
          "college"
        ],
        "ddl": "create table member_major( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, major_id text, major_name text, department text, college text)"
      }
    },
    "old_new_table_mapping": {
      "major": "member_major",
      "member": "member_major"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(member_id) FROM member_major WHERE college = 'College of Engineering'"
  },
  {
    "train_idx": 1314,
    "db_id": "student_club",
    "question": "Please list the full names of the students in the Student_Club that come from the Art and Design Department.",
    "query": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design Department'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "major": {
        "ddl": "create table major( major_id text primary key, major_name text, department text, college text)"
      }
    },
    "new_relevant_table": {
      "member_major": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "major_id",
          "major_name",
          "department",
          "college"
        ],
        "ddl": "create table member_major( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, major_id text, major_name text, department text, college text)"
      }
    },
    "old_new_table_mapping": {
      "major": "member_major",
      "member": "member_major"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT first_name, last_name FROM member_major WHERE department = 'Art and Design Department'"
  },
  {
    "train_idx": 1315,
    "db_id": "student_club",
    "question": "How many students of the Student_Club have attended the event \"Women's Soccer\"?",
    "query": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer'",
    "relevant_table": {
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "attendance": {
        "ddl": "create table attendance( foreign key(link_to_event) references event(event_id) text, foreign key(link_to_member) references member(member_id) text)"
      }
    },
    "new_relevant_table": {
      "event_attendance": {
        "columns": [
          "event_id",
          "event_name",
          "event_date",
          "type",
          "notes",
          "location",
          "status",
          "link_to_event",
          "link_to_member"
        ],
        "ddl": "create table event_attendance( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text, foreign key(link_to_member) references member(member_id) text)"
      }
    },
    "old_new_table_mapping": {
      "event": "event_attendance",
      "attendance": "event_attendance"
    },
    "new_table_primary_key": "event_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(event_id) FROM event_attendance WHERE event_name = 'Women''s Soccer'"
  },
  {
    "train_idx": 1316,
    "db_id": "student_club",
    "question": "Please list the phone numbers of the students from the Student_Club that has attended the event \"Women's Soccer\".",
    "query": "SELECT T3.phone FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer'",
    "relevant_table": {
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "attendance": {
        "ddl": "create table attendance( foreign key(link_to_event) references event(event_id) text, foreign key(link_to_member) references member(member_id) text)"
      },
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      }
    },
    "new_relevant_table": {
      "event_attendance": {
        "columns": [
          "event_id",
          "event_name",
          "event_date",
          "type",
          "notes",
          "location",
          "status",
          "link_to_event",
          "link_to_member"
        ],
        "ddl": "create table event_attendance( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text, foreign key(link_to_member) references member(member_id) text)"
      },
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      }
    },
    "old_new_table_mapping": {
      "event": "event_attendance",
      "attendance": "event_attendance"
    },
    "new_table_primary_key": "event_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT phone FROM event_attendance WHERE event_name = 'Women''s Soccer'"
  },
  {
    "train_idx": 1317,
    "db_id": "student_club",
    "question": "Among the students from the Student_Club who attended the event \"Women's Soccer\", how many of them want a T-shirt that's in medium size?",
    "query": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer' AND T3.t_shirt_size = 'Medium'",
    "relevant_table": {
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "attendance": {
        "ddl": "create table attendance( foreign key(link_to_event) references event(event_id) text, foreign key(link_to_member) references member(member_id) text)"
      },
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      }
    },
    "new_relevant_table": {
      "member_attendance": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "major_id",
          "event_id",
          "member_id_ref"
        ],
        "ddl": "create table member_attendance( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text, foreign key(link_to_event) references event(event_id) text)"
      },
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_attendance",
      "attendance": "member_attendance"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(event_id) FROM member_attendance WHERE event_name = 'Women''s Soccer' AND t_shirt_size = 'Medium'"
  },
  {
    "train_idx": 1318,
    "db_id": "student_club",
    "question": "What is the event that has the highest attendance of the students from the Student_Club?",
    "query": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_name ORDER BY COUNT(T2.link_to_event) DESC LIMIT 1",
    "relevant_table": {
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "attendance": {
        "ddl": "create table attendance( foreign key(link_to_event) references event(event_id) text, foreign key(link_to_member) references member(member_id) text)"
      }
    },
    "new_relevant_table": {
      "event_attendance": {
        "columns": [
          "event_id",
          "event_name",
          "event_date",
          "type",
          "notes",
          "location",
          "status",
          "link_to_event",
          "link_to_member"
        ],
        "ddl": "create table event_attendance( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text, foreign key(link_to_member) references member(member_id) text)"
      }
    },
    "old_new_table_mapping": {
      "event": "event_attendance",
      "attendance": "event_attendance"
    },
    "new_table_primary_key": "event_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT event_name FROM event_attendance GROUP BY event_name ORDER BY COUNT(link_to_event) DESC LIMIT 1"
  },
  {
    "train_idx": 1319,
    "db_id": "student_club",
    "question": "Which college is the vice president of the Student_Club from?",
    "query": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position LIKE 'vice president'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "major": {
        "ddl": "create table major( major_id text primary key, major_name text, department text, college text)"
      }
    },
    "new_relevant_table": {
      "member_major": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "major_id",
          "major_name",
          "department",
          "college"
        ],
        "ddl": "create table member_major( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, major_id text, major_name text, department text, college text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_major",
      "major": "member_major"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT college FROM member_major WHERE position LIKE 'vice president'"
  },
  {
    "train_idx": 1320,
    "db_id": "student_club",
    "question": "Please list the event names of all the events attended by Maya Mclean.",
    "query": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean'",
    "relevant_table": {
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "attendance": {
        "ddl": "create table attendance( foreign key(link_to_event) references event(event_id) text, foreign key(link_to_member) references member(member_id) text)"
      },
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      }
    },
    "new_relevant_table": {
      "member_attendance": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "major_id",
          "event_id"
        ],
        "ddl": "create table member_attendance( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text, foreign key(link_to_event) references event(event_id) text)"
      },
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_attendance",
      "attendance": "member_attendance"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT event_name FROM event WHERE first_name = 'Maya' AND last_name = 'Mclean'"
  },
  {
    "train_idx": 1321,
    "db_id": "student_club",
    "question": "How many events of the Student_Club did Sacha Harrison attend in 2019?",
    "query": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Sacha' AND T3.last_name = 'Harrison' AND SUBSTR(T1.event_date, 1, 4) = '2019'",
    "relevant_table": {
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "attendance": {
        "ddl": "create table attendance( foreign key(link_to_event) references event(event_id) text, foreign key(link_to_member) references member(member_id) text)"
      },
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      }
    },
    "new_relevant_table": {
      "member_attendance": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "major_id",
          "link_to_event",
          "link_to_member"
        ],
        "ddl": "create table member_attendance( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text, foreign key(link_to_event) references event(event_id) text)"
      },
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      }
    },
    "old_new_table_mapping": {
      "attendance": "member_attendance",
      "member": "member_attendance"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(event_id) FROM event WHERE first_name = 'Sacha' AND last_name = 'Harrison' AND SUBSTR(event_date, 1, 4) = '2019'"
  },
  {
    "train_idx": 1322,
    "db_id": "student_club",
    "question": "Among the events attended by more than 10 members of the Student_Club, how many of them are meetings?",
    "query": "SELECT T1.event_name FROM event AS T1  INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id  HAVING COUNT(T2.link_to_event) > 10 EXCEPT SELECT T1.event_name  FROM event AS T1  WHERE T1.type = 'Meeting'",
    "relevant_table": {
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "attendance": {
        "ddl": "create table attendance( foreign key(link_to_event) references event(event_id) text, foreign key(link_to_member) references member(member_id) text)"
      }
    },
    "new_relevant_table": {
      "event_attendance": {
        "columns": [
          "event_id",
          "event_name",
          "event_date",
          "type",
          "notes",
          "location",
          "status",
          "link_to_event",
          "link_to_member"
        ],
        "ddl": "create table event_attendance( event_id text, event_name text, event_date text, type text, notes text, location text, status text, foreign key(link_to_member) references member(member_id) text)"
      }
    },
    "old_new_table_mapping": {
      "event": "event_attendance",
      "attendance": "event_attendance"
    },
    "new_table_primary_key": "'event_id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.event_name FROM event_attendance AS T1 GROUP BY T1.event_id HAVING COUNT(T1.link_to_event) > 10 EXCEPT SELECT T1.event_name FROM event_attendance AS T1 WHERE T1.type = 'Meeting'"
  },
  {
    "train_idx": 1323,
    "db_id": "student_club",
    "question": "List all the names of events that had an attendance of over 20 students but were not fundraisers.",
    "query": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id HAVING COUNT(T2.link_to_event) > 20 EXCEPT SELECT T1.event_name FROM event AS T1  WHERE T1.type = 'Fundraiser'",
    "relevant_table": {
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "attendance": {
        "ddl": "create table attendance( foreign key(link_to_event) references event(event_id) text, foreign key(link_to_member) references member(member_id) text)"
      }
    },
    "new_relevant_table": {
      "event_attendance": {
        "columns": [
          "event_id",
          "event_name",
          "event_date",
          "type",
          "notes",
          "location",
          "status",
          "link_to_event",
          "link_to_member"
        ],
        "ddl": "create table event_attendance( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text, foreign key(link_to_member) references member(member_id) text)"
      }
    },
    "old_new_table_mapping": {
      "event": "event_attendance",
      "attendance": "event_attendance"
    },
    "new_table_primary_key": "event_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.event_name FROM event_attendance AS T1 GROUP BY T1.event_id HAVING COUNT(T1.link_to_event) > 20 EXCEPT SELECT T1.event_name FROM event_attendance AS T1 WHERE T1.type = 'Fundraiser'"
  },
  {
    "train_idx": 1324,
    "db_id": "student_club",
    "question": "What is the average attendance of meetings in 2020?",
    "query": "SELECT CAST(COUNT(T2.link_to_event) AS REAL) / COUNT(DISTINCT T2.link_to_event) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE SUBSTR(T1.event_date, 1, 4) = '2020' AND T1.type = 'Meeting'",
    "relevant_table": {
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "attendance": {
        "ddl": "create table attendance( foreign key(link_to_event) references event(event_id) text, foreign key(link_to_member) references member(member_id) text)"
      }
    },
    "new_relevant_table": {
      "event_attendance": {
        "columns": [
          "event_id",
          "event_name",
          "event_date",
          "type",
          "notes",
          "location",
          "status",
          "link_to_member"
        ],
        "ddl": "create table event_attendance( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text, foreign key(link_to_member) references member(member_id) text)"
      }
    },
    "old_new_table_mapping": {
      "attendance": "event_attendance",
      "event": "event_attendance"
    },
    "new_table_primary_key": "event_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(COUNT(event_id) AS REAL) / COUNT(DISTINCT event_id) FROM event_attendance WHERE SUBSTR(event_date, 1, 4) = '2020' AND type = 'Meeting'"
  },
  {
    "train_idx": 1326,
    "db_id": "student_club",
    "question": "How many members of the Student_Club have majored Environmental Engineering?\n",
    "query": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Environmental Engineering'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "major": {
        "ddl": "create table major( major_id text primary key, major_name text, department text, college text)"
      }
    },
    "new_relevant_table": {
      "member_major": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "major_id",
          "major_name",
          "department",
          "college"
        ],
        "ddl": "create table member_major( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, major_id text, major_name text, department text, college text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_major",
      "major": "member_major"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(member_id) FROM member_major WHERE major_name = 'Environmental Engineering'"
  },
  {
    "train_idx": 1327,
    "db_id": "student_club",
    "question": "List the full name of all the members of the Student_Club who attended the \"Laugh Out Loud\" event.",
    "query": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "attendance": {
        "ddl": "create table attendance( foreign key(link_to_event) references event(event_id) text, foreign key(link_to_member) references member(member_id) text)"
      },
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      }
    },
    "new_relevant_table": {
      "EventAttendance": {
        "columns": [
          "event_id",
          "event_name",
          "event_date",
          "type",
          "notes",
          "location",
          "status",
          "link_to_event",
          "link_to_member"
        ],
        "ddl": "create table EventAttendance( event_id text, event_name text, event_date text, type text, notes text, location text, status text, foreign key(link_to_member) references member(member_id) text)"
      },
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      }
    },
    "old_new_table_mapping": {
      "event": "EventAttendance",
      "attendance": "EventAttendance"
    },
    "new_table_primary_key": "'event_id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT first_name, last_name FROM member WHERE event_name = 'Laugh Out Loud'"
  },
  {
    "train_idx": 1328,
    "db_id": "student_club",
    "question": "List the last name of all the students who majored Law and Constitutional Studies. \n",
    "query": "SELECT T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Law and Constitutional Studies'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "major": {
        "ddl": "create table major( major_id text primary key, major_name text, department text, college text)"
      }
    },
    "new_relevant_table": {
      "member_major": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "major_id",
          "major_name",
          "department",
          "college"
        ],
        "ddl": "create table member_major( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, major_id text, major_name text, department text, college text)"
      }
    },
    "old_new_table_mapping": {
      "major": "member_major",
      "member": "member_major"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT last_name FROM member_major WHERE major_name = 'Law and Constitutional Studies'"
  },
  {
    "train_idx": 1329,
    "db_id": "student_club",
    "question": "What county did Sherri Ramsey grew up?",
    "query": "SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sherri' AND T1.last_name = 'Ramsey'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "zip_code": {
        "ddl": "create table zip_code( zip_code integer primary key, type text, city text, county text, state text, short_state text)"
      }
    },
    "new_relevant_table": {
      "member_zip": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "zip_code",
          "type",
          "city",
          "county",
          "state",
          "short_state"
        ],
        "ddl": "create table member_zip( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(link_to_major) references major(major_id) text, zip_code integer, type text, city text, county text, state text, short_state text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_zip",
      "zip_code": "member_zip"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT county FROM member_zip WHERE first_name = 'Sherri' AND last_name = 'Ramsey'"
  },
  {
    "train_idx": 1330,
    "db_id": "student_club",
    "question": "What college offers the major that Tyler Hewitt took?",
    "query": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Tyler' AND T1.last_name = 'Hewitt'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "major": {
        "ddl": "create table major( major_id text primary key, major_name text, department text, college text)"
      }
    },
    "new_relevant_table": {
      "member_major": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "major_id",
          "major_name",
          "department",
          "college"
        ],
        "ddl": "create table member_major( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, major_id text, major_name text, department text, college text)"
      }
    },
    "old_new_table_mapping": {
      "major": "member_major",
      "member": "member_major"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT college FROM member_major WHERE first_name = 'Tyler' AND last_name = 'Hewitt'"
  },
  {
    "train_idx": 1331,
    "db_id": "student_club",
    "question": "What is the amount of the funds that the Vice President received?",
    "query": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "income": {
        "ddl": "create table income( income_id text primary key, date_received text, amount integer, source text, notes text, foreign key(link_to_member) references member(member_id) text)"
      }
    },
    "new_relevant_table": {
      "member_income": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "income_id",
          "date_received",
          "amount",
          "source",
          "notes",
          "link_to_member"
        ],
        "ddl": "create table member_income( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text, income_id text, date_received text, amount integer, source text, notes text)"
      }
    },
    "old_new_table_mapping": {
      "income": "member_income",
      "member": "member_income"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT amount FROM member_income WHERE position = 'Vice President'"
  },
  {
    "train_idx": 1332,
    "db_id": "student_club",
    "question": "How much did the Student_Club members spend on food in September Meeting?",
    "query": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Food' AND SUBSTR(T1.event_date, 6, 2) = '09'",
    "relevant_table": {
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      }
    },
    "new_relevant_table": {
      "event_budget": {
        "columns": [
          "event_id",
          "event_name",
          "event_date",
          "type",
          "notes",
          "location",
          "status",
          "budget_id",
          "category",
          "spent",
          "remaining",
          "amount",
          "event_status",
          "link_to_event"
        ],
        "ddl": "create table event_budget( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text, budget_id text, category text, spent real, remaining real, amount integer, event_status text)"
      }
    },
    "old_new_table_mapping": {
      "event": "event_budget",
      "budget": "event_budget"
    },
    "new_table_primary_key": "event_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT spent FROM event_budget WHERE event_name = 'September Meeting' AND category = 'Food' AND SUBSTR(event_date, 6, 2) = '09'"
  },
  {
    "train_idx": 1333,
    "db_id": "student_club",
    "question": "What city and state did the President of the Student_Club grow up?",
    "query": "SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'President'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "zip_code": {
        "ddl": "create table zip_code( zip_code integer primary key, type text, city text, county text, state text, short_state text)"
      }
    },
    "new_relevant_table": {
      "member_zip": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "major_id",
          "zip_code",
          "type",
          "city",
          "county",
          "state",
          "short_state"
        ],
        "ddl": "create table member_zip( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(link_to_major) references major(major_id) text, zip_code integer, type text, city text, county text, state text, short_state text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_zip",
      "zip_code": "member_zip"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT city, state FROM member_zip WHERE position = 'President'"
  },
  {
    "train_idx": 1334,
    "db_id": "student_club",
    "question": "List the full name of the Student_Club members that grew up in Illinois state.",
    "query": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Illinois'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "zip_code": {
        "ddl": "create table zip_code( zip_code integer primary key, type text, city text, county text, state text, short_state text)"
      }
    },
    "new_relevant_table": {
      "member_zip": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "zip_code",
          "type",
          "city",
          "county",
          "state",
          "short_state"
        ],
        "ddl": "create table member_zip( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(link_to_major) references major(major_id) text, zip_code integer, type text, city text, county text, state text, short_state text)"
      }
    },
    "old_new_table_mapping": {
      "zip_code": "member_zip",
      "member": "member_zip"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT first_name, last_name FROM member_zip WHERE state = 'Illinois'"
  },
  {
    "train_idx": 1335,
    "db_id": "student_club",
    "question": "How much did the Student_Club members spend on advertisement in September Meeting?",
    "query": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'",
    "relevant_table": {
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      }
    },
    "new_relevant_table": {
      "event_budget": {
        "columns": [
          "event_id",
          "event_name",
          "event_date",
          "type",
          "notes",
          "location",
          "status",
          "budget_id",
          "category",
          "spent",
          "remaining",
          "amount",
          "event_status"
        ],
        "ddl": "create table event_budget( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text, budget_id text, category text, spent real, remaining real, amount integer, event_status text)"
      }
    },
    "old_new_table_mapping": {
      "budget": "event_budget",
      "event": "event_budget"
    },
    "new_table_primary_key": "event_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT spent FROM event_budget WHERE event_name = 'September Meeting' AND category = 'Advertisement' AND SUBSTR(event_date, 6, 2) = '09'"
  },
  {
    "train_idx": 1336,
    "db_id": "student_club",
    "question": "What department offers the major that Pierce and Guidi took?",
    "query": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.last_name = 'Pierce' OR T1.last_name = 'Guidi'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "major": {
        "ddl": "create table major( major_id text primary key, major_name text, department text, college text)"
      }
    },
    "new_relevant_table": {
      "member_major": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "major_id",
          "major_name",
          "department",
          "college"
        ],
        "ddl": "create table member_major( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, major_id text, major_name text, department text, college text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_major",
      "major": "member_major"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT department FROM member_major WHERE last_name = 'Pierce' OR last_name = 'Guidi'"
  },
  {
    "train_idx": 1337,
    "db_id": "student_club",
    "question": "What is the total budgeted amount for all category in \"October Speaker\" event?",
    "query": "SELECT SUM(T2.amount) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'October Speaker'",
    "relevant_table": {
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      }
    },
    "new_relevant_table": {
      "event_budget": {
        "columns": [
          "event_id",
          "event_name",
          "event_date",
          "type",
          "notes",
          "location",
          "status",
          "budget_id",
          "category",
          "spent",
          "remaining",
          "amount",
          "event_status",
          "link_to_event"
        ],
        "ddl": "create table event_budget( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text, budget_id text, category text, spent real, remaining real, amount integer, event_status text)"
      }
    },
    "old_new_table_mapping": {
      "budget": "event_budget",
      "event": "event_budget"
    },
    "new_table_primary_key": "event_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT SUM(amount) FROM event_budget WHERE event_name = 'October Speaker' AND event_id = link_to_event"
  },
  {
    "train_idx": 1338,
    "db_id": "student_club",
    "question": "Was each expense in October Meeting on October 8, 2019 approved?",
    "query": "SELECT T3.approved FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting' AND T1.event_date LIKE '2019-10-08%'",
    "relevant_table": {
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      },
      "expense": {
        "ddl": "create table expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, foreign key(link_to_budget) references budget(budget_id) text)"
      }
    },
    "new_relevant_table": {
      "EventExpense": {
        "columns": [
          "event_id",
          "event_name",
          "event_date",
          "type",
          "notes",
          "location",
          "status",
          "expense_id",
          "expense_description",
          "expense_date_expense",
          "cost",
          "approved",
          "link_to_member",
          "link_to_budget"
        ],
        "ddl": "create table EventExpense( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text, expense_id text, expense_description text, expense_date_expense text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, foreign key(link_to_budget) references budget(budget_id) text)"
      },
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references EventExpense(event_id) text)"
      }
    },
    "old_new_table_mapping": {
      "event": "EventExpense",
      "expense": "EventExpense"
    },
    "new_table_primary_key": "event_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "expense_date_expense": {
        "old_table": "expense",
        "old_column": "expense_date"
      }
    },
    "new_gold_sql": "SELECT EventExpense.approved FROM EventExpense WHERE EventExpense.event_name = 'October Meeting' AND EventExpense.event_date LIKE '2019-10-08%'"
  },
  {
    "train_idx": 1339,
    "db_id": "student_club",
    "question": "Calculate the total average cost that Elijah Allen spent in the events on September and October.",
    "query": "SELECT AVG(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.last_name = 'Allen' AND T1.first_name = 'Elijah' AND (SUBSTR(T2.expense_date, 6, 2) = '09' OR SUBSTR(T2.expense_date, 6, 2) = '10')",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "expense": {
        "ddl": "create table expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, foreign key(link_to_budget) references budget(budget_id) text)"
      }
    },
    "new_relevant_table": {
      "member_expense": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "major_id",
          "expense_id",
          "expense_description",
          "expense_date",
          "cost",
          "approved",
          "budget_id"
        ],
        "ddl": "create table member_expense( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text, expense_id text, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_budget) references budget(budget_id) text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_expense",
      "expense": "member_expense"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT AVG(cost) FROM member_expense WHERE last_name = 'Allen' AND first_name = 'Elijah' AND (SUBSTR(expense_date, 6, 2) = '09' OR SUBSTR(expense_date, 6, 2) = '10')"
  },
  {
    "train_idx": 1340,
    "db_id": "student_club",
    "question": "Calculate the difference of the total amount spent in all events by the Student_Club in year 2019 and 2020.",
    "query": "SELECT SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2019' THEN T2.spent ELSE 0 END) - SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2020' THEN T2.spent ELSE 0 END) AS num FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event",
    "relevant_table": {
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      }
    },
    "new_relevant_table": {
      "event_budget": {
        "columns": [
          "event_id",
          "event_name",
          "event_date",
          "type",
          "notes",
          "location",
          "status",
          "budget_id",
          "category",
          "spent",
          "remaining",
          "amount",
          "event_status"
        ],
        "ddl": "create table event_budget( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text, budget_id text, category text, spent real, remaining real, amount integer, event_status text)"
      }
    },
    "old_new_table_mapping": {
      "budget": "event_budget",
      "event": "event_budget"
    },
    "new_table_primary_key": "event_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT SUM(CASE WHEN SUBSTR(event_date, 1, 4) = '2019' THEN spent ELSE 0 END) - SUM(CASE WHEN SUBSTR(event_date, 1, 4) = '2020' THEN spent ELSE 0 END) AS num FROM event_budget"
  },
  {
    "train_idx": 1347,
    "db_id": "student_club",
    "question": "Tell the hometown county for \"Adela O'Gallagher\".",
    "query": "SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Adela' AND T1.last_name = 'O''Gallagher'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "zip_code": {
        "ddl": "create table zip_code( zip_code integer primary key, type text, city text, county text, state text, short_state text)"
      }
    },
    "new_relevant_table": {
      "member_zip": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "zip_code",
          "type",
          "city",
          "county",
          "state",
          "short_state"
        ],
        "ddl": "create table member_zip( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(link_to_major) references major(major_id) text, zip_code integer, type text, city text, county text, state text, short_state text)"
      }
    },
    "old_new_table_mapping": {
      "zip_code": "member_zip",
      "member": "member_zip"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT county FROM member_zip WHERE first_name = 'Adela' AND last_name = 'O''Gallagher' AND zip = zip_code"
  },
  {
    "train_idx": 1348,
    "db_id": "student_club",
    "question": "For all the budgets for \"November Meeting\", how many of them had exceeded the budget?",
    "query": "SELECT COUNT(T2.event_id) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Meeting' AND T1.remaining < 0",
    "relevant_table": {
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      },
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      }
    },
    "new_relevant_table": {
      "budget_event": {
        "columns": [
          "budget_id",
          "category",
          "spent",
          "remaining",
          "amount",
          "event_status",
          "link_to_event",
          "event_id",
          "event_name",
          "event_date",
          "type",
          "notes",
          "location",
          "status"
        ],
        "ddl": "create table budget_event( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, event_id text, event_name text, event_date text, type text, notes text, location text, status text)"
      }
    },
    "old_new_table_mapping": {
      "budget": "budget_event",
      "event": "budget_event"
    },
    "new_table_primary_key": "budget_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(event_id) FROM budget_event WHERE event_name = 'November Meeting' AND remaining < 0"
  },
  {
    "train_idx": 1349,
    "db_id": "student_club",
    "question": "Provide the total number of the budget amount for \"September Speaker\" event.",
    "query": "SELECT SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'September Speaker'",
    "relevant_table": {
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      },
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      }
    },
    "new_relevant_table": {
      "budget_event": {
        "columns": [
          "budget_id",
          "category",
          "spent",
          "remaining",
          "amount",
          "event_status",
          "link_to_event",
          "event_id",
          "event_name",
          "event_date",
          "type",
          "notes",
          "location",
          "status"
        ],
        "ddl": "create table budget_event( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, event_id text, event_name text, event_date text, type text, notes text, location text, status text)"
      }
    },
    "old_new_table_mapping": {
      "budget": "budget_event",
      "event": "budget_event"
    },
    "new_table_primary_key": "budget_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT SUM(amount) FROM budget_event WHERE event_name = 'September Speaker'"
  },
  {
    "train_idx": 1350,
    "db_id": "student_club",
    "question": "What is the status of the event which bought \"Post Cards, Posters\" on 2019/8/20?",
    "query": "SELECT T1.event_status FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T2.expense_description = 'Post Cards, Posters' AND T2.expense_date = '2019-08-20'",
    "relevant_table": {
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      },
      "expense": {
        "ddl": "create table expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, foreign key(link_to_budget) references budget(budget_id) text)"
      }
    },
    "new_relevant_table": {
      "budget_expense": {
        "columns": [
          "expense_id",
          "expense_description",
          "expense_date",
          "cost",
          "approved",
          "link_to_member",
          "link_to_budget",
          "budget_id",
          "category",
          "spent",
          "remaining",
          "amount",
          "event_status",
          "link_to_event"
        ],
        "ddl": "create table budget_expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, budget_id text, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      }
    },
    "old_new_table_mapping": {
      "expense": "budget_expense",
      "budget": "budget_expense"
    },
    "new_table_primary_key": "expense_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT event_status FROM budget_expense WHERE expense_description = 'Post Cards, Posters' AND expense_date = '2019-08-20'"
  },
  {
    "train_idx": 1351,
    "db_id": "student_club",
    "question": "What was Brent Thomason's major?",
    "query": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Brent' AND T1.last_name = 'Thomason'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "major": {
        "ddl": "create table major( major_id text primary key, major_name text, department text, college text)"
      }
    },
    "new_relevant_table": {
      "member_major": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "major_id",
          "major_name",
          "department",
          "college"
        ],
        "ddl": "create table member_major( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, major_id text, major_name text, department text, college text)"
      }
    },
    "old_new_table_mapping": {
      "major": "member_major",
      "member": "member_major"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT major_name FROM member_major WHERE first_name = 'Brent' AND last_name = 'Thomason'"
  },
  {
    "train_idx": 1352,
    "db_id": "student_club",
    "question": "For all the club members from \"Business\" major, how many of them wear medium size t-shirt?",
    "query": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business' AND T1.t_shirt_size = 'Medium'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "major": {
        "ddl": "create table major( major_id text primary key, major_name text, department text, college text)"
      }
    },
    "new_relevant_table": {
      "member_major": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "major_id",
          "major_name",
          "department",
          "college"
        ],
        "ddl": "create table member_major( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, major_id text, major_name text, department text, college text)"
      }
    },
    "old_new_table_mapping": {
      "major": "member_major",
      "member": "member_major"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(member_id) FROM member_major WHERE major_name = 'Business' AND t_shirt_size = 'Medium'"
  },
  {
    "train_idx": 1353,
    "db_id": "student_club",
    "question": "What's Christof Nielson's zip code type?",
    "query": "SELECT T2.type FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Christof' AND T1.last_name = 'Nielson'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "zip_code": {
        "ddl": "create table zip_code( zip_code integer primary key, type text, city text, county text, state text, short_state text)"
      }
    },
    "new_relevant_table": {
      "member_zip": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "zip_code",
          "type",
          "city",
          "county",
          "state",
          "short_state"
        ],
        "ddl": "create table member_zip( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(link_to_major) references major(major_id) text, zip_code integer, type text, city text, county text, state text, short_state text)"
      }
    },
    "old_new_table_mapping": {
      "zip_code": "member_zip",
      "member": "member_zip"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT type FROM member_zip WHERE first_name = 'Christof' AND last_name = 'Nielson' AND zip = zip_code"
  },
  {
    "train_idx": 1354,
    "db_id": "student_club",
    "question": "State the major name for the Vice President of the club.",
    "query": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "major": {
        "ddl": "create table major( major_id text primary key, major_name text, department text, college text)"
      }
    },
    "new_relevant_table": {
      "member_major": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "major_id",
          "major_name",
          "department",
          "college"
        ],
        "ddl": "create table member_major( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, major_id text, major_name text, department text, college text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_major",
      "major": "member_major"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT member_major.major_name FROM member_major WHERE member_major.position = 'Vice President'"
  },
  {
    "train_idx": 1355,
    "db_id": "student_club",
    "question": "Where is the hometown state for \"Sacha Harrison\"?",
    "query": "SELECT T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "zip_code": {
        "ddl": "create table zip_code( zip_code integer primary key, type text, city text, county text, state text, short_state text)"
      }
    },
    "new_relevant_table": {
      "member_zip": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "zip_code",
          "type",
          "city",
          "county",
          "state",
          "short_state"
        ],
        "ddl": "create table member_zip( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(link_to_major) references major(major_id) text, zip_code integer, type text, city text, county text, state text, short_state text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_zip",
      "zip_code": "member_zip"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT state FROM member_zip WHERE first_name = 'Sacha' AND last_name = 'Harrison'"
  },
  {
    "train_idx": 1356,
    "db_id": "student_club",
    "question": "Which department was the President of the club in?",
    "query": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "major": {
        "ddl": "create table major( major_id text primary key, major_name text, department text, college text)"
      }
    },
    "new_relevant_table": {
      "member_major": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "major_id",
          "major_name",
          "department",
          "college"
        ],
        "ddl": "create table member_major( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, major_id text, major_name text, department text, college text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_major",
      "major": "member_major"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT department FROM member_major WHERE position = 'President' AND link_to_major = major_id"
  },
  {
    "train_idx": 1357,
    "db_id": "student_club",
    "question": "State the date Connor Hilton paid his/her dues.",
    "query": "SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Connor' AND T1.last_name = 'Hilton' AND T2.source = 'Dues'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "income": {
        "ddl": "create table income( income_id text primary key, date_received text, amount integer, source text, notes text, foreign key(link_to_member) references member(member_id) text)"
      }
    },
    "new_relevant_table": {
      "member_income": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "income_id",
          "date_received",
          "amount",
          "source",
          "notes",
          "link_to_member"
        ],
        "ddl": "create table member_income( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text, income_id text, date_received text, amount integer, source text, notes text)"
      }
    },
    "old_new_table_mapping": {
      "income": "member_income",
      "member": "member_income"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT date_received FROM member_income WHERE first_name = 'Connor' AND last_name = 'Hilton' AND source = 'Dues'"
  },
  {
    "train_idx": 1358,
    "db_id": "student_club",
    "question": "Who was the first one paid his/her dues? Tell the full name.",
    "query": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.source = 'Dues' ORDER BY T2.date_received LIMIT 1",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "income": {
        "ddl": "create table income( income_id text primary key, date_received text, amount integer, source text, notes text, foreign key(link_to_member) references member(member_id) text)"
      }
    },
    "new_relevant_table": {
      "member_income": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "income_id",
          "date_received",
          "amount",
          "source",
          "notes",
          "link_to_member"
        ],
        "ddl": "create table member_income( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text, income_id text, date_received text, amount integer, source text, notes text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_income",
      "income": "member_income"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT first_name, last_name FROM member_income WHERE source = 'Dues' ORDER BY date_received LIMIT 1"
  },
  {
    "train_idx": 1359,
    "db_id": "student_club",
    "question": "How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"?",
    "query": "SELECT CAST(SUM(CASE WHEN T2.event_name = 'Yearly Kickoff' THEN T1.amount ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.event_name = 'October Meeting' THEN T1.amount ELSE 0 END) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.type = 'Meeting'",
    "relevant_table": {
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      },
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      }
    },
    "new_relevant_table": {
      "budget_event": {
        "columns": [
          "budget_id",
          "category",
          "spent",
          "remaining",
          "amount",
          "event_status",
          "link_to_event",
          "event_id",
          "event_name",
          "event_date",
          "type",
          "notes",
          "location",
          "status"
        ],
        "ddl": "create table budget_event( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, event_id text, event_name text, event_date text, type text, notes text, location text, status text)"
      }
    },
    "old_new_table_mapping": {
      "budget": "budget_event",
      "event": "budget_event"
    },
    "new_table_primary_key": "budget_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(CASE WHEN budget_eventevent_name = 'Yearly Kickoff' THEN budget_eventamount ELSE 0 END) AS REAL) / SUM(CASE WHEN budget_eventevent_name = 'October Meeting' THEN budget_eventamount ELSE 0 END) FROM budget_event WHERE budget_eventcategory = 'Advertisement' AND budget_eventtype = 'Meeting'"
  },
  {
    "train_idx": 1360,
    "db_id": "student_club",
    "question": "What percentage was the budget for Parking to the total budget for the \"November Speaker\"?",
    "query": "SELECT CAST(SUM(CASE WHEN T1.category = 'Parking' THEN T1.amount ELSE 0 END) AS REAL) * 100 / SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Speaker'",
    "relevant_table": {
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      },
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      }
    },
    "new_relevant_table": {
      "event_budget": {
        "columns": [
          "event_id",
          "event_name",
          "event_date",
          "type",
          "notes",
          "location",
          "status",
          "budget_id",
          "category",
          "spent",
          "remaining",
          "amount",
          "event_status",
          "link_to_event"
        ],
        "ddl": "create table event_budget( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text, budget_id text, category text, spent real, remaining real, amount integer, event_status text)"
      }
    },
    "old_new_table_mapping": {
      "event": "event_budget",
      "budget": "event_budget"
    },
    "new_table_primary_key": "event_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(CASE WHEN event_budgetcategory = 'Parking' THEN event_budgetamount ELSE 0 END) AS REAL) * 100 / SUM(event_budgetamount) FROM event_budget WHERE event_budgetevent_name = 'November Speaker'"
  },
  {
    "train_idx": 1364,
    "db_id": "student_club",
    "question": "Where is Amy Firth's hometown?",
    "query": "SELECT T2.city, T2.county, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Amy' AND T1.last_name = 'Firth'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "zip_code": {
        "ddl": "create table zip_code( zip_code integer primary key, type text, city text, county text, state text, short_state text)"
      }
    },
    "new_relevant_table": {
      "member_zip": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "zip_code",
          "type",
          "city",
          "county",
          "state",
          "short_state"
        ],
        "ddl": "create table member_zip( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(link_to_major) references major(major_id) text, zip_code integer, type text, city text, county text, state text, short_state text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_zip",
      "zip_code": "member_zip"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT city, county, state FROM member_zip WHERE first_name = 'Amy' AND last_name = 'Firth'"
  },
  {
    "train_idx": 1365,
    "db_id": "student_club",
    "question": "What are the expenses of the budget with the lowest remaining?",
    "query": "SELECT T2.expense_description FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget ORDER BY T1.remaining LIMIT 1",
    "relevant_table": {
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      },
      "expense": {
        "ddl": "create table expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, foreign key(link_to_budget) references budget(budget_id) text)"
      }
    },
    "new_relevant_table": {
      "budget_expense": {
        "columns": [
          "budget_id",
          "category",
          "spent",
          "remaining",
          "amount",
          "event_status",
          "expense_id",
          "expense_description",
          "expense_date",
          "cost",
          "approved"
        ],
        "ddl": "create table budget_expense( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, expense_id text, expense_description text, expense_date text, cost real, approved text)"
      }
    },
    "old_new_table_mapping": {
      "budget": "budget_expense",
      "expense": "budget_expense"
    },
    "new_table_primary_key": "budget_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT expense_description FROM budget_expense ORDER BY remaining LIMIT 1"
  },
  {
    "train_idx": 1366,
    "db_id": "student_club",
    "question": "List all the members who attended the event \"October Meeting\".",
    "query": "SELECT DISTINCT T3.member_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'October Meeting'",
    "relevant_table": {
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "attendance": {
        "ddl": "create table attendance( foreign key(link_to_event) references event(event_id) text, foreign key(link_to_member) references member(member_id) text)"
      },
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      }
    },
    "new_relevant_table": {
      "event_member": {
        "columns": [
          "event_id",
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip_code",
          "major_id"
        ],
        "ddl": "create table event_member( foreign key(link_to_event) references event(event_id) text, member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      }
    },
    "old_new_table_mapping": {
      "attendance": "event_member",
      "member": "event_member"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT member_id FROM event_member WHERE event_name = 'October Meeting'"
  },
  {
    "train_idx": 1367,
    "db_id": "student_club",
    "question": "Which college do most of the members go to?",
    "query": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id GROUP BY T2.major_id ORDER BY COUNT(T2.college) DESC LIMIT 1",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "major": {
        "ddl": "create table major( major_id text primary key, major_name text, department text, college text)"
      }
    },
    "new_relevant_table": {
      "member_major": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "major_id",
          "major_name",
          "department",
          "college"
        ],
        "ddl": "create table member_major( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, major_id text, major_name text, department text, college text)"
      }
    },
    "old_new_table_mapping": {
      "major": "member_major",
      "member": "member_major"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT college FROM member_major GROUP BY major_id ORDER BY COUNT(college) DESC LIMIT 1"
  },
  {
    "train_idx": 1368,
    "db_id": "student_club",
    "question": "What does the person with the phone number \"809-555-3360\" major in?",
    "query": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.phone = '809-555-3360'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "major": {
        "ddl": "create table major( major_id text primary key, major_name text, department text, college text)"
      }
    },
    "new_relevant_table": {
      "member_major": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "major_id",
          "major_name",
          "department",
          "college"
        ],
        "ddl": "create table member_major( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, major_id text, major_name text, department text, college text)"
      }
    },
    "old_new_table_mapping": {
      "major": "member_major",
      "member": "member_major"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT major_name FROM member_major WHERE phone = '809-555-3360' AND link_to_major = major_id"
  },
  {
    "train_idx": 1369,
    "db_id": "student_club",
    "question": "Which event has the highest budget amount?",
    "query": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id ORDER BY T1.amount DESC LIMIT 1",
    "relevant_table": {
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      },
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      }
    },
    "new_relevant_table": {
      "event_budget": {
        "columns": [
          "event_id",
          "event_name",
          "event_date",
          "type",
          "notes",
          "location",
          "status",
          "budget_id",
          "category",
          "spent",
          "remaining",
          "amount",
          "event_status",
          "link_to_event"
        ],
        "ddl": "create table event_budget( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text, budget_id text, category text, spent real, remaining real, amount integer, event_status text)"
      }
    },
    "old_new_table_mapping": {
      "event": "event_budget",
      "budget": "event_budget"
    },
    "new_table_primary_key": "event_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT event_name FROM event_budget ORDER BY amount DESC LIMIT 1"
  },
  {
    "train_idx": 1370,
    "db_id": "student_club",
    "question": "List all the expenses incurred by the vice president.",
    "query": "SELECT T2.expense_id, T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "expense": {
        "ddl": "create table expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, foreign key(link_to_budget) references budget(budget_id) text)"
      }
    },
    "new_relevant_table": {
      "member_expense": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "expense_id",
          "expense_description",
          "expense_date",
          "cost",
          "approved",
          "link_to_member",
          "link_to_budget"
        ],
        "ddl": "create table member_expense( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text, expense_id text, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_budget) references budget(budget_id) text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_expense",
      "expense": "member_expense"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT expense_id, expense_description FROM member_expense WHERE position = 'Vice President'"
  },
  {
    "train_idx": 1371,
    "db_id": "student_club",
    "question": "How many members attended the \"Women's Soccer\" event?",
    "query": "SELECT COUNT(T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer'",
    "relevant_table": {
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "attendance": {
        "ddl": "create table attendance( foreign key(link_to_event) references event(event_id) text, foreign key(link_to_member) references member(member_id) text)"
      }
    },
    "new_relevant_table": {
      "event_attendance": {
        "columns": [
          "event_id",
          "event_name",
          "event_date",
          "type",
          "notes",
          "location",
          "status",
          "link_to_event",
          "link_to_member"
        ],
        "ddl": "create table event_attendance( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text, foreign key(link_to_member) references member(member_id) text)"
      }
    },
    "old_new_table_mapping": {
      "attendance": "event_attendance",
      "event": "event_attendance"
    },
    "new_table_primary_key": "event_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(link_to_member) FROM event_attendance WHERE event_name = 'Women''s Soccer'"
  },
  {
    "train_idx": 1372,
    "db_id": "student_club",
    "question": "When did the member, Casey Mason, received the income?",
    "query": "SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Casey' AND T1.last_name = 'Mason'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "income": {
        "ddl": "create table income( income_id text primary key, date_received text, amount integer, source text, notes text, foreign key(link_to_member) references member(member_id) text)"
      }
    },
    "new_relevant_table": {
      "member_income": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "major_id",
          "income_id",
          "date_received",
          "amount",
          "source",
          "notes"
        ],
        "ddl": "create table member_income( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text, income_id text, date_received text, amount integer, source text, notes text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_income",
      "income": "member_income"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT date_received FROM member_income WHERE first_name = 'Casey' AND last_name = 'Mason'"
  },
  {
    "train_idx": 1373,
    "db_id": "student_club",
    "question": "How many of the members' hometowns are from Maryland state?",
    "query": "SELECT COUNT(T2.member_id) FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip WHERE T1.state = 'Maryland'",
    "relevant_table": {
      "zip_code": {
        "ddl": "create table zip_code( zip_code integer primary key, type text, city text, county text, state text, short_state text)"
      },
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      }
    },
    "new_relevant_table": {
      "member_zip": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "zip_code",
          "type",
          "city",
          "county",
          "state",
          "short_state"
        ],
        "ddl": "create table member_zip( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(link_to_major) references major(major_id) text, zip_code integer, type text, city text, county text, state text, short_state text)"
      }
    },
    "old_new_table_mapping": {
      "zip_code": "member_zip",
      "member": "member_zip"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(member_id) FROM member_zip WHERE state = 'Maryland'"
  },
  {
    "train_idx": 1374,
    "db_id": "student_club",
    "question": "How many events did the member with the phone number \"954-555-6240\" attend?",
    "query": "SELECT COUNT(T2.link_to_event) FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member WHERE T1.phone = '954-555-6240'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "attendance": {
        "ddl": "create table attendance( foreign key(link_to_event) references event(event_id) text, foreign key(link_to_member) references member(member_id) text)"
      }
    },
    "new_relevant_table": {
      "member_attendance": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "major_id",
          "event_id"
        ],
        "ddl": "create table member_attendance( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text, foreign key(link_to_event) references event(event_id) text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_attendance",
      "attendance": "member_attendance"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(event_id) FROM member_attendance WHERE phone = '954-555-6240'"
  },
  {
    "train_idx": 1375,
    "db_id": "student_club",
    "question": "List all the members of the \"School of Applied Sciences, Technology and Education\" department.",
    "query": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'School of Applied Sciences, Technology and Education'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "major": {
        "ddl": "create table major( major_id text primary key, major_name text, department text, college text)"
      }
    },
    "new_relevant_table": {
      "member_major": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "major_id",
          "major_name",
          "department",
          "college"
        ],
        "ddl": "create table member_major( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, major_id text, major_name text, department text, college text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_major",
      "major": "member_major"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT first_name, last_name FROM member_major WHERE department = 'School of Applied Sciences, Technology and Education'"
  },
  {
    "train_idx": 1376,
    "db_id": "student_club",
    "question": "Among all the closed events, which event has the highest spend-to-budget ratio?",
    "query": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.status = 'Closed' ORDER BY T1.spent / T1.amount DESC LIMIT 1",
    "relevant_table": {
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      },
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      }
    },
    "new_relevant_table": {
      "event_budget": {
        "columns": [
          "event_id",
          "event_name",
          "event_date",
          "type",
          "notes",
          "location",
          "status",
          "budget_id",
          "category",
          "spent",
          "remaining",
          "amount",
          "event_status",
          "link_to_event"
        ],
        "ddl": "create table event_budget( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text, budget_id text, category text, spent real, remaining real, amount integer, event_status text)"
      }
    },
    "old_new_table_mapping": {
      "event": "event_budget",
      "budget": "event_budget"
    },
    "new_table_primary_key": "event_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT event_name FROM event_budget WHERE status = 'Closed' ORDER BY spent / amount DESC LIMIT 1"
  },
  {
    "train_idx": 1381,
    "db_id": "student_club",
    "question": "List the name of students that have attended more than 7 events.",
    "query": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T2.link_to_member HAVING COUNT(T2.link_to_event) > 7",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "attendance": {
        "ddl": "create table attendance( foreign key(link_to_event) references event(event_id) text, foreign key(link_to_member) references member(member_id) text)"
      }
    },
    "new_relevant_table": {
      "member_attendance": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "major_id",
          "event_id"
        ],
        "ddl": "create table member_attendance( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text, foreign key(link_to_event) references event(event_id) text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_attendance",
      "attendance": "member_attendance"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT first_name, last_name FROM member_attendance GROUP BY member_id HAVING COUNT(event_id) > 7"
  },
  {
    "train_idx": 1382,
    "db_id": "student_club",
    "question": "Among the students majored in interior design, who have attended the Community Theater event?",
    "query": "SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.event_name = 'Community Theater' AND T1.major_name = 'Interior Design'",
    "relevant_table": {
      "major": {
        "ddl": "create table major( major_id text primary key, major_name text, department text, college text)"
      },
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "attendance": {
        "ddl": "create table attendance( foreign key(link_to_event) references event(event_id) text, foreign key(link_to_member) references member(member_id) text)"
      },
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      }
    },
    "new_relevant_table": {
      "EventMember": {
        "columns": [
          "event_id",
          "event_name",
          "event_date",
          "type",
          "notes",
          "location",
          "status",
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major"
        ],
        "ddl": "create table EventMember( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text, member_id text, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "major": {
        "ddl": "create table major( major_id text primary key, major_name text, department text, college text)"
      },
      "attendance": {
        "ddl": "create table attendance( foreign key(link_to_event) references EventMember(event_id) text, foreign key(link_to_member) references EventMember(member_id) text)"
      }
    },
    "old_new_table_mapping": {
      "event": "EventMember",
      "member": "EventMember"
    },
    "new_table_primary_key": "event_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT first_name, last_name FROM EventMember WHERE event_name = 'Community Theater' AND link_to_major = 'Interior Design'"
  },
  {
    "train_idx": 1383,
    "db_id": "student_club",
    "question": "State the name of students from Georgetown, South Carolina.",
    "query": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Georgetown' AND T2.state = 'South Carolina'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "zip_code": {
        "ddl": "create table zip_code( zip_code integer primary key, type text, city text, county text, state text, short_state text)"
      }
    },
    "new_relevant_table": {
      "member_zip": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "zip_code",
          "type",
          "city",
          "county",
          "state",
          "short_state"
        ],
        "ddl": "create table member_zip( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(link_to_major) references major(major_id) text, zip_code integer, type text, city text, county text, state text, short_state text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_zip",
      "zip_code": "member_zip"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT first_name, last_name FROM member_zip WHERE city = 'Georgetown' AND state = 'South Carolina'"
  },
  {
    "train_idx": 1384,
    "db_id": "student_club",
    "question": "How many income generated by Grant Gilmour?",
    "query": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Grant' AND T1.last_name = 'Gilmour'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "income": {
        "ddl": "create table income( income_id text primary key, date_received text, amount integer, source text, notes text, foreign key(link_to_member) references member(member_id) text)"
      }
    },
    "new_relevant_table": {
      "member_income": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "income_id",
          "date_received",
          "amount",
          "source",
          "notes",
          "link_to_member"
        ],
        "ddl": "create table member_income( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text, income_id text, date_received text, amount integer, source text, notes text)"
      }
    },
    "old_new_table_mapping": {
      "income": "member_income",
      "member": "member_income"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT amount FROM member_income WHERE first_name = 'Grant' AND last_name = 'Gilmour'"
  },
  {
    "train_idx": 1385,
    "db_id": "student_club",
    "question": "Which student was able to generate income more than $40?",
    "query": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.amount > 40",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "income": {
        "ddl": "create table income( income_id text primary key, date_received text, amount integer, source text, notes text, foreign key(link_to_member) references member(member_id) text)"
      }
    },
    "new_relevant_table": {
      "member_income": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "income_id",
          "date_received",
          "amount",
          "source",
          "notes",
          "link_to_member"
        ],
        "ddl": "create table member_income( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text, income_id text, date_received text, amount integer, source text, notes text)"
      }
    },
    "old_new_table_mapping": {
      "income": "member_income",
      "member": "member_income"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT first_name, last_name FROM member_income WHERE amount > 40"
  },
  {
    "train_idx": 1386,
    "db_id": "student_club",
    "question": "What is the total expense for the Yearly Kickoff?",
    "query": "SELECT SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'Yearly Kickoff'",
    "relevant_table": {
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      },
      "expense": {
        "ddl": "create table expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, foreign key(link_to_budget) references budget(budget_id) text)"
      }
    },
    "new_relevant_table": {
      "EventExpense": {
        "columns": [
          "expense_id",
          "expense_description",
          "expense_date",
          "cost",
          "approved",
          "link_to_member",
          "link_to_budget",
          "event_id",
          "event_name",
          "event_date_new",
          "type",
          "notes",
          "location",
          "status"
        ],
        "ddl": "create table EventExpense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, foreign key(link_to_budget) references budget(budget_id) text, event_id text, event_name text, event_date_new text, type text, notes text, location text, status text)"
      },
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references EventExpense(event_id) text)"
      }
    },
    "old_new_table_mapping": {
      "expense": "EventExpense",
      "event": "EventExpense"
    },
    "new_table_primary_key": "expense_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "event_date_new": {
        "old_table": "event",
        "old_column": "event_date"
      }
    },
    "new_gold_sql": "SELECT SUM(cost) FROM EventExpense WHERE event_name = 'Yearly Kickoff'"
  },
  {
    "train_idx": 1387,
    "db_id": "student_club",
    "question": "Which student has been entrusted to manage the budget for the Yearly Kickoff?",
    "query": "SELECT T4.first_name, T4.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.event_name = 'Yearly Kickoff'",
    "relevant_table": {
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      },
      "expense": {
        "ddl": "create table expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, foreign key(link_to_budget) references budget(budget_id) text)"
      },
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      }
    },
    "new_relevant_table": {
      "member_budget": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "budget_id",
          "category",
          "spent",
          "remaining",
          "amount",
          "event_status",
          "link_to_event"
        ],
        "ddl": "create table member_budget( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text, budget_id text, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      },
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "expense": {
        "ddl": "create table expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member_budget(member_id) text, foreign key(link_to_budget) references member_budget(budget_id) text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_budget",
      "budget": "member_budget"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT first_name, last_name FROM event WHERE event_name = 'Yearly Kickoff'"
  },
  {
    "train_idx": 1388,
    "db_id": "student_club",
    "question": "Which students manage to generate the highest income. State his/her full name along with the income source.",
    "query": "SELECT T1.first_name, T1.last_name, T2.source FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.first_name, T1.last_name, T2.source ORDER BY SUM(T2.amount) DESC LIMIT 1",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "income": {
        "ddl": "create table income( income_id text primary key, date_received text, amount integer, source text, notes text, foreign key(link_to_member) references member(member_id) text)"
      }
    },
    "new_relevant_table": {
      "member_income": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "income_id",
          "date_received",
          "amount",
          "source",
          "notes",
          "link_to_member"
        ],
        "ddl": "create table member_income( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text, income_id text, date_received text, amount integer, source text, notes text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_income",
      "income": "member_income"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT first_name, last_name, source FROM member_income GROUP BY first_name, last_name, source ORDER BY SUM(amount) DESC LIMIT 1"
  },
  {
    "train_idx": 1389,
    "db_id": "student_club",
    "question": "Which event has the lowest cost?",
    "query": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget ORDER BY T3.cost LIMIT 1",
    "relevant_table": {
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      },
      "expense": {
        "ddl": "create table expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, foreign key(link_to_budget) references budget(budget_id) text)"
      }
    },
    "new_relevant_table": {
      "budget_expense": {
        "columns": [
          "expense_id",
          "expense_description",
          "expense_date",
          "cost",
          "approved",
          "link_to_member",
          "link_to_budget",
          "budget_id",
          "category",
          "spent",
          "remaining",
          "amount",
          "event_status",
          "link_to_event"
        ],
        "ddl": "create table budget_expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, budget_id text, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      },
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      }
    },
    "old_new_table_mapping": {
      "expense": "budget_expense",
      "budget": "budget_expense"
    },
    "new_table_primary_key": "expense_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT event_name FROM event ORDER BY cost LIMIT 1"
  },
  {
    "train_idx": 1390,
    "db_id": "student_club",
    "question": "Based on the total cost for all event, what is the percentage of cost for Yearly Kickoff event?",
    "query": "SELECT CAST(SUM(CASE WHEN T1.event_name = 'Yearly Kickoff' THEN T3.cost ELSE 0 END) AS REAL) * 100 / SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget",
    "relevant_table": {
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      },
      "expense": {
        "ddl": "create table expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, foreign key(link_to_budget) references budget(budget_id) text)"
      }
    },
    "new_relevant_table": {
      "event_expense": {
        "columns": [
          "expense_id",
          "expense_description",
          "expense_date",
          "cost",
          "approved",
          "link_to_member",
          "link_to_budget",
          "event_id",
          "event_name",
          "event_date",
          "type",
          "notes",
          "location",
          "status"
        ],
        "ddl": "create table event_expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, foreign key(link_to_budget) references budget(budget_id) text, event_id text, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event_expense(event_id) text)"
      }
    },
    "old_new_table_mapping": {
      "expense": "event_expense",
      "event": "event_expense"
    },
    "new_table_primary_key": "expense_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(CASE WHEN event_name = 'Yearly Kickoff' THEN cost ELSE 0 END) AS REAL) * 100 / SUM(cost) FROM event_expense WHERE event_id = link_to_event AND link_to_budget = expense_id"
  },
  {
    "train_idx": 1394,
    "db_id": "student_club",
    "question": "How many members of the Student_Club have major in 'Physics Teaching'?",
    "query": "SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Physics Teaching'",
    "relevant_table": {
      "major": {
        "ddl": "create table major( major_id text primary key, major_name text, department text, college text)"
      },
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      }
    },
    "new_relevant_table": {
      "major_member": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "major_id",
          "major_name",
          "department",
          "college"
        ],
        "ddl": "create table major_member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, major_id text, major_name text, department text, college text)"
      }
    },
    "old_new_table_mapping": {
      "member": "major_member",
      "major": "major_member"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(major_member.member_id) FROM major_member WHERE major_member.major_name = 'Physics Teaching'"
  },
  {
    "train_idx": 1395,
    "db_id": "student_club",
    "question": "How many members did attend the event 'Community Theater' in 2019?",
    "query": "SELECT COUNT(T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Community Theater' AND SUBSTR(T1.event_date, 1, 4) = '2019'",
    "relevant_table": {
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "attendance": {
        "ddl": "create table attendance( foreign key(link_to_event) references event(event_id) text, foreign key(link_to_member) references member(member_id) text)"
      }
    },
    "new_relevant_table": {
      "event_attendance": {
        "columns": [
          "event_id",
          "event_name",
          "event_date",
          "type",
          "notes",
          "location",
          "status",
          "link_to_event",
          "link_to_member"
        ],
        "ddl": "create table event_attendance( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text, foreign key(link_to_member) references member(member_id) text)"
      }
    },
    "old_new_table_mapping": {
      "event": "event_attendance",
      "attendance": "event_attendance"
    },
    "new_table_primary_key": "event_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(link_to_member) FROM event_attendance WHERE event_name = 'Community Theater' AND SUBSTR(event_date, 1, 4) = '2019'"
  },
  {
    "train_idx": 1396,
    "db_id": "student_club",
    "question": "Provide the number of events attended by Luisa Guidi. What is her major?",
    "query": "SELECT COUNT(T3.link_to_event), T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE T2.first_name = 'Luisa' AND T2.last_name = 'Guidi'",
    "relevant_table": {
      "major": {
        "ddl": "create table major( major_id text primary key, major_name text, department text, college text)"
      },
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "attendance": {
        "ddl": "create table attendance( foreign key(link_to_event) references event(event_id) text, foreign key(link_to_member) references member(member_id) text)"
      }
    },
    "new_relevant_table": {
      "member_attendance": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "link_to_event",
          "link_to_member"
        ],
        "ddl": "create table member_attendance( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text, foreign key(link_to_event) references event(event_id) text)"
      },
      "major": {
        "ddl": "create table major( major_id text primary key, major_name text, department text, college text)"
      }
    },
    "old_new_table_mapping": {
      "attendance": "member_attendance",
      "member": "member_attendance"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(member_attendance.link_to_event), major.major_name FROM major INNER JOIN member_attendance ON major.major_id = member_attendance.link_to_major WHERE member_attendance.first_name = 'Luisa' AND member_attendance.last_name = 'Guidi'"
  },
  {
    "train_idx": 1398,
    "db_id": "student_club",
    "question": "Name the event with the highest amount spent on advertisement.",
    "query": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1",
    "relevant_table": {
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      },
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      }
    },
    "new_relevant_table": {
      "budget_event": {
        "columns": [
          "budget_id",
          "category",
          "spent",
          "remaining",
          "amount",
          "event_status",
          "link_to_event",
          "event_id",
          "event_name",
          "event_date",
          "type",
          "notes",
          "location",
          "status"
        ],
        "ddl": "create table budget_event( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, event_id text, event_name text, event_date text, type text, notes text, location text, status text)"
      }
    },
    "old_new_table_mapping": {
      "budget": "budget_event",
      "event": "budget_event"
    },
    "new_table_primary_key": "budget_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT event_name FROM budget_event WHERE category = 'Advertisement' ORDER BY spent DESC LIMIT 1"
  },
  {
    "train_idx": 1399,
    "db_id": "student_club",
    "question": "Did Maya Mclean attend the 'Women's Soccer' event?",
    "query": "SELECT CASE WHEN T3.event_name = 'Women''s Soccer' THEN 'YES' END AS result FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.first_name = 'Maya' AND T1.last_name = 'Mclean'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "attendance": {
        "ddl": "create table attendance( foreign key(link_to_event) references event(event_id) text, foreign key(link_to_member) references member(member_id) text)"
      },
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      }
    },
    "new_relevant_table": {
      "member_attendance": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "major_id",
          "link_to_event",
          "link_to_member"
        ],
        "ddl": "create table member_attendance( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text, foreign key(link_to_event) references event(event_id) text)"
      },
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      }
    },
    "old_new_table_mapping": {
      "attendance": "member_attendance",
      "member": "member_attendance"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CASE WHEN event_name = 'Women''s Soccer' THEN 'YES' END AS result FROM member_attendance WHERE first_name = 'Maya' AND last_name = 'Mclean'"
  },
  {
    "train_idx": 1401,
    "db_id": "student_club",
    "question": "Indicate the cost of posters for 'September Speaker' event.",
    "query": "SELECT T3.cost FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'September Speaker' AND T3.expense_description = 'Posters'",
    "relevant_table": {
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      },
      "expense": {
        "ddl": "create table expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, foreign key(link_to_budget) references budget(budget_id) text)"
      }
    },
    "new_relevant_table": {
      "BudgetExpense": {
        "columns": [
          "budget_id",
          "category",
          "spent",
          "remaining",
          "amount",
          "event_status",
          "link_to_event",
          "expense_id",
          "expense_description",
          "expense_date",
          "cost",
          "approved",
          "link_to_member",
          "link_to_budget"
        ],
        "ddl": "create table BudgetExpense( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text, expense_id text, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text)"
      },
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      }
    },
    "old_new_table_mapping": {
      "budget": "BudgetExpense",
      "expense": "BudgetExpense"
    },
    "new_table_primary_key": "budget_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT BudgetExpense.cost FROM BudgetExpense WHERE BudgetExpense.event_status = 'September Speaker' AND BudgetExpense.expense_description = 'Posters'"
  },
  {
    "train_idx": 1403,
    "db_id": "student_club",
    "question": "Indicate the name of the closed event whose cost has exceeded the budget the most.",
    "query": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event WHERE T1.event_status = 'Closed' AND T1.remaining < 0 ORDER BY T1.remaining LIMIT 1",
    "relevant_table": {
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      },
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      }
    },
    "new_relevant_table": {
      "budget_event": {
        "columns": [
          "budget_id",
          "category",
          "spent",
          "remaining",
          "amount",
          "event_status",
          "link_to_event",
          "event_id",
          "event_name",
          "event_date",
          "type",
          "notes",
          "location",
          "status"
        ],
        "ddl": "create table budget_event( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, event_id text, event_name text, event_date text, type text, notes text, location text, status text)"
      }
    },
    "old_new_table_mapping": {
      "budget": "budget_event",
      "event": "budget_event"
    },
    "new_table_primary_key": "budget_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT event_name FROM budget_event WHERE event_status = 'Closed' AND remaining < 0 ORDER BY remaining LIMIT 1"
  },
  {
    "train_idx": 1404,
    "db_id": "student_club",
    "question": "Identify the type of expenses and their total value approved for 'October Meeting' event.",
    "query": "SELECT T1.type, SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting'",
    "relevant_table": {
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      },
      "expense": {
        "ddl": "create table expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, foreign key(link_to_budget) references budget(budget_id) text)"
      }
    },
    "new_relevant_table": {
      "event_budget": {
        "columns": [
          "event_id",
          "event_name",
          "event_date",
          "type",
          "notes",
          "location",
          "status",
          "budget_id",
          "category",
          "spent",
          "remaining",
          "amount",
          "event_status",
          "link_to_event"
        ],
        "ddl": "create table event_budget( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text, budget_id text, category text, spent real, remaining real, amount integer, event_status text)"
      },
      "expense": {
        "ddl": "create table expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, foreign key(link_to_budget) references event_budget(budget_id) text)"
      }
    },
    "old_new_table_mapping": {
      "event": "event_budget",
      "budget": "event_budget"
    },
    "new_table_primary_key": "event_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT type, SUM(cost) FROM event_budget WHERE event_name = 'October Meeting'"
  },
  {
    "train_idx": 1405,
    "db_id": "student_club",
    "question": "Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.",
    "query": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Speaker' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
    "relevant_table": {
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      }
    },
    "new_relevant_table": {
      "event_budget": {
        "columns": [
          "event_id",
          "event_name",
          "event_date",
          "type",
          "notes",
          "location",
          "status",
          "budget_id",
          "category",
          "spent",
          "remaining",
          "amount",
          "event_status"
        ],
        "ddl": "create table event_budget( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text, budget_id text, category text, spent real, remaining real, amount integer, event_status text)"
      }
    },
    "old_new_table_mapping": {
      "budget": "event_budget",
      "event": "event_budget"
    },
    "new_table_primary_key": "event_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT category, SUM(amount) FROM event_budget WHERE event_name = 'April Speaker' GROUP BY category ORDER BY SUM(amount) ASC"
  },
  {
    "train_idx": 1410,
    "db_id": "student_club",
    "question": "List out the full name and total cost that member id \"rec4BLdZHS2Blfp4v\" incurred?",
    "query": "SELECT T1.first_name, T1.last_name, SUM(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.member_id = 'rec4BLdZHS2Blfp4v'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "expense": {
        "ddl": "create table expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, foreign key(link_to_budget) references budget(budget_id) text)"
      }
    },
    "new_relevant_table": {
      "member_expense": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "expense_id",
          "expense_description",
          "expense_date",
          "cost",
          "approved",
          "link_to_budget"
        ],
        "ddl": "create table member_expense( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text, expense_id text, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_budget) references budget(budget_id) text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_expense",
      "expense": "member_expense"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT first_name, last_name, SUM(cost) FROM member_expense WHERE member_id = 'rec4BLdZHS2Blfp4v'"
  },
  {
    "train_idx": 1411,
    "db_id": "student_club",
    "question": "State what kind of expenses that Sacha Harrison incurred?",
    "query": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "expense": {
        "ddl": "create table expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, foreign key(link_to_budget) references budget(budget_id) text)"
      }
    },
    "new_relevant_table": {
      "member_expense": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "expense_id",
          "expense_description",
          "expense_date",
          "cost",
          "approved",
          "link_to_member",
          "link_to_budget"
        ],
        "ddl": "create table member_expense( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text, expense_id text, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_budget) references budget(budget_id) text)"
      }
    },
    "old_new_table_mapping": {
      "expense": "member_expense",
      "member": "member_expense"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT expense_description FROM member_expense WHERE first_name = 'Sacha' AND last_name = 'Harrison'"
  },
  {
    "train_idx": 1412,
    "db_id": "student_club",
    "question": "What kind of expenses incurred by members who have X-Large in size of tee shirt?",
    "query": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'X-Large'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "expense": {
        "ddl": "create table expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, foreign key(link_to_budget) references budget(budget_id) text)"
      }
    },
    "new_relevant_table": {
      "member_expense": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "major_id",
          "expense_id",
          "expense_description",
          "expense_date",
          "cost",
          "approved",
          "budget_id"
        ],
        "ddl": "create table member_expense( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text, expense_id text, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_budget) references budget(budget_id) text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_expense",
      "expense": "member_expense"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT expense_description FROM member_expense WHERE t_shirt_size = 'X-Large'"
  },
  {
    "train_idx": 1413,
    "db_id": "student_club",
    "question": "Mention the zip code of member who incurred less than 50USD.",
    "query": "SELECT T1.zip FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.cost < 50",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "expense": {
        "ddl": "create table expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, foreign key(link_to_budget) references budget(budget_id) text)"
      }
    },
    "new_relevant_table": {
      "member_expense": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "expense_id",
          "expense_description",
          "expense_date",
          "cost",
          "approved",
          "link_to_member",
          "link_to_budget"
        ],
        "ddl": "create table member_expense( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text, expense_id text, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_budget) references budget(budget_id) text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_expense",
      "expense": "member_expense"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT zip FROM member_expense WHERE cost < 50"
  },
  {
    "train_idx": 1414,
    "db_id": "student_club",
    "question": "State the name of major that Phillip Cullen has joined.",
    "query": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.first_name = 'Phillip' AND T2.last_name = 'Cullen'",
    "relevant_table": {
      "major": {
        "ddl": "create table major( major_id text primary key, major_name text, department text, college text)"
      },
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      }
    },
    "new_relevant_table": {
      "major_member": {
        "columns": [
          "major_id",
          "major_name",
          "department",
          "college",
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major"
        ],
        "ddl": "create table major_member( major_id text primary key, major_name text, department text, college text, member_id text, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer)"
      }
    },
    "old_new_table_mapping": {
      "major": "major_member",
      "member": "major_member"
    },
    "new_table_primary_key": "major_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT major_name FROM major_member WHERE first_name = 'Phillip' AND last_name = 'Cullen'"
  },
  {
    "train_idx": 1415,
    "db_id": "student_club",
    "question": "List out the position of members who joined major of Business.",
    "query": "SELECT T2.position FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Business'",
    "relevant_table": {
      "major": {
        "ddl": "create table major( major_id text primary key, major_name text, department text, college text)"
      },
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      }
    },
    "new_relevant_table": {
      "major_member": {
        "columns": [
          "major_id",
          "major_name",
          "department",
          "college",
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major"
        ],
        "ddl": "create table major_member( major_id text primary key, major_name text, department text, college text, member_id text, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer)"
      }
    },
    "old_new_table_mapping": {
      "major": "major_member",
      "member": "major_member"
    },
    "new_table_primary_key": "major_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT position FROM major_member WHERE major_name = 'Business'"
  },
  {
    "train_idx": 1416,
    "db_id": "student_club",
    "question": "How many members of Business have the Medium size of tee shirt?",
    "query": "SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Business' AND T2.t_shirt_size = 'Medium'",
    "relevant_table": {
      "major": {
        "ddl": "create table major( major_id text primary key, major_name text, department text, college text)"
      },
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      }
    },
    "new_relevant_table": {
      "major_member": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "major_id",
          "major_name",
          "department",
          "college"
        ],
        "ddl": "create table major_member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, major_id text, major_name text, department text, college text)"
      }
    },
    "old_new_table_mapping": {
      "member": "major_member",
      "major": "major_member"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(member_id) FROM major_member WHERE major_name = 'Business' AND t_shirt_size = 'Medium'"
  },
  {
    "train_idx": 1417,
    "db_id": "student_club",
    "question": "List out the type of events which have remaining budget more than 30 USD.",
    "query": "SELECT T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 30",
    "relevant_table": {
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      }
    },
    "new_relevant_table": {
      "event_budget": {
        "columns": [
          "event_id",
          "event_name",
          "event_date",
          "type",
          "notes",
          "location",
          "status",
          "budget_id",
          "category",
          "spent",
          "remaining",
          "amount",
          "event_status",
          "link_to_event"
        ],
        "ddl": "create table event_budget( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text, budget_id text, category text, spent real, remaining real, amount integer, event_status text)"
      }
    },
    "old_new_table_mapping": {
      "event": "event_budget",
      "budget": "event_budget"
    },
    "new_table_primary_key": "event_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT type FROM event_budget WHERE remaining > 30"
  },
  {
    "train_idx": 1418,
    "db_id": "student_club",
    "question": "Mention the category of events which were held at MU 215.",
    "query": "SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215'",
    "relevant_table": {
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      }
    },
    "new_relevant_table": {
      "event_budget": {
        "columns": [
          "event_id",
          "event_name",
          "event_date",
          "type",
          "notes",
          "location",
          "status",
          "budget_id",
          "category",
          "spent",
          "remaining",
          "amount",
          "event_status",
          "link_to_event"
        ],
        "ddl": "create table event_budget( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text, budget_id text, category text, spent real, remaining real, amount integer, event_status text)"
      }
    },
    "old_new_table_mapping": {
      "budget": "event_budget",
      "event": "event_budget"
    },
    "new_table_primary_key": "event_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT category FROM event_budget WHERE location = 'MU 215' AND event_id = link_to_event"
  },
  {
    "train_idx": 1419,
    "db_id": "student_club",
    "question": "What is the category of event which was taken place in 2020-03-24T12:00:00?",
    "query": "SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_date = '2020-03-24T12:00:00'",
    "relevant_table": {
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      }
    },
    "new_relevant_table": {
      "event_budget": {
        "columns": [
          "event_id",
          "event_name",
          "event_date",
          "type",
          "notes",
          "location",
          "status",
          "budget_id",
          "category",
          "spent",
          "remaining",
          "amount",
          "event_status",
          "link_to_event"
        ],
        "ddl": "create table event_budget( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text, budget_id text, category text, spent real, remaining real, amount integer, event_status text)"
      }
    },
    "old_new_table_mapping": {
      "event": "event_budget",
      "budget": "event_budget"
    },
    "new_table_primary_key": "event_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT category FROM event_budget WHERE event_date = '2020-03-24T12:00:00'"
  },
  {
    "train_idx": 1420,
    "db_id": "student_club",
    "question": "State the name of major that Vice President has joined.",
    "query": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Vice President'",
    "relevant_table": {
      "major": {
        "ddl": "create table major( major_id text primary key, major_name text, department text, college text)"
      },
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      }
    },
    "new_relevant_table": {
      "major_member": {
        "columns": [
          "major_id",
          "major_name",
          "department",
          "college",
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major"
        ],
        "ddl": "create table major_member( major_id text primary key, major_name text, department text, college text, member_id text, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer)"
      }
    },
    "old_new_table_mapping": {
      "major": "major_member",
      "member": "major_member"
    },
    "new_table_primary_key": "major_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT major_name FROM major_member WHERE position = 'Vice President'"
  },
  {
    "train_idx": 1421,
    "db_id": "student_club",
    "question": "Calculate the percentage of members who are major Business in the list?",
    "query": "SELECT CAST(SUM(CASE WHEN T2.major_name = 'Business' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Member'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "major": {
        "ddl": "create table major( major_id text primary key, major_name text, department text, college text)"
      }
    },
    "new_relevant_table": {
      "member_major": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "major_id",
          "major_name",
          "department",
          "college"
        ],
        "ddl": "create table member_major( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, major_id text, major_name text, department text, college text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_major",
      "major": "member_major"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(CASE WHEN member_majormajor_name = 'Business' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(member_majormember_id) FROM member_major WHERE member_majorposition = 'Member'"
  },
  {
    "train_idx": 1422,
    "db_id": "student_club",
    "question": "State the category of events were held at MU 215.",
    "query": "SELECT DISTINCT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215'",
    "relevant_table": {
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      }
    },
    "new_relevant_table": {
      "event_budget": {
        "columns": [
          "event_id",
          "event_name",
          "event_date",
          "type",
          "notes",
          "location",
          "status",
          "budget_id",
          "category",
          "spent",
          "remaining",
          "amount",
          "event_status",
          "link_to_event"
        ],
        "ddl": "create table event_budget( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text, budget_id text, category text, spent real, remaining real, amount integer, event_status text)"
      }
    },
    "old_new_table_mapping": {
      "budget": "event_budget",
      "event": "event_budget"
    },
    "new_table_primary_key": "event_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT category FROM event_budget WHERE location = 'MU 215'"
  },
  {
    "train_idx": 1426,
    "db_id": "student_club",
    "question": "List the last name of members with a major in environmental engineering and include its department and college name.",
    "query": "SELECT T2.last_name, T1.department, T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Member' AND T1.major_name = 'Environmental Engineering'",
    "relevant_table": {
      "major": {
        "ddl": "create table major( major_id text primary key, major_name text, department text, college text)"
      },
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      }
    },
    "new_relevant_table": {
      "major_member": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "major_id",
          "major_name",
          "department",
          "college"
        ],
        "ddl": "create table major_member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, major_id text, major_name text, department text, college text)"
      }
    },
    "old_new_table_mapping": {
      "member": "major_member",
      "major": "major_member"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT major_member.last_name, major_member.department, major_member.college FROM major_member WHERE major_member.position = 'Member' AND major_member.major_name = 'Environmental Engineering'"
  },
  {
    "train_idx": 1427,
    "db_id": "student_club",
    "question": "What are the budget category of the events located at MU 215 and a guest speaker type with a 0 budget spent?",
    "query": "SELECT DISTINCT T2.category, T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215' AND T2.spent = 0 AND T1.type = 'Guest Speaker'",
    "relevant_table": {
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      }
    },
    "new_relevant_table": {
      "event_budget": {
        "columns": [
          "event_id",
          "event_name",
          "event_date",
          "event_type",
          "notes",
          "location",
          "status",
          "budget_id",
          "category",
          "spent",
          "remaining",
          "amount",
          "event_status",
          "link_to_event"
        ],
        "ddl": "create table event_budget( event_id text primary key, event_name text, event_date text, event_type text, notes text, location text, status text, budget_id text, category text, spent real, remaining real, amount integer, event_status text)"
      }
    },
    "old_new_table_mapping": {
      "event": "event_budget",
      "budget": "event_budget"
    },
    "new_table_primary_key": "event_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "event_type": {
        "old_table": "event",
        "old_column": "type"
      }
    },
    "new_gold_sql": "SELECT DISTINCT category, event_type FROM event_budget WHERE location = 'MU 215' AND spent = 0 AND event_type = 'Guest Speaker'"
  },
  {
    "train_idx": 1428,
    "db_id": "student_club",
    "question": "List the city and state of members enrolled under electrical and computer engineering department.",
    "query": "SELECT city, state FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major INNER JOIN zip_code AS T3 ON T3.zip_code = T1.zip WHERE department = 'Electrical and Computer Engineering Department' AND position = 'Member'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "major": {
        "ddl": "create table major( major_id text primary key, major_name text, department text, college text)"
      },
      "zip_code": {
        "ddl": "create table zip_code( zip_code integer primary key, type text, city text, county text, state text, short_state text)"
      }
    },
    "new_relevant_table": {
      "major_zip_code": {
        "columns": [
          "major_id",
          "major_name",
          "department",
          "college",
          "zip_code",
          "type",
          "city",
          "county",
          "state",
          "short_state"
        ],
        "ddl": "create table major_zip_code( major_id text primary key, major_name text, department text, college text, zip_code integer, type text, city text, county text, state text, short_state text)"
      },
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references major_zip_code(major_zip_code) integer, foreign key(link_to_major) references major_zip_code(major_id) text)"
      }
    },
    "old_new_table_mapping": {
      "zip_code": "major_zip_code",
      "major": "major_zip_code"
    },
    "new_table_primary_key": "major_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT city, state FROM member WHERE department = 'Electrical and Computer Engineering Department' AND position = 'Member'"
  },
  {
    "train_idx": 1429,
    "db_id": "student_club",
    "question": "What is the name of the social event that was attended by the vice president of the Student_Club located at 900 E. Washington St.?",
    "query": "SELECT T2.event_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.position = 'Vice President' AND T2.location = '900 E. Washington St.' AND T2.type = 'Social'",
    "relevant_table": {
      "attendance": {
        "ddl": "create table attendance( foreign key(link_to_event) references event(event_id) text, foreign key(link_to_member) references member(member_id) text)"
      },
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      }
    },
    "new_relevant_table": {
      "event_attendance": {
        "columns": [
          "event_id",
          "event_name",
          "event_date",
          "type",
          "notes",
          "location",
          "status",
          "link_to_event",
          "link_to_member"
        ],
        "ddl": "create table event_attendance( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text, foreign key(link_to_member) references member(member_id) text)"
      },
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      }
    },
    "old_new_table_mapping": {
      "attendance": "event_attendance",
      "event": "event_attendance"
    },
    "new_table_primary_key": "event_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT event_name FROM event_attendance WHERE link_to_member = 'Vice President' AND location = '900 E Washington St' AND type = 'Social'"
  },
  {
    "train_idx": 1430,
    "db_id": "student_club",
    "question": "What is the last name and position of the student that bought pizza on 09/10/2019?",
    "query": "SELECT T1.last_name, T1.position FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.expense_date = '2019-09-10' AND T2.expense_description = 'Pizza'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "expense": {
        "ddl": "create table expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, foreign key(link_to_budget) references budget(budget_id) text)"
      }
    },
    "new_relevant_table": {
      "member_expense": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "expense_id",
          "expense_description",
          "expense_date",
          "cost",
          "approved",
          "link_to_budget"
        ],
        "ddl": "create table member_expense( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text, expense_id text, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_budget) references budget(budget_id) text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_expense",
      "expense": "member_expense"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT last_name, position FROM member_expense WHERE expense_date = '2019-09-10' AND expense_description = 'Pizza'"
  },
  {
    "train_idx": 1431,
    "db_id": "student_club",
    "question": "List the last name of the members of the club that attended the women's soccer event.",
    "query": "SELECT T3.last_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T2.event_name = 'Women''s Soccer' AND T3.position = 'Member'",
    "relevant_table": {
      "attendance": {
        "ddl": "create table attendance( foreign key(link_to_event) references event(event_id) text, foreign key(link_to_member) references member(member_id) text)"
      },
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      }
    },
    "new_relevant_table": {
      "member_attendance": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "major_id",
          "event_id"
        ],
        "ddl": "create table member_attendance( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text, foreign key(link_to_event) references event(event_id) text)"
      },
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_attendance",
      "attendance": "member_attendance"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT member_attendance.last_name FROM member_attendance WHERE member_attendance.event_id = 'Women''s Soccer' AND member_attendance.position = 'Member'"
  },
  {
    "train_idx": 1432,
    "db_id": "student_club",
    "question": "Among the members with t-shirt size of medium, what is the percentage of the amount 50 received by the Student_Club?",
    "query": "SELECT CAST(SUM(CASE WHEN T2.amount = 50 THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(T2.income_id) FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Member' AND T1.t_shirt_size = 'Medium'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "income": {
        "ddl": "create table income( income_id text primary key, date_received text, amount integer, source text, notes text, foreign key(link_to_member) references member(member_id) text)"
      }
    },
    "new_relevant_table": {
      "member_income": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "major_id",
          "income_id",
          "date_received",
          "amount",
          "source",
          "notes"
        ],
        "ddl": "create table member_income( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text, income_id text, date_received text, amount integer, source text, notes text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_income",
      "income": "member_income"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(CASE WHEN amount = 50 THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(income_id) FROM member_income WHERE position = 'Member' AND t_shirt_size = 'Medium'"
  },
  {
    "train_idx": 1436,
    "db_id": "student_club",
    "question": "Please provide links to events for members who have paid more than 50 dollar.",
    "query": "SELECT DISTINCT T3.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE T1.cost > 50",
    "relevant_table": {
      "expense": {
        "ddl": "create table expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, foreign key(link_to_budget) references budget(budget_id) text)"
      },
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "attendance": {
        "ddl": "create table attendance( foreign key(link_to_event) references event(event_id) text, foreign key(link_to_member) references member(member_id) text)"
      }
    },
    "new_relevant_table": {
      "expense_member": {
        "columns": [
          "expense_id",
          "expense_description",
          "expense_date",
          "cost",
          "approved",
          "link_to_member",
          "link_to_budget",
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major"
        ],
        "ddl": "create table expense_member( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_budget) references budget(budget_id) text, member_id text, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "attendance": {
        "ddl": "create table attendance( foreign key(link_to_event) references event(event_id) text, foreign key(link_to_member) references expense_member(member_id) text)"
      }
    },
    "old_new_table_mapping": {
      "expense": "expense_member",
      "member": "expense_member"
    },
    "new_table_primary_key": "expense_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT link_to_event FROM expense_member WHERE cost > 50"
  },
  {
    "train_idx": 1437,
    "db_id": "student_club",
    "question": "Which members who were approved from 1/10/2019 to 11/19/2019? Please identify the member who attended the event and the link to their event.",
    "query": "SELECT DISTINCT T1.link_to_member, T3.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE date(SUBSTR(T1.expense_date, 1, 10)) BETWEEN '2019-01-10' AND '2019-11-19' AND T1.approved = 'true'",
    "relevant_table": {
      "expense": {
        "ddl": "create table expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, foreign key(link_to_budget) references budget(budget_id) text)"
      },
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "attendance": {
        "ddl": "create table attendance( foreign key(link_to_event) references event(event_id) text, foreign key(link_to_member) references member(member_id) text)"
      }
    },
    "new_relevant_table": {
      "member_attendance": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "major_id",
          "event_id"
        ],
        "ddl": "create table member_attendance( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text, foreign key(link_to_event) references event(event_id) text)"
      },
      "expense": {
        "ddl": "create table expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member_attendance(member_id) text, foreign key(link_to_budget) references budget(budget_id) text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_attendance",
      "attendance": "member_attendance"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT member_attendance.member_id, member_attendance.event_id FROM expense INNER JOIN member_attendance ON expenselink_to_member = member_attendance.member_id WHERE date(SUBSTR(expenseexpense_date, 1, 10)) BETWEEN '2019-01-10' AND '2019-11-19' AND expenseapproved = 'true'"
  },
  {
    "train_idx": 1438,
    "db_id": "student_club",
    "question": "Please indicate the college of the person whose first name is Katy with the link to the major \"rec1N0upiVLy5esTO\".",
    "query": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.link_to_major = 'rec1N0upiVLy5esTO' AND T1.first_name = 'Katy'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "major": {
        "ddl": "create table major( major_id text primary key, major_name text, department text, college text)"
      }
    },
    "new_relevant_table": {
      "member_major": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "major_id",
          "major_name",
          "department",
          "college"
        ],
        "ddl": "create table member_major( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, major_id text, major_name text, department text, college text)"
      }
    },
    "old_new_table_mapping": {
      "major": "member_major",
      "member": "member_major"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT college FROM member_major WHERE link_to_major = 'rec1N0upiVLy5esTO' AND first_name = 'Katy'"
  },
  {
    "train_idx": 1439,
    "db_id": "student_club",
    "question": "Please list the phone numbers of the members who majored in business at the College of Agriculture and Applied Sciences.",
    "query": "SELECT T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Business' AND T2.college = 'College of Agriculture and Applied Sciences'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "major": {
        "ddl": "create table major( major_id text primary key, major_name text, department text, college text)"
      }
    },
    "new_relevant_table": {
      "member_major": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "major_id",
          "major_name",
          "department",
          "college"
        ],
        "ddl": "create table member_major( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, major_id text, major_name text, department text, college text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_major",
      "major": "member_major"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT member_major.phone FROM member_major WHERE member_major.major_name = 'Business' AND member_major.college = 'College of Agriculture and Applied Sciences'"
  },
  {
    "train_idx": 1440,
    "db_id": "student_club",
    "question": "List emails of people who paid more than 20 dollars from 9/10/2019 to 11/19/2019.",
    "query": "SELECT DISTINCT T1.email FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE date(SUBSTR(T2.expense_date, 1, 10)) BETWEEN '2019-09-10' AND '2019-11-19' AND T2.cost > 20",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "expense": {
        "ddl": "create table expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, foreign key(link_to_budget) references budget(budget_id) text)"
      }
    },
    "new_relevant_table": {
      "member_expense": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "expense_id",
          "expense_description",
          "expense_date",
          "cost",
          "approved",
          "link_to_member",
          "link_to_budget"
        ],
        "ddl": "create table member_expense( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text, expense_id text, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_budget) references budget(budget_id) text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_expense",
      "expense": "member_expense"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT email FROM member_expense WHERE date(SUBSTR(expense_date, 1, 10)) BETWEEN '2019-09-10' AND '2019-11-19' AND cost > 20"
  },
  {
    "train_idx": 1441,
    "db_id": "student_club",
    "question": "How many members have education major in the College of Education & Human Services?",
    "query": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Member' AND T2.major_name LIKE '%Education%' AND T2.college = 'College of Education & Human Services'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "major": {
        "ddl": "create table major( major_id text primary key, major_name text, department text, college text)"
      }
    },
    "new_relevant_table": {
      "member_major": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "major_id",
          "major_name",
          "department",
          "college"
        ],
        "ddl": "create table member_major( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, major_id text, major_name text, department text, college text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_major",
      "major": "member_major"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(member_major.member_id) FROM member_major WHERE member_major.position = 'Member' AND member_major.major_name LIKE '%Education%' AND member_major.college = 'College of Education & Human Services'"
  },
  {
    "train_idx": 1447,
    "db_id": "student_club",
    "question": "List the name and location of events that underspend its budget.",
    "query": "SELECT DISTINCT T1.event_name, T1.location FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 0",
    "relevant_table": {
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      }
    },
    "new_relevant_table": {
      "event_budget": {
        "columns": [
          "event_id",
          "event_name",
          "event_date",
          "type",
          "notes",
          "location",
          "status",
          "budget_id",
          "category",
          "spent",
          "remaining",
          "amount",
          "event_status",
          "link_to_event"
        ],
        "ddl": "create table event_budget( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text, budget_id text, category text, spent real, remaining real, amount integer, event_status text)"
      }
    },
    "old_new_table_mapping": {
      "budget": "event_budget",
      "event": "event_budget"
    },
    "new_table_primary_key": "event_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT event_name, location FROM event_budget WHERE remaining > 0"
  },
  {
    "train_idx": 1448,
    "db_id": "student_club",
    "question": "Find the name and date of events with expenses for pizza that were more than fifty dollars but less than a hundred dollars.",
    "query": "SELECT T1.event_name, T1.event_date FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T3.expense_description = 'Pizza' AND T3.cost > 50 AND T3.cost < 100",
    "relevant_table": {
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      },
      "expense": {
        "ddl": "create table expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, foreign key(link_to_budget) references budget(budget_id) text)"
      }
    },
    "new_relevant_table": {
      "event_expense": {
        "columns": [
          "event_id",
          "event_name",
          "event_date",
          "type",
          "notes",
          "location",
          "status",
          "expense_id",
          "expense_description",
          "expense_date",
          "cost",
          "approved",
          "link_to_member",
          "link_to_budget"
        ],
        "ddl": "create table event_expense( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text, expense_id text, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, foreign key(link_to_budget) references budget(budget_id) text)"
      },
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event_expense(event_id) text)"
      }
    },
    "old_new_table_mapping": {
      "expense": "event_expense",
      "event": "event_expense"
    },
    "new_table_primary_key": "event_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT event_name, event_date FROM event_expense WHERE expense_description = 'Pizza' AND cost > 50 AND cost < 100"
  },
  {
    "train_idx": 1449,
    "db_id": "student_club",
    "question": "What is the name and major of members who had to spend more than a hundred dollars on an expense?",
    "query": "SELECT DISTINCT T1.first_name, T1.last_name, T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major INNER JOIN expense AS T3 ON T1.member_id = T3.link_to_member WHERE T3.cost > 100",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "major": {
        "ddl": "create table major( major_id text primary key, major_name text, department text, college text)"
      },
      "expense": {
        "ddl": "create table expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, foreign key(link_to_budget) references budget(budget_id) text)"
      }
    },
    "new_relevant_table": {
      "member_expense": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "expense_id",
          "expense_description",
          "expense_date",
          "cost",
          "approved",
          "link_to_budget"
        ],
        "ddl": "create table member_expense( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text, expense_id text, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_budget) references budget(budget_id) text)"
      },
      "major": {
        "ddl": "create table major( major_id text primary key, major_name text, department text, college text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_expense",
      "expense": "member_expense"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT first_name, last_name, major_name FROM member_expense WHERE cost > 100"
  },
  {
    "train_idx": 1450,
    "db_id": "student_club",
    "question": "In the events with more than forty incomes, list the city and country in which the event is happening.",
    "query": "SELECT DISTINCT T3.city, T3.county FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN zip_code AS T3 ON T3.zip_code = T2.zip WHERE T1.amount > 40",
    "relevant_table": {
      "income": {
        "ddl": "create table income( income_id text primary key, date_received text, amount integer, source text, notes text, foreign key(link_to_member) references member(member_id) text)"
      },
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "zip_code": {
        "ddl": "create table zip_code( zip_code integer primary key, type text, city text, county text, state text, short_state text)"
      }
    },
    "new_relevant_table": {
      "income_zip": {
        "columns": [
          "income_id",
          "date_received",
          "amount",
          "source",
          "notes",
          "link_to_member",
          "zip_code",
          "type",
          "city",
          "county",
          "state",
          "short_state"
        ],
        "ddl": "create table income_zip( income_id text primary key, date_received text, amount integer, source text, notes text, foreign key(link_to_member) references member(member_id) text, zip_code integer, type text, city text, county text, state text, short_state text)"
      },
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references income_zip(income_zip) integer, foreign key(link_to_major) references major(major_id) text)"
      }
    },
    "old_new_table_mapping": {
      "income": "income_zip",
      "zip_code": "income_zip"
    },
    "new_table_primary_key": "income_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT city, county FROM income_zip WHERE amount > 40"
  },
  {
    "train_idx": 1451,
    "db_id": "student_club",
    "question": "Among the members who incurred expenses in more than one event, who paid the most amount?",
    "query": "SELECT T2.member_id FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN budget AS T3 ON T1.link_to_budget = T3.budget_id INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id GROUP BY T2.member_id HAVING COUNT(DISTINCT T4.event_id) > 1 ORDER BY SUM(T1.cost) DESC LIMIT 1",
    "relevant_table": {
      "expense": {
        "ddl": "create table expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, foreign key(link_to_budget) references budget(budget_id) text)"
      },
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      },
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      }
    },
    "new_relevant_table": {
      "member_budget": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "budget_id",
          "category",
          "spent",
          "remaining",
          "amount",
          "event_status",
          "link_to_event"
        ],
        "ddl": "create table member_budget( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text, budget_id text, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      },
      "expense": {
        "ddl": "create table expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member_budget(member_id) text, foreign key(link_to_budget) references member_budget(budget_id) text)"
      },
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_budget",
      "budget": "member_budget"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT member_id FROM member_budget GROUP BY member_id HAVING COUNT(DISTINCT link_to_event) > 1 ORDER BY SUM(spent) DESC LIMIT 1"
  },
  {
    "train_idx": 1452,
    "db_id": "student_club",
    "question": "What is the average amount paid by students in a position other than a member?",
    "query": "SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN member as T2 ON T1.link_to_member = T2.member_id WHERE T2.position != 'Member'",
    "relevant_table": {
      "expense": {
        "ddl": "create table expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, foreign key(link_to_budget) references budget(budget_id) text)"
      },
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      }
    },
    "new_relevant_table": {
      "member_expense": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "major_id",
          "expense_id",
          "expense_description",
          "expense_date",
          "cost",
          "approved",
          "budget_id"
        ],
        "ddl": "create table member_expense( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text, expense_id text, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_budget) references budget(budget_id) text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_expense",
      "expense": "member_expense"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT AVG(cost) FROM member_expense WHERE position != 'Member'"
  },
  {
    "train_idx": 1453,
    "db_id": "student_club",
    "question": "List the name of events with less than average parking cost.",
    "query": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)",
    "relevant_table": {
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      },
      "expense": {
        "ddl": "create table expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, foreign key(link_to_budget) references budget(budget_id) text)"
      }
    },
    "new_relevant_table": {
      "EventExpense": {
        "columns": [
          "expense_id",
          "expense_description",
          "expense_date",
          "cost",
          "approved",
          "link_to_member",
          "link_to_budget",
          "event_id",
          "event_name",
          "event_date_event",
          "type",
          "notes",
          "location",
          "status"
        ],
        "ddl": "create table EventExpense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, foreign key(link_to_budget) references budget(budget_id) text, event_id text, event_name text, event_date_event text, type text, notes text, location text, status text)"
      },
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references EventExpense(event_id) text)"
      }
    },
    "old_new_table_mapping": {
      "expense": "EventExpense",
      "event": "EventExpense"
    },
    "new_table_primary_key": "expense_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "event_date_event": {
        "old_table": "event",
        "old_column": "event_date"
      }
    },
    "new_gold_sql": "SELECT event_name FROM EventExpense WHERE T2category = 'Parking' AND T3cost < (SELECT AVG(cost) FROM EventExpense)"
  },
  {
    "train_idx": 1454,
    "db_id": "student_club",
    "question": "What is the percentage of the cost for the meeting events?",
    "query": "SELECT SUM(CASE WHEN T1.type = 'Meeting' THEN T3.cost ELSE 0 END) * 100 / SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget",
    "relevant_table": {
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      },
      "expense": {
        "ddl": "create table expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, foreign key(link_to_budget) references budget(budget_id) text)"
      }
    },
    "new_relevant_table": {
      "event_expense": {
        "columns": [
          "event_id",
          "event_name",
          "event_date",
          "type",
          "notes",
          "location",
          "status",
          "expense_id",
          "expense_description",
          "expense_date",
          "cost",
          "approved",
          "link_to_member",
          "link_to_budget"
        ],
        "ddl": "create table event_expense( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text, expense_id text, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, foreign key(link_to_budget) references budget(budget_id) text)"
      },
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event_expense(event_id) text)"
      }
    },
    "old_new_table_mapping": {
      "event": "event_expense",
      "expense": "event_expense"
    },
    "new_table_primary_key": "event_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT SUM(CASE WHEN type = 'Meeting' THEN cost ELSE 0 END) * 100 / SUM(cost) FROM event_expense"
  },
  {
    "train_idx": 1455,
    "db_id": "student_club",
    "question": "Which budget allowed the most money for water, chips, and cookies?",
    "query": "SELECT T2.budget_id FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Water, chips, cookies' ORDER BY T1.cost DESC LIMIT 1",
    "relevant_table": {
      "expense": {
        "ddl": "create table expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, foreign key(link_to_budget) references budget(budget_id) text)"
      },
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      }
    },
    "new_relevant_table": {
      "expense_budget": {
        "columns": [
          "budget_id",
          "category",
          "spent",
          "remaining",
          "amount",
          "event_status",
          "link_to_event",
          "expense_id",
          "expense_description",
          "expense_date",
          "cost",
          "approved",
          "link_to_member"
        ],
        "ddl": "create table expense_budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text, expense_id text, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text)"
      }
    },
    "old_new_table_mapping": {
      "budget": "expense_budget",
      "expense": "expense_budget"
    },
    "new_table_primary_key": "budget_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT budget_id FROM expense_budget WHERE expense_description = 'Water, chips, cookies' ORDER BY cost DESC LIMIT 1"
  },
  {
    "train_idx": 1456,
    "db_id": "student_club",
    "question": "List the full name of the top five members who spend the most money in the descending order of spending.",
    "query": "SELECT T3.first_name, T3.last_name FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id ORDER BY T2.spent DESC LIMIT 5",
    "relevant_table": {
      "expense": {
        "ddl": "create table expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, foreign key(link_to_budget) references budget(budget_id) text)"
      },
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      },
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      }
    },
    "new_relevant_table": {
      "member_budget": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "major_id",
          "budget_id",
          "category",
          "spent",
          "remaining",
          "amount",
          "event_status",
          "event_id"
        ],
        "ddl": "create table member_budget( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text, budget_id text, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      },
      "expense": {
        "ddl": "create table expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member_budget(member_id) text, foreign key(link_to_budget) references member_budget(budget_id) text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_budget",
      "budget": "member_budget"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT member_budget.first_name, member_budget.last_name FROM expense INNER JOIN member_budget ON expenselink_to_budget = member_budget.budget_id AND expenselink_to_member = member_budget.member_id ORDER BY member_budget.spent DESC LIMIT 5"
  },
  {
    "train_idx": 1457,
    "db_id": "student_club",
    "question": "Give the full name and contact number of members who had to spend more than average on each expense.",
    "query": "SELECT DISTINCT T3.first_name, T3.last_name, T3.phone FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member WHERE T1.cost > ( SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member )",
    "relevant_table": {
      "expense": {
        "ddl": "create table expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, foreign key(link_to_budget) references budget(budget_id) text)"
      },
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      },
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      }
    },
    "new_relevant_table": {
      "member_budget": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "budget_id",
          "category",
          "spent",
          "remaining",
          "amount",
          "event_status",
          "link_to_event"
        ],
        "ddl": "create table member_budget( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text, budget_id text, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      },
      "expense": {
        "ddl": "create table expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member_budget(member_id) text, foreign key(link_to_budget) references member_budget(budget_id) text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_budget",
      "budget": "member_budget"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT first_name, last_name, phone FROM member_budget WHERE spent > ( SELECT AVG(spent) FROM member_budget )"
  },
  {
    "train_idx": 1458,
    "db_id": "student_club",
    "question": "Calculate the difference in the percentage of members in New Jersey and Vermont.",
    "query": "SELECT CAST((SUM(CASE WHEN T2.state = 'New Jersey' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.state = 'Vermont' THEN 1 ELSE 0 END)) AS REAL) * 100 / COUNT(T1.member_id) AS diff FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "zip_code": {
        "ddl": "create table zip_code( zip_code integer primary key, type text, city text, county text, state text, short_state text)"
      }
    },
    "new_relevant_table": {
      "member_zip": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "zip_code",
          "type",
          "city",
          "county",
          "state",
          "short_state"
        ],
        "ddl": "create table member_zip( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(link_to_major) references major(major_id) text, zip_code integer, type text, city text, county text, state text, short_state text)"
      }
    },
    "old_new_table_mapping": {
      "zip_code": "member_zip",
      "member": "member_zip"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST((SUM(CASE WHEN state = 'New Jersey' THEN 1 ELSE 0 END) - SUM(CASE WHEN state = 'Vermont' THEN 1 ELSE 0 END)) AS REAL) * 100 / COUNT(member_id) AS diff FROM member_zip WHERE zip_code = zip"
  },
  {
    "train_idx": 1459,
    "db_id": "student_club",
    "question": "What is the major of Garrett Gerke and which department does it belong to?",
    "query": "SELECT T2.major_name, T2.department FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "major": {
        "ddl": "create table major( major_id text primary key, major_name text, department text, college text)"
      }
    },
    "new_relevant_table": {
      "member_major": {
        "columns": [
          "major_id",
          "major_name",
          "department",
          "college",
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major"
        ],
        "ddl": "create table member_major( major_id text primary key, major_name text, department text, college text, member_id text, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer)"
      }
    },
    "old_new_table_mapping": {
      "major": "member_major",
      "member": "member_major"
    },
    "new_table_primary_key": "major_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT major_name, department FROM member_major WHERE first_name = 'Garrett' AND last_name = 'Gerke'"
  },
  {
    "train_idx": 1460,
    "db_id": "student_club",
    "question": "Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it.",
    "query": "SELECT T2.first_name, T2.last_name, T1.cost FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Water, Veggie tray, supplies'",
    "relevant_table": {
      "expense": {
        "ddl": "create table expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, foreign key(link_to_budget) references budget(budget_id) text)"
      },
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      }
    },
    "new_relevant_table": {
      "member_expense": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "expense_id",
          "expense_description",
          "expense_date",
          "cost",
          "approved",
          "link_to_budget"
        ],
        "ddl": "create table member_expense( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text, expense_id text, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_budget) references budget(budget_id) text)"
      }
    },
    "old_new_table_mapping": {
      "member": "member_expense",
      "expense": "member_expense"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT first_name, last_name, cost FROM member_expense WHERE expense_description = 'Water, Veggie tray, supplies'"
  },
  {
    "train_idx": 1461,
    "db_id": "student_club",
    "question": "List the last names of students under the Elementary Education major and include their phone numbers.",
    "query": "SELECT T1.last_name, T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Elementary Education'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "major": {
        "ddl": "create table major( major_id text primary key, major_name text, department text, college text)"
      }
    },
    "new_relevant_table": {
      "member_major": {
        "columns": [
          "major_id",
          "major_name",
          "department",
          "college",
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major"
        ],
        "ddl": "create table member_major( major_id text primary key, major_name text, department text, college text, member_id text, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer)"
      }
    },
    "old_new_table_mapping": {
      "major": "member_major",
      "member": "member_major"
    },
    "new_table_primary_key": "major_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT last_name, phone FROM member_major WHERE major_name = 'Elementary Education'"
  },
  {
    "train_idx": 1462,
    "db_id": "student_club",
    "question": "What category was budgeted for the 'January Speaker' event and how much was the amount budgeted for that category?",
    "query": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'January Speaker'",
    "relevant_table": {
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      }
    },
    "new_relevant_table": {
      "event_budget": {
        "columns": [
          "event_id",
          "event_name",
          "event_date",
          "type",
          "notes",
          "location",
          "status",
          "budget_id",
          "category",
          "spent",
          "remaining",
          "amount",
          "event_status",
          "link_to_event"
        ],
        "ddl": "create table event_budget( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text, budget_id text, category text, spent real, remaining real, amount integer, event_status text)"
      }
    },
    "old_new_table_mapping": {
      "budget": "event_budget",
      "event": "event_budget"
    },
    "new_table_primary_key": "event_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT category, amount FROM event_budget WHERE event_name = 'January Speaker'"
  },
  {
    "train_idx": 1463,
    "db_id": "student_club",
    "question": "List the event names which were budgeted for the food.",
    "query": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Food'",
    "relevant_table": {
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      }
    },
    "new_relevant_table": {
      "event_budget": {
        "columns": [
          "event_id",
          "event_name",
          "event_date",
          "type",
          "notes",
          "location",
          "status",
          "budget_id",
          "category",
          "spent",
          "remaining",
          "amount",
          "event_status"
        ],
        "ddl": "create table event_budget( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text, budget_id text, category text, spent real, remaining real, amount integer, event_status text)"
      }
    },
    "old_new_table_mapping": {
      "budget": "event_budget",
      "event": "event_budget"
    },
    "new_table_primary_key": "event_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT event_name FROM event_budget WHERE category = 'Food'"
  },
  {
    "train_idx": 1464,
    "db_id": "student_club",
    "question": "Write the full names of students who received funds on the date of 9/9/2019 and include the amount received.",
    "query": "SELECT DISTINCT T3.first_name, T3.last_name, T4.amount FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T3.member_id = T2.link_to_member INNER JOIN income AS T4 ON T4.link_to_member = T3.member_id WHERE T4.date_received = '2019-09-09'",
    "relevant_table": {
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      },
      "attendance": {
        "ddl": "create table attendance( foreign key(link_to_event) references event(event_id) text, foreign key(link_to_member) references member(member_id) text)"
      },
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "income": {
        "ddl": "create table income( income_id text primary key, date_received text, amount integer, source text, notes text, foreign key(link_to_member) references member(member_id) text)"
      }
    },
    "new_relevant_table": {
      "event_attendance": {
        "columns": [
          "event_id",
          "event_name",
          "event_date",
          "type",
          "notes",
          "location",
          "status",
          "link_to_event",
          "link_to_member"
        ],
        "ddl": "create table event_attendance( event_id text, event_name text, event_date text, type text, notes text, location text, status text, foreign key(link_to_member) references member(member_id) text)"
      },
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "income": {
        "ddl": "create table income( income_id text primary key, date_received text, amount integer, source text, notes text, foreign key(link_to_member) references member(member_id) text)"
      }
    },
    "old_new_table_mapping": {
      "event": "event_attendance",
      "attendance": "event_attendance"
    },
    "new_table_primary_key": "'event_id'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT first_name, last_name, amount FROM event_attendance WHERE date_received = '2019-09-09'"
  },
  {
    "train_idx": 1465,
    "db_id": "student_club",
    "question": "Which budget category does the expense 'Posters' fall to?",
    "query": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Posters'",
    "relevant_table": {
      "expense": {
        "ddl": "create table expense( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, foreign key(link_to_budget) references budget(budget_id) text)"
      },
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      }
    },
    "new_relevant_table": {
      "expense_budget": {
        "columns": [
          "expense_id",
          "expense_description",
          "expense_date",
          "cost",
          "approved",
          "link_to_member",
          "budget_id",
          "category",
          "spent",
          "remaining",
          "amount",
          "event_status",
          "link_to_event"
        ],
        "ddl": "create table expense_budget( expense_id text primary key, expense_description text, expense_date text, cost real, approved text, foreign key(link_to_member) references member(member_id) text, budget_id text, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      }
    },
    "old_new_table_mapping": {
      "expense": "expense_budget",
      "budget": "expense_budget"
    },
    "new_table_primary_key": "expense_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT category FROM expense_budget WHERE expense_description = 'Posters'"
  },
  {
    "train_idx": 1466,
    "db_id": "student_club",
    "question": "Write the full name of the club member with the position of 'Secretary' and list which college the club member belongs to.",
    "query": "SELECT T1.first_name, T1.last_name, college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Secretary'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "major": {
        "ddl": "create table major( major_id text primary key, major_name text, department text, college text)"
      }
    },
    "new_relevant_table": {
      "member_major": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "major_id",
          "major_name",
          "department",
          "college"
        ],
        "ddl": "create table member_major( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, major_id text, major_name text, department text, college text)"
      }
    },
    "old_new_table_mapping": {
      "major": "member_major",
      "member": "member_major"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT first_name, last_name, college FROM member_major WHERE position = 'Secretary'"
  },
  {
    "train_idx": 1467,
    "db_id": "student_club",
    "question": "Calculate the total amount spent on speaker gifts and list the name of the event they were spent on.",
    "query": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Speaker Gifts' GROUP BY T2.event_name",
    "relevant_table": {
      "budget": {
        "ddl": "create table budget( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, foreign key(link_to_event) references event(event_id) text)"
      },
      "event": {
        "ddl": "create table event( event_id text primary key, event_name text, event_date text, type text, notes text, location text, status text)"
      }
    },
    "new_relevant_table": {
      "budget_event": {
        "columns": [
          "budget_id",
          "category",
          "spent",
          "remaining",
          "amount",
          "event_status",
          "link_to_event",
          "event_id",
          "event_name",
          "event_date",
          "type",
          "notes",
          "location",
          "status"
        ],
        "ddl": "create table budget_event( budget_id text primary key, category text, spent real, remaining real, amount integer, event_status text, event_id text, event_name text, event_date text, type text, notes text, location text, status text)"
      }
    },
    "old_new_table_mapping": {
      "budget": "budget_event",
      "event": "budget_event"
    },
    "new_table_primary_key": "budget_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT SUM(spent), event_name FROM budget_event WHERE category = 'Speaker Gifts' GROUP BY event_name"
  },
  {
    "train_idx": 1468,
    "db_id": "student_club",
    "question": "Where is the hometown of Garrett Gerke?",
    "query": "SELECT T2.city FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke'",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "zip_code": {
        "ddl": "create table zip_code( zip_code integer primary key, type text, city text, county text, state text, short_state text)"
      }
    },
    "new_relevant_table": {
      "member_zip": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "zip_code",
          "type",
          "city",
          "county",
          "state",
          "short_state"
        ],
        "ddl": "create table member_zip( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(link_to_major) references major(major_id) text, zip_code integer, type text, city text, county text, state text, short_state text)"
      }
    },
    "old_new_table_mapping": {
      "zip_code": "member_zip",
      "member": "member_zip"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT city FROM member_zip WHERE first_name = 'Garrett' AND last_name = 'Gerke' AND zip_code = zip"
  },
  {
    "train_idx": 1469,
    "db_id": "student_club",
    "question": "Which student has the hometown of Lincolnton, North Carolina with the zip code of 28092? List their full name and position.",
    "query": "SELECT T1.first_name, T1.last_name, T1.position FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip WHERE T2.city = 'Lincolnton' AND T2.state = 'North Carolina' AND T2.zip_code = 28092",
    "relevant_table": {
      "member": {
        "ddl": "create table member( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(zip) references zip_code(zip_code) integer, foreign key(link_to_major) references major(major_id) text)"
      },
      "zip_code": {
        "ddl": "create table zip_code( zip_code integer primary key, type text, city text, county text, state text, short_state text)"
      }
    },
    "new_relevant_table": {
      "member_zip_code": {
        "columns": [
          "member_id",
          "first_name",
          "last_name",
          "email",
          "position",
          "t_shirt_size",
          "phone",
          "zip",
          "link_to_major",
          "zip_code",
          "type",
          "city",
          "county",
          "state",
          "short_state"
        ],
        "ddl": "create table member_zip_code( member_id text primary key, first_name text, last_name text, email text, position text, t_shirt_size text, phone text, foreign key(link_to_major) references major(major_id) text, zip_code integer, type text, city text, county text, state text, short_state text)"
      }
    },
    "old_new_table_mapping": {
      "zip_code": "member_zip_code",
      "member": "member_zip_code"
    },
    "new_table_primary_key": "member_id",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT first_name, last_name, position FROM member_zip_code WHERE city = 'Lincolnton' AND state = 'North Carolina' AND zip_code = 28092"
  },
  {
    "train_idx": 1472,
    "db_id": "debit_card_specializing",
    "question": "In 2012, who had the least consumption in LAM?",
    "query": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND SUBSTR(T2.Date, 1, 4) = '2012' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
    "relevant_table": {
      "customers": {
        "ddl": "create table customers( CustomerID integer primary key, Segment text, Currency text)"
      },
      "yearmonth": {
        "ddl": "create table yearmonth( foreign key(CustomerID) references customers(CustomerID) integer, Date text, Consumption real)"
      }
    },
    "new_relevant_table": {
      "customers_yearmonth": {
        "columns": [
          "CustomerID",
          "Segment",
          "Currency",
          "Date",
          "Consumption"
        ],
        "ddl": "create table customers_yearmonth( CustomerID integer, Segment text, Currency text, Date text, Consumption real)"
      }
    },
    "old_new_table_mapping": {
      "yearmonth": "customers_yearmonth",
      "customers": "customers_yearmonth"
    },
    "new_table_primary_key": "'CustomerID'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CustomerID FROM customers_yearmonth WHERE Segment = 'LAM' AND SUBSTR(Date, 1, 4) = '2012' GROUP BY CustomerID ORDER BY SUM(Consumption) ASC LIMIT 1"
  },
  {
    "train_idx": 1473,
    "db_id": "debit_card_specializing",
    "question": "What was the average monthly consumption of customers in SME for the year 2013?",
    "query": "SELECT AVG(T2.Consumption) / 12 FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME'",
    "relevant_table": {
      "customers": {
        "ddl": "create table customers( CustomerID integer primary key, Segment text, Currency text)"
      },
      "yearmonth": {
        "ddl": "create table yearmonth( foreign key(CustomerID) references customers(CustomerID) integer, Date text, Consumption real)"
      }
    },
    "new_relevant_table": {
      "customers_yearmonth": {
        "columns": [
          "CustomerID",
          "Segment",
          "Currency",
          "Date",
          "Consumption"
        ],
        "ddl": "create table customers_yearmonth( CustomerID integer, Segment text, Currency text, Date text, Consumption real)"
      }
    },
    "old_new_table_mapping": {
      "yearmonth": "customers_yearmonth",
      "customers": "customers_yearmonth"
    },
    "new_table_primary_key": "'CustomerID'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT AVG(Consumption) / 12 FROM customers_yearmonth WHERE SUBSTR(Date, 1, 4) = '2013' AND Segment = 'SME'"
  },
  {
    "train_idx": 1474,
    "db_id": "debit_card_specializing",
    "question": "Which customers, paying in CZK, consumed the most gas in 2011?",
    "query": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Date BETWEEN 201101 AND 201112 GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
    "relevant_table": {
      "customers": {
        "ddl": "create table customers( CustomerID integer primary key, Segment text, Currency text)"
      },
      "yearmonth": {
        "ddl": "create table yearmonth( foreign key(CustomerID) references customers(CustomerID) integer, Date text, Consumption real)"
      }
    },
    "new_relevant_table": {
      "customers_yearmonth": {
        "columns": [
          "CustomerID",
          "Segment",
          "Currency",
          "Date",
          "Consumption"
        ],
        "ddl": "create table customers_yearmonth( CustomerID integer, Segment text, Currency text, Date text, Consumption real)"
      }
    },
    "old_new_table_mapping": {
      "customers": "customers_yearmonth",
      "yearmonth": "customers_yearmonth"
    },
    "new_table_primary_key": "'CustomerID'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CustomerID FROM customers_yearmonth WHERE Currency = 'CZK' AND Date BETWEEN 201101 AND 201112 GROUP BY CustomerID ORDER BY SUM(Consumption) DESC LIMIT 1"
  },
  {
    "train_idx": 1475,
    "db_id": "debit_card_specializing",
    "question": "How many customers in KAM had a consumption of less than 30,000 for the year 2012?",
    "query": "SELECT COUNT(*) FROM ( SELECT T2.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND SUBSTRING(T2.Date, 1, 4) = '2012' GROUP BY T2.CustomerID HAVING SUM(T2.Consumption) < 30000 ) AS t1",
    "relevant_table": {
      "customers": {
        "ddl": "create table customers( CustomerID integer primary key, Segment text, Currency text)"
      },
      "yearmonth": {
        "ddl": "create table yearmonth( foreign key(CustomerID) references customers(CustomerID) integer, Date text, Consumption real)"
      }
    },
    "new_relevant_table": {
      "customers_yearmonth": {
        "columns": [
          "CustomerID",
          "Segment",
          "Currency",
          "Date",
          "Consumption"
        ],
        "ddl": "create table customers_yearmonth( CustomerID integer, Segment text, Currency text, Date text, Consumption real)"
      }
    },
    "old_new_table_mapping": {
      "customers": "customers_yearmonth",
      "yearmonth": "customers_yearmonth"
    },
    "new_table_primary_key": "'CustomerID'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(*) FROM ( SELECT CustomerID FROM customers_yearmonth WHERE Segment = 'KAM' AND SUBSTRING(Date, 1, 4) = '2012' GROUP BY CustomerID HAVING SUM(Consumption) < 30000 )"
  },
  {
    "train_idx": 1476,
    "db_id": "debit_card_specializing",
    "question": "What was the difference in gas consumption between CZK-paying customers and EUR-paying customers in 2012?",
    "query": "SELECT SUM(IIF(T1.Currency = 'CZK', T2.Consumption, 0)) - SUM(IIF(T1.Currency = 'EUR', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2012'",
    "relevant_table": {
      "customers": {
        "ddl": "create table customers( CustomerID integer primary key, Segment text, Currency text)"
      },
      "yearmonth": {
        "ddl": "create table yearmonth( foreign key(CustomerID) references customers(CustomerID) integer, Date text, Consumption real)"
      }
    },
    "new_relevant_table": {
      "customers_yearmonth": {
        "columns": [
          "CustomerID",
          "Segment",
          "Currency",
          "Date",
          "Consumption"
        ],
        "ddl": "create table customers_yearmonth( CustomerID integer, Segment text, Currency text, Date text, Consumption real)"
      }
    },
    "old_new_table_mapping": {
      "customers": "customers_yearmonth",
      "yearmonth": "customers_yearmonth"
    },
    "new_table_primary_key": "'CustomerID'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT SUM(IIF(Currency = 'CZK', Consumption, 0)) - SUM(IIF(Currency = 'EUR', Consumption, 0)) FROM customers_yearmonth WHERE SUBSTR(Date, 1, 4) = '2012'"
  },
  {
    "train_idx": 1477,
    "db_id": "debit_card_specializing",
    "question": "Which year recorded the most gas use paid in EUR?",
    "query": "SELECT SUBSTRING(T2.Date, 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY SUBSTRING(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
    "relevant_table": {
      "customers": {
        "ddl": "create table customers( CustomerID integer primary key, Segment text, Currency text)"
      },
      "yearmonth": {
        "ddl": "create table yearmonth( foreign key(CustomerID) references customers(CustomerID) integer, Date text, Consumption real)"
      }
    },
    "new_relevant_table": {
      "customers_yearmonth": {
        "columns": [
          "CustomerID",
          "Segment",
          "Currency",
          "Date",
          "Consumption"
        ],
        "ddl": "create table customers_yearmonth( CustomerID integer, Segment text, Currency text, Date text, Consumption real)"
      }
    },
    "old_new_table_mapping": {
      "yearmonth": "customers_yearmonth",
      "customers": "customers_yearmonth"
    },
    "new_table_primary_key": "'CustomerID'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT SUBSTRING(Date, 1, 4) FROM customers_yearmonth WHERE Currency = 'EUR' GROUP BY SUBSTRING(Date, 1, 4) ORDER BY SUM(Consumption) DESC LIMIT 1"
  },
  {
    "train_idx": 1478,
    "db_id": "debit_card_specializing",
    "question": "Which segment had the least consumption?",
    "query": "SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.Segment ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
    "relevant_table": {
      "customers": {
        "ddl": "create table customers( CustomerID integer primary key, Segment text, Currency text)"
      },
      "yearmonth": {
        "ddl": "create table yearmonth( foreign key(CustomerID) references customers(CustomerID) integer, Date text, Consumption real)"
      }
    },
    "new_relevant_table": {
      "customers_yearmonth": {
        "columns": [
          "CustomerID",
          "Segment",
          "Currency",
          "Date",
          "Consumption"
        ],
        "ddl": "create table customers_yearmonth( CustomerID integer, Segment text, Currency text, Date text, Consumption real)"
      }
    },
    "old_new_table_mapping": {
      "yearmonth": "customers_yearmonth",
      "customers": "customers_yearmonth"
    },
    "new_table_primary_key": "'CustomerID'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Segment FROM customers_yearmonth GROUP BY Segment ORDER BY SUM(Consumption) ASC LIMIT 1"
  },
  {
    "train_idx": 1479,
    "db_id": "debit_card_specializing",
    "question": "Which year recorded the most consumption of gas paid in CZK?",
    "query": "SELECT SUBSTR(T2.Date, 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' GROUP BY SUBSTR(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
    "relevant_table": {
      "customers": {
        "ddl": "create table customers( CustomerID integer primary key, Segment text, Currency text)"
      },
      "yearmonth": {
        "ddl": "create table yearmonth( foreign key(CustomerID) references customers(CustomerID) integer, Date text, Consumption real)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "CustomerID",
          "Segment",
          "Currency",
          "Date",
          "Consumption"
        ],
        "ddl": "create table merged_table( CustomerID integer, Segment text, Currency text, Date text, Consumption real)"
      }
    },
    "old_new_table_mapping": {
      "yearmonth": "merged_table",
      "customers": "merged_table"
    },
    "new_table_primary_key": "'CustomerID'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT SUBSTR(Date, 1, 4) FROM merged_table WHERE Currency = 'CZK' GROUP BY SUBSTR(Date, 1, 4) ORDER BY SUM(Consumption) DESC LIMIT 1"
  },
  {
    "train_idx": 1480,
    "db_id": "debit_card_specializing",
    "question": "What was the gas consumption peak month for SME customers in 2013?",
    "query": "SELECT SUBSTR(T2.Date, 5, 2) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME' GROUP BY SUBSTR(T2.Date, 5, 2) ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
    "relevant_table": {
      "customers": {
        "ddl": "create table customers( CustomerID integer primary key, Segment text, Currency text)"
      },
      "yearmonth": {
        "ddl": "create table yearmonth( foreign key(CustomerID) references customers(CustomerID) integer, Date text, Consumption real)"
      }
    },
    "new_relevant_table": {
      "customers_yearmonth": {
        "columns": [
          "CustomerID",
          "Segment",
          "Currency",
          "Date",
          "Consumption"
        ],
        "ddl": "create table customers_yearmonth( CustomerID integer, Segment text, Currency text, Date text, Consumption real)"
      }
    },
    "old_new_table_mapping": {
      "customers": "customers_yearmonth",
      "yearmonth": "customers_yearmonth"
    },
    "new_table_primary_key": "'CustomerID'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT SUBSTR(Date, 5, 2) FROM customers_yearmonth WHERE SUBSTR(Date, 1, 4) = '2013' AND Segment = 'SME' GROUP BY SUBSTR(Date, 5, 2) ORDER BY SUM(Consumption) DESC LIMIT 1"
  },
  {
    "train_idx": 1481,
    "db_id": "debit_card_specializing",
    "question": "What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME?",
    "query": "SELECT CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Consumption = ( SELECT MIN(Consumption) FROM yearmonth ) AND T2.Date BETWEEN 201301 AND 201312",
    "relevant_table": {
      "customers": {
        "ddl": "create table customers( CustomerID integer primary key, Segment text, Currency text)"
      },
      "yearmonth": {
        "ddl": "create table yearmonth( foreign key(CustomerID) references customers(CustomerID) integer, Date text, Consumption real)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "CustomerID",
          "Segment",
          "Currency",
          "Date",
          "Consumption"
        ],
        "ddl": "create table merged_table( CustomerID integer primary key, Segment text, Currency text, Date text, Consumption real)"
      }
    },
    "old_new_table_mapping": {
      "yearmonth": "merged_table",
      "customers": "merged_table"
    },
    "new_table_primary_key": "CustomerID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(IIF(Segment = 'SME', Consumption, 0)) AS REAL) / COUNT(CustomerID) - CAST(SUM(IIF(Segment = 'LAM', Consumption, 0)) AS REAL) / COUNT(CustomerID) , CAST(SUM(IIF(Segment = 'LAM', Consumption, 0)) AS REAL) / COUNT(CustomerID) - CAST(SUM(IIF(Segment = 'KAM', Consumption, 0)) AS REAL) / COUNT(CustomerID) , CAST(SUM(IIF(Segment = 'KAM', Consumption, 0)) AS REAL) / COUNT(CustomerID) - CAST(SUM(IIF(Segment = 'SME', Consumption, 0)) AS REAL) / COUNT(CustomerID) FROM merged_table WHERE Currency = 'CZK' AND Consumption = ( SELECT MIN(Consumption) FROM merged_table ) AND Date BETWEEN 201301 AND 201312"
  },
  {
    "train_idx": 1482,
    "db_id": "debit_card_specializing",
    "question": "Which of the three segments\u2014SME, LAM and KAM\u2014has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013?",
    "query": "SELECT CAST((SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0))) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0)), CAST(SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) , CAST(SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID",
    "relevant_table": {
      "customers": {
        "ddl": "create table customers( CustomerID integer primary key, Segment text, Currency text)"
      },
      "yearmonth": {
        "ddl": "create table yearmonth( foreign key(CustomerID) references customers(CustomerID) integer, Date text, Consumption real)"
      }
    },
    "new_relevant_table": {
      "customers_yearmonth": {
        "columns": [
          "CustomerID",
          "Segment",
          "Currency",
          "Date",
          "Consumption"
        ],
        "ddl": "create table customers_yearmonth( CustomerID integer, Segment text, Currency text, Date text, Consumption real)"
      }
    },
    "old_new_table_mapping": {
      "customers": "customers_yearmonth",
      "yearmonth": "customers_yearmonth"
    },
    "new_table_primary_key": "'CustomerID'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST((SUM(IIF(Segment = 'SME' AND Date LIKE '2013%', Consumption, 0)) - SUM(IIF(Segment = 'SME' AND Date LIKE '2012%', Consumption, 0))) AS FLOAT) * 100 / SUM(IIF(Segment = 'SME' AND Date LIKE '2012%', Consumption, 0)), CAST(SUM(IIF(Segment = 'LAM' AND Date LIKE '2013%', Consumption, 0)) - SUM(IIF(Segment = 'LAM' AND Date LIKE '2012%', Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(Segment = 'LAM' AND Date LIKE '2012%', Consumption, 0)) , CAST(SUM(IIF(Segment = 'KAM' AND Date LIKE '2013%', Consumption, 0)) - SUM(IIF(Segment = 'KAM' AND Date LIKE '2012%', Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(Segment = 'KAM' AND Date LIKE '2012%', Consumption, 0)) FROM customers_yearmonth"
  },
  {
    "train_idx": 1487,
    "db_id": "debit_card_specializing",
    "question": "Which LAM customer used the Euro as their currency and had the highest consumption in October 2013?",
    "query": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T2.Date = '201310' AND T1.Currency = 'EUR' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
    "relevant_table": {
      "customers": {
        "ddl": "create table customers( CustomerID integer primary key, Segment text, Currency text)"
      },
      "yearmonth": {
        "ddl": "create table yearmonth( foreign key(CustomerID) references customers(CustomerID) integer, Date text, Consumption real)"
      }
    },
    "new_relevant_table": {
      "customers_yearmonth": {
        "columns": [
          "CustomerID",
          "Segment",
          "Currency",
          "Date",
          "Consumption"
        ],
        "ddl": "create table customers_yearmonth( CustomerID integer, Segment text, Currency text, Date text, Consumption real)"
      }
    },
    "old_new_table_mapping": {
      "customers": "customers_yearmonth",
      "yearmonth": "customers_yearmonth"
    },
    "new_table_primary_key": "'CustomerID'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CustomerID FROM customers_yearmonth WHERE Segment = 'LAM' AND Date = '201310' AND Currency = 'EUR' GROUP BY CustomerID ORDER BY SUM(Consumption) DESC LIMIT 1"
  },
  {
    "train_idx": 1488,
    "db_id": "debit_card_specializing",
    "question": "Who among KAM's customers consumed the most? How much did it consume?",
    "query": "SELECT T2.CustomerID, SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' GROUP BY T2.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
    "relevant_table": {
      "customers": {
        "ddl": "create table customers( CustomerID integer primary key, Segment text, Currency text)"
      },
      "yearmonth": {
        "ddl": "create table yearmonth( foreign key(CustomerID) references customers(CustomerID) integer, Date text, Consumption real)"
      }
    },
    "new_relevant_table": {
      "customers_yearmonth": {
        "columns": [
          "CustomerID",
          "Segment",
          "Currency",
          "Date",
          "Consumption"
        ],
        "ddl": "create table customers_yearmonth( CustomerID integer, Segment text, Currency text, Date text, Consumption real)"
      }
    },
    "old_new_table_mapping": {
      "customers": "customers_yearmonth",
      "yearmonth": "customers_yearmonth"
    },
    "new_table_primary_key": "'CustomerID'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CustomerID, SUM(Consumption) FROM customers_yearmonth WHERE Segment = 'KAM' GROUP BY CustomerID ORDER BY SUM(Consumption) DESC LIMIT 1"
  },
  {
    "train_idx": 1489,
    "db_id": "debit_card_specializing",
    "question": "How much did the KAM customers consume in total in May 2013?",
    "query": "SELECT SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201305' AND T1.Segment = 'KAM'",
    "relevant_table": {
      "customers": {
        "ddl": "create table customers( CustomerID integer primary key, Segment text, Currency text)"
      },
      "yearmonth": {
        "ddl": "create table yearmonth( foreign key(CustomerID) references customers(CustomerID) integer, Date text, Consumption real)"
      }
    },
    "new_relevant_table": {
      "customers_yearmonth": {
        "columns": [
          "CustomerID",
          "Segment",
          "Currency",
          "Date",
          "Consumption"
        ],
        "ddl": "create table customers_yearmonth( CustomerID integer, Segment text, Currency text, Date text, Consumption real)"
      }
    },
    "old_new_table_mapping": {
      "customers": "customers_yearmonth",
      "yearmonth": "customers_yearmonth"
    },
    "new_table_primary_key": "'CustomerID'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT SUM(Consumption) FROM customers_yearmonth WHERE Date = '201305' AND Segment = 'KAM'"
  },
  {
    "train_idx": 1490,
    "db_id": "debit_card_specializing",
    "question": "How many percent of LAM customer consumed more than 46.73?",
    "query": "SELECT CAST(SUM(IIF(T2.Consumption > 46.73, 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM'",
    "relevant_table": {
      "customers": {
        "ddl": "create table customers( CustomerID integer primary key, Segment text, Currency text)"
      },
      "yearmonth": {
        "ddl": "create table yearmonth( foreign key(CustomerID) references customers(CustomerID) integer, Date text, Consumption real)"
      }
    },
    "new_relevant_table": {
      "customers_yearmonth": {
        "columns": [
          "CustomerID",
          "Segment",
          "Currency",
          "Date",
          "Consumption"
        ],
        "ddl": "create table customers_yearmonth( CustomerID integer, Segment text, Currency text, Date text, Consumption real)"
      }
    },
    "old_new_table_mapping": {
      "customers": "customers_yearmonth",
      "yearmonth": "customers_yearmonth"
    },
    "new_table_primary_key": "'CustomerID'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(IIF(Consumption > 4673, 1, 0)) AS FLOAT) * 100 / COUNT(CustomerID) FROM customers_yearmonth WHERE Segment = 'LAM'"
  },
  {
    "train_idx": 1495,
    "db_id": "debit_card_specializing",
    "question": "Which client ID consumed the most in September 2013?",
    "query": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
    "relevant_table": {
      "customers": {
        "ddl": "create table customers( CustomerID integer primary key, Segment text, Currency text)"
      },
      "yearmonth": {
        "ddl": "create table yearmonth( foreign key(CustomerID) references customers(CustomerID) integer, Date text, Consumption real)"
      }
    },
    "new_relevant_table": {
      "customers_yearmonth": {
        "columns": [
          "CustomerID",
          "Segment",
          "Currency",
          "Date",
          "Consumption"
        ],
        "ddl": "create table customers_yearmonth( CustomerID integer, Segment text, Currency text, Date text, Consumption real)"
      }
    },
    "old_new_table_mapping": {
      "yearmonth": "customers_yearmonth",
      "customers": "customers_yearmonth"
    },
    "new_table_primary_key": "'CustomerID'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CustomerID FROM customers_yearmonth WHERE Date = '201309' GROUP BY CustomerID ORDER BY SUM(Consumption) DESC LIMIT 1"
  },
  {
    "train_idx": 1496,
    "db_id": "debit_card_specializing",
    "question": "Which client segment consumed the least in September 2013?",
    "query": "SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
    "relevant_table": {
      "customers": {
        "ddl": "create table customers( CustomerID integer primary key, Segment text, Currency text)"
      },
      "yearmonth": {
        "ddl": "create table yearmonth( foreign key(CustomerID) references customers(CustomerID) integer, Date text, Consumption real)"
      }
    },
    "new_relevant_table": {
      "customers_yearmonth": {
        "columns": [
          "CustomerID",
          "Segment",
          "Currency",
          "Date",
          "Consumption"
        ],
        "ddl": "create table customers_yearmonth( CustomerID integer, Segment text, Currency text, Date text, Consumption real)"
      }
    },
    "old_new_table_mapping": {
      "customers": "customers_yearmonth",
      "yearmonth": "customers_yearmonth"
    },
    "new_table_primary_key": "'CustomerID'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Segment FROM customers_yearmonth WHERE Date = '201309' GROUP BY CustomerID ORDER BY SUM(Consumption) ASC LIMIT 1"
  },
  {
    "train_idx": 1497,
    "db_id": "debit_card_specializing",
    "question": "Which SME customer consumed the least in June 2012?",
    "query": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201206' AND T1.Segment = 'SME' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
    "relevant_table": {
      "customers": {
        "ddl": "create table customers( CustomerID integer primary key, Segment text, Currency text)"
      },
      "yearmonth": {
        "ddl": "create table yearmonth( foreign key(CustomerID) references customers(CustomerID) integer, Date text, Consumption real)"
      }
    },
    "new_relevant_table": {
      "customers_yearmonth": {
        "columns": [
          "CustomerID",
          "Segment",
          "Currency",
          "Date",
          "Consumption"
        ],
        "ddl": "create table customers_yearmonth( CustomerID integer, Segment text, Currency text, Date text, Consumption real)"
      }
    },
    "old_new_table_mapping": {
      "yearmonth": "customers_yearmonth",
      "customers": "customers_yearmonth"
    },
    "new_table_primary_key": "'CustomerID'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CustomerID FROM customers_yearmonth WHERE Date = '201206' AND Segment = 'SME' GROUP BY CustomerID ORDER BY SUM(Consumption) ASC LIMIT 1"
  },
  {
    "train_idx": 1499,
    "db_id": "debit_card_specializing",
    "question": "What is the biggest monthly consumption of the customers who use euro as their currency?",
    "query": "SELECT SUM(T2.Consumption) / 12 AS MonthlyConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY T1.CustomerID ORDER BY MonthlyConsumption DESC LIMIT 1",
    "relevant_table": {
      "customers": {
        "ddl": "create table customers( CustomerID integer primary key, Segment text, Currency text)"
      },
      "yearmonth": {
        "ddl": "create table yearmonth( foreign key(CustomerID) references customers(CustomerID) integer, Date text, Consumption real)"
      }
    },
    "new_relevant_table": {
      "customers_yearmonth": {
        "columns": [
          "CustomerID",
          "Segment",
          "Currency",
          "Date",
          "Consumption"
        ],
        "ddl": "create table customers_yearmonth( CustomerID integer, Segment text, Currency text, Date text, Consumption real)"
      }
    },
    "old_new_table_mapping": {
      "yearmonth": "customers_yearmonth",
      "customers": "customers_yearmonth"
    },
    "new_table_primary_key": "'CustomerID'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT SUM(Consumption) / 12 AS MonthlyConsumption FROM customers_yearmonth WHERE Currency = 'EUR' GROUP BY CustomerID ORDER BY MonthlyConsumption DESC LIMIT 1"
  },
  {
    "train_idx": 1500,
    "db_id": "debit_card_specializing",
    "question": "Please list the product description of the products consumed in September, 2013.",
    "query": "SELECT T3.Description FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Date = '201309'",
    "relevant_table": {
      "transactions_1k": {
        "ddl": "create table transactions_1k( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real)"
      },
      "yearmonth": {
        "ddl": "create table yearmonth( foreign key(CustomerID) references customers(CustomerID) integer, Date text, Consumption real)"
      },
      "products": {
        "ddl": "create table products( ProductID integer primary key, Description text)"
      }
    },
    "new_relevant_table": {
      "merged_transactions_products": {
        "columns": [
          "TransactionID",
          "Date",
          "Time",
          "CustomerID",
          "CardID",
          "GasStationID",
          "ProductID",
          "Amount",
          "Price",
          "Description"
        ],
        "ddl": "create table merged_transactions_products( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real, Description text)"
      },
      "yearmonth": {
        "ddl": "create table yearmonth( foreign key(CustomerID) references customers(CustomerID) integer, Date text, Consumption real)"
      }
    },
    "old_new_table_mapping": {
      "transactions_1k": "merged_transactions_products",
      "products": "merged_transactions_products"
    },
    "new_table_primary_key": "TransactionID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Description FROM merged_transactions_products WHERE CustomerID IN (SELECT CustomerID FROM yearmonth WHERE Date = '201309')"
  },
  {
    "train_idx": 1501,
    "db_id": "debit_card_specializing",
    "question": "Please list the countries of the gas stations with transactions taken place in June, 2013.",
    "query": "SELECT DISTINCT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Date = '201306'",
    "relevant_table": {
      "transactions_1k": {
        "ddl": "create table transactions_1k( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real)"
      },
      "gasstations": {
        "ddl": "create table gasstations( GasStationID integer primary key, ChainID integer, Country text, Segment text)"
      },
      "yearmonth": {
        "ddl": "create table yearmonth( foreign key(CustomerID) references customers(CustomerID) integer, Date text, Consumption real)"
      }
    },
    "new_relevant_table": {
      "MergedTable": {
        "columns": [
          "GasStationID",
          "ChainID",
          "Country",
          "Segment",
          "CustomerID",
          "Date",
          "Consumption"
        ],
        "ddl": "create table MergedTable( GasStationID integer primary key, ChainID integer, Country text, Segment text, foreign key(CustomerID) references customers(CustomerID) integer, Date text, Consumption real)"
      },
      "transactions_1k": {
        "ddl": "create table transactions_1k( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real)"
      }
    },
    "old_new_table_mapping": {
      "yearmonth": "MergedTable",
      "gasstations": "MergedTable"
    },
    "new_table_primary_key": "GasStationID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT Country FROM MergedTable WHERE Date = '201306'"
  },
  {
    "train_idx": 1502,
    "db_id": "debit_card_specializing",
    "question": "Please list the chains of the gas stations with transactions in euro.",
    "query": "SELECT DISTINCT T3.ChainID FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN gasstations AS T3 ON T1.GasStationID = T3.GasStationID WHERE T2.Currency = 'EUR'",
    "relevant_table": {
      "transactions_1k": {
        "ddl": "create table transactions_1k( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real)"
      },
      "customers": {
        "ddl": "create table customers( CustomerID integer primary key, Segment text, Currency text)"
      },
      "gasstations": {
        "ddl": "create table gasstations( GasStationID integer primary key, ChainID integer, Country text, Segment text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "TransactionID",
          "Date",
          "Time",
          "CustomerID_transactions",
          "CardID",
          "GasStationID",
          "ProductID",
          "Amount",
          "Price",
          "CustomerID_customers",
          "Segment",
          "Currency"
        ],
        "ddl": "create table merged_table( TransactionID integer primary key, Date date, Time text, CustomerID_transactions integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real, CustomerID_customers integer, Segment text, Currency text)"
      },
      "gasstations": {
        "ddl": "create table gasstations( GasStationID integer primary key, ChainID integer, Country text, Segment text)"
      }
    },
    "old_new_table_mapping": {
      "customers": "merged_table",
      "transactions_1k": "merged_table"
    },
    "new_table_primary_key": "TransactionID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "CustomerID_transactions": {
        "old_table": "transactions_1k",
        "old_column": "CustomerID"
      },
      "CustomerID_customers": {
        "old_table": "customers",
        "old_column": "CustomerID"
      }
    },
    "new_gold_sql": "SELECT DISTINCT ChainID FROM merged_table WHERE Currency = 'EUR'"
  },
  {
    "train_idx": 1503,
    "db_id": "debit_card_specializing",
    "question": "Please list the product description of the products bought in transactions in euro.",
    "query": "SELECT DISTINCT T1.ProductID, T3.Description FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Currency = 'EUR'",
    "relevant_table": {
      "transactions_1k": {
        "ddl": "create table transactions_1k( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real)"
      },
      "customers": {
        "ddl": "create table customers( CustomerID integer primary key, Segment text, Currency text)"
      },
      "products": {
        "ddl": "create table products( ProductID integer primary key, Description text)"
      }
    },
    "new_relevant_table": {
      "transactions_customers": {
        "columns": [
          "TransactionID",
          "Date",
          "Time",
          "CustomerID",
          "CardID",
          "GasStationID",
          "ProductID",
          "Amount",
          "Price",
          "Segment",
          "Currency"
        ],
        "ddl": "create table transactions_customers( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real, Segment text, Currency text)"
      },
      "products": {
        "ddl": "create table products( ProductID integer primary key, Description text)"
      }
    },
    "old_new_table_mapping": {
      "customers": "transactions_customers",
      "transactions_1k": "transactions_customers"
    },
    "new_table_primary_key": "TransactionID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT ProductID, Description FROM transactions_customers WHERE Currency = 'EUR'"
  },
  {
    "train_idx": 1505,
    "db_id": "debit_card_specializing",
    "question": "Among the customers who paid in euro, how many of them have a monthly consumption of over 1000?",
    "query": "SELECT COUNT(*) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' AND T1.Consumption > 1000.00",
    "relevant_table": {
      "yearmonth": {
        "ddl": "create table yearmonth( foreign key(CustomerID) references customers(CustomerID) integer, Date text, Consumption real)"
      },
      "customers": {
        "ddl": "create table customers( CustomerID integer primary key, Segment text, Currency text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "CustomerID",
          "Segment",
          "Currency",
          "Date",
          "Consumption"
        ],
        "ddl": "create table merged_table( CustomerID integer, Segment text, Currency text, Date text, Consumption real)"
      }
    },
    "old_new_table_mapping": {
      "customers": "merged_table",
      "yearmonth": "merged_table"
    },
    "new_table_primary_key": "'CustomerID'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(*) FROM merged_table WHERE Currency = 'EUR' AND Consumption > 100000"
  },
  {
    "train_idx": 1506,
    "db_id": "debit_card_specializing",
    "question": "Please list the product descriptions of the transactions taken place in the gas stations in the Czech Republic.",
    "query": "SELECT DISTINCT T3.Description FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Country = 'CZE'",
    "relevant_table": {
      "transactions_1k": {
        "ddl": "create table transactions_1k( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real)"
      },
      "gasstations": {
        "ddl": "create table gasstations( GasStationID integer primary key, ChainID integer, Country text, Segment text)"
      },
      "products": {
        "ddl": "create table products( ProductID integer primary key, Description text)"
      }
    },
    "new_relevant_table": {
      "merged_transactions_gasstations": {
        "columns": [
          "TransactionID",
          "Date",
          "Time",
          "CustomerID",
          "CardID",
          "GasStationID",
          "ProductID",
          "Amount",
          "Price",
          "ChainID",
          "Country",
          "Segment"
        ],
        "ddl": "create table merged_transactions_gasstations( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real, ChainID integer, Country text, Segment text)"
      },
      "products": {
        "ddl": "create table products( ProductID integer primary key, Description text)"
      }
    },
    "old_new_table_mapping": {
      "transactions_1k": "merged_transactions_gasstations",
      "gasstations": "merged_transactions_gasstations"
    },
    "new_table_primary_key": "TransactionID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT Description FROM merged_transactions_gasstations WHERE Country = 'CZE'"
  },
  {
    "train_idx": 1507,
    "db_id": "debit_card_specializing",
    "question": "Please list the disparate time of the transactions taken place in the gas stations from chain no. 11.",
    "query": "SELECT DISTINCT T1.Time FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11",
    "relevant_table": {
      "transactions_1k": {
        "ddl": "create table transactions_1k( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real)"
      },
      "gasstations": {
        "ddl": "create table gasstations( GasStationID integer primary key, ChainID integer, Country text, Segment text)"
      }
    },
    "new_relevant_table": {
      "merged_transactions_gasstations": {
        "columns": [
          "TransactionID",
          "Date",
          "Time",
          "CustomerID",
          "CardID",
          "GasStationID",
          "ProductID",
          "Amount",
          "Price",
          "ChainID",
          "Country",
          "Segment"
        ],
        "ddl": "create table merged_transactions_gasstations( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real, ChainID integer, Country text, Segment text)"
      }
    },
    "old_new_table_mapping": {
      "transactions_1k": "merged_transactions_gasstations",
      "gasstations": "merged_transactions_gasstations"
    },
    "new_table_primary_key": "TransactionID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT Time FROM merged_transactions_gasstations WHERE ChainID = 11"
  },
  {
    "train_idx": 1508,
    "db_id": "debit_card_specializing",
    "question": "How many transactions taken place in the gas station in the Czech Republic are with a price of over 1000?",
    "query": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Price > 1000",
    "relevant_table": {
      "transactions_1k": {
        "ddl": "create table transactions_1k( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real)"
      },
      "gasstations": {
        "ddl": "create table gasstations( GasStationID integer primary key, ChainID integer, Country text, Segment text)"
      }
    },
    "new_relevant_table": {
      "merged_transactions_gasstations": {
        "columns": [
          "TransactionID",
          "Date",
          "Time",
          "CustomerID",
          "CardID",
          "Merged_GasStationID",
          "ProductID",
          "Amount",
          "Price",
          "ChainID",
          "Country",
          "Segment"
        ],
        "ddl": "create table merged_transactions_gasstations( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, Merged_GasStationID integer, ProductID integer, Amount integer, Price real, ChainID integer, Country text, Segment text)"
      }
    },
    "old_new_table_mapping": {
      "transactions_1k": "merged_transactions_gasstations",
      "gasstations": "merged_transactions_gasstations"
    },
    "new_table_primary_key": "TransactionID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "Merged_GasStationID": {
        "old_table": "gasstations",
        "old_column": "GasStationID"
      }
    },
    "new_gold_sql": "SELECT COUNT(TransactionID) FROM merged_transactions_gasstations WHERE Country = 'CZE' AND Price > 1000"
  },
  {
    "train_idx": 1509,
    "db_id": "debit_card_specializing",
    "question": "Among the transactions made in the gas stations in the Czech Republic, how many of them are taken place after 2012/1/1?",
    "query": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND STRFTIME('%Y', T1.Date) >= '2012'",
    "relevant_table": {
      "transactions_1k": {
        "ddl": "create table transactions_1k( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real)"
      },
      "gasstations": {
        "ddl": "create table gasstations( GasStationID integer primary key, ChainID integer, Country text, Segment text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "TransactionID",
          "Date",
          "Time",
          "CustomerID",
          "CardID",
          "GasStationID",
          "ProductID",
          "Amount",
          "Price",
          "ChainID",
          "Country",
          "Segment"
        ],
        "ddl": "create table merged_table( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real, ChainID integer, Country text, Segment text)"
      }
    },
    "old_new_table_mapping": {
      "gasstations": "merged_table",
      "transactions_1k": "merged_table"
    },
    "new_table_primary_key": "TransactionID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(TransactionID) FROM merged_table WHERE Country = 'CZE' AND STRFTIME('%Y', Date) >= '2012'"
  },
  {
    "train_idx": 1510,
    "db_id": "debit_card_specializing",
    "question": "What is the average total price of the transactions taken place in gas stations in the Czech Republic?",
    "query": "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE'",
    "relevant_table": {
      "transactions_1k": {
        "ddl": "create table transactions_1k( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real)"
      },
      "gasstations": {
        "ddl": "create table gasstations( GasStationID integer primary key, ChainID integer, Country text, Segment text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "GasStationID",
          "ChainID",
          "Country",
          "Segment",
          "TransactionID",
          "Date",
          "Time",
          "CustomerID",
          "CardID",
          "ProductID",
          "Amount",
          "Price"
        ],
        "ddl": "create table merged_table( GasStationID integer, ChainID integer, Country text, Segment text, TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, ProductID integer, Amount integer, Price real)"
      }
    },
    "old_new_table_mapping": {
      "gasstations": "merged_table",
      "transactions_1k": "merged_table"
    },
    "new_table_primary_key": "TransactionID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT AVG(Price) FROM merged_table WHERE Country = 'CZE'"
  },
  {
    "train_idx": 1511,
    "db_id": "debit_card_specializing",
    "question": "For the customers who paid in the euro, what is their average total price of the transactions?",
    "query": "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Currency = 'EUR'",
    "relevant_table": {
      "transactions_1k": {
        "ddl": "create table transactions_1k( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real)"
      },
      "gasstations": {
        "ddl": "create table gasstations( GasStationID integer primary key, ChainID integer, Country text, Segment text)"
      },
      "customers": {
        "ddl": "create table customers( CustomerID integer primary key, Segment text, Currency text)"
      }
    },
    "new_relevant_table": {
      "merged_transactions_gasstations": {
        "columns": [
          "TransactionID",
          "Date",
          "Time",
          "CustomerID",
          "CardID",
          "GasStationID",
          "ProductID",
          "Amount",
          "Price",
          "ChainID",
          "Country",
          "Segment"
        ],
        "ddl": "create table merged_transactions_gasstations( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real, ChainID integer, Country text, Segment text)"
      },
      "customers": {
        "ddl": "create table customers( CustomerID integer primary key, Segment text, Currency text)"
      }
    },
    "old_new_table_mapping": {
      "transactions_1k": "merged_transactions_gasstations",
      "gasstations": "merged_transactions_gasstations"
    },
    "new_table_primary_key": "TransactionID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT AVG(Price) FROM merged_transactions_gasstations WHERE Currency = 'EUR'"
  },
  {
    "train_idx": 1513,
    "db_id": "debit_card_specializing",
    "question": "Which country's gas station had the first paid cusomer in 2012/8/25?",
    "query": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' ORDER BY T1.Time DESC LIMIT 1",
    "relevant_table": {
      "transactions_1k": {
        "ddl": "create table transactions_1k( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real)"
      },
      "gasstations": {
        "ddl": "create table gasstations( GasStationID integer primary key, ChainID integer, Country text, Segment text)"
      }
    },
    "new_relevant_table": {
      "merged_transactions_gasstations": {
        "columns": [
          "TransactionID",
          "Date",
          "Time",
          "CustomerID",
          "CardID",
          "GasStationID",
          "ProductID",
          "Amount",
          "Price",
          "ChainID",
          "Country",
          "Segment"
        ],
        "ddl": "create table merged_transactions_gasstations( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real, ChainID integer, Country text, Segment text)"
      }
    },
    "old_new_table_mapping": {
      "transactions_1k": "merged_transactions_gasstations",
      "gasstations": "merged_transactions_gasstations"
    },
    "new_table_primary_key": "TransactionID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Country FROM merged_transactions_gasstations WHERE Date = '2012-08-25' ORDER BY Time DESC LIMIT 1"
  },
  {
    "train_idx": 1514,
    "db_id": "debit_card_specializing",
    "question": "What kind of currency did the customer paid at 16:25:00 in 2012/8/24?",
    "query": "SELECT DISTINCT T3.Currency FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Time = '16:25:00'",
    "relevant_table": {
      "transactions_1k": {
        "ddl": "create table transactions_1k( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real)"
      },
      "gasstations": {
        "ddl": "create table gasstations( GasStationID integer primary key, ChainID integer, Country text, Segment text)"
      },
      "customers": {
        "ddl": "create table customers( CustomerID integer primary key, Segment text, Currency text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "GasStationID",
          "ChainID",
          "Country",
          "Segment",
          "TransactionID",
          "Date",
          "Time",
          "CustomerID",
          "CardID",
          "ProductID",
          "Amount",
          "Price"
        ],
        "ddl": "create table merged_table( GasStationID integer, ChainID integer, Country text, Segment text, TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, ProductID integer, Amount integer, Price real)"
      },
      "customers": {
        "ddl": "create table customers( CustomerID integer primary key, Segment text, Currency text)"
      }
    },
    "old_new_table_mapping": {
      "gasstations": "merged_table",
      "transactions_1k": "merged_table"
    },
    "new_table_primary_key": "TransactionID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT DISTINCT Currency FROM merged_table WHERE Date = '2012-08-24' AND Time = '16:25:00'"
  },
  {
    "train_idx": 1515,
    "db_id": "debit_card_specializing",
    "question": "What segment did the customer have at 2012/8/23 21:20:00?",
    "query": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.date = '2012-08-23' AND T1.time = '21:20:00'",
    "relevant_table": {
      "transactions_1k": {
        "ddl": "create table transactions_1k( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real)"
      },
      "customers": {
        "ddl": "create table customers( CustomerID integer primary key, Segment text, Currency text)"
      }
    },
    "new_relevant_table": {
      "merged_transactions_customers": {
        "columns": [
          "TransactionID",
          "Date",
          "Time",
          "CustomerID",
          "CardID",
          "GasStationID",
          "ProductID",
          "Amount",
          "Price",
          "Segment",
          "Currency"
        ],
        "ddl": "create table merged_transactions_customers( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real, Segment text, Currency text)"
      }
    },
    "old_new_table_mapping": {
      "transactions_1k": "merged_transactions_customers",
      "customers": "merged_transactions_customers"
    },
    "new_table_primary_key": "TransactionID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Segment FROM merged_transactions_customers WHERE date = '2012-08-23' AND time = '21:20:00'"
  },
  {
    "train_idx": 1516,
    "db_id": "debit_card_specializing",
    "question": "How many transactions were paid in CZK in the morning of 2012/8/26?",
    "query": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-26' AND T1.Time < '13:00:00' AND T2.Currency = 'CZK'",
    "relevant_table": {
      "transactions_1k": {
        "ddl": "create table transactions_1k( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real)"
      },
      "customers": {
        "ddl": "create table customers( CustomerID integer primary key, Segment text, Currency text)"
      }
    },
    "new_relevant_table": {
      "merged_transactions_customers": {
        "columns": [
          "TransactionID",
          "Date",
          "Time",
          "CustomerID",
          "CardID",
          "GasStationID",
          "ProductID",
          "Amount",
          "Price",
          "Segment",
          "Currency"
        ],
        "ddl": "create table merged_transactions_customers( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real, Segment text, Currency text)"
      }
    },
    "old_new_table_mapping": {
      "customers": "merged_transactions_customers",
      "transactions_1k": "merged_transactions_customers"
    },
    "new_table_primary_key": "TransactionID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(TransactionID) FROM merged_transactions_customers WHERE Date = '2012-08-26' AND Time < '13:00:00' AND Currency = 'CZK'"
  },
  {
    "train_idx": 1517,
    "db_id": "debit_card_specializing",
    "question": "For the earliest customer, what segment did he/she have?",
    "query": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID ORDER BY Date ASC LIMIT 1",
    "relevant_table": {
      "transactions_1k": {
        "ddl": "create table transactions_1k( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real)"
      },
      "customers": {
        "ddl": "create table customers( CustomerID integer primary key, Segment text, Currency text)"
      }
    },
    "new_relevant_table": {
      "merged_transactions_customers": {
        "columns": [
          "TransactionID",
          "Date",
          "Time",
          "CustomerID",
          "CardID",
          "GasStationID",
          "ProductID",
          "Amount",
          "Price",
          "Segment",
          "Currency"
        ],
        "ddl": "create table merged_transactions_customers( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real, Segment text, Currency text)"
      }
    },
    "old_new_table_mapping": {
      "transactions_1k": "merged_transactions_customers",
      "customers": "merged_transactions_customers"
    },
    "new_table_primary_key": "TransactionID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Segment FROM merged_transactions_customers ORDER BY Date ASC LIMIT 1"
  },
  {
    "train_idx": 1518,
    "db_id": "debit_card_specializing",
    "question": "For the deal happened at 2012/8/24 12:42:00, which country was it?",
    "query": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00'",
    "relevant_table": {
      "transactions_1k": {
        "ddl": "create table transactions_1k( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real)"
      },
      "gasstations": {
        "ddl": "create table gasstations( GasStationID integer primary key, ChainID integer, Country text, Segment text)"
      }
    },
    "new_relevant_table": {
      "merged_transactions_gasstations": {
        "columns": [
          "TransactionID",
          "Date",
          "Time",
          "CustomerID",
          "CardID",
          "GasStationID",
          "ProductID",
          "Amount",
          "Price",
          "ChainID",
          "Country",
          "Segment"
        ],
        "ddl": "create table merged_transactions_gasstations( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real, ChainID integer, Country text, Segment text)"
      }
    },
    "old_new_table_mapping": {
      "transactions_1k": "merged_transactions_gasstations",
      "gasstations": "merged_transactions_gasstations"
    },
    "new_table_primary_key": "TransactionID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Country FROM merged_transactions_gasstations WHERE Date = '2012-08-24' AND Time = '12:42:00'"
  },
  {
    "train_idx": 1519,
    "db_id": "debit_card_specializing",
    "question": "What was the product id of the transaction happened at 2012/8/23 21:20:00?",
    "query": "SELECT T1.ProductID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00'",
    "relevant_table": {
      "transactions_1k": {
        "ddl": "create table transactions_1k( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real)"
      },
      "gasstations": {
        "ddl": "create table gasstations( GasStationID integer primary key, ChainID integer, Country text, Segment text)"
      }
    },
    "new_relevant_table": {
      "merged_transactions_gasstations": {
        "columns": [
          "TransactionID",
          "Date",
          "Time",
          "CustomerID",
          "CardID",
          "GasStationID",
          "ProductID",
          "Amount",
          "Price",
          "ChainID",
          "Country",
          "Segment"
        ],
        "ddl": "create table merged_transactions_gasstations( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real, ChainID integer, Country text, Segment text)"
      }
    },
    "old_new_table_mapping": {
      "transactions_1k": "merged_transactions_gasstations",
      "gasstations": "merged_transactions_gasstations"
    },
    "new_table_primary_key": "TransactionID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT ProductID FROM merged_transactions_gasstations WHERE Date = '2012-08-23' AND Time = '21:20:00'"
  },
  {
    "train_idx": 1520,
    "db_id": "debit_card_specializing",
    "question": "For the customer who paid 124.05 in 2012/8/24, how much did he/she spend during the January of 2012? And what is the date and expenses exactly?",
    "query": "SELECT T1.CustomerID, T2.Date, T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Price = 124.05 AND T2.Date = '201201'",
    "relevant_table": {
      "transactions_1k": {
        "ddl": "create table transactions_1k( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real)"
      },
      "yearmonth": {
        "ddl": "create table yearmonth( foreign key(CustomerID) references customers(CustomerID) integer, Date text, Consumption real)"
      }
    },
    "new_relevant_table": {
      "merged_transactions": {
        "columns": [
          "TransactionID",
          "Date_transactions",
          "Time",
          "CustomerID",
          "CardID",
          "GasStationID",
          "ProductID",
          "Amount",
          "Price",
          "Date_yearmonth",
          "Consumption"
        ],
        "ddl": "create table merged_transactions( TransactionID integer primary key, Date_transactions date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real, Date_yearmonth date, Consumption real)"
      }
    },
    "old_new_table_mapping": {
      "yearmonth": "merged_transactions",
      "transactions_1k": "merged_transactions"
    },
    "new_table_primary_key": "TransactionID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "Date_transactions": {
        "old_table": "transactions_1k",
        "old_column": "Date"
      },
      "Date_yearmonth": {
        "old_table": "yearmonth",
        "old_column": "Date"
      }
    },
    "new_gold_sql": "SELECT CustomerID, Date_yearmonth, Consumption FROM merged_transactions WHERE Date_transactions = '2012-08-24' AND Price = 124.05 AND Date_yearmonth = '201201'"
  },
  {
    "train_idx": 1521,
    "db_id": "debit_card_specializing",
    "question": "For all the transactions happened during 8:00-9:00 in 2012/8/26, how many happened in CZE?",
    "query": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-26' AND T1.Time BETWEEN '08:00:00' AND '09:00:00' AND T2.Country = 'CZE'",
    "relevant_table": {
      "transactions_1k": {
        "ddl": "create table transactions_1k( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real)"
      },
      "gasstations": {
        "ddl": "create table gasstations( GasStationID integer primary key, ChainID integer, Country text, Segment text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "TransactionID",
          "Date",
          "Time",
          "CustomerID",
          "CardID",
          "merged_table.GasStationID",
          "ProductID",
          "Amount",
          "Price",
          "ChainID",
          "Country",
          "Segment"
        ],
        "ddl": "create table merged_table( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, ProductID integer, Amount integer, Price real, ChainID integer, Country text, Segment text)"
      }
    },
    "old_new_table_mapping": {
      "gasstations": "merged_table",
      "transactions_1k": "merged_table"
    },
    "new_table_primary_key": "TransactionID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT COUNT(TransactionID) FROM merged_table WHERE Date = '2012-08-26' AND Time BETWEEN '08:00:00' AND '09:00:00' AND Country = 'CZE'"
  },
  {
    "train_idx": 1522,
    "db_id": "debit_card_specializing",
    "question": "There's one customer spent 214582.17 in the June of 2013, which currency did he/she use?",
    "query": "SELECT T2.Currency FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '201306' AND T1.Consumption = 214582.17",
    "relevant_table": {
      "yearmonth": {
        "ddl": "create table yearmonth( foreign key(CustomerID) references customers(CustomerID) integer, Date text, Consumption real)"
      },
      "customers": {
        "ddl": "create table customers( CustomerID integer primary key, Segment text, Currency text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "CustomerID",
          "Segment",
          "Currency",
          "Date",
          "Consumption"
        ],
        "ddl": "create table merged_table( CustomerID integer, Segment text, Currency text, Date text, Consumption real)"
      }
    },
    "old_new_table_mapping": {
      "customers": "merged_table",
      "yearmonth": "merged_table"
    },
    "new_table_primary_key": "'CustomerID'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Currency FROM merged_table WHERE Date = '201306' AND Consumption = 21458217"
  },
  {
    "train_idx": 1523,
    "db_id": "debit_card_specializing",
    "question": "Which country was the card owner of No.667467 in?",
    "query": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.CardID = '667467'",
    "relevant_table": {
      "transactions_1k": {
        "ddl": "create table transactions_1k( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real)"
      },
      "gasstations": {
        "ddl": "create table gasstations( GasStationID integer primary key, ChainID integer, Country text, Segment text)"
      }
    },
    "new_relevant_table": {
      "merged_transactions_gasstations": {
        "columns": [
          "TransactionID",
          "Date",
          "Time",
          "CustomerID",
          "CardID",
          "GasStationID",
          "ProductID",
          "Amount",
          "Price",
          "ChainID",
          "Country",
          "Segment"
        ],
        "ddl": "create table merged_transactions_gasstations( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real, ChainID integer, Country text, Segment text)"
      }
    },
    "old_new_table_mapping": {
      "transactions_1k": "merged_transactions_gasstations",
      "gasstations": "merged_transactions_gasstations"
    },
    "new_table_primary_key": "TransactionID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Country FROM merged_transactions_gasstations WHERE CardID = '667467'"
  },
  {
    "train_idx": 1524,
    "db_id": "debit_card_specializing",
    "question": "What's the nationality of the customer who spent 548.4 in 2012/8/24?",
    "query": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Price = 548.4",
    "relevant_table": {
      "transactions_1k": {
        "ddl": "create table transactions_1k( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real)"
      },
      "gasstations": {
        "ddl": "create table gasstations( GasStationID integer primary key, ChainID integer, Country text, Segment text)"
      }
    },
    "new_relevant_table": {
      "merged_transactions_gasstations": {
        "columns": [
          "TransactionID",
          "Date",
          "Time",
          "CustomerID",
          "CardID",
          "GasStationID",
          "ProductID",
          "Amount",
          "Price",
          "ChainID",
          "Country",
          "Segment"
        ],
        "ddl": "create table merged_transactions_gasstations( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real, ChainID integer, Country text, Segment text)"
      }
    },
    "old_new_table_mapping": {
      "transactions_1k": "merged_transactions_gasstations",
      "gasstations": "merged_transactions_gasstations"
    },
    "new_table_primary_key": "TransactionID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT Country FROM merged_transactions_gasstations WHERE Date = '2012-08-24' AND Price = 5484"
  },
  {
    "train_idx": 1525,
    "db_id": "debit_card_specializing",
    "question": "What is the percentage of the customers who used EUR in 2012/8/25?",
    "query": "SELECT CAST(SUM(IIF(T2.Currency = 'EUR', 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-25'",
    "relevant_table": {
      "transactions_1k": {
        "ddl": "create table transactions_1k( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real)"
      },
      "customers": {
        "ddl": "create table customers( CustomerID integer primary key, Segment text, Currency text)"
      }
    },
    "new_relevant_table": {
      "merged_transactions_customers": {
        "columns": [
          "TransactionID",
          "Date",
          "Time",
          "CustomerID",
          "CardID",
          "GasStationID",
          "ProductID",
          "Amount",
          "Price",
          "Segment",
          "Currency"
        ],
        "ddl": "create table merged_transactions_customers( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real, Segment text, Currency text)"
      }
    },
    "old_new_table_mapping": {
      "transactions_1k": "merged_transactions_customers",
      "customers": "merged_transactions_customers"
    },
    "new_table_primary_key": "TransactionID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(IIF(merged_transactions_customers.Currency = 'EUR', 1, 0)) AS FLOAT) * 100 / COUNT(merged_transactions_customers.CustomerID) FROM merged_transactions_customers WHERE merged_transactions_customers.Date = '2012-08-25'"
  },
  {
    "train_idx": 1526,
    "db_id": "debit_card_specializing",
    "question": "For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013?",
    "query": "SELECT CAST(SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) - SUM(IIF(SUBSTR(Date, 1, 4) = '2013', Consumption, 0)) AS FLOAT) / SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) FROM yearmonth WHERE CustomerID = ( SELECT T1.CustomerID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' AND T1.Price = 634.8 )",
    "relevant_table": {
      "yearmonth": {
        "ddl": "create table yearmonth( foreign key(CustomerID) references customers(CustomerID) integer, Date text, Consumption real)"
      },
      "transactions_1k": {
        "ddl": "create table transactions_1k( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real)"
      },
      "gasstations": {
        "ddl": "create table gasstations( GasStationID integer primary key, ChainID integer, Country text, Segment text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "CustomerID",
          "Date",
          "Consumption",
          "GasStationID",
          "ChainID",
          "Country",
          "Segment"
        ],
        "ddl": "create table merged_table( foreign key(CustomerID) references customers(CustomerID) integer, Date text, Consumption real, GasStationID integer primary key, ChainID integer, Country text, Segment text)"
      },
      "transactions_1k": {
        "ddl": "create table transactions_1k( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real)"
      }
    },
    "old_new_table_mapping": {
      "yearmonth": "merged_table",
      "gasstations": "merged_table"
    },
    "new_table_primary_key": "GasStationID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT CAST(SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) - SUM(IIF(SUBSTR(Date, 1, 4) = '2013', Consumption, 0)) AS FLOAT) / SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) FROM merged_table WHERE CustomerID = ( SELECT T1.CustomerID FROM transactions_1k AS T1 WHERE T1.Date = '2012-08-25' AND T1.Price = 6348 )"
  },
  {
    "train_idx": 1529,
    "db_id": "debit_card_specializing",
    "question": "What is the amount spent by customer \"38508\" at the gas stations? How much had the customer spent in January 2012?",
    "query": "SELECT SUM(T1.Price) , SUM(IIF(T3.Date = '201201', T1.Price, 0)) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.CustomerID = '38508'",
    "relevant_table": {
      "transactions_1k": {
        "ddl": "create table transactions_1k( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real)"
      },
      "gasstations": {
        "ddl": "create table gasstations( GasStationID integer primary key, ChainID integer, Country text, Segment text)"
      },
      "yearmonth": {
        "ddl": "create table yearmonth( foreign key(CustomerID) references customers(CustomerID) integer, Date text, Consumption real)"
      }
    },
    "new_relevant_table": {
      "merged_transactions": {
        "columns": [
          "TransactionID",
          "Date_transactions",
          "Time",
          "CustomerID",
          "CardID",
          "GasStationID",
          "ProductID",
          "Amount",
          "Price",
          "Date_yearmonth",
          "Consumption"
        ],
        "ddl": "create table merged_transactions( TransactionID integer primary key, Date_transactions date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real, Date_yearmonth date, Consumption real)"
      },
      "gasstations": {
        "ddl": "create table gasstations( GasStationID integer primary key, ChainID integer, Country text, Segment text)"
      }
    },
    "old_new_table_mapping": {
      "yearmonth": "merged_transactions",
      "transactions_1k": "merged_transactions"
    },
    "new_table_primary_key": "TransactionID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "Date_transactions": {
        "old_table": "transactions_1k",
        "old_column": "Date"
      },
      "Date_yearmonth": {
        "old_table": "yearmonth",
        "old_column": "Date"
      }
    },
    "new_gold_sql": "SELECT SUM(Price) , SUM(IIF(T3Date_yearmonth = '201201', Price, 0)) FROM merged_transactions WHERE CustomerID = '38508'"
  },
  {
    "train_idx": 1530,
    "db_id": "debit_card_specializing",
    "question": "Which are the top five best selling products? Please state the full name of them.",
    "query": "SELECT T2.Description FROM transactions_1k AS T1 INNER JOIN products AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.Amount DESC LIMIT 5",
    "relevant_table": {
      "transactions_1k": {
        "ddl": "create table transactions_1k( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real)"
      },
      "products": {
        "ddl": "create table products( ProductID integer primary key, Description text)"
      }
    },
    "new_relevant_table": {
      "transactions_products": {
        "columns": [
          "TransactionID",
          "Date",
          "Time",
          "CustomerID",
          "CardID",
          "GasStationID",
          "ProductID",
          "Amount",
          "Price",
          "Description"
        ],
        "ddl": "create table transactions_products( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real, Description text)"
      }
    },
    "old_new_table_mapping": {
      "transactions_1k": "transactions_products",
      "products": "transactions_products"
    },
    "new_table_primary_key": "TransactionID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT transactions_products.Description FROM transactions_products ORDER BY transactions_products.Amount DESC LIMIT 5"
  },
  {
    "train_idx": 1531,
    "db_id": "debit_card_specializing",
    "question": "Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used?",
    "query": "SELECT T2.CustomerID, SUM(T2.Price / T2.Amount), T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CustomerID = ( SELECT CustomerID FROM yearmonth ORDER BY Consumption DESC LIMIT 1 ) GROUP BY T2.CustomerID, T1.Currency",
    "relevant_table": {
      "customers": {
        "ddl": "create table customers( CustomerID integer primary key, Segment text, Currency text)"
      },
      "transactions_1k": {
        "ddl": "create table transactions_1k( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real)"
      },
      "yearmonth": {
        "ddl": "create table yearmonth( foreign key(CustomerID) references customers(CustomerID) integer, Date text, Consumption real)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "CustomerID",
          "Segment",
          "Currency",
          "TransactionID",
          "Date",
          "Time",
          "CardID",
          "GasStationID",
          "ProductID",
          "Amount",
          "Price"
        ],
        "ddl": "create table merged_table( CustomerID integer, Segment text, Currency text, TransactionID integer, Date date, Time text, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real)"
      },
      "yearmonth": {
        "ddl": "create table yearmonth( foreign key(CustomerID) references merged_table(CustomerID) integer, Date text, Consumption real)"
      }
    },
    "old_new_table_mapping": {
      "customers": "merged_table",
      "transactions_1k": "merged_table"
    },
    "new_table_primary_key": "'CustomerID'",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT T1.CustomerID, SUM(T1.Price / T1.Amount), T1.Currency FROM merged_table AS T1 WHERE T1.CustomerID = ( SELECT CustomerID FROM yearmonth ORDER BY Consumption DESC LIMIT 1 ) GROUP BY T1.CustomerID, T1.Currency"
  },
  {
    "train_idx": 1532,
    "db_id": "debit_card_specializing",
    "question": "Which country had the gas station that sold the most expensive product id No.2 for one unit?",
    "query": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.ProductID = 2 ORDER BY T1.Price DESC LIMIT 1",
    "relevant_table": {
      "transactions_1k": {
        "ddl": "create table transactions_1k( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real)"
      },
      "gasstations": {
        "ddl": "create table gasstations( GasStationID integer primary key, ChainID integer, Country text, Segment text)"
      }
    },
    "new_relevant_table": {
      "merged_table": {
        "columns": [
          "TransactionID",
          "Date",
          "Time",
          "CustomerID",
          "CardID",
          "merged_table.GasStationID",
          "ProductID",
          "Amount",
          "Price",
          "ChainID",
          "Country",
          "Segment"
        ],
        "ddl": "create table merged_table( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, ProductID integer, Amount integer, Price real, ChainID integer, Country text, Segment text)"
      }
    },
    "old_new_table_mapping": {
      "gasstations": "merged_table",
      "transactions_1k": "merged_table"
    },
    "new_table_primary_key": "TransactionID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {},
    "new_gold_sql": "SELECT merged_table.Country FROM merged_table WHERE merged_table.ProductID = 2 ORDER BY merged_table.Price DESC LIMIT 1"
  },
  {
    "train_idx": 1533,
    "db_id": "debit_card_specializing",
    "question": "For all the people who paid more than 29.00 per unit of product id No.5. Give their consumption status in the August of 2012.",
    "query": "SELECT T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Price / T1.Amount > 29.00 AND T1.ProductID = 5 AND T2.Date = '201208'",
    "relevant_table": {
      "transactions_1k": {
        "ddl": "create table transactions_1k( TransactionID integer primary key, Date date, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real)"
      },
      "yearmonth": {
        "ddl": "create table yearmonth( foreign key(CustomerID) references customers(CustomerID) integer, Date text, Consumption real)"
      }
    },
    "new_relevant_table": {
      "merged_transactions_yearmonth": {
        "columns": [
          "TransactionID",
          "Date_transactions",
          "Time",
          "CustomerID",
          "CardID",
          "GasStationID",
          "ProductID",
          "Amount",
          "Price",
          "Date_yearmonth",
          "Consumption"
        ],
        "ddl": "create table merged_transactions_yearmonth( TransactionID integer primary key, Date_transactions text, Time text, CustomerID integer, CardID integer, GasStationID integer, ProductID integer, Amount integer, Price real, Date_yearmonth text, Consumption real)"
      }
    },
    "old_new_table_mapping": {
      "transactions_1k": "merged_transactions_yearmonth",
      "yearmonth": "merged_transactions_yearmonth"
    },
    "new_table_primary_key": "TransactionID",
    "deduplicate_new_column_to_old_table_old_table_mapping": {
      "Date_transactions": {
        "old_table": "transactions_1k",
        "old_column": "Date"
      },
      "Date_yearmonth": {
        "old_table": "yearmonth",
        "old_column": "Date"
      }
    },
    "new_gold_sql": "SELECT merged_transactions_yearmonth.Consumption FROM merged_transactions_yearmonth WHERE merged_transactions_yearmonth.Price / merged_transactions_yearmonth.Amount > 2900 AND merged_transactions_yearmonth.ProductID = 5 AND merged_transactions_yearmonth.Date_yearmonth = '201208'"
  }
]